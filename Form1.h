#pragma once
//#include "libxl.h"
//using namespace libxl;
//#include DeathKeep.cpp;
#include "stdafx.h"
#include <io.h>
#include <iostream>
#include <iso646.h>
#include <cstring>
#include <cstdio>
#include <stdio.h>
#include <string>
#include <conio.h>
#include<fstream>
#include<windows.h>
#include<stdlib.h>
#include <vcclr.h>
#include "resource.h"
#include <bitset>
//#include <filesystem>
//#include <regex.h>
//#include <atlstr.h>
#include <msclr\marshal_cppstd.h>
//#include <msclr/marshal.h>
#include <direct.h>
#include <iomanip>
//#include <atlstr.h>
#include <sstream>

#include <vector>
#include <list>
#include <math.h>
#include <algorithm>
//#include "Vars.h"




namespace patch
{
    template < typename T > std::string to_string( const T& n )
    {
        std::ostringstream stm ;
        stm << n ;
        return stm.str() ;
    }
}


inline bool isInteger(const std::string & s)
{
   if(s.empty() || ((!isdigit(s[0])) && (s[0] != '-') && (s[0] != '+'))) return false;

   char * p;
   strtol(s.c_str(), &p, 10);

   return (*p == 0);
}

using namespace std;
//int searchDuplicate(unsigned long long);
//void BuildFloor(long long val, unsigned int cube);
//void BuildWalls(unsigned int cube);
//void BuildCeiling(unsigned int cube);
//void PlaceObject(long long val);

int ValueSelector(unsigned long long a, unsigned int pos);
void readValuesFromVoxel(unsigned int floorN, _ULonglong voxeldata, unsigned char itemType, unsigned char itemSpecs, unsigned char brightness, unsigned char stairsAndRamps, unsigned short int cubeNinDataFile, int x, int y);
void ExtractCCBsANIMs(unsigned int pos, unsigned int pos2AnimBack, unsigned int pos2AnimObj, unsigned int pos2AnimEnemies, unsigned int pos2Objects, unsigned int AnimBack, unsigned int AnimEnemies, unsigned int AnimObj, unsigned int Objects);
void ExtractCCBorANIMonly(unsigned int, unsigned char type, char path[40], char datapath[200]);
void BuildRamps(void);
void BuildStairs(void);
void BuildSteps(void);
void BuildObjects(void);
void BuildTorches(void);
void BuildLogicLines(void);
void BuildLogicLinesNew(void);
unsigned int levelEntryX, levelEntryY, levelEntryZ, levelExitX, levelExitY, levelExitZ, levelEntryRotation = 0;
//unsigned short int cubeNinDataFile = 0;
unsigned int numofEntries=0;
char entryX, entryY, entryZ, entryRotation, exitX, exitY, exitZ;
string FileNameString;
unsigned char backgroundsArray[0x100];
unsigned char torchesArray[0x100];
unsigned int torchesblock2[0x100];
unsigned int block2Size;

namespace DeathKeepLvlExtractor {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Сводка для Form1
	///
	/// Внимание! При изменении имени этого класса необходимо также изменить
	///          свойство имени файла ресурсов ("Resource File Name") для средства компиляции управляемого ресурса,
	///          связанного со всеми файлами с расширением .resx, от которых зависит данный класс. В противном случае,
	///          конструкторы не смогут правильно работать с локализованными
	///          ресурсами, сопоставленными данной форме.
	/// </summary>
	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
			//
			//TODO: добавьте код конструктора
			//
		}

	protected:
		/// <summary>
		/// Освободить все используемые ресурсы.
		/// </summary>
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}

	private: System::Windows::Forms::Button^  Load_level;
	protected: 

	private: System::Windows::Forms::OpenFileDialog^  openFileDialog1;
	private: System::Windows::Forms::Label^  label9;
	private: System::Windows::Forms::Label^  label11;
	private: System::Windows::Forms::Label^  label12;
	private: System::Windows::Forms::TabControl^  tabControl1;
	private: System::Windows::Forms::TabPage^  tabPage1;
	private: System::Windows::Forms::DataGridView^  dataGridView1;
	private: System::Windows::Forms::TabPage^  tabPage2;
private: System::Windows::Forms::Label^  label13;
private: System::Windows::Forms::Label^  label15;
private: System::Windows::Forms::Label^  label16;
private: System::Windows::Forms::Label^  label14;
private: System::Windows::Forms::TabPage^  tabPage4;
private: System::Windows::Forms::TabPage^  tabPage5;
private: System::Windows::Forms::TabPage^  tabPage6;
private: System::Windows::Forms::TabPage^  tabPage7;
private: System::Windows::Forms::TabPage^  tabPage8;
private: System::Windows::Forms::Label^  label1;
private: System::Windows::Forms::Label^  label3;
private: System::Windows::Forms::Label^  label4;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column1;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column2;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column3;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column4;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column5;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column6;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column7;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column8;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column9;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column10;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column11;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column12;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column13;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column14;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column15;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column16;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column17;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column18;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column19;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column20;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column21;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column22;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column23;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column24;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column25;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column26;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column27;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column28;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column29;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column30;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column31;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column32;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column33;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column34;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column35;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column36;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column37;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column38;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column39;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column40;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column41;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column42;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column43;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column44;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column45;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column46;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column47;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column48;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column49;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column50;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column51;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column52;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column53;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column54;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column55;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column56;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column57;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column58;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column59;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column60;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column61;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column62;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column63;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column64;
private: System::Windows::Forms::DataGridView^  dataGridView2;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn1;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn2;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn3;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn4;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn5;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn6;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn7;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn8;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn9;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn10;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn11;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn12;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn13;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn14;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn15;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn16;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn17;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn18;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn19;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn20;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn21;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn22;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn23;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn24;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn25;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn26;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn27;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn28;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn29;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn30;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn31;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn32;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn33;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn34;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn35;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn36;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn37;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn38;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn39;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn40;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn41;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn42;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn43;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn44;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn45;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn46;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn47;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn48;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn49;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn50;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn51;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn52;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn53;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn54;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn55;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn56;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn57;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn58;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn59;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn60;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn61;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn62;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn63;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn64;
private: System::Windows::Forms::DataGridView^  dataGridView4;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn129;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn130;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn131;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn132;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn133;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn134;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn135;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn136;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn137;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn138;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn139;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn140;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn141;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn142;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn143;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn144;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn145;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn146;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn147;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn148;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn149;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn150;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn151;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn152;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn153;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn154;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn155;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn156;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn157;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn158;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn159;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn160;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn161;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn162;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn163;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn164;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn165;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn166;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn167;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn168;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn169;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn170;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn171;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn172;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn173;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn174;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn175;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn176;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn177;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn178;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn179;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn180;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn181;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn182;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn183;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn184;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn185;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn186;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn187;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn188;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn189;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn190;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn191;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn192;
private: System::Windows::Forms::DataGridView^  dataGridView5;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn193;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn194;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn195;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn196;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn197;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn198;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn199;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn200;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn201;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn202;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn203;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn204;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn205;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn206;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn207;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn208;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn209;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn210;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn211;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn212;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn213;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn214;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn215;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn216;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn217;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn218;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn219;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn220;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn221;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn222;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn223;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn224;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn225;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn226;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn227;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn228;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn229;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn230;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn231;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn232;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn233;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn234;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn235;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn236;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn237;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn238;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn239;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn240;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn241;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn242;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn243;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn244;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn245;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn246;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn247;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn248;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn249;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn250;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn251;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn252;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn253;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn254;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn255;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn256;
private: System::Windows::Forms::DataGridView^  dataGridView6;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn257;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn258;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn259;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn260;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn261;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn262;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn263;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn264;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn265;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn266;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn267;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn268;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn269;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn270;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn271;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn272;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn273;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn274;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn275;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn276;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn277;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn278;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn279;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn280;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn281;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn282;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn283;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn284;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn285;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn286;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn287;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn288;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn289;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn290;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn291;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn292;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn293;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn294;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn295;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn296;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn297;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn298;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn299;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn300;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn301;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn302;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn303;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn304;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn305;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn306;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn307;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn308;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn309;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn310;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn311;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn312;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn313;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn314;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn315;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn316;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn317;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn318;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn319;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn320;
private: System::Windows::Forms::DataGridView^  dataGridView7;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn321;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn322;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn323;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn324;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn325;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn326;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn327;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn328;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn329;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn330;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn331;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn332;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn333;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn334;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn335;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn336;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn337;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn338;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn339;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn340;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn341;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn342;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn343;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn344;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn345;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn346;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn347;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn348;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn349;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn350;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn351;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn352;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn353;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn354;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn355;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn356;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn357;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn358;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn359;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn360;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn361;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn362;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn363;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn364;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn365;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn366;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn367;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn368;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn369;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn370;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn371;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn372;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn373;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn374;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn375;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn376;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn377;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn378;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn379;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn380;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn381;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn382;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn383;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn384;
private: System::Windows::Forms::DataGridView^  dataGridView8;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn385;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn386;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn387;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn388;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn389;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn390;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn391;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn392;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn393;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn394;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn395;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn396;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn397;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn398;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn399;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn400;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn401;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn402;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn403;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn404;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn405;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn406;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn407;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn408;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn409;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn410;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn411;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn412;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn413;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn414;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn415;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn416;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn417;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn418;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn419;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn420;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn421;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn422;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn423;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn424;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn425;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn426;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn427;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn428;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn429;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn430;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn431;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn432;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn433;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn434;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn435;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn436;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn437;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn438;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn439;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn440;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn441;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn442;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn443;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn444;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn445;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn446;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn447;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn448;
private: System::Windows::Forms::Label^  label5;
private: System::Windows::Forms::Button^  button2;
private: System::Windows::Forms::TextBox^  textBox1;
private: System::Windows::Forms::TextBox^  textBox2;
private: System::Windows::Forms::Label^  label6;
private: System::Windows::Forms::SaveFileDialog^  saveFileDialog1;
private: System::Windows::Forms::TextBox^  textBox4;
private: System::Windows::Forms::TextBox^  textBox3;
private: System::Windows::Forms::Label^  label8;
private: System::Windows::Forms::Label^  label7;
private: System::Windows::Forms::Label^  label10;
private: System::Windows::Forms::TextBox^  textBox5;
private: System::Windows::Forms::TextBox^  textBox7;
private: System::Windows::Forms::TextBox^  textBox6;
private: System::Windows::Forms::Label^  label18;
private: System::Windows::Forms::Label^  label17;
private: System::Windows::Forms::TextBox^  textBox10;
private: System::Windows::Forms::TextBox^  textBox9;
private: System::Windows::Forms::TextBox^  textBox8;
private: System::Windows::Forms::Label^  label23;
private: System::Windows::Forms::Label^  label24;
private: System::Windows::Forms::Label^  label25;
private: System::Windows::Forms::Label^  label26;
private: System::Windows::Forms::Label^  label27;
private: System::Windows::Forms::Label^  label28;
private: System::Windows::Forms::Label^  label29;
private: System::Windows::Forms::TabPage^  tabPage3;
private: System::Windows::Forms::Label^  label19;
private: System::Windows::Forms::Label^  label20;
private: System::Windows::Forms::Label^  label30;
private: System::Windows::Forms::Label^  label31;
private: System::Windows::Forms::Label^  label32;
private: System::Windows::Forms::Label^  label33;
private: System::Windows::Forms::Label^  label34;
private: System::Windows::Forms::Label^  label35;
private: System::Windows::Forms::Label^  label36;
private: System::Windows::Forms::TextBox^  textBox11;
private: System::Windows::Forms::TextBox^  textBox12;
private: System::Windows::Forms::TextBox^  textBox13;
private: System::Windows::Forms::TextBox^  textBox14;
private: System::Windows::Forms::TextBox^  textBox15;
private: System::Windows::Forms::DataGridView^  dataGridView3;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn65;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn66;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn67;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn68;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn69;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn70;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn71;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn72;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn73;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn74;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn75;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn76;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn77;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn78;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn79;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn80;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn81;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn82;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn83;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn84;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn85;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn86;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn87;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn88;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn89;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn90;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn91;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn92;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn93;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn94;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn95;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn96;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn97;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn98;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn99;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn100;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn101;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn102;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn103;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn104;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn105;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn106;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn107;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn108;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn109;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn110;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn111;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn112;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn113;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn114;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn115;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn116;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn117;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn118;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn119;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn120;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn121;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn122;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn123;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn124;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn125;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn126;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn127;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn128;
private: System::Windows::Forms::Label^  label21;
private: System::Windows::Forms::Label^  label22;
private: System::Windows::Forms::Label^  label37;
private: System::Windows::Forms::Label^  label38;
private: System::Windows::Forms::Label^  label39;
private: System::Windows::Forms::Label^  label40;
private: System::Windows::Forms::Label^  label41;
private: System::Windows::Forms::Label^  label42;
private: System::Windows::Forms::Label^  label43;
private: System::Windows::Forms::TextBox^  textBox16;
private: System::Windows::Forms::TextBox^  textBox17;
private: System::Windows::Forms::TextBox^  textBox18;
private: System::Windows::Forms::TextBox^  textBox19;
private: System::Windows::Forms::TextBox^  textBox20;
private: System::Windows::Forms::Label^  label44;
private: System::Windows::Forms::Label^  label45;
private: System::Windows::Forms::Label^  label46;
private: System::Windows::Forms::Label^  label47;
private: System::Windows::Forms::Label^  label48;
private: System::Windows::Forms::Label^  label49;
private: System::Windows::Forms::Label^  label50;
private: System::Windows::Forms::Label^  label51;
private: System::Windows::Forms::Label^  label52;
private: System::Windows::Forms::TextBox^  textBox21;
private: System::Windows::Forms::TextBox^  textBox22;
private: System::Windows::Forms::TextBox^  textBox23;
private: System::Windows::Forms::TextBox^  textBox24;
private: System::Windows::Forms::TextBox^  textBox25;
private: System::Windows::Forms::Label^  label53;
private: System::Windows::Forms::Label^  label54;
private: System::Windows::Forms::Label^  label55;
private: System::Windows::Forms::Label^  label56;
private: System::Windows::Forms::Label^  label57;
private: System::Windows::Forms::Label^  label58;
private: System::Windows::Forms::Label^  label59;
private: System::Windows::Forms::Label^  label60;
private: System::Windows::Forms::Label^  label61;
private: System::Windows::Forms::TextBox^  textBox26;
private: System::Windows::Forms::TextBox^  textBox27;
private: System::Windows::Forms::TextBox^  textBox28;
private: System::Windows::Forms::TextBox^  textBox29;
private: System::Windows::Forms::TextBox^  textBox30;
private: System::Windows::Forms::Label^  label62;
private: System::Windows::Forms::Label^  label63;
private: System::Windows::Forms::Label^  label64;
private: System::Windows::Forms::Label^  label65;
private: System::Windows::Forms::Label^  label66;
private: System::Windows::Forms::Label^  label67;
private: System::Windows::Forms::Label^  label68;
private: System::Windows::Forms::Label^  label69;
private: System::Windows::Forms::Label^  label70;
private: System::Windows::Forms::TextBox^  textBox31;
private: System::Windows::Forms::TextBox^  textBox32;
private: System::Windows::Forms::TextBox^  textBox33;
private: System::Windows::Forms::TextBox^  textBox34;
private: System::Windows::Forms::TextBox^  textBox35;
private: System::Windows::Forms::Label^  label71;
private: System::Windows::Forms::Label^  label72;
private: System::Windows::Forms::Label^  label73;
private: System::Windows::Forms::Label^  label74;
private: System::Windows::Forms::Label^  label75;
private: System::Windows::Forms::Label^  label76;
private: System::Windows::Forms::Label^  label77;
private: System::Windows::Forms::Label^  label78;
private: System::Windows::Forms::Label^  label79;
private: System::Windows::Forms::TextBox^  textBox36;
private: System::Windows::Forms::TextBox^  textBox37;
private: System::Windows::Forms::TextBox^  textBox38;
private: System::Windows::Forms::TextBox^  textBox39;
private: System::Windows::Forms::TextBox^  textBox40;
private: System::Windows::Forms::TextBox^  textBox41;
private: System::Windows::Forms::Label^  label2;
private: System::Windows::Forms::DataGridView^  dataGridView9;
private: System::Windows::Forms::Button^  button3;
private: System::Windows::Forms::OpenFileDialog^  openFileDialog2;
private: System::Windows::Forms::Label^  label80;
private: System::Windows::Forms::RichTextBox^  richTextBox1;
private: System::Windows::Forms::Label^  label81;
private: System::Windows::Forms::Label^  label82;
private: System::Windows::Forms::DataGridView^  dataGridView10;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn449;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn450;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn451;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn452;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn453;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn454;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn455;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn456;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn457;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn458;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn459;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn460;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn461;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn462;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn463;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn464;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn465;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn466;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn467;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn468;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn469;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn470;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn471;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn472;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn473;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn474;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn475;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn476;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn477;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn478;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn479;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn480;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn481;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn482;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn483;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn484;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn485;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn486;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn487;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn488;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn489;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn490;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn491;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn492;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn493;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn494;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn495;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn496;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn497;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn498;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn499;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn500;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn501;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn502;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn503;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn504;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn505;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn506;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn507;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn508;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn509;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn510;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn511;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn512;
private: System::Windows::Forms::DataGridView^  dataGridView11;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn513;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn514;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn515;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn516;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn517;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn518;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn519;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn520;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn521;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn522;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn523;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn524;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn525;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn526;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn527;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn528;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn529;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn530;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn531;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn532;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn533;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn534;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn535;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn536;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn537;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn538;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn539;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn540;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn541;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn542;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn543;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn544;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn545;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn546;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn547;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn548;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn549;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn550;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn551;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn552;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn553;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn554;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn555;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn556;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn557;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn558;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn559;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn560;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn561;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn562;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn563;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn564;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn565;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn566;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn567;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn568;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn569;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn570;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn571;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn572;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn573;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn574;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn575;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn576;
private: System::Windows::Forms::DataGridView^  dataGridView12;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn577;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn578;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn579;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn580;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn581;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn582;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn583;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn584;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn585;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn586;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn587;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn588;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn589;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn590;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn591;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn592;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn593;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn594;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn595;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn596;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn597;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn598;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn599;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn600;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn601;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn602;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn603;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn604;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn605;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn606;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn607;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn608;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn609;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn610;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn611;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn612;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn613;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn614;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn615;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn616;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn617;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn618;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn619;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn620;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn621;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn622;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn623;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn624;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn625;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn626;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn627;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn628;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn629;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn630;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn631;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn632;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn633;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn634;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn635;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn636;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn637;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn638;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn639;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn640;
private: System::Windows::Forms::DataGridView^  dataGridView13;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn641;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn642;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn643;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn644;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn645;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn646;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn647;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn648;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn649;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn650;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn651;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn652;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn653;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn654;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn655;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn656;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn657;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn658;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn659;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn660;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn661;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn662;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn663;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn664;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn665;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn666;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn667;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn668;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn669;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn670;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn671;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn672;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn673;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn674;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn675;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn676;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn677;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn678;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn679;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn680;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn681;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn682;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn683;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn684;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn685;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn686;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn687;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn688;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn689;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn690;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn691;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn692;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn693;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn694;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn695;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn696;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn697;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn698;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn699;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn700;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn701;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn702;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn703;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn704;
private: System::Windows::Forms::DataGridView^  dataGridView14;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn705;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn706;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn707;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn708;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn709;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn710;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn711;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn712;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn713;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn714;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn715;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn716;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn717;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn718;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn719;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn720;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn721;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn722;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn723;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn724;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn725;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn726;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn727;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn728;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn729;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn730;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn731;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn732;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn733;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn734;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn735;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn736;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn737;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn738;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn739;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn740;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn741;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn742;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn743;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn744;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn745;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn746;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn747;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn748;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn749;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn750;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn751;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn752;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn753;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn754;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn755;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn756;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn757;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn758;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn759;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn760;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn761;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn762;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn763;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn764;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn765;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn766;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn767;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn768;
private: System::Windows::Forms::DataGridView^  dataGridView15;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn769;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn770;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn771;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn772;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn773;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn774;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn775;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn776;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn777;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn778;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn779;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn780;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn781;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn782;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn783;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn784;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn785;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn786;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn787;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn788;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn789;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn790;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn791;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn792;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn793;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn794;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn795;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn796;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn797;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn798;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn799;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn800;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn801;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn802;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn803;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn804;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn805;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn806;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn807;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn808;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn809;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn810;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn811;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn812;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn813;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn814;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn815;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn816;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn817;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn818;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn819;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn820;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn821;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn822;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn823;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn824;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn825;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn826;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn827;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn828;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn829;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn830;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn831;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn832;
private: System::Windows::Forms::DataGridView^  dataGridView16;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn833;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn834;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn835;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn836;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn837;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn838;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn839;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn840;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn841;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn842;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn843;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn844;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn845;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn846;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn847;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn848;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn849;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn850;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn851;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn852;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn853;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn854;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn855;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn856;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn857;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn858;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn859;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn860;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn861;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn862;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn863;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn864;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn865;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn866;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn867;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn868;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn869;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn870;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn871;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn872;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn873;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn874;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn875;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn876;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn877;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn878;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn879;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn880;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn881;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn882;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn883;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn884;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn885;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn886;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn887;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn888;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn889;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn890;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn891;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn892;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn893;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn894;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn895;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn896;
private: System::Windows::Forms::DataGridView^  dataGridView17;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn897;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn898;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn899;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn900;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn901;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn902;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn903;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn904;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn905;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn906;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn907;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn908;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn909;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn910;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn911;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn912;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn913;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn914;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn915;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn916;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn917;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn918;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn919;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn920;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn921;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn922;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn923;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn924;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn925;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn926;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn927;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn928;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn929;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn930;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn931;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn932;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn933;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn934;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn935;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn936;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn937;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn938;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn939;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn940;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn941;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn942;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn943;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn944;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn945;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn946;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn947;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn948;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn949;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn950;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn951;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn952;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn953;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn954;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn955;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn956;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn957;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn958;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn959;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn960;
private: System::Windows::Forms::Label^  label83;
private: System::Windows::Forms::Label^  label85;
private: System::Windows::Forms::Label^  label84;
private: System::Windows::Forms::Label^  label89;
private: System::Windows::Forms::Label^  label88;
private: System::Windows::Forms::Label^  label87;
private: System::Windows::Forms::Label^  label86;
private: System::Windows::Forms::Label^  label90;
private: System::Windows::Forms::Label^  label91;
private: System::Windows::Forms::Label^  label92;
private: System::Windows::Forms::Label^  label93;
private: System::Windows::Forms::Label^  label94;
private: System::Windows::Forms::Label^  label95;
private: System::Windows::Forms::Label^  label96;
private: System::Windows::Forms::Label^  label97;
private: System::Windows::Forms::Label^  label98;
private: System::Windows::Forms::Label^  label99;
private: System::Windows::Forms::Label^  label100;
private: System::Windows::Forms::Label^  label101;
private: System::Windows::Forms::Label^  label102;
private: System::Windows::Forms::Label^  label103;
private: System::Windows::Forms::Label^  label104;
private: System::Windows::Forms::Label^  label105;
private: System::Windows::Forms::Label^  label106;
private: System::Windows::Forms::Label^  label107;
private: System::Windows::Forms::Label^  label108;
private: System::Windows::Forms::Label^  label109;
private: System::Windows::Forms::Label^  label110;
private: System::Windows::Forms::Label^  label111;
private: System::Windows::Forms::Label^  label112;
private: System::Windows::Forms::Label^  label113;
private: System::Windows::Forms::Label^  label114;
private: System::Windows::Forms::Label^  label115;
private: System::Windows::Forms::Label^  label116;
private: System::Windows::Forms::Label^  label117;
private: System::Windows::Forms::Label^  label118;
private: System::Windows::Forms::Label^  label119;
private: System::Windows::Forms::Label^  label120;
private: System::Windows::Forms::Label^  label121;
private: System::Windows::Forms::Label^  label122;
private: System::Windows::Forms::Label^  label123;
private: System::Windows::Forms::Label^  label124;
private: System::Windows::Forms::Label^  label125;
private: System::Windows::Forms::Label^  label126;
private: System::Windows::Forms::Label^  label127;
private: System::Windows::Forms::Label^  label128;
private: System::Windows::Forms::Label^  label129;
private: System::Windows::Forms::Label^  label130;
private: System::Windows::Forms::Label^  label131;
private: System::Windows::Forms::Label^  label132;
private: System::Windows::Forms::Label^  label133;
private: System::Windows::Forms::Label^  label134;
private: System::Windows::Forms::Label^  label135;
private: System::Windows::Forms::Label^  label136;
private: System::Windows::Forms::Label^  label137;
private: System::Windows::Forms::Label^  label138;
private: System::Windows::Forms::Button^  button4;
private: System::Windows::Forms::Label^  label139;
private: System::Windows::Forms::SaveFileDialog^  saveFileDialog2;
private: System::Windows::Forms::Button^  button5;
private: System::Windows::Forms::Button^  button6;
private: System::Windows::Forms::Label^  label140;
private: System::Windows::Forms::Button^  button7;
private: System::Windows::Forms::SaveFileDialog^  saveFileDialog3;
private: System::Windows::Forms::TextBox^  textBox42;
private: System::Windows::Forms::Label^  label141;
private: System::Windows::Forms::RichTextBox^  richTextBox2;
private: System::Windows::Forms::CheckBox^  checkBox1;
private: System::Windows::Forms::Label^  label142;
private: System::Windows::Forms::Button^  button8;
private: System::Windows::Forms::Label^  label143;
private: System::Windows::Forms::Button^  button9;
private: System::Windows::Forms::Label^  label144;
private: System::Windows::Forms::Button^  button10;
private: System::Windows::Forms::Label^  label145;
private: System::Windows::Forms::Button^  button11;
private: System::Windows::Forms::Label^  label146;
private: System::Windows::Forms::Button^  button12;
private: System::Windows::Forms::Label^  label147;
private: System::Windows::Forms::Button^  button13;
private: System::Windows::Forms::Label^  label148;
private: System::Windows::Forms::Button^  button14;
private: System::Windows::Forms::Label^  label149;
private: System::Windows::Forms::Button^  button15;
private: System::Windows::Forms::Label^  label150;
private: System::Windows::Forms::Button^  button16;
private: System::Windows::Forms::Label^  label151;
private: System::Windows::Forms::Button^  button17;
private: System::Windows::Forms::Label^  label152;
private: System::Windows::Forms::Button^  button18;
private: System::Windows::Forms::Label^  label153;
private: System::Windows::Forms::Button^  button19;
private: System::Windows::Forms::Label^  label154;
private: System::Windows::Forms::Button^  button20;
private: System::Windows::Forms::Label^  label155;
private: System::Windows::Forms::Button^  button21;
private: System::Windows::Forms::Button^  button1;
private: System::Windows::Forms::Label^  label156;
private: System::Windows::Forms::TextBox^  textBox43;
private: System::Windows::Forms::Label^  label157;
private: System::Windows::Forms::RichTextBox^  richTextBox3;
private: System::Windows::Forms::ProgressBar^  progressBar1;
private: System::Windows::Forms::Label^  label158;
private: System::Windows::Forms::Button^  button22;
private: System::Windows::Forms::Timer^  timer1;
private: System::Windows::Forms::Timer^  timer2;
private: System::Windows::Forms::RichTextBox^  richTextBox4;
private: System::Windows::Forms::SaveFileDialog^  saveFileDialog4;
private: System::Windows::Forms::DataGridView^  dataGridView18;
private: System::Windows::Forms::Label^  label159;
private: System::Windows::Forms::Label^  label160;
private: System::Windows::Forms::DataGridView^  dataGridView19;
private: System::Windows::Forms::Label^  label161;
private: System::Windows::Forms::Button^  button23;
private: System::Windows::Forms::ComboBox^  comboBox1;
private: System::Windows::Forms::SaveFileDialog^  saveFileDialog5;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column67;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column65;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column66;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column69;
private: System::Windows::Forms::Label^  label162;
private: System::Windows::Forms::TextBox^  textBox44;
private: System::Windows::Forms::Button^  button24;
private: System::Windows::Forms::Button^  button25;
private: System::Windows::Forms::Label^  label163;
private: System::Windows::Forms::TextBox^  textBox45;
private: System::Windows::Forms::Button^  button26;
private: System::Windows::Forms::Label^  label164;
private: System::Windows::Forms::TextBox^  textBox46;
private: System::Windows::Forms::Button^  button27;
private: System::Windows::Forms::Label^  label165;
private: System::Windows::Forms::TextBox^  textBox47;
private: System::Windows::Forms::Button^  button28;
private: System::Windows::Forms::Label^  label166;
private: System::Windows::Forms::TextBox^  textBox48;
private: System::Windows::Forms::Button^  button29;
private: System::Windows::Forms::Label^  label167;
private: System::Windows::Forms::TextBox^  textBox49;
private: System::Windows::Forms::Button^  button30;
private: System::Windows::Forms::Label^  label168;
private: System::Windows::Forms::TextBox^  textBox50;
private: System::Windows::Forms::Button^  button31;
private: System::Windows::Forms::Label^  label169;
private: System::Windows::Forms::TextBox^  textBox51;
private: System::Windows::Forms::Button^  button32;
private: System::Windows::Forms::Timer^  timer3;
private: System::Windows::Forms::Label^  label170;
private: System::Windows::Forms::TextBox^  textBox52;
private: System::Windows::Forms::Label^  label171;
private: System::Windows::Forms::Label^  label172;
private: System::Windows::Forms::TextBox^  textBox53;
private: System::Windows::Forms::Button^  button33;
private: System::Windows::Forms::ProgressBar^  progressBar2;
private: System::Windows::Forms::CheckBox^  checkBox2;
private: System::Windows::Forms::CheckBox^  checkBox3;
private: System::Windows::Forms::CheckBox^  checkBox4;
private: System::Windows::Forms::CheckBox^  checkBox5;
private: System::Windows::Forms::CheckBox^  checkBox6;
private: System::Windows::Forms::CheckBox^  checkBox7;
private: System::Windows::Forms::CheckBox^  checkBox8;
private: System::Windows::Forms::CheckBox^  checkBox9;
private: System::Windows::Forms::CheckBox^  checkBox10;
private: System::Windows::Forms::CheckBox^  checkBox11;
private: System::Windows::Forms::CheckBox^  checkBox12;
private: System::Windows::Forms::CheckBox^  checkBox13;
private: System::Windows::Forms::CheckBox^  checkBox14;
private: System::Windows::Forms::CheckBox^  checkBox15;
private: System::Windows::Forms::CheckBox^  checkBox16;
private: System::Windows::Forms::CheckBox^  checkBox17;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn964;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column68;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn965;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn966;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn961;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn962;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  dataGridViewTextBoxColumn963;
private: System::Windows::Forms::DataGridViewTextBoxColumn^  Column70;

private: System::ComponentModel::IContainer^  components;

	protected: 

	private:
		/// <summary>
		/// Требуется переменная конструктора.
		/// </summary>


#pragma region Windows Form Designer generated code
		/// <summary>
		/// Обязательный метод для поддержки конструктора - не изменяйте
		/// содержимое данного метода при помощи редактора кода.
		/// </summary>
		void InitializeComponent(void)
		{
			this->components = (gcnew System::ComponentModel::Container());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle1 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle2 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle3 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle4 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle5 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle6 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle7 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle8 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle9 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle10 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle11 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle12 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle13 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle14 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle15 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle16 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle17 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle19 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::Windows::Forms::DataGridViewCellStyle^  dataGridViewCellStyle18 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
			System::ComponentModel::ComponentResourceManager^  resources = (gcnew System::ComponentModel::ComponentResourceManager(Form1::typeid));
			this->Load_level = (gcnew System::Windows::Forms::Button());
			this->openFileDialog1 = (gcnew System::Windows::Forms::OpenFileDialog());
			this->label9 = (gcnew System::Windows::Forms::Label());
			this->label11 = (gcnew System::Windows::Forms::Label());
			this->label12 = (gcnew System::Windows::Forms::Label());
			this->tabControl1 = (gcnew System::Windows::Forms::TabControl());
			this->tabPage1 = (gcnew System::Windows::Forms::TabPage());
			this->checkBox11 = (gcnew System::Windows::Forms::CheckBox());
			this->checkBox2 = (gcnew System::Windows::Forms::CheckBox());
			this->button24 = (gcnew System::Windows::Forms::Button());
			this->label162 = (gcnew System::Windows::Forms::Label());
			this->textBox44 = (gcnew System::Windows::Forms::TextBox());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->label156 = (gcnew System::Windows::Forms::Label());
			this->textBox43 = (gcnew System::Windows::Forms::TextBox());
			this->label140 = (gcnew System::Windows::Forms::Label());
			this->button6 = (gcnew System::Windows::Forms::Button());
			this->label139 = (gcnew System::Windows::Forms::Label());
			this->button4 = (gcnew System::Windows::Forms::Button());
			this->label89 = (gcnew System::Windows::Forms::Label());
			this->label88 = (gcnew System::Windows::Forms::Label());
			this->label87 = (gcnew System::Windows::Forms::Label());
			this->label86 = (gcnew System::Windows::Forms::Label());
			this->label85 = (gcnew System::Windows::Forms::Label());
			this->label84 = (gcnew System::Windows::Forms::Label());
			this->label83 = (gcnew System::Windows::Forms::Label());
			this->dataGridView10 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn449 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn450 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn451 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn452 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn453 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn454 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn455 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn456 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn457 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn458 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn459 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn460 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn461 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn462 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn463 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn464 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn465 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn466 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn467 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn468 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn469 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn470 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn471 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn472 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn473 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn474 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn475 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn476 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn477 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn478 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn479 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn480 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn481 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn482 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn483 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn484 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn485 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn486 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn487 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn488 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn489 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn490 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn491 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn492 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn493 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn494 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn495 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn496 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn497 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn498 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn499 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn500 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn501 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn502 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn503 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn504 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn505 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn506 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn507 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn508 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn509 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn510 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn511 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn512 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->textBox41 = (gcnew System::Windows::Forms::TextBox());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->label10 = (gcnew System::Windows::Forms::Label());
			this->textBox5 = (gcnew System::Windows::Forms::TextBox());
			this->label8 = (gcnew System::Windows::Forms::Label());
			this->label7 = (gcnew System::Windows::Forms::Label());
			this->textBox4 = (gcnew System::Windows::Forms::TextBox());
			this->textBox3 = (gcnew System::Windows::Forms::TextBox());
			this->textBox2 = (gcnew System::Windows::Forms::TextBox());
			this->label6 = (gcnew System::Windows::Forms::Label());
			this->textBox1 = (gcnew System::Windows::Forms::TextBox());
			this->label5 = (gcnew System::Windows::Forms::Label());
			this->label15 = (gcnew System::Windows::Forms::Label());
			this->label16 = (gcnew System::Windows::Forms::Label());
			this->label14 = (gcnew System::Windows::Forms::Label());
			this->label13 = (gcnew System::Windows::Forms::Label());
			this->dataGridView1 = (gcnew System::Windows::Forms::DataGridView());
			this->Column1 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column2 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column3 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column4 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column5 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column6 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column7 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column8 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column9 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column10 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column11 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column12 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column13 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column14 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column15 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column16 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column17 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column18 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column19 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column20 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column21 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column22 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column23 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column24 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column25 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column26 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column27 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column28 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column29 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column30 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column31 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column32 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column33 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column34 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column35 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column36 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column37 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column38 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column39 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column40 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column41 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column42 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column43 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column44 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column45 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column46 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column47 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column48 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column49 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column50 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column51 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column52 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column53 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column54 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column55 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column56 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column57 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column58 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column59 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column60 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column61 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column62 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column63 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column64 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->tabPage2 = (gcnew System::Windows::Forms::TabPage());
			this->checkBox10 = (gcnew System::Windows::Forms::CheckBox());
			this->checkBox3 = (gcnew System::Windows::Forms::CheckBox());
			this->button25 = (gcnew System::Windows::Forms::Button());
			this->label163 = (gcnew System::Windows::Forms::Label());
			this->textBox45 = (gcnew System::Windows::Forms::TextBox());
			this->label142 = (gcnew System::Windows::Forms::Label());
			this->button8 = (gcnew System::Windows::Forms::Button());
			this->label143 = (gcnew System::Windows::Forms::Label());
			this->button9 = (gcnew System::Windows::Forms::Button());
			this->label90 = (gcnew System::Windows::Forms::Label());
			this->label91 = (gcnew System::Windows::Forms::Label());
			this->label92 = (gcnew System::Windows::Forms::Label());
			this->label93 = (gcnew System::Windows::Forms::Label());
			this->label94 = (gcnew System::Windows::Forms::Label());
			this->label95 = (gcnew System::Windows::Forms::Label());
			this->label96 = (gcnew System::Windows::Forms::Label());
			this->dataGridView11 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn513 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn514 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn515 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn516 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn517 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn518 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn519 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn520 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn521 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn522 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn523 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn524 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn525 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn526 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn527 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn528 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn529 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn530 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn531 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn532 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn533 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn534 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn535 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn536 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn537 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn538 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn539 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn540 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn541 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn542 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn543 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn544 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn545 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn546 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn547 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn548 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn549 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn550 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn551 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn552 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn553 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn554 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn555 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn556 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn557 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn558 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn559 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn560 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn561 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn562 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn563 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn564 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn565 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn566 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn567 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn568 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn569 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn570 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn571 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn572 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn573 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn574 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn575 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn576 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->label23 = (gcnew System::Windows::Forms::Label());
			this->label24 = (gcnew System::Windows::Forms::Label());
			this->label25 = (gcnew System::Windows::Forms::Label());
			this->label26 = (gcnew System::Windows::Forms::Label());
			this->label27 = (gcnew System::Windows::Forms::Label());
			this->label28 = (gcnew System::Windows::Forms::Label());
			this->label29 = (gcnew System::Windows::Forms::Label());
			this->label18 = (gcnew System::Windows::Forms::Label());
			this->label17 = (gcnew System::Windows::Forms::Label());
			this->textBox10 = (gcnew System::Windows::Forms::TextBox());
			this->textBox9 = (gcnew System::Windows::Forms::TextBox());
			this->textBox8 = (gcnew System::Windows::Forms::TextBox());
			this->textBox7 = (gcnew System::Windows::Forms::TextBox());
			this->textBox6 = (gcnew System::Windows::Forms::TextBox());
			this->dataGridView2 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn1 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn2 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn3 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn4 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn5 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn6 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn7 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn8 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn9 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn10 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn11 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn12 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn13 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn14 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn15 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn16 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn17 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn18 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn19 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn20 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn21 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn22 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn23 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn24 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn25 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn26 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn27 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn28 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn29 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn30 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn31 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn32 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn33 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn34 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn35 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn36 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn37 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn38 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn39 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn40 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn41 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn42 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn43 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn44 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn45 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn46 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn47 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn48 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn49 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn50 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn51 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn52 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn53 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn54 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn55 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn56 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn57 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn58 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn59 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn60 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn61 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn62 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn63 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn64 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->tabPage3 = (gcnew System::Windows::Forms::TabPage());
			this->checkBox12 = (gcnew System::Windows::Forms::CheckBox());
			this->checkBox4 = (gcnew System::Windows::Forms::CheckBox());
			this->button26 = (gcnew System::Windows::Forms::Button());
			this->label164 = (gcnew System::Windows::Forms::Label());
			this->textBox46 = (gcnew System::Windows::Forms::TextBox());
			this->label144 = (gcnew System::Windows::Forms::Label());
			this->button10 = (gcnew System::Windows::Forms::Button());
			this->label145 = (gcnew System::Windows::Forms::Label());
			this->button11 = (gcnew System::Windows::Forms::Button());
			this->label97 = (gcnew System::Windows::Forms::Label());
			this->label98 = (gcnew System::Windows::Forms::Label());
			this->label99 = (gcnew System::Windows::Forms::Label());
			this->label100 = (gcnew System::Windows::Forms::Label());
			this->label101 = (gcnew System::Windows::Forms::Label());
			this->label102 = (gcnew System::Windows::Forms::Label());
			this->label103 = (gcnew System::Windows::Forms::Label());
			this->dataGridView12 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn577 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn578 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn579 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn580 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn581 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn582 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn583 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn584 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn585 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn586 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn587 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn588 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn589 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn590 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn591 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn592 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn593 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn594 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn595 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn596 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn597 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn598 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn599 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn600 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn601 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn602 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn603 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn604 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn605 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn606 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn607 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn608 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn609 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn610 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn611 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn612 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn613 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn614 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn615 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn616 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn617 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn618 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn619 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn620 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn621 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn622 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn623 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn624 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn625 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn626 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn627 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn628 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn629 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn630 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn631 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn632 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn633 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn634 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn635 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn636 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn637 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn638 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn639 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn640 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->label19 = (gcnew System::Windows::Forms::Label());
			this->label20 = (gcnew System::Windows::Forms::Label());
			this->label30 = (gcnew System::Windows::Forms::Label());
			this->label31 = (gcnew System::Windows::Forms::Label());
			this->label32 = (gcnew System::Windows::Forms::Label());
			this->label33 = (gcnew System::Windows::Forms::Label());
			this->label34 = (gcnew System::Windows::Forms::Label());
			this->label35 = (gcnew System::Windows::Forms::Label());
			this->label36 = (gcnew System::Windows::Forms::Label());
			this->textBox11 = (gcnew System::Windows::Forms::TextBox());
			this->textBox12 = (gcnew System::Windows::Forms::TextBox());
			this->textBox13 = (gcnew System::Windows::Forms::TextBox());
			this->textBox14 = (gcnew System::Windows::Forms::TextBox());
			this->textBox15 = (gcnew System::Windows::Forms::TextBox());
			this->dataGridView3 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn65 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn66 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn67 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn68 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn69 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn70 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn71 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn72 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn73 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn74 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn75 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn76 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn77 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn78 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn79 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn80 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn81 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn82 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn83 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn84 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn85 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn86 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn87 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn88 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn89 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn90 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn91 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn92 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn93 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn94 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn95 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn96 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn97 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn98 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn99 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn100 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn101 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn102 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn103 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn104 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn105 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn106 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn107 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn108 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn109 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn110 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn111 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn112 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn113 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn114 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn115 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn116 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn117 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn118 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn119 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn120 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn121 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn122 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn123 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn124 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn125 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn126 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn127 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn128 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->tabPage4 = (gcnew System::Windows::Forms::TabPage());
			this->checkBox13 = (gcnew System::Windows::Forms::CheckBox());
			this->checkBox5 = (gcnew System::Windows::Forms::CheckBox());
			this->button27 = (gcnew System::Windows::Forms::Button());
			this->label165 = (gcnew System::Windows::Forms::Label());
			this->textBox47 = (gcnew System::Windows::Forms::TextBox());
			this->label146 = (gcnew System::Windows::Forms::Label());
			this->button12 = (gcnew System::Windows::Forms::Button());
			this->label147 = (gcnew System::Windows::Forms::Label());
			this->button13 = (gcnew System::Windows::Forms::Button());
			this->label104 = (gcnew System::Windows::Forms::Label());
			this->label105 = (gcnew System::Windows::Forms::Label());
			this->label106 = (gcnew System::Windows::Forms::Label());
			this->label107 = (gcnew System::Windows::Forms::Label());
			this->label108 = (gcnew System::Windows::Forms::Label());
			this->label109 = (gcnew System::Windows::Forms::Label());
			this->label110 = (gcnew System::Windows::Forms::Label());
			this->dataGridView13 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn641 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn642 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn643 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn644 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn645 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn646 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn647 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn648 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn649 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn650 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn651 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn652 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn653 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn654 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn655 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn656 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn657 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn658 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn659 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn660 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn661 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn662 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn663 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn664 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn665 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn666 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn667 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn668 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn669 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn670 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn671 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn672 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn673 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn674 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn675 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn676 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn677 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn678 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn679 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn680 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn681 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn682 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn683 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn684 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn685 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn686 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn687 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn688 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn689 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn690 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn691 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn692 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn693 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn694 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn695 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn696 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn697 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn698 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn699 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn700 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn701 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn702 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn703 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn704 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->label21 = (gcnew System::Windows::Forms::Label());
			this->label22 = (gcnew System::Windows::Forms::Label());
			this->label37 = (gcnew System::Windows::Forms::Label());
			this->label38 = (gcnew System::Windows::Forms::Label());
			this->label39 = (gcnew System::Windows::Forms::Label());
			this->label40 = (gcnew System::Windows::Forms::Label());
			this->label41 = (gcnew System::Windows::Forms::Label());
			this->label42 = (gcnew System::Windows::Forms::Label());
			this->label43 = (gcnew System::Windows::Forms::Label());
			this->textBox16 = (gcnew System::Windows::Forms::TextBox());
			this->textBox17 = (gcnew System::Windows::Forms::TextBox());
			this->textBox18 = (gcnew System::Windows::Forms::TextBox());
			this->textBox19 = (gcnew System::Windows::Forms::TextBox());
			this->textBox20 = (gcnew System::Windows::Forms::TextBox());
			this->dataGridView4 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn129 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn130 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn131 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn132 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn133 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn134 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn135 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn136 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn137 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn138 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn139 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn140 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn141 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn142 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn143 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn144 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn145 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn146 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn147 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn148 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn149 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn150 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn151 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn152 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn153 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn154 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn155 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn156 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn157 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn158 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn159 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn160 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn161 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn162 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn163 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn164 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn165 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn166 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn167 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn168 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn169 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn170 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn171 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn172 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn173 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn174 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn175 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn176 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn177 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn178 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn179 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn180 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn181 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn182 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn183 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn184 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn185 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn186 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn187 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn188 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn189 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn190 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn191 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn192 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->tabPage5 = (gcnew System::Windows::Forms::TabPage());
			this->checkBox14 = (gcnew System::Windows::Forms::CheckBox());
			this->checkBox6 = (gcnew System::Windows::Forms::CheckBox());
			this->button28 = (gcnew System::Windows::Forms::Button());
			this->label166 = (gcnew System::Windows::Forms::Label());
			this->textBox48 = (gcnew System::Windows::Forms::TextBox());
			this->label148 = (gcnew System::Windows::Forms::Label());
			this->button14 = (gcnew System::Windows::Forms::Button());
			this->label149 = (gcnew System::Windows::Forms::Label());
			this->button15 = (gcnew System::Windows::Forms::Button());
			this->label111 = (gcnew System::Windows::Forms::Label());
			this->label112 = (gcnew System::Windows::Forms::Label());
			this->label113 = (gcnew System::Windows::Forms::Label());
			this->label114 = (gcnew System::Windows::Forms::Label());
			this->label115 = (gcnew System::Windows::Forms::Label());
			this->label116 = (gcnew System::Windows::Forms::Label());
			this->label117 = (gcnew System::Windows::Forms::Label());
			this->dataGridView14 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn705 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn706 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn707 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn708 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn709 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn710 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn711 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn712 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn713 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn714 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn715 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn716 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn717 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn718 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn719 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn720 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn721 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn722 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn723 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn724 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn725 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn726 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn727 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn728 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn729 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn730 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn731 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn732 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn733 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn734 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn735 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn736 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn737 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn738 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn739 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn740 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn741 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn742 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn743 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn744 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn745 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn746 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn747 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn748 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn749 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn750 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn751 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn752 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn753 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn754 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn755 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn756 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn757 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn758 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn759 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn760 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn761 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn762 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn763 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn764 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn765 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn766 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn767 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn768 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->label44 = (gcnew System::Windows::Forms::Label());
			this->label45 = (gcnew System::Windows::Forms::Label());
			this->label46 = (gcnew System::Windows::Forms::Label());
			this->label47 = (gcnew System::Windows::Forms::Label());
			this->label48 = (gcnew System::Windows::Forms::Label());
			this->label49 = (gcnew System::Windows::Forms::Label());
			this->label50 = (gcnew System::Windows::Forms::Label());
			this->label51 = (gcnew System::Windows::Forms::Label());
			this->label52 = (gcnew System::Windows::Forms::Label());
			this->textBox21 = (gcnew System::Windows::Forms::TextBox());
			this->textBox22 = (gcnew System::Windows::Forms::TextBox());
			this->textBox23 = (gcnew System::Windows::Forms::TextBox());
			this->textBox24 = (gcnew System::Windows::Forms::TextBox());
			this->textBox25 = (gcnew System::Windows::Forms::TextBox());
			this->dataGridView5 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn193 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn194 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn195 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn196 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn197 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn198 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn199 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn200 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn201 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn202 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn203 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn204 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn205 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn206 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn207 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn208 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn209 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn210 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn211 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn212 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn213 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn214 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn215 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn216 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn217 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn218 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn219 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn220 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn221 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn222 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn223 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn224 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn225 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn226 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn227 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn228 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn229 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn230 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn231 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn232 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn233 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn234 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn235 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn236 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn237 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn238 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn239 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn240 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn241 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn242 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn243 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn244 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn245 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn246 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn247 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn248 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn249 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn250 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn251 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn252 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn253 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn254 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn255 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn256 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->tabPage6 = (gcnew System::Windows::Forms::TabPage());
			this->checkBox15 = (gcnew System::Windows::Forms::CheckBox());
			this->checkBox7 = (gcnew System::Windows::Forms::CheckBox());
			this->button29 = (gcnew System::Windows::Forms::Button());
			this->label167 = (gcnew System::Windows::Forms::Label());
			this->textBox49 = (gcnew System::Windows::Forms::TextBox());
			this->label150 = (gcnew System::Windows::Forms::Label());
			this->button16 = (gcnew System::Windows::Forms::Button());
			this->label151 = (gcnew System::Windows::Forms::Label());
			this->button17 = (gcnew System::Windows::Forms::Button());
			this->label118 = (gcnew System::Windows::Forms::Label());
			this->label119 = (gcnew System::Windows::Forms::Label());
			this->label120 = (gcnew System::Windows::Forms::Label());
			this->label121 = (gcnew System::Windows::Forms::Label());
			this->label122 = (gcnew System::Windows::Forms::Label());
			this->label123 = (gcnew System::Windows::Forms::Label());
			this->label124 = (gcnew System::Windows::Forms::Label());
			this->dataGridView15 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn769 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn770 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn771 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn772 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn773 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn774 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn775 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn776 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn777 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn778 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn779 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn780 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn781 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn782 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn783 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn784 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn785 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn786 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn787 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn788 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn789 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn790 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn791 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn792 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn793 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn794 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn795 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn796 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn797 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn798 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn799 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn800 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn801 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn802 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn803 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn804 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn805 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn806 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn807 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn808 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn809 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn810 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn811 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn812 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn813 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn814 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn815 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn816 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn817 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn818 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn819 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn820 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn821 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn822 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn823 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn824 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn825 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn826 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn827 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn828 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn829 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn830 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn831 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn832 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->label53 = (gcnew System::Windows::Forms::Label());
			this->label54 = (gcnew System::Windows::Forms::Label());
			this->label55 = (gcnew System::Windows::Forms::Label());
			this->label56 = (gcnew System::Windows::Forms::Label());
			this->label57 = (gcnew System::Windows::Forms::Label());
			this->label58 = (gcnew System::Windows::Forms::Label());
			this->label59 = (gcnew System::Windows::Forms::Label());
			this->label60 = (gcnew System::Windows::Forms::Label());
			this->label61 = (gcnew System::Windows::Forms::Label());
			this->textBox26 = (gcnew System::Windows::Forms::TextBox());
			this->textBox27 = (gcnew System::Windows::Forms::TextBox());
			this->textBox28 = (gcnew System::Windows::Forms::TextBox());
			this->textBox29 = (gcnew System::Windows::Forms::TextBox());
			this->textBox30 = (gcnew System::Windows::Forms::TextBox());
			this->dataGridView6 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn257 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn258 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn259 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn260 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn261 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn262 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn263 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn264 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn265 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn266 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn267 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn268 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn269 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn270 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn271 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn272 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn273 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn274 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn275 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn276 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn277 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn278 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn279 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn280 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn281 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn282 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn283 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn284 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn285 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn286 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn287 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn288 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn289 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn290 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn291 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn292 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn293 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn294 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn295 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn296 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn297 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn298 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn299 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn300 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn301 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn302 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn303 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn304 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn305 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn306 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn307 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn308 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn309 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn310 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn311 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn312 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn313 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn314 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn315 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn316 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn317 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn318 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn319 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn320 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->tabPage7 = (gcnew System::Windows::Forms::TabPage());
			this->checkBox16 = (gcnew System::Windows::Forms::CheckBox());
			this->checkBox8 = (gcnew System::Windows::Forms::CheckBox());
			this->button30 = (gcnew System::Windows::Forms::Button());
			this->label168 = (gcnew System::Windows::Forms::Label());
			this->textBox50 = (gcnew System::Windows::Forms::TextBox());
			this->label152 = (gcnew System::Windows::Forms::Label());
			this->button18 = (gcnew System::Windows::Forms::Button());
			this->label153 = (gcnew System::Windows::Forms::Label());
			this->button19 = (gcnew System::Windows::Forms::Button());
			this->label125 = (gcnew System::Windows::Forms::Label());
			this->label126 = (gcnew System::Windows::Forms::Label());
			this->label127 = (gcnew System::Windows::Forms::Label());
			this->label128 = (gcnew System::Windows::Forms::Label());
			this->label129 = (gcnew System::Windows::Forms::Label());
			this->label130 = (gcnew System::Windows::Forms::Label());
			this->label131 = (gcnew System::Windows::Forms::Label());
			this->dataGridView16 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn833 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn834 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn835 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn836 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn837 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn838 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn839 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn840 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn841 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn842 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn843 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn844 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn845 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn846 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn847 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn848 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn849 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn850 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn851 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn852 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn853 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn854 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn855 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn856 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn857 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn858 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn859 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn860 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn861 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn862 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn863 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn864 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn865 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn866 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn867 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn868 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn869 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn870 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn871 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn872 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn873 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn874 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn875 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn876 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn877 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn878 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn879 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn880 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn881 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn882 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn883 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn884 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn885 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn886 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn887 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn888 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn889 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn890 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn891 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn892 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn893 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn894 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn895 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn896 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->label62 = (gcnew System::Windows::Forms::Label());
			this->label63 = (gcnew System::Windows::Forms::Label());
			this->label64 = (gcnew System::Windows::Forms::Label());
			this->label65 = (gcnew System::Windows::Forms::Label());
			this->label66 = (gcnew System::Windows::Forms::Label());
			this->label67 = (gcnew System::Windows::Forms::Label());
			this->label68 = (gcnew System::Windows::Forms::Label());
			this->label69 = (gcnew System::Windows::Forms::Label());
			this->label70 = (gcnew System::Windows::Forms::Label());
			this->textBox31 = (gcnew System::Windows::Forms::TextBox());
			this->textBox32 = (gcnew System::Windows::Forms::TextBox());
			this->textBox33 = (gcnew System::Windows::Forms::TextBox());
			this->textBox34 = (gcnew System::Windows::Forms::TextBox());
			this->textBox35 = (gcnew System::Windows::Forms::TextBox());
			this->dataGridView7 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn321 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn322 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn323 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn324 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn325 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn326 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn327 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn328 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn329 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn330 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn331 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn332 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn333 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn334 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn335 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn336 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn337 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn338 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn339 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn340 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn341 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn342 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn343 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn344 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn345 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn346 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn347 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn348 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn349 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn350 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn351 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn352 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn353 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn354 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn355 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn356 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn357 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn358 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn359 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn360 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn361 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn362 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn363 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn364 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn365 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn366 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn367 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn368 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn369 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn370 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn371 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn372 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn373 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn374 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn375 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn376 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn377 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn378 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn379 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn380 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn381 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn382 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn383 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn384 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->tabPage8 = (gcnew System::Windows::Forms::TabPage());
			this->checkBox17 = (gcnew System::Windows::Forms::CheckBox());
			this->checkBox9 = (gcnew System::Windows::Forms::CheckBox());
			this->button31 = (gcnew System::Windows::Forms::Button());
			this->label169 = (gcnew System::Windows::Forms::Label());
			this->textBox51 = (gcnew System::Windows::Forms::TextBox());
			this->label154 = (gcnew System::Windows::Forms::Label());
			this->button20 = (gcnew System::Windows::Forms::Button());
			this->label155 = (gcnew System::Windows::Forms::Label());
			this->button21 = (gcnew System::Windows::Forms::Button());
			this->label132 = (gcnew System::Windows::Forms::Label());
			this->label133 = (gcnew System::Windows::Forms::Label());
			this->label134 = (gcnew System::Windows::Forms::Label());
			this->label135 = (gcnew System::Windows::Forms::Label());
			this->label136 = (gcnew System::Windows::Forms::Label());
			this->label137 = (gcnew System::Windows::Forms::Label());
			this->label138 = (gcnew System::Windows::Forms::Label());
			this->dataGridView17 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn897 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn898 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn899 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn900 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn901 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn902 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn903 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn904 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn905 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn906 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn907 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn908 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn909 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn910 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn911 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn912 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn913 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn914 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn915 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn916 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn917 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn918 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn919 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn920 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn921 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn922 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn923 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn924 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn925 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn926 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn927 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn928 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn929 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn930 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn931 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn932 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn933 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn934 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn935 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn936 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn937 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn938 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn939 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn940 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn941 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn942 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn943 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn944 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn945 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn946 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn947 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn948 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn949 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn950 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn951 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn952 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn953 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn954 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn955 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn956 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn957 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn958 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn959 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn960 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->label71 = (gcnew System::Windows::Forms::Label());
			this->label72 = (gcnew System::Windows::Forms::Label());
			this->label73 = (gcnew System::Windows::Forms::Label());
			this->label74 = (gcnew System::Windows::Forms::Label());
			this->label75 = (gcnew System::Windows::Forms::Label());
			this->label76 = (gcnew System::Windows::Forms::Label());
			this->label77 = (gcnew System::Windows::Forms::Label());
			this->label78 = (gcnew System::Windows::Forms::Label());
			this->label79 = (gcnew System::Windows::Forms::Label());
			this->textBox36 = (gcnew System::Windows::Forms::TextBox());
			this->textBox37 = (gcnew System::Windows::Forms::TextBox());
			this->textBox38 = (gcnew System::Windows::Forms::TextBox());
			this->textBox39 = (gcnew System::Windows::Forms::TextBox());
			this->textBox40 = (gcnew System::Windows::Forms::TextBox());
			this->dataGridView8 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn385 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn386 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn387 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn388 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn389 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn390 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn391 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn392 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn393 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn394 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn395 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn396 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn397 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn398 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn399 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn400 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn401 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn402 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn403 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn404 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn405 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn406 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn407 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn408 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn409 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn410 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn411 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn412 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn413 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn414 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn415 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn416 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn417 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn418 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn419 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn420 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn421 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn422 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn423 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn424 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn425 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn426 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn427 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn428 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn429 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn430 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn431 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn432 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn433 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn434 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn435 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn436 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn437 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn438 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn439 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn440 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn441 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn442 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn443 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn444 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn445 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn446 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn447 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn448 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->progressBar1 = (gcnew System::Windows::Forms::ProgressBar());
			this->label81 = (gcnew System::Windows::Forms::Label());
			this->richTextBox1 = (gcnew System::Windows::Forms::RichTextBox());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->label3 = (gcnew System::Windows::Forms::Label());
			this->label4 = (gcnew System::Windows::Forms::Label());
			this->button2 = (gcnew System::Windows::Forms::Button());
			this->saveFileDialog1 = (gcnew System::Windows::Forms::SaveFileDialog());
			this->dataGridView9 = (gcnew System::Windows::Forms::DataGridView());
			this->Column67 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column65 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column66 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column69 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->button3 = (gcnew System::Windows::Forms::Button());
			this->openFileDialog2 = (gcnew System::Windows::Forms::OpenFileDialog());
			this->label80 = (gcnew System::Windows::Forms::Label());
			this->label82 = (gcnew System::Windows::Forms::Label());
			this->saveFileDialog2 = (gcnew System::Windows::Forms::SaveFileDialog());
			this->button5 = (gcnew System::Windows::Forms::Button());
			this->button7 = (gcnew System::Windows::Forms::Button());
			this->saveFileDialog3 = (gcnew System::Windows::Forms::SaveFileDialog());
			this->textBox42 = (gcnew System::Windows::Forms::TextBox());
			this->label141 = (gcnew System::Windows::Forms::Label());
			this->richTextBox2 = (gcnew System::Windows::Forms::RichTextBox());
			this->checkBox1 = (gcnew System::Windows::Forms::CheckBox());
			this->label157 = (gcnew System::Windows::Forms::Label());
			this->richTextBox3 = (gcnew System::Windows::Forms::RichTextBox());
			this->label158 = (gcnew System::Windows::Forms::Label());
			this->button22 = (gcnew System::Windows::Forms::Button());
			this->timer1 = (gcnew System::Windows::Forms::Timer(this->components));
			this->timer2 = (gcnew System::Windows::Forms::Timer(this->components));
			this->richTextBox4 = (gcnew System::Windows::Forms::RichTextBox());
			this->saveFileDialog4 = (gcnew System::Windows::Forms::SaveFileDialog());
			this->dataGridView18 = (gcnew System::Windows::Forms::DataGridView());
			this->label159 = (gcnew System::Windows::Forms::Label());
			this->label160 = (gcnew System::Windows::Forms::Label());
			this->dataGridView19 = (gcnew System::Windows::Forms::DataGridView());
			this->dataGridViewTextBoxColumn964 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column68 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn965 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn966 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->label161 = (gcnew System::Windows::Forms::Label());
			this->button23 = (gcnew System::Windows::Forms::Button());
			this->comboBox1 = (gcnew System::Windows::Forms::ComboBox());
			this->saveFileDialog5 = (gcnew System::Windows::Forms::SaveFileDialog());
			this->button32 = (gcnew System::Windows::Forms::Button());
			this->timer3 = (gcnew System::Windows::Forms::Timer(this->components));
			this->label170 = (gcnew System::Windows::Forms::Label());
			this->textBox52 = (gcnew System::Windows::Forms::TextBox());
			this->label171 = (gcnew System::Windows::Forms::Label());
			this->label172 = (gcnew System::Windows::Forms::Label());
			this->textBox53 = (gcnew System::Windows::Forms::TextBox());
			this->button33 = (gcnew System::Windows::Forms::Button());
			this->progressBar2 = (gcnew System::Windows::Forms::ProgressBar());
			this->dataGridViewTextBoxColumn961 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn962 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->dataGridViewTextBoxColumn963 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->Column70 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
			this->tabControl1->SuspendLayout();
			this->tabPage1->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView10))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView1))->BeginInit();
			this->tabPage2->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView11))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView2))->BeginInit();
			this->tabPage3->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView12))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView3))->BeginInit();
			this->tabPage4->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView13))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView4))->BeginInit();
			this->tabPage5->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView14))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView5))->BeginInit();
			this->tabPage6->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView15))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView6))->BeginInit();
			this->tabPage7->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView16))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView7))->BeginInit();
			this->tabPage8->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView17))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView8))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView9))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView18))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView19))->BeginInit();
			this->SuspendLayout();
			// 
			// Load_level
			// 
			this->Load_level->Location = System::Drawing::Point(8, 315);
			this->Load_level->Margin = System::Windows::Forms::Padding(2);
			this->Load_level->Name = L"Load_level";
			this->Load_level->Size = System::Drawing::Size(74, 30);
			this->Load_level->TabIndex = 0;
			this->Load_level->Text = L"Load level";
			this->Load_level->UseVisualStyleBackColor = true;
			this->Load_level->Click += gcnew System::EventHandler(this, &Form1::button1_Click);
			// 
			// openFileDialog1
			// 
			this->openFileDialog1->FileName = L"openFileDialog1";
			// 
			// label9
			// 
			this->label9->AutoSize = true;
			this->label9->Location = System::Drawing::Point(97, 596);
			this->label9->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label9->Name = L"label9";
			this->label9->Size = System::Drawing::Size(51, 13);
			this->label9->TabIndex = 17;
			this->label9->Text = L"FilePath=";
			// 
			// label11
			// 
			this->label11->AutoSize = true;
			this->label11->Location = System::Drawing::Point(5, 85);
			this->label11->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label11->Name = L"label11";
			this->label11->Size = System::Drawing::Size(41, 13);
			this->label11->TabIndex = 19;
			this->label11->Text = L"label11";
			// 
			// label12
			// 
			this->label12->AutoSize = true;
			this->label12->Location = System::Drawing::Point(-2, 123);
			this->label12->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label12->Name = L"label12";
			this->label12->Size = System::Drawing::Size(68, 13);
			this->label12->TabIndex = 21;
			this->label12->Text = L"CubeSpecs=";
			// 
			// tabControl1
			// 
			this->tabControl1->Controls->Add(this->tabPage1);
			this->tabControl1->Controls->Add(this->tabPage2);
			this->tabControl1->Controls->Add(this->tabPage3);
			this->tabControl1->Controls->Add(this->tabPage4);
			this->tabControl1->Controls->Add(this->tabPage5);
			this->tabControl1->Controls->Add(this->tabPage6);
			this->tabControl1->Controls->Add(this->tabPage7);
			this->tabControl1->Controls->Add(this->tabPage8);
			this->tabControl1->Location = System::Drawing::Point(96, 11);
			this->tabControl1->Margin = System::Windows::Forms::Padding(2);
			this->tabControl1->Name = L"tabControl1";
			this->tabControl1->SelectedIndex = 0;
			this->tabControl1->Size = System::Drawing::Size(706, 581);
			this->tabControl1->TabIndex = 23;
			this->tabControl1->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::tabControl1_SelectedIndexChanged);
			// 
			// tabPage1
			// 
			this->tabPage1->Controls->Add(this->checkBox11);
			this->tabPage1->Controls->Add(this->checkBox2);
			this->tabPage1->Controls->Add(this->button24);
			this->tabPage1->Controls->Add(this->label162);
			this->tabPage1->Controls->Add(this->textBox44);
			this->tabPage1->Controls->Add(this->button1);
			this->tabPage1->Controls->Add(this->label156);
			this->tabPage1->Controls->Add(this->textBox43);
			this->tabPage1->Controls->Add(this->label140);
			this->tabPage1->Controls->Add(this->button6);
			this->tabPage1->Controls->Add(this->label139);
			this->tabPage1->Controls->Add(this->button4);
			this->tabPage1->Controls->Add(this->label89);
			this->tabPage1->Controls->Add(this->label88);
			this->tabPage1->Controls->Add(this->label87);
			this->tabPage1->Controls->Add(this->label86);
			this->tabPage1->Controls->Add(this->label85);
			this->tabPage1->Controls->Add(this->label84);
			this->tabPage1->Controls->Add(this->label83);
			this->tabPage1->Controls->Add(this->dataGridView10);
			this->tabPage1->Controls->Add(this->textBox41);
			this->tabPage1->Controls->Add(this->label2);
			this->tabPage1->Controls->Add(this->label10);
			this->tabPage1->Controls->Add(this->textBox5);
			this->tabPage1->Controls->Add(this->label8);
			this->tabPage1->Controls->Add(this->label7);
			this->tabPage1->Controls->Add(this->textBox4);
			this->tabPage1->Controls->Add(this->textBox3);
			this->tabPage1->Controls->Add(this->textBox2);
			this->tabPage1->Controls->Add(this->label6);
			this->tabPage1->Controls->Add(this->textBox1);
			this->tabPage1->Controls->Add(this->label5);
			this->tabPage1->Controls->Add(this->label15);
			this->tabPage1->Controls->Add(this->label16);
			this->tabPage1->Controls->Add(this->label14);
			this->tabPage1->Controls->Add(this->label13);
			this->tabPage1->Controls->Add(this->dataGridView1);
			this->tabPage1->Location = System::Drawing::Point(4, 22);
			this->tabPage1->Margin = System::Windows::Forms::Padding(2);
			this->tabPage1->Name = L"tabPage1";
			this->tabPage1->Padding = System::Windows::Forms::Padding(2);
			this->tabPage1->Size = System::Drawing::Size(698, 555);
			this->tabPage1->TabIndex = 0;
			this->tabPage1->Text = L"Floor 0";
			this->tabPage1->UseVisualStyleBackColor = true;
			// 
			// checkBox11
			// 
			this->checkBox11->AutoSize = true;
			this->checkBox11->Location = System::Drawing::Point(560, 496);
			this->checkBox11->Name = L"checkBox11";
			this->checkBox11->Size = System::Drawing::Size(96, 17);
			this->checkBox11->TabIndex = 90;
			this->checkBox11->Text = L"Show teleports";
			this->checkBox11->UseVisualStyleBackColor = true;
			this->checkBox11->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox11_CheckedChanged);
			// 
			// checkBox2
			// 
			this->checkBox2->AutoSize = true;
			this->checkBox2->Location = System::Drawing::Point(560, 475);
			this->checkBox2->Name = L"checkBox2";
			this->checkBox2->Size = System::Drawing::Size(136, 17);
			this->checkBox2->TabIndex = 87;
			this->checkBox2->Text = L"Show cubes with doors";
			this->checkBox2->UseVisualStyleBackColor = true;
			this->checkBox2->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox2_CheckedChanged);
			// 
			// button24
			// 
			this->button24->Enabled = false;
			this->button24->Location = System::Drawing::Point(610, 390);
			this->button24->Name = L"button24";
			this->button24->Size = System::Drawing::Size(32, 20);
			this->button24->TabIndex = 69;
			this->button24->Text = L"OK";
			this->button24->UseVisualStyleBackColor = true;
			this->button24->Click += gcnew System::EventHandler(this, &Form1::button24_Click);
			// 
			// label162
			// 
			this->label162->AutoSize = true;
			this->label162->Location = System::Drawing::Point(533, 373);
			this->label162->Name = L"label162";
			this->label162->Size = System::Drawing::Size(69, 13);
			this->label162->TabIndex = 68;
			this->label162->Text = L"Cube N (hex)";
			// 
			// textBox44
			// 
			this->textBox44->Location = System::Drawing::Point(533, 390);
			this->textBox44->MaxLength = 3;
			this->textBox44->Name = L"textBox44";
			this->textBox44->Size = System::Drawing::Size(70, 20);
			this->textBox44->TabIndex = 67;
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(576, 515);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(80, 23);
			this->button1->TabIndex = 66;
			this->button1->Text = L"Search";
			this->button1->UseVisualStyleBackColor = true;
			// 
			// label156
			// 
			this->label156->AutoSize = true;
			this->label156->Location = System::Drawing::Point(425, 501);
			this->label156->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label156->Name = L"label156";
			this->label156->Size = System::Drawing::Size(101, 13);
			this->label156->TabIndex = 65;
			this->label156->Text = L"Search value (HEX)";
			// 
			// textBox43
			// 
			this->textBox43->Location = System::Drawing::Point(428, 517);
			this->textBox43->Name = L"textBox43";
			this->textBox43->Size = System::Drawing::Size(142, 20);
			this->textBox43->TabIndex = 64;
			// 
			// label140
			// 
			this->label140->AutoSize = true;
			this->label140->Location = System::Drawing::Point(556, 434);
			this->label140->Name = L"label140";
			this->label140->Size = System::Drawing::Size(47, 13);
			this->label140->TabIndex = 57;
			this->label140->Text = L"label140";
			// 
			// button6
			// 
			this->button6->Enabled = false;
			this->button6->Location = System::Drawing::Point(475, 424);
			this->button6->Name = L"button6";
			this->button6->Size = System::Drawing::Size(75, 23);
			this->button6->TabIndex = 56;
			this->button6->Text = L"Edit value";
			this->button6->UseVisualStyleBackColor = true;
			this->button6->Click += gcnew System::EventHandler(this, &Form1::button6_Click);
			// 
			// label139
			// 
			this->label139->AutoSize = true;
			this->label139->Location = System::Drawing::Point(503, 458);
			this->label139->Name = L"label139";
			this->label139->Size = System::Drawing::Size(47, 13);
			this->label139->TabIndex = 55;
			this->label139->Text = L"label139";
			// 
			// button4
			// 
			this->button4->Enabled = false;
			this->button4->Location = System::Drawing::Point(428, 448);
			this->button4->Name = L"button4";
			this->button4->Size = System::Drawing::Size(75, 23);
			this->button4->TabIndex = 53;
			this->button4->Text = L"Edit value";
			this->button4->UseVisualStyleBackColor = true;
			this->button4->Click += gcnew System::EventHandler(this, &Form1::button4_Click);
			// 
			// label89
			// 
			this->label89->AutoSize = true;
			this->label89->Location = System::Drawing::Point(436, 369);
			this->label89->Name = L"label89";
			this->label89->Size = System::Drawing::Size(31, 13);
			this->label89->TabIndex = 52;
			this->label89->Text = L"0123";
			// 
			// label88
			// 
			this->label88->AutoSize = true;
			this->label88->Location = System::Drawing::Point(376, 356);
			this->label88->Name = L"label88";
			this->label88->Size = System::Drawing::Size(67, 13);
			this->label88->TabIndex = 51;
			this->label88->Text = L"0123456789";
			// 
			// label87
			// 
			this->label87->AutoSize = true;
			this->label87->Location = System::Drawing::Point(316, 369);
			this->label87->Name = L"label87";
			this->label87->Size = System::Drawing::Size(67, 13);
			this->label87->TabIndex = 50;
			this->label87->Text = L"0123456789";
			// 
			// label86
			// 
			this->label86->AutoSize = true;
			this->label86->Location = System::Drawing::Point(256, 356);
			this->label86->Name = L"label86";
			this->label86->Size = System::Drawing::Size(67, 13);
			this->label86->TabIndex = 49;
			this->label86->Text = L"0123456789";
			// 
			// label85
			// 
			this->label85->AutoSize = true;
			this->label85->Location = System::Drawing::Point(197, 367);
			this->label85->Name = L"label85";
			this->label85->Size = System::Drawing::Size(67, 13);
			this->label85->TabIndex = 48;
			this->label85->Text = L"0123456789";
			// 
			// label84
			// 
			this->label84->AutoSize = true;
			this->label84->Location = System::Drawing::Point(135, 356);
			this->label84->Name = L"label84";
			this->label84->Size = System::Drawing::Size(67, 13);
			this->label84->TabIndex = 47;
			this->label84->Text = L"0123456789";
			// 
			// label83
			// 
			this->label83->AutoSize = true;
			this->label83->Location = System::Drawing::Point(75, 367);
			this->label83->Name = L"label83";
			this->label83->Size = System::Drawing::Size(67, 13);
			this->label83->TabIndex = 46;
			this->label83->Text = L"0123456789";
			// 
			// dataGridView10
			// 
			this->dataGridView10->AllowDrop = true;
			this->dataGridView10->AllowUserToAddRows = false;
			this->dataGridView10->AllowUserToDeleteRows = false;
			this->dataGridView10->AllowUserToResizeColumns = false;
			this->dataGridView10->AllowUserToResizeRows = false;
			this->dataGridView10->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView10->ColumnHeadersVisible = false;
			this->dataGridView10->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn449, 
				this->dataGridViewTextBoxColumn450, this->dataGridViewTextBoxColumn451, this->dataGridViewTextBoxColumn452, this->dataGridViewTextBoxColumn453, 
				this->dataGridViewTextBoxColumn454, this->dataGridViewTextBoxColumn455, this->dataGridViewTextBoxColumn456, this->dataGridViewTextBoxColumn457, 
				this->dataGridViewTextBoxColumn458, this->dataGridViewTextBoxColumn459, this->dataGridViewTextBoxColumn460, this->dataGridViewTextBoxColumn461, 
				this->dataGridViewTextBoxColumn462, this->dataGridViewTextBoxColumn463, this->dataGridViewTextBoxColumn464, this->dataGridViewTextBoxColumn465, 
				this->dataGridViewTextBoxColumn466, this->dataGridViewTextBoxColumn467, this->dataGridViewTextBoxColumn468, this->dataGridViewTextBoxColumn469, 
				this->dataGridViewTextBoxColumn470, this->dataGridViewTextBoxColumn471, this->dataGridViewTextBoxColumn472, this->dataGridViewTextBoxColumn473, 
				this->dataGridViewTextBoxColumn474, this->dataGridViewTextBoxColumn475, this->dataGridViewTextBoxColumn476, this->dataGridViewTextBoxColumn477, 
				this->dataGridViewTextBoxColumn478, this->dataGridViewTextBoxColumn479, this->dataGridViewTextBoxColumn480, this->dataGridViewTextBoxColumn481, 
				this->dataGridViewTextBoxColumn482, this->dataGridViewTextBoxColumn483, this->dataGridViewTextBoxColumn484, this->dataGridViewTextBoxColumn485, 
				this->dataGridViewTextBoxColumn486, this->dataGridViewTextBoxColumn487, this->dataGridViewTextBoxColumn488, this->dataGridViewTextBoxColumn489, 
				this->dataGridViewTextBoxColumn490, this->dataGridViewTextBoxColumn491, this->dataGridViewTextBoxColumn492, this->dataGridViewTextBoxColumn493, 
				this->dataGridViewTextBoxColumn494, this->dataGridViewTextBoxColumn495, this->dataGridViewTextBoxColumn496, this->dataGridViewTextBoxColumn497, 
				this->dataGridViewTextBoxColumn498, this->dataGridViewTextBoxColumn499, this->dataGridViewTextBoxColumn500, this->dataGridViewTextBoxColumn501, 
				this->dataGridViewTextBoxColumn502, this->dataGridViewTextBoxColumn503, this->dataGridViewTextBoxColumn504, this->dataGridViewTextBoxColumn505, 
				this->dataGridViewTextBoxColumn506, this->dataGridViewTextBoxColumn507, this->dataGridViewTextBoxColumn508, this->dataGridViewTextBoxColumn509, 
				this->dataGridViewTextBoxColumn510, this->dataGridViewTextBoxColumn511, this->dataGridViewTextBoxColumn512});
			this->dataGridView10->Location = System::Drawing::Point(77, 383);
			this->dataGridView10->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView10->Name = L"dataGridView10";
			this->dataGridView10->ReadOnly = true;
			this->dataGridView10->RowHeadersVisible = false;
			this->dataGridView10->RowHeadersWidth = 15;
			dataGridViewCellStyle1->BackColor = System::Drawing::Color::White;
			this->dataGridView10->RowsDefaultCellStyle = dataGridViewCellStyle1;
			this->dataGridView10->RowTemplate->Height = 35;
			this->dataGridView10->Size = System::Drawing::Size(390, 41);
			this->dataGridView10->TabIndex = 45;
			// 
			// dataGridViewTextBoxColumn449
			// 
			this->dataGridViewTextBoxColumn449->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn449->Name = L"dataGridViewTextBoxColumn449";
			this->dataGridViewTextBoxColumn449->ReadOnly = true;
			this->dataGridViewTextBoxColumn449->Width = 6;
			// 
			// dataGridViewTextBoxColumn450
			// 
			this->dataGridViewTextBoxColumn450->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn450->Name = L"dataGridViewTextBoxColumn450";
			this->dataGridViewTextBoxColumn450->ReadOnly = true;
			this->dataGridViewTextBoxColumn450->Width = 6;
			// 
			// dataGridViewTextBoxColumn451
			// 
			this->dataGridViewTextBoxColumn451->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn451->Name = L"dataGridViewTextBoxColumn451";
			this->dataGridViewTextBoxColumn451->ReadOnly = true;
			this->dataGridViewTextBoxColumn451->Width = 6;
			// 
			// dataGridViewTextBoxColumn452
			// 
			this->dataGridViewTextBoxColumn452->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn452->Name = L"dataGridViewTextBoxColumn452";
			this->dataGridViewTextBoxColumn452->ReadOnly = true;
			this->dataGridViewTextBoxColumn452->Width = 6;
			// 
			// dataGridViewTextBoxColumn453
			// 
			this->dataGridViewTextBoxColumn453->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn453->Name = L"dataGridViewTextBoxColumn453";
			this->dataGridViewTextBoxColumn453->ReadOnly = true;
			this->dataGridViewTextBoxColumn453->Width = 6;
			// 
			// dataGridViewTextBoxColumn454
			// 
			this->dataGridViewTextBoxColumn454->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn454->Name = L"dataGridViewTextBoxColumn454";
			this->dataGridViewTextBoxColumn454->ReadOnly = true;
			this->dataGridViewTextBoxColumn454->Width = 6;
			// 
			// dataGridViewTextBoxColumn455
			// 
			this->dataGridViewTextBoxColumn455->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn455->Name = L"dataGridViewTextBoxColumn455";
			this->dataGridViewTextBoxColumn455->ReadOnly = true;
			this->dataGridViewTextBoxColumn455->Width = 6;
			// 
			// dataGridViewTextBoxColumn456
			// 
			this->dataGridViewTextBoxColumn456->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn456->Name = L"dataGridViewTextBoxColumn456";
			this->dataGridViewTextBoxColumn456->ReadOnly = true;
			this->dataGridViewTextBoxColumn456->Width = 6;
			// 
			// dataGridViewTextBoxColumn457
			// 
			this->dataGridViewTextBoxColumn457->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn457->Name = L"dataGridViewTextBoxColumn457";
			this->dataGridViewTextBoxColumn457->ReadOnly = true;
			this->dataGridViewTextBoxColumn457->Width = 6;
			// 
			// dataGridViewTextBoxColumn458
			// 
			this->dataGridViewTextBoxColumn458->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn458->Name = L"dataGridViewTextBoxColumn458";
			this->dataGridViewTextBoxColumn458->ReadOnly = true;
			this->dataGridViewTextBoxColumn458->Width = 6;
			// 
			// dataGridViewTextBoxColumn459
			// 
			this->dataGridViewTextBoxColumn459->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn459->Name = L"dataGridViewTextBoxColumn459";
			this->dataGridViewTextBoxColumn459->ReadOnly = true;
			this->dataGridViewTextBoxColumn459->Width = 6;
			// 
			// dataGridViewTextBoxColumn460
			// 
			this->dataGridViewTextBoxColumn460->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn460->Name = L"dataGridViewTextBoxColumn460";
			this->dataGridViewTextBoxColumn460->ReadOnly = true;
			this->dataGridViewTextBoxColumn460->Width = 6;
			// 
			// dataGridViewTextBoxColumn461
			// 
			this->dataGridViewTextBoxColumn461->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn461->Name = L"dataGridViewTextBoxColumn461";
			this->dataGridViewTextBoxColumn461->ReadOnly = true;
			this->dataGridViewTextBoxColumn461->Width = 6;
			// 
			// dataGridViewTextBoxColumn462
			// 
			this->dataGridViewTextBoxColumn462->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn462->Name = L"dataGridViewTextBoxColumn462";
			this->dataGridViewTextBoxColumn462->ReadOnly = true;
			this->dataGridViewTextBoxColumn462->Width = 6;
			// 
			// dataGridViewTextBoxColumn463
			// 
			this->dataGridViewTextBoxColumn463->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn463->Name = L"dataGridViewTextBoxColumn463";
			this->dataGridViewTextBoxColumn463->ReadOnly = true;
			this->dataGridViewTextBoxColumn463->Width = 6;
			// 
			// dataGridViewTextBoxColumn464
			// 
			this->dataGridViewTextBoxColumn464->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn464->Name = L"dataGridViewTextBoxColumn464";
			this->dataGridViewTextBoxColumn464->ReadOnly = true;
			this->dataGridViewTextBoxColumn464->Width = 6;
			// 
			// dataGridViewTextBoxColumn465
			// 
			this->dataGridViewTextBoxColumn465->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn465->Name = L"dataGridViewTextBoxColumn465";
			this->dataGridViewTextBoxColumn465->ReadOnly = true;
			this->dataGridViewTextBoxColumn465->Width = 6;
			// 
			// dataGridViewTextBoxColumn466
			// 
			this->dataGridViewTextBoxColumn466->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn466->Name = L"dataGridViewTextBoxColumn466";
			this->dataGridViewTextBoxColumn466->ReadOnly = true;
			this->dataGridViewTextBoxColumn466->Width = 6;
			// 
			// dataGridViewTextBoxColumn467
			// 
			this->dataGridViewTextBoxColumn467->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn467->Name = L"dataGridViewTextBoxColumn467";
			this->dataGridViewTextBoxColumn467->ReadOnly = true;
			this->dataGridViewTextBoxColumn467->Width = 6;
			// 
			// dataGridViewTextBoxColumn468
			// 
			this->dataGridViewTextBoxColumn468->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn468->Name = L"dataGridViewTextBoxColumn468";
			this->dataGridViewTextBoxColumn468->ReadOnly = true;
			this->dataGridViewTextBoxColumn468->Width = 6;
			// 
			// dataGridViewTextBoxColumn469
			// 
			this->dataGridViewTextBoxColumn469->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn469->Name = L"dataGridViewTextBoxColumn469";
			this->dataGridViewTextBoxColumn469->ReadOnly = true;
			this->dataGridViewTextBoxColumn469->Width = 6;
			// 
			// dataGridViewTextBoxColumn470
			// 
			this->dataGridViewTextBoxColumn470->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn470->Name = L"dataGridViewTextBoxColumn470";
			this->dataGridViewTextBoxColumn470->ReadOnly = true;
			this->dataGridViewTextBoxColumn470->Width = 6;
			// 
			// dataGridViewTextBoxColumn471
			// 
			this->dataGridViewTextBoxColumn471->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn471->Name = L"dataGridViewTextBoxColumn471";
			this->dataGridViewTextBoxColumn471->ReadOnly = true;
			this->dataGridViewTextBoxColumn471->Width = 6;
			// 
			// dataGridViewTextBoxColumn472
			// 
			this->dataGridViewTextBoxColumn472->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn472->Name = L"dataGridViewTextBoxColumn472";
			this->dataGridViewTextBoxColumn472->ReadOnly = true;
			this->dataGridViewTextBoxColumn472->Width = 6;
			// 
			// dataGridViewTextBoxColumn473
			// 
			this->dataGridViewTextBoxColumn473->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn473->Name = L"dataGridViewTextBoxColumn473";
			this->dataGridViewTextBoxColumn473->ReadOnly = true;
			this->dataGridViewTextBoxColumn473->Width = 6;
			// 
			// dataGridViewTextBoxColumn474
			// 
			this->dataGridViewTextBoxColumn474->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn474->Name = L"dataGridViewTextBoxColumn474";
			this->dataGridViewTextBoxColumn474->ReadOnly = true;
			this->dataGridViewTextBoxColumn474->Width = 6;
			// 
			// dataGridViewTextBoxColumn475
			// 
			this->dataGridViewTextBoxColumn475->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn475->Name = L"dataGridViewTextBoxColumn475";
			this->dataGridViewTextBoxColumn475->ReadOnly = true;
			this->dataGridViewTextBoxColumn475->Width = 6;
			// 
			// dataGridViewTextBoxColumn476
			// 
			this->dataGridViewTextBoxColumn476->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn476->Name = L"dataGridViewTextBoxColumn476";
			this->dataGridViewTextBoxColumn476->ReadOnly = true;
			this->dataGridViewTextBoxColumn476->Width = 6;
			// 
			// dataGridViewTextBoxColumn477
			// 
			this->dataGridViewTextBoxColumn477->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn477->Name = L"dataGridViewTextBoxColumn477";
			this->dataGridViewTextBoxColumn477->ReadOnly = true;
			this->dataGridViewTextBoxColumn477->Width = 6;
			// 
			// dataGridViewTextBoxColumn478
			// 
			this->dataGridViewTextBoxColumn478->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn478->Name = L"dataGridViewTextBoxColumn478";
			this->dataGridViewTextBoxColumn478->ReadOnly = true;
			this->dataGridViewTextBoxColumn478->Width = 6;
			// 
			// dataGridViewTextBoxColumn479
			// 
			this->dataGridViewTextBoxColumn479->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn479->Name = L"dataGridViewTextBoxColumn479";
			this->dataGridViewTextBoxColumn479->ReadOnly = true;
			this->dataGridViewTextBoxColumn479->Width = 6;
			// 
			// dataGridViewTextBoxColumn480
			// 
			this->dataGridViewTextBoxColumn480->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn480->Name = L"dataGridViewTextBoxColumn480";
			this->dataGridViewTextBoxColumn480->ReadOnly = true;
			this->dataGridViewTextBoxColumn480->Width = 6;
			// 
			// dataGridViewTextBoxColumn481
			// 
			this->dataGridViewTextBoxColumn481->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn481->Name = L"dataGridViewTextBoxColumn481";
			this->dataGridViewTextBoxColumn481->ReadOnly = true;
			this->dataGridViewTextBoxColumn481->Width = 6;
			// 
			// dataGridViewTextBoxColumn482
			// 
			this->dataGridViewTextBoxColumn482->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn482->Name = L"dataGridViewTextBoxColumn482";
			this->dataGridViewTextBoxColumn482->ReadOnly = true;
			this->dataGridViewTextBoxColumn482->Width = 6;
			// 
			// dataGridViewTextBoxColumn483
			// 
			this->dataGridViewTextBoxColumn483->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn483->Name = L"dataGridViewTextBoxColumn483";
			this->dataGridViewTextBoxColumn483->ReadOnly = true;
			this->dataGridViewTextBoxColumn483->Width = 6;
			// 
			// dataGridViewTextBoxColumn484
			// 
			this->dataGridViewTextBoxColumn484->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn484->Name = L"dataGridViewTextBoxColumn484";
			this->dataGridViewTextBoxColumn484->ReadOnly = true;
			this->dataGridViewTextBoxColumn484->Width = 6;
			// 
			// dataGridViewTextBoxColumn485
			// 
			this->dataGridViewTextBoxColumn485->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn485->Name = L"dataGridViewTextBoxColumn485";
			this->dataGridViewTextBoxColumn485->ReadOnly = true;
			this->dataGridViewTextBoxColumn485->Width = 6;
			// 
			// dataGridViewTextBoxColumn486
			// 
			this->dataGridViewTextBoxColumn486->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn486->Name = L"dataGridViewTextBoxColumn486";
			this->dataGridViewTextBoxColumn486->ReadOnly = true;
			this->dataGridViewTextBoxColumn486->Width = 6;
			// 
			// dataGridViewTextBoxColumn487
			// 
			this->dataGridViewTextBoxColumn487->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn487->Name = L"dataGridViewTextBoxColumn487";
			this->dataGridViewTextBoxColumn487->ReadOnly = true;
			this->dataGridViewTextBoxColumn487->Width = 6;
			// 
			// dataGridViewTextBoxColumn488
			// 
			this->dataGridViewTextBoxColumn488->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn488->Name = L"dataGridViewTextBoxColumn488";
			this->dataGridViewTextBoxColumn488->ReadOnly = true;
			this->dataGridViewTextBoxColumn488->Width = 6;
			// 
			// dataGridViewTextBoxColumn489
			// 
			this->dataGridViewTextBoxColumn489->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn489->Name = L"dataGridViewTextBoxColumn489";
			this->dataGridViewTextBoxColumn489->ReadOnly = true;
			this->dataGridViewTextBoxColumn489->Width = 6;
			// 
			// dataGridViewTextBoxColumn490
			// 
			this->dataGridViewTextBoxColumn490->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn490->Name = L"dataGridViewTextBoxColumn490";
			this->dataGridViewTextBoxColumn490->ReadOnly = true;
			this->dataGridViewTextBoxColumn490->Width = 6;
			// 
			// dataGridViewTextBoxColumn491
			// 
			this->dataGridViewTextBoxColumn491->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn491->Name = L"dataGridViewTextBoxColumn491";
			this->dataGridViewTextBoxColumn491->ReadOnly = true;
			this->dataGridViewTextBoxColumn491->Width = 6;
			// 
			// dataGridViewTextBoxColumn492
			// 
			this->dataGridViewTextBoxColumn492->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn492->Name = L"dataGridViewTextBoxColumn492";
			this->dataGridViewTextBoxColumn492->ReadOnly = true;
			this->dataGridViewTextBoxColumn492->Width = 6;
			// 
			// dataGridViewTextBoxColumn493
			// 
			this->dataGridViewTextBoxColumn493->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn493->Name = L"dataGridViewTextBoxColumn493";
			this->dataGridViewTextBoxColumn493->ReadOnly = true;
			this->dataGridViewTextBoxColumn493->Width = 6;
			// 
			// dataGridViewTextBoxColumn494
			// 
			this->dataGridViewTextBoxColumn494->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn494->Name = L"dataGridViewTextBoxColumn494";
			this->dataGridViewTextBoxColumn494->ReadOnly = true;
			this->dataGridViewTextBoxColumn494->Width = 6;
			// 
			// dataGridViewTextBoxColumn495
			// 
			this->dataGridViewTextBoxColumn495->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn495->Name = L"dataGridViewTextBoxColumn495";
			this->dataGridViewTextBoxColumn495->ReadOnly = true;
			this->dataGridViewTextBoxColumn495->Width = 6;
			// 
			// dataGridViewTextBoxColumn496
			// 
			this->dataGridViewTextBoxColumn496->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn496->Name = L"dataGridViewTextBoxColumn496";
			this->dataGridViewTextBoxColumn496->ReadOnly = true;
			this->dataGridViewTextBoxColumn496->Width = 6;
			// 
			// dataGridViewTextBoxColumn497
			// 
			this->dataGridViewTextBoxColumn497->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn497->Name = L"dataGridViewTextBoxColumn497";
			this->dataGridViewTextBoxColumn497->ReadOnly = true;
			this->dataGridViewTextBoxColumn497->Width = 6;
			// 
			// dataGridViewTextBoxColumn498
			// 
			this->dataGridViewTextBoxColumn498->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn498->Name = L"dataGridViewTextBoxColumn498";
			this->dataGridViewTextBoxColumn498->ReadOnly = true;
			this->dataGridViewTextBoxColumn498->Width = 6;
			// 
			// dataGridViewTextBoxColumn499
			// 
			this->dataGridViewTextBoxColumn499->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn499->Name = L"dataGridViewTextBoxColumn499";
			this->dataGridViewTextBoxColumn499->ReadOnly = true;
			this->dataGridViewTextBoxColumn499->Width = 6;
			// 
			// dataGridViewTextBoxColumn500
			// 
			this->dataGridViewTextBoxColumn500->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn500->Name = L"dataGridViewTextBoxColumn500";
			this->dataGridViewTextBoxColumn500->ReadOnly = true;
			this->dataGridViewTextBoxColumn500->Width = 6;
			// 
			// dataGridViewTextBoxColumn501
			// 
			this->dataGridViewTextBoxColumn501->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn501->Name = L"dataGridViewTextBoxColumn501";
			this->dataGridViewTextBoxColumn501->ReadOnly = true;
			this->dataGridViewTextBoxColumn501->Width = 6;
			// 
			// dataGridViewTextBoxColumn502
			// 
			this->dataGridViewTextBoxColumn502->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn502->Name = L"dataGridViewTextBoxColumn502";
			this->dataGridViewTextBoxColumn502->ReadOnly = true;
			this->dataGridViewTextBoxColumn502->Width = 6;
			// 
			// dataGridViewTextBoxColumn503
			// 
			this->dataGridViewTextBoxColumn503->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn503->Name = L"dataGridViewTextBoxColumn503";
			this->dataGridViewTextBoxColumn503->ReadOnly = true;
			this->dataGridViewTextBoxColumn503->Width = 6;
			// 
			// dataGridViewTextBoxColumn504
			// 
			this->dataGridViewTextBoxColumn504->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn504->Name = L"dataGridViewTextBoxColumn504";
			this->dataGridViewTextBoxColumn504->ReadOnly = true;
			this->dataGridViewTextBoxColumn504->Width = 6;
			// 
			// dataGridViewTextBoxColumn505
			// 
			this->dataGridViewTextBoxColumn505->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn505->Name = L"dataGridViewTextBoxColumn505";
			this->dataGridViewTextBoxColumn505->ReadOnly = true;
			this->dataGridViewTextBoxColumn505->Width = 6;
			// 
			// dataGridViewTextBoxColumn506
			// 
			this->dataGridViewTextBoxColumn506->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn506->Name = L"dataGridViewTextBoxColumn506";
			this->dataGridViewTextBoxColumn506->ReadOnly = true;
			this->dataGridViewTextBoxColumn506->Width = 6;
			// 
			// dataGridViewTextBoxColumn507
			// 
			this->dataGridViewTextBoxColumn507->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn507->Name = L"dataGridViewTextBoxColumn507";
			this->dataGridViewTextBoxColumn507->ReadOnly = true;
			this->dataGridViewTextBoxColumn507->Width = 6;
			// 
			// dataGridViewTextBoxColumn508
			// 
			this->dataGridViewTextBoxColumn508->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn508->Name = L"dataGridViewTextBoxColumn508";
			this->dataGridViewTextBoxColumn508->ReadOnly = true;
			this->dataGridViewTextBoxColumn508->Width = 6;
			// 
			// dataGridViewTextBoxColumn509
			// 
			this->dataGridViewTextBoxColumn509->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn509->Name = L"dataGridViewTextBoxColumn509";
			this->dataGridViewTextBoxColumn509->ReadOnly = true;
			this->dataGridViewTextBoxColumn509->Width = 6;
			// 
			// dataGridViewTextBoxColumn510
			// 
			this->dataGridViewTextBoxColumn510->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn510->Name = L"dataGridViewTextBoxColumn510";
			this->dataGridViewTextBoxColumn510->ReadOnly = true;
			this->dataGridViewTextBoxColumn510->Width = 6;
			// 
			// dataGridViewTextBoxColumn511
			// 
			this->dataGridViewTextBoxColumn511->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn511->Name = L"dataGridViewTextBoxColumn511";
			this->dataGridViewTextBoxColumn511->ReadOnly = true;
			this->dataGridViewTextBoxColumn511->Width = 6;
			// 
			// dataGridViewTextBoxColumn512
			// 
			this->dataGridViewTextBoxColumn512->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn512->Name = L"dataGridViewTextBoxColumn512";
			this->dataGridViewTextBoxColumn512->ReadOnly = true;
			this->dataGridViewTextBoxColumn512->Width = 6;
			// 
			// textBox41
			// 
			this->textBox41->Location = System::Drawing::Point(75, 472);
			this->textBox41->Margin = System::Windows::Forms::Padding(2);
			this->textBox41->Name = L"textBox41";
			this->textBox41->Size = System::Drawing::Size(349, 20);
			this->textBox41->TabIndex = 42;
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->Location = System::Drawing::Point(36, 475);
			this->label2->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(29, 13);
			this->label2->TabIndex = 41;
			this->label2->Text = L"DEC";
			// 
			// label10
			// 
			this->label10->AutoSize = true;
			this->label10->Location = System::Drawing::Point(74, 501);
			this->label10->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label10->Name = L"label10";
			this->label10->Size = System::Drawing::Size(78, 13);
			this->label10->TabIndex = 40;
			this->label10->Text = L"Voxel Pos (Val)";
			// 
			// textBox5
			// 
			this->textBox5->Location = System::Drawing::Point(77, 516);
			this->textBox5->Margin = System::Windows::Forms::Padding(2);
			this->textBox5->Name = L"textBox5";
			this->textBox5->Size = System::Drawing::Size(76, 20);
			this->textBox5->TabIndex = 39;
			// 
			// label8
			// 
			this->label8->AutoSize = true;
			this->label8->Location = System::Drawing::Point(318, 501);
			this->label8->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label8->Name = L"label8";
			this->label8->Size = System::Drawing::Size(35, 13);
			this->label8->TabIndex = 38;
			this->label8->Text = L"Pos Y";
			// 
			// label7
			// 
			this->label7->AutoSize = true;
			this->label7->Location = System::Drawing::Point(227, 501);
			this->label7->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label7->Name = L"label7";
			this->label7->Size = System::Drawing::Size(35, 13);
			this->label7->TabIndex = 37;
			this->label7->Text = L"Pos X";
			// 
			// textBox4
			// 
			this->textBox4->Location = System::Drawing::Point(321, 516);
			this->textBox4->Margin = System::Windows::Forms::Padding(2);
			this->textBox4->Name = L"textBox4";
			this->textBox4->Size = System::Drawing::Size(76, 20);
			this->textBox4->TabIndex = 36;
			// 
			// textBox3
			// 
			this->textBox3->Location = System::Drawing::Point(230, 516);
			this->textBox3->Margin = System::Windows::Forms::Padding(2);
			this->textBox3->Name = L"textBox3";
			this->textBox3->Size = System::Drawing::Size(76, 20);
			this->textBox3->TabIndex = 35;
			// 
			// textBox2
			// 
			this->textBox2->Location = System::Drawing::Point(75, 448);
			this->textBox2->Margin = System::Windows::Forms::Padding(2);
			this->textBox2->MaxLength = 16;
			this->textBox2->Name = L"textBox2";
			this->textBox2->Size = System::Drawing::Size(349, 20);
			this->textBox2->TabIndex = 34;
			// 
			// label6
			// 
			this->label6->AutoSize = true;
			this->label6->Location = System::Drawing::Point(30, 452);
			this->label6->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label6->Name = L"label6";
			this->label6->Size = System::Drawing::Size(43, 13);
			this->label6->TabIndex = 33;
			this->label6->Text = L"HEX 0x";
			// 
			// textBox1
			// 
			this->textBox1->Location = System::Drawing::Point(75, 425);
			this->textBox1->Margin = System::Windows::Forms::Padding(2);
			this->textBox1->MaxLength = 64;
			this->textBox1->Name = L"textBox1";
			this->textBox1->Size = System::Drawing::Size(397, 20);
			this->textBox1->TabIndex = 32;
			// 
			// label5
			// 
			this->label5->AutoSize = true;
			this->label5->Location = System::Drawing::Point(44, 430);
			this->label5->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label5->Name = L"label5";
			this->label5->Size = System::Drawing::Size(27, 13);
			this->label5->TabIndex = 30;
			this->label5->Text = L"Bits:";
			// 
			// label15
			// 
			this->label15->AutoSize = true;
			this->label15->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label15->Location = System::Drawing::Point(34, 403);
			this->label15->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label15->Name = L"label15";
			this->label15->Size = System::Drawing::Size(21, 13);
			this->label15->TabIndex = 27;
			this->label15->Text = L"__";
			// 
			// label16
			// 
			this->label16->AutoSize = true;
			this->label16->Location = System::Drawing::Point(18, 402);
			this->label16->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label16->Name = L"label16";
			this->label16->Size = System::Drawing::Size(20, 13);
			this->label16->TabIndex = 26;
			this->label16->Text = L"Y=";
			// 
			// label14
			// 
			this->label14->AutoSize = true;
			this->label14->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label14->Location = System::Drawing::Point(34, 373);
			this->label14->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label14->Name = L"label14";
			this->label14->Size = System::Drawing::Size(21, 13);
			this->label14->TabIndex = 25;
			this->label14->Text = L"__";
			// 
			// label13
			// 
			this->label13->AutoSize = true;
			this->label13->Location = System::Drawing::Point(18, 373);
			this->label13->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label13->Name = L"label13";
			this->label13->Size = System::Drawing::Size(20, 13);
			this->label13->TabIndex = 24;
			this->label13->Text = L"X=";
			// 
			// dataGridView1
			// 
			this->dataGridView1->AllowDrop = true;
			this->dataGridView1->AllowUserToAddRows = false;
			this->dataGridView1->AllowUserToDeleteRows = false;
			this->dataGridView1->AllowUserToResizeColumns = false;
			this->dataGridView1->AllowUserToResizeRows = false;
			this->dataGridView1->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView1->ColumnHeadersVisible = false;
			this->dataGridView1->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->Column1, 
				this->Column2, this->Column3, this->Column4, this->Column5, this->Column6, this->Column7, this->Column8, this->Column9, this->Column10, 
				this->Column11, this->Column12, this->Column13, this->Column14, this->Column15, this->Column16, this->Column17, this->Column18, 
				this->Column19, this->Column20, this->Column21, this->Column22, this->Column23, this->Column24, this->Column25, this->Column26, 
				this->Column27, this->Column28, this->Column29, this->Column30, this->Column31, this->Column32, this->Column33, this->Column34, 
				this->Column35, this->Column36, this->Column37, this->Column38, this->Column39, this->Column40, this->Column41, this->Column42, 
				this->Column43, this->Column44, this->Column45, this->Column46, this->Column47, this->Column48, this->Column49, this->Column50, 
				this->Column51, this->Column52, this->Column53, this->Column54, this->Column55, this->Column56, this->Column57, this->Column58, 
				this->Column59, this->Column60, this->Column61, this->Column62, this->Column63, this->Column64});
			this->dataGridView1->Location = System::Drawing::Point(36, 15);
			this->dataGridView1->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView1->MultiSelect = false;
			this->dataGridView1->Name = L"dataGridView1";
			this->dataGridView1->ReadOnly = true;
			this->dataGridView1->RowHeadersVisible = false;
			this->dataGridView1->RowHeadersWidth = 15;
			dataGridViewCellStyle2->BackColor = System::Drawing::Color::White;
			this->dataGridView1->RowsDefaultCellStyle = dataGridViewCellStyle2;
			this->dataGridView1->RowTemplate->Height = 10;
			this->dataGridView1->Size = System::Drawing::Size(656, 338);
			this->dataGridView1->TabIndex = 23;
			this->dataGridView1->CellMouseClick += gcnew System::Windows::Forms::DataGridViewCellMouseEventHandler(this, &Form1::dataGridView1_CellMouseClick);
			this->dataGridView1->SelectionChanged += gcnew System::EventHandler(this, &Form1::dataGridView1_SelectionChanged);
			// 
			// Column1
			// 
			this->Column1->HeaderText = L"Column1";
			this->Column1->Name = L"Column1";
			this->Column1->ReadOnly = true;
			this->Column1->Width = 10;
			// 
			// Column2
			// 
			this->Column2->HeaderText = L"Column2";
			this->Column2->Name = L"Column2";
			this->Column2->ReadOnly = true;
			this->Column2->Width = 10;
			// 
			// Column3
			// 
			this->Column3->HeaderText = L"Column3";
			this->Column3->Name = L"Column3";
			this->Column3->ReadOnly = true;
			this->Column3->Width = 10;
			// 
			// Column4
			// 
			this->Column4->HeaderText = L"Column4";
			this->Column4->Name = L"Column4";
			this->Column4->ReadOnly = true;
			this->Column4->Width = 10;
			// 
			// Column5
			// 
			this->Column5->HeaderText = L"Column5";
			this->Column5->Name = L"Column5";
			this->Column5->ReadOnly = true;
			this->Column5->Width = 10;
			// 
			// Column6
			// 
			this->Column6->HeaderText = L"Column6";
			this->Column6->Name = L"Column6";
			this->Column6->ReadOnly = true;
			this->Column6->Width = 10;
			// 
			// Column7
			// 
			this->Column7->HeaderText = L"Column7";
			this->Column7->Name = L"Column7";
			this->Column7->ReadOnly = true;
			this->Column7->Width = 10;
			// 
			// Column8
			// 
			this->Column8->HeaderText = L"Column8";
			this->Column8->Name = L"Column8";
			this->Column8->ReadOnly = true;
			this->Column8->Width = 10;
			// 
			// Column9
			// 
			this->Column9->HeaderText = L"Column9";
			this->Column9->Name = L"Column9";
			this->Column9->ReadOnly = true;
			this->Column9->Width = 10;
			// 
			// Column10
			// 
			this->Column10->HeaderText = L"Column10";
			this->Column10->Name = L"Column10";
			this->Column10->ReadOnly = true;
			this->Column10->Width = 10;
			// 
			// Column11
			// 
			this->Column11->HeaderText = L"Column11";
			this->Column11->Name = L"Column11";
			this->Column11->ReadOnly = true;
			this->Column11->Width = 10;
			// 
			// Column12
			// 
			this->Column12->HeaderText = L"Column12";
			this->Column12->Name = L"Column12";
			this->Column12->ReadOnly = true;
			this->Column12->Width = 10;
			// 
			// Column13
			// 
			this->Column13->HeaderText = L"Column13";
			this->Column13->Name = L"Column13";
			this->Column13->ReadOnly = true;
			this->Column13->Width = 10;
			// 
			// Column14
			// 
			this->Column14->HeaderText = L"Column14";
			this->Column14->Name = L"Column14";
			this->Column14->ReadOnly = true;
			this->Column14->Width = 10;
			// 
			// Column15
			// 
			this->Column15->HeaderText = L"Column15";
			this->Column15->Name = L"Column15";
			this->Column15->ReadOnly = true;
			this->Column15->Width = 10;
			// 
			// Column16
			// 
			this->Column16->HeaderText = L"Column16";
			this->Column16->Name = L"Column16";
			this->Column16->ReadOnly = true;
			this->Column16->Width = 10;
			// 
			// Column17
			// 
			this->Column17->HeaderText = L"Column17";
			this->Column17->Name = L"Column17";
			this->Column17->ReadOnly = true;
			this->Column17->Width = 10;
			// 
			// Column18
			// 
			this->Column18->HeaderText = L"Column18";
			this->Column18->Name = L"Column18";
			this->Column18->ReadOnly = true;
			this->Column18->Width = 10;
			// 
			// Column19
			// 
			this->Column19->HeaderText = L"Column19";
			this->Column19->Name = L"Column19";
			this->Column19->ReadOnly = true;
			this->Column19->Width = 10;
			// 
			// Column20
			// 
			this->Column20->HeaderText = L"Column20";
			this->Column20->Name = L"Column20";
			this->Column20->ReadOnly = true;
			this->Column20->Width = 10;
			// 
			// Column21
			// 
			this->Column21->HeaderText = L"Column21";
			this->Column21->Name = L"Column21";
			this->Column21->ReadOnly = true;
			this->Column21->Width = 10;
			// 
			// Column22
			// 
			this->Column22->HeaderText = L"Column22";
			this->Column22->Name = L"Column22";
			this->Column22->ReadOnly = true;
			this->Column22->Width = 10;
			// 
			// Column23
			// 
			this->Column23->HeaderText = L"Column23";
			this->Column23->Name = L"Column23";
			this->Column23->ReadOnly = true;
			this->Column23->Width = 10;
			// 
			// Column24
			// 
			this->Column24->HeaderText = L"Column24";
			this->Column24->Name = L"Column24";
			this->Column24->ReadOnly = true;
			this->Column24->Width = 10;
			// 
			// Column25
			// 
			this->Column25->HeaderText = L"Column25";
			this->Column25->Name = L"Column25";
			this->Column25->ReadOnly = true;
			this->Column25->Width = 10;
			// 
			// Column26
			// 
			this->Column26->HeaderText = L"Column26";
			this->Column26->Name = L"Column26";
			this->Column26->ReadOnly = true;
			this->Column26->Width = 10;
			// 
			// Column27
			// 
			this->Column27->HeaderText = L"Column27";
			this->Column27->Name = L"Column27";
			this->Column27->ReadOnly = true;
			this->Column27->Width = 10;
			// 
			// Column28
			// 
			this->Column28->HeaderText = L"Column28";
			this->Column28->Name = L"Column28";
			this->Column28->ReadOnly = true;
			this->Column28->Width = 10;
			// 
			// Column29
			// 
			this->Column29->HeaderText = L"Column29";
			this->Column29->Name = L"Column29";
			this->Column29->ReadOnly = true;
			this->Column29->Width = 10;
			// 
			// Column30
			// 
			this->Column30->HeaderText = L"Column30";
			this->Column30->Name = L"Column30";
			this->Column30->ReadOnly = true;
			this->Column30->Width = 10;
			// 
			// Column31
			// 
			this->Column31->HeaderText = L"Column31";
			this->Column31->Name = L"Column31";
			this->Column31->ReadOnly = true;
			this->Column31->Width = 10;
			// 
			// Column32
			// 
			this->Column32->HeaderText = L"Column32";
			this->Column32->Name = L"Column32";
			this->Column32->ReadOnly = true;
			this->Column32->Width = 10;
			// 
			// Column33
			// 
			this->Column33->HeaderText = L"Column33";
			this->Column33->Name = L"Column33";
			this->Column33->ReadOnly = true;
			this->Column33->Width = 10;
			// 
			// Column34
			// 
			this->Column34->HeaderText = L"Column34";
			this->Column34->Name = L"Column34";
			this->Column34->ReadOnly = true;
			this->Column34->Width = 10;
			// 
			// Column35
			// 
			this->Column35->HeaderText = L"Column35";
			this->Column35->Name = L"Column35";
			this->Column35->ReadOnly = true;
			this->Column35->Width = 10;
			// 
			// Column36
			// 
			this->Column36->HeaderText = L"Column36";
			this->Column36->Name = L"Column36";
			this->Column36->ReadOnly = true;
			this->Column36->Width = 10;
			// 
			// Column37
			// 
			this->Column37->HeaderText = L"Column37";
			this->Column37->Name = L"Column37";
			this->Column37->ReadOnly = true;
			this->Column37->Width = 10;
			// 
			// Column38
			// 
			this->Column38->HeaderText = L"Column38";
			this->Column38->Name = L"Column38";
			this->Column38->ReadOnly = true;
			this->Column38->Width = 10;
			// 
			// Column39
			// 
			this->Column39->HeaderText = L"Column39";
			this->Column39->Name = L"Column39";
			this->Column39->ReadOnly = true;
			this->Column39->Width = 10;
			// 
			// Column40
			// 
			this->Column40->HeaderText = L"Column40";
			this->Column40->Name = L"Column40";
			this->Column40->ReadOnly = true;
			this->Column40->Width = 10;
			// 
			// Column41
			// 
			this->Column41->HeaderText = L"Column41";
			this->Column41->Name = L"Column41";
			this->Column41->ReadOnly = true;
			this->Column41->Width = 10;
			// 
			// Column42
			// 
			this->Column42->HeaderText = L"Column42";
			this->Column42->Name = L"Column42";
			this->Column42->ReadOnly = true;
			this->Column42->Width = 10;
			// 
			// Column43
			// 
			this->Column43->HeaderText = L"Column43";
			this->Column43->Name = L"Column43";
			this->Column43->ReadOnly = true;
			this->Column43->Width = 10;
			// 
			// Column44
			// 
			this->Column44->HeaderText = L"Column44";
			this->Column44->Name = L"Column44";
			this->Column44->ReadOnly = true;
			this->Column44->Width = 10;
			// 
			// Column45
			// 
			this->Column45->HeaderText = L"Column45";
			this->Column45->Name = L"Column45";
			this->Column45->ReadOnly = true;
			this->Column45->Width = 10;
			// 
			// Column46
			// 
			this->Column46->HeaderText = L"Column46";
			this->Column46->Name = L"Column46";
			this->Column46->ReadOnly = true;
			this->Column46->Width = 10;
			// 
			// Column47
			// 
			this->Column47->HeaderText = L"Column47";
			this->Column47->Name = L"Column47";
			this->Column47->ReadOnly = true;
			this->Column47->Width = 10;
			// 
			// Column48
			// 
			this->Column48->HeaderText = L"Column48";
			this->Column48->Name = L"Column48";
			this->Column48->ReadOnly = true;
			this->Column48->Width = 10;
			// 
			// Column49
			// 
			this->Column49->HeaderText = L"Column49";
			this->Column49->Name = L"Column49";
			this->Column49->ReadOnly = true;
			this->Column49->Width = 10;
			// 
			// Column50
			// 
			this->Column50->HeaderText = L"Column50";
			this->Column50->Name = L"Column50";
			this->Column50->ReadOnly = true;
			this->Column50->Width = 10;
			// 
			// Column51
			// 
			this->Column51->HeaderText = L"Column51";
			this->Column51->Name = L"Column51";
			this->Column51->ReadOnly = true;
			this->Column51->Width = 10;
			// 
			// Column52
			// 
			this->Column52->HeaderText = L"Column52";
			this->Column52->Name = L"Column52";
			this->Column52->ReadOnly = true;
			this->Column52->Width = 10;
			// 
			// Column53
			// 
			this->Column53->HeaderText = L"Column53";
			this->Column53->Name = L"Column53";
			this->Column53->ReadOnly = true;
			this->Column53->Width = 10;
			// 
			// Column54
			// 
			this->Column54->HeaderText = L"Column54";
			this->Column54->Name = L"Column54";
			this->Column54->ReadOnly = true;
			this->Column54->Width = 10;
			// 
			// Column55
			// 
			this->Column55->HeaderText = L"Column55";
			this->Column55->Name = L"Column55";
			this->Column55->ReadOnly = true;
			this->Column55->Width = 10;
			// 
			// Column56
			// 
			this->Column56->HeaderText = L"Column56";
			this->Column56->Name = L"Column56";
			this->Column56->ReadOnly = true;
			this->Column56->Width = 10;
			// 
			// Column57
			// 
			this->Column57->HeaderText = L"Column57";
			this->Column57->Name = L"Column57";
			this->Column57->ReadOnly = true;
			this->Column57->Width = 10;
			// 
			// Column58
			// 
			this->Column58->HeaderText = L"Column58";
			this->Column58->Name = L"Column58";
			this->Column58->ReadOnly = true;
			this->Column58->Width = 10;
			// 
			// Column59
			// 
			this->Column59->HeaderText = L"Column59";
			this->Column59->Name = L"Column59";
			this->Column59->ReadOnly = true;
			this->Column59->Width = 10;
			// 
			// Column60
			// 
			this->Column60->HeaderText = L"Column60";
			this->Column60->Name = L"Column60";
			this->Column60->ReadOnly = true;
			this->Column60->Width = 10;
			// 
			// Column61
			// 
			this->Column61->HeaderText = L"Column61";
			this->Column61->Name = L"Column61";
			this->Column61->ReadOnly = true;
			this->Column61->Width = 10;
			// 
			// Column62
			// 
			this->Column62->HeaderText = L"Column62";
			this->Column62->Name = L"Column62";
			this->Column62->ReadOnly = true;
			this->Column62->Width = 10;
			// 
			// Column63
			// 
			this->Column63->HeaderText = L"Column63";
			this->Column63->Name = L"Column63";
			this->Column63->ReadOnly = true;
			this->Column63->Width = 10;
			// 
			// Column64
			// 
			this->Column64->HeaderText = L"Column64";
			this->Column64->Name = L"Column64";
			this->Column64->ReadOnly = true;
			this->Column64->Width = 10;
			// 
			// tabPage2
			// 
			this->tabPage2->Controls->Add(this->checkBox10);
			this->tabPage2->Controls->Add(this->checkBox3);
			this->tabPage2->Controls->Add(this->button25);
			this->tabPage2->Controls->Add(this->label163);
			this->tabPage2->Controls->Add(this->textBox45);
			this->tabPage2->Controls->Add(this->label142);
			this->tabPage2->Controls->Add(this->button8);
			this->tabPage2->Controls->Add(this->label143);
			this->tabPage2->Controls->Add(this->button9);
			this->tabPage2->Controls->Add(this->label90);
			this->tabPage2->Controls->Add(this->label91);
			this->tabPage2->Controls->Add(this->label92);
			this->tabPage2->Controls->Add(this->label93);
			this->tabPage2->Controls->Add(this->label94);
			this->tabPage2->Controls->Add(this->label95);
			this->tabPage2->Controls->Add(this->label96);
			this->tabPage2->Controls->Add(this->dataGridView11);
			this->tabPage2->Controls->Add(this->label23);
			this->tabPage2->Controls->Add(this->label24);
			this->tabPage2->Controls->Add(this->label25);
			this->tabPage2->Controls->Add(this->label26);
			this->tabPage2->Controls->Add(this->label27);
			this->tabPage2->Controls->Add(this->label28);
			this->tabPage2->Controls->Add(this->label29);
			this->tabPage2->Controls->Add(this->label18);
			this->tabPage2->Controls->Add(this->label17);
			this->tabPage2->Controls->Add(this->textBox10);
			this->tabPage2->Controls->Add(this->textBox9);
			this->tabPage2->Controls->Add(this->textBox8);
			this->tabPage2->Controls->Add(this->textBox7);
			this->tabPage2->Controls->Add(this->textBox6);
			this->tabPage2->Controls->Add(this->dataGridView2);
			this->tabPage2->Location = System::Drawing::Point(4, 22);
			this->tabPage2->Margin = System::Windows::Forms::Padding(2);
			this->tabPage2->Name = L"tabPage2";
			this->tabPage2->Padding = System::Windows::Forms::Padding(2);
			this->tabPage2->Size = System::Drawing::Size(698, 555);
			this->tabPage2->TabIndex = 1;
			this->tabPage2->Text = L"Floor 1";
			this->tabPage2->UseVisualStyleBackColor = true;
			// 
			// checkBox10
			// 
			this->checkBox10->AutoSize = true;
			this->checkBox10->Location = System::Drawing::Point(560, 496);
			this->checkBox10->Name = L"checkBox10";
			this->checkBox10->Size = System::Drawing::Size(96, 17);
			this->checkBox10->TabIndex = 89;
			this->checkBox10->Text = L"Show teleports";
			this->checkBox10->UseVisualStyleBackColor = true;
			this->checkBox10->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox10_CheckedChanged);
			// 
			// checkBox3
			// 
			this->checkBox3->AutoSize = true;
			this->checkBox3->Location = System::Drawing::Point(560, 475);
			this->checkBox3->Name = L"checkBox3";
			this->checkBox3->Size = System::Drawing::Size(136, 17);
			this->checkBox3->TabIndex = 88;
			this->checkBox3->Text = L"Show cubes with doors";
			this->checkBox3->UseVisualStyleBackColor = true;
			this->checkBox3->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox3_CheckedChanged);
			// 
			// button25
			// 
			this->button25->Enabled = false;
			this->button25->Location = System::Drawing::Point(610, 390);
			this->button25->Name = L"button25";
			this->button25->Size = System::Drawing::Size(32, 20);
			this->button25->TabIndex = 72;
			this->button25->Text = L"OK";
			this->button25->UseVisualStyleBackColor = true;
			this->button25->Click += gcnew System::EventHandler(this, &Form1::button25_Click);
			// 
			// label163
			// 
			this->label163->AutoSize = true;
			this->label163->Location = System::Drawing::Point(533, 373);
			this->label163->Name = L"label163";
			this->label163->Size = System::Drawing::Size(69, 13);
			this->label163->TabIndex = 71;
			this->label163->Text = L"Cube N (hex)";
			// 
			// textBox45
			// 
			this->textBox45->Location = System::Drawing::Point(533, 390);
			this->textBox45->MaxLength = 3;
			this->textBox45->Name = L"textBox45";
			this->textBox45->Size = System::Drawing::Size(70, 20);
			this->textBox45->TabIndex = 70;
			// 
			// label142
			// 
			this->label142->AutoSize = true;
			this->label142->Location = System::Drawing::Point(556, 434);
			this->label142->Name = L"label142";
			this->label142->Size = System::Drawing::Size(47, 13);
			this->label142->TabIndex = 63;
			this->label142->Text = L"label142";
			// 
			// button8
			// 
			this->button8->Location = System::Drawing::Point(475, 424);
			this->button8->Name = L"button8";
			this->button8->Size = System::Drawing::Size(75, 23);
			this->button8->TabIndex = 62;
			this->button8->Text = L"Edit value";
			this->button8->UseVisualStyleBackColor = true;
			this->button8->Click += gcnew System::EventHandler(this, &Form1::button8_Click);
			// 
			// label143
			// 
			this->label143->AutoSize = true;
			this->label143->Location = System::Drawing::Point(503, 458);
			this->label143->Name = L"label143";
			this->label143->Size = System::Drawing::Size(47, 13);
			this->label143->TabIndex = 61;
			this->label143->Text = L"label143";
			// 
			// button9
			// 
			this->button9->Location = System::Drawing::Point(428, 448);
			this->button9->Name = L"button9";
			this->button9->Size = System::Drawing::Size(75, 23);
			this->button9->TabIndex = 60;
			this->button9->Text = L"Edit value";
			this->button9->UseVisualStyleBackColor = true;
			this->button9->Click += gcnew System::EventHandler(this, &Form1::button9_Click);
			// 
			// label90
			// 
			this->label90->AutoSize = true;
			this->label90->Location = System::Drawing::Point(436, 369);
			this->label90->Name = L"label90";
			this->label90->Size = System::Drawing::Size(31, 13);
			this->label90->TabIndex = 59;
			this->label90->Text = L"0123";
			// 
			// label91
			// 
			this->label91->AutoSize = true;
			this->label91->Location = System::Drawing::Point(376, 356);
			this->label91->Name = L"label91";
			this->label91->Size = System::Drawing::Size(67, 13);
			this->label91->TabIndex = 58;
			this->label91->Text = L"0123456789";
			// 
			// label92
			// 
			this->label92->AutoSize = true;
			this->label92->Location = System::Drawing::Point(316, 369);
			this->label92->Name = L"label92";
			this->label92->Size = System::Drawing::Size(67, 13);
			this->label92->TabIndex = 57;
			this->label92->Text = L"0123456789";
			// 
			// label93
			// 
			this->label93->AutoSize = true;
			this->label93->Location = System::Drawing::Point(256, 356);
			this->label93->Name = L"label93";
			this->label93->Size = System::Drawing::Size(67, 13);
			this->label93->TabIndex = 56;
			this->label93->Text = L"0123456789";
			// 
			// label94
			// 
			this->label94->AutoSize = true;
			this->label94->Location = System::Drawing::Point(197, 367);
			this->label94->Name = L"label94";
			this->label94->Size = System::Drawing::Size(67, 13);
			this->label94->TabIndex = 55;
			this->label94->Text = L"0123456789";
			// 
			// label95
			// 
			this->label95->AutoSize = true;
			this->label95->Location = System::Drawing::Point(135, 356);
			this->label95->Name = L"label95";
			this->label95->Size = System::Drawing::Size(67, 13);
			this->label95->TabIndex = 54;
			this->label95->Text = L"0123456789";
			// 
			// label96
			// 
			this->label96->AutoSize = true;
			this->label96->Location = System::Drawing::Point(75, 367);
			this->label96->Name = L"label96";
			this->label96->Size = System::Drawing::Size(67, 13);
			this->label96->TabIndex = 53;
			this->label96->Text = L"0123456789";
			// 
			// dataGridView11
			// 
			this->dataGridView11->AllowDrop = true;
			this->dataGridView11->AllowUserToAddRows = false;
			this->dataGridView11->AllowUserToDeleteRows = false;
			this->dataGridView11->AllowUserToResizeColumns = false;
			this->dataGridView11->AllowUserToResizeRows = false;
			this->dataGridView11->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView11->ColumnHeadersVisible = false;
			this->dataGridView11->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn513, 
				this->dataGridViewTextBoxColumn514, this->dataGridViewTextBoxColumn515, this->dataGridViewTextBoxColumn516, this->dataGridViewTextBoxColumn517, 
				this->dataGridViewTextBoxColumn518, this->dataGridViewTextBoxColumn519, this->dataGridViewTextBoxColumn520, this->dataGridViewTextBoxColumn521, 
				this->dataGridViewTextBoxColumn522, this->dataGridViewTextBoxColumn523, this->dataGridViewTextBoxColumn524, this->dataGridViewTextBoxColumn525, 
				this->dataGridViewTextBoxColumn526, this->dataGridViewTextBoxColumn527, this->dataGridViewTextBoxColumn528, this->dataGridViewTextBoxColumn529, 
				this->dataGridViewTextBoxColumn530, this->dataGridViewTextBoxColumn531, this->dataGridViewTextBoxColumn532, this->dataGridViewTextBoxColumn533, 
				this->dataGridViewTextBoxColumn534, this->dataGridViewTextBoxColumn535, this->dataGridViewTextBoxColumn536, this->dataGridViewTextBoxColumn537, 
				this->dataGridViewTextBoxColumn538, this->dataGridViewTextBoxColumn539, this->dataGridViewTextBoxColumn540, this->dataGridViewTextBoxColumn541, 
				this->dataGridViewTextBoxColumn542, this->dataGridViewTextBoxColumn543, this->dataGridViewTextBoxColumn544, this->dataGridViewTextBoxColumn545, 
				this->dataGridViewTextBoxColumn546, this->dataGridViewTextBoxColumn547, this->dataGridViewTextBoxColumn548, this->dataGridViewTextBoxColumn549, 
				this->dataGridViewTextBoxColumn550, this->dataGridViewTextBoxColumn551, this->dataGridViewTextBoxColumn552, this->dataGridViewTextBoxColumn553, 
				this->dataGridViewTextBoxColumn554, this->dataGridViewTextBoxColumn555, this->dataGridViewTextBoxColumn556, this->dataGridViewTextBoxColumn557, 
				this->dataGridViewTextBoxColumn558, this->dataGridViewTextBoxColumn559, this->dataGridViewTextBoxColumn560, this->dataGridViewTextBoxColumn561, 
				this->dataGridViewTextBoxColumn562, this->dataGridViewTextBoxColumn563, this->dataGridViewTextBoxColumn564, this->dataGridViewTextBoxColumn565, 
				this->dataGridViewTextBoxColumn566, this->dataGridViewTextBoxColumn567, this->dataGridViewTextBoxColumn568, this->dataGridViewTextBoxColumn569, 
				this->dataGridViewTextBoxColumn570, this->dataGridViewTextBoxColumn571, this->dataGridViewTextBoxColumn572, this->dataGridViewTextBoxColumn573, 
				this->dataGridViewTextBoxColumn574, this->dataGridViewTextBoxColumn575, this->dataGridViewTextBoxColumn576});
			this->dataGridView11->Location = System::Drawing::Point(77, 383);
			this->dataGridView11->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView11->Name = L"dataGridView11";
			this->dataGridView11->ReadOnly = true;
			this->dataGridView11->RowHeadersVisible = false;
			this->dataGridView11->RowHeadersWidth = 15;
			dataGridViewCellStyle3->BackColor = System::Drawing::Color::White;
			this->dataGridView11->RowsDefaultCellStyle = dataGridViewCellStyle3;
			this->dataGridView11->RowTemplate->Height = 35;
			this->dataGridView11->Size = System::Drawing::Size(390, 41);
			this->dataGridView11->TabIndex = 48;
			// 
			// dataGridViewTextBoxColumn513
			// 
			this->dataGridViewTextBoxColumn513->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn513->Name = L"dataGridViewTextBoxColumn513";
			this->dataGridViewTextBoxColumn513->ReadOnly = true;
			this->dataGridViewTextBoxColumn513->Width = 6;
			// 
			// dataGridViewTextBoxColumn514
			// 
			this->dataGridViewTextBoxColumn514->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn514->Name = L"dataGridViewTextBoxColumn514";
			this->dataGridViewTextBoxColumn514->ReadOnly = true;
			this->dataGridViewTextBoxColumn514->Width = 6;
			// 
			// dataGridViewTextBoxColumn515
			// 
			this->dataGridViewTextBoxColumn515->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn515->Name = L"dataGridViewTextBoxColumn515";
			this->dataGridViewTextBoxColumn515->ReadOnly = true;
			this->dataGridViewTextBoxColumn515->Width = 6;
			// 
			// dataGridViewTextBoxColumn516
			// 
			this->dataGridViewTextBoxColumn516->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn516->Name = L"dataGridViewTextBoxColumn516";
			this->dataGridViewTextBoxColumn516->ReadOnly = true;
			this->dataGridViewTextBoxColumn516->Width = 6;
			// 
			// dataGridViewTextBoxColumn517
			// 
			this->dataGridViewTextBoxColumn517->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn517->Name = L"dataGridViewTextBoxColumn517";
			this->dataGridViewTextBoxColumn517->ReadOnly = true;
			this->dataGridViewTextBoxColumn517->Width = 6;
			// 
			// dataGridViewTextBoxColumn518
			// 
			this->dataGridViewTextBoxColumn518->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn518->Name = L"dataGridViewTextBoxColumn518";
			this->dataGridViewTextBoxColumn518->ReadOnly = true;
			this->dataGridViewTextBoxColumn518->Width = 6;
			// 
			// dataGridViewTextBoxColumn519
			// 
			this->dataGridViewTextBoxColumn519->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn519->Name = L"dataGridViewTextBoxColumn519";
			this->dataGridViewTextBoxColumn519->ReadOnly = true;
			this->dataGridViewTextBoxColumn519->Width = 6;
			// 
			// dataGridViewTextBoxColumn520
			// 
			this->dataGridViewTextBoxColumn520->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn520->Name = L"dataGridViewTextBoxColumn520";
			this->dataGridViewTextBoxColumn520->ReadOnly = true;
			this->dataGridViewTextBoxColumn520->Width = 6;
			// 
			// dataGridViewTextBoxColumn521
			// 
			this->dataGridViewTextBoxColumn521->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn521->Name = L"dataGridViewTextBoxColumn521";
			this->dataGridViewTextBoxColumn521->ReadOnly = true;
			this->dataGridViewTextBoxColumn521->Width = 6;
			// 
			// dataGridViewTextBoxColumn522
			// 
			this->dataGridViewTextBoxColumn522->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn522->Name = L"dataGridViewTextBoxColumn522";
			this->dataGridViewTextBoxColumn522->ReadOnly = true;
			this->dataGridViewTextBoxColumn522->Width = 6;
			// 
			// dataGridViewTextBoxColumn523
			// 
			this->dataGridViewTextBoxColumn523->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn523->Name = L"dataGridViewTextBoxColumn523";
			this->dataGridViewTextBoxColumn523->ReadOnly = true;
			this->dataGridViewTextBoxColumn523->Width = 6;
			// 
			// dataGridViewTextBoxColumn524
			// 
			this->dataGridViewTextBoxColumn524->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn524->Name = L"dataGridViewTextBoxColumn524";
			this->dataGridViewTextBoxColumn524->ReadOnly = true;
			this->dataGridViewTextBoxColumn524->Width = 6;
			// 
			// dataGridViewTextBoxColumn525
			// 
			this->dataGridViewTextBoxColumn525->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn525->Name = L"dataGridViewTextBoxColumn525";
			this->dataGridViewTextBoxColumn525->ReadOnly = true;
			this->dataGridViewTextBoxColumn525->Width = 6;
			// 
			// dataGridViewTextBoxColumn526
			// 
			this->dataGridViewTextBoxColumn526->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn526->Name = L"dataGridViewTextBoxColumn526";
			this->dataGridViewTextBoxColumn526->ReadOnly = true;
			this->dataGridViewTextBoxColumn526->Width = 6;
			// 
			// dataGridViewTextBoxColumn527
			// 
			this->dataGridViewTextBoxColumn527->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn527->Name = L"dataGridViewTextBoxColumn527";
			this->dataGridViewTextBoxColumn527->ReadOnly = true;
			this->dataGridViewTextBoxColumn527->Width = 6;
			// 
			// dataGridViewTextBoxColumn528
			// 
			this->dataGridViewTextBoxColumn528->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn528->Name = L"dataGridViewTextBoxColumn528";
			this->dataGridViewTextBoxColumn528->ReadOnly = true;
			this->dataGridViewTextBoxColumn528->Width = 6;
			// 
			// dataGridViewTextBoxColumn529
			// 
			this->dataGridViewTextBoxColumn529->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn529->Name = L"dataGridViewTextBoxColumn529";
			this->dataGridViewTextBoxColumn529->ReadOnly = true;
			this->dataGridViewTextBoxColumn529->Width = 6;
			// 
			// dataGridViewTextBoxColumn530
			// 
			this->dataGridViewTextBoxColumn530->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn530->Name = L"dataGridViewTextBoxColumn530";
			this->dataGridViewTextBoxColumn530->ReadOnly = true;
			this->dataGridViewTextBoxColumn530->Width = 6;
			// 
			// dataGridViewTextBoxColumn531
			// 
			this->dataGridViewTextBoxColumn531->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn531->Name = L"dataGridViewTextBoxColumn531";
			this->dataGridViewTextBoxColumn531->ReadOnly = true;
			this->dataGridViewTextBoxColumn531->Width = 6;
			// 
			// dataGridViewTextBoxColumn532
			// 
			this->dataGridViewTextBoxColumn532->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn532->Name = L"dataGridViewTextBoxColumn532";
			this->dataGridViewTextBoxColumn532->ReadOnly = true;
			this->dataGridViewTextBoxColumn532->Width = 6;
			// 
			// dataGridViewTextBoxColumn533
			// 
			this->dataGridViewTextBoxColumn533->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn533->Name = L"dataGridViewTextBoxColumn533";
			this->dataGridViewTextBoxColumn533->ReadOnly = true;
			this->dataGridViewTextBoxColumn533->Width = 6;
			// 
			// dataGridViewTextBoxColumn534
			// 
			this->dataGridViewTextBoxColumn534->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn534->Name = L"dataGridViewTextBoxColumn534";
			this->dataGridViewTextBoxColumn534->ReadOnly = true;
			this->dataGridViewTextBoxColumn534->Width = 6;
			// 
			// dataGridViewTextBoxColumn535
			// 
			this->dataGridViewTextBoxColumn535->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn535->Name = L"dataGridViewTextBoxColumn535";
			this->dataGridViewTextBoxColumn535->ReadOnly = true;
			this->dataGridViewTextBoxColumn535->Width = 6;
			// 
			// dataGridViewTextBoxColumn536
			// 
			this->dataGridViewTextBoxColumn536->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn536->Name = L"dataGridViewTextBoxColumn536";
			this->dataGridViewTextBoxColumn536->ReadOnly = true;
			this->dataGridViewTextBoxColumn536->Width = 6;
			// 
			// dataGridViewTextBoxColumn537
			// 
			this->dataGridViewTextBoxColumn537->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn537->Name = L"dataGridViewTextBoxColumn537";
			this->dataGridViewTextBoxColumn537->ReadOnly = true;
			this->dataGridViewTextBoxColumn537->Width = 6;
			// 
			// dataGridViewTextBoxColumn538
			// 
			this->dataGridViewTextBoxColumn538->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn538->Name = L"dataGridViewTextBoxColumn538";
			this->dataGridViewTextBoxColumn538->ReadOnly = true;
			this->dataGridViewTextBoxColumn538->Width = 6;
			// 
			// dataGridViewTextBoxColumn539
			// 
			this->dataGridViewTextBoxColumn539->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn539->Name = L"dataGridViewTextBoxColumn539";
			this->dataGridViewTextBoxColumn539->ReadOnly = true;
			this->dataGridViewTextBoxColumn539->Width = 6;
			// 
			// dataGridViewTextBoxColumn540
			// 
			this->dataGridViewTextBoxColumn540->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn540->Name = L"dataGridViewTextBoxColumn540";
			this->dataGridViewTextBoxColumn540->ReadOnly = true;
			this->dataGridViewTextBoxColumn540->Width = 6;
			// 
			// dataGridViewTextBoxColumn541
			// 
			this->dataGridViewTextBoxColumn541->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn541->Name = L"dataGridViewTextBoxColumn541";
			this->dataGridViewTextBoxColumn541->ReadOnly = true;
			this->dataGridViewTextBoxColumn541->Width = 6;
			// 
			// dataGridViewTextBoxColumn542
			// 
			this->dataGridViewTextBoxColumn542->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn542->Name = L"dataGridViewTextBoxColumn542";
			this->dataGridViewTextBoxColumn542->ReadOnly = true;
			this->dataGridViewTextBoxColumn542->Width = 6;
			// 
			// dataGridViewTextBoxColumn543
			// 
			this->dataGridViewTextBoxColumn543->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn543->Name = L"dataGridViewTextBoxColumn543";
			this->dataGridViewTextBoxColumn543->ReadOnly = true;
			this->dataGridViewTextBoxColumn543->Width = 6;
			// 
			// dataGridViewTextBoxColumn544
			// 
			this->dataGridViewTextBoxColumn544->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn544->Name = L"dataGridViewTextBoxColumn544";
			this->dataGridViewTextBoxColumn544->ReadOnly = true;
			this->dataGridViewTextBoxColumn544->Width = 6;
			// 
			// dataGridViewTextBoxColumn545
			// 
			this->dataGridViewTextBoxColumn545->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn545->Name = L"dataGridViewTextBoxColumn545";
			this->dataGridViewTextBoxColumn545->ReadOnly = true;
			this->dataGridViewTextBoxColumn545->Width = 6;
			// 
			// dataGridViewTextBoxColumn546
			// 
			this->dataGridViewTextBoxColumn546->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn546->Name = L"dataGridViewTextBoxColumn546";
			this->dataGridViewTextBoxColumn546->ReadOnly = true;
			this->dataGridViewTextBoxColumn546->Width = 6;
			// 
			// dataGridViewTextBoxColumn547
			// 
			this->dataGridViewTextBoxColumn547->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn547->Name = L"dataGridViewTextBoxColumn547";
			this->dataGridViewTextBoxColumn547->ReadOnly = true;
			this->dataGridViewTextBoxColumn547->Width = 6;
			// 
			// dataGridViewTextBoxColumn548
			// 
			this->dataGridViewTextBoxColumn548->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn548->Name = L"dataGridViewTextBoxColumn548";
			this->dataGridViewTextBoxColumn548->ReadOnly = true;
			this->dataGridViewTextBoxColumn548->Width = 6;
			// 
			// dataGridViewTextBoxColumn549
			// 
			this->dataGridViewTextBoxColumn549->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn549->Name = L"dataGridViewTextBoxColumn549";
			this->dataGridViewTextBoxColumn549->ReadOnly = true;
			this->dataGridViewTextBoxColumn549->Width = 6;
			// 
			// dataGridViewTextBoxColumn550
			// 
			this->dataGridViewTextBoxColumn550->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn550->Name = L"dataGridViewTextBoxColumn550";
			this->dataGridViewTextBoxColumn550->ReadOnly = true;
			this->dataGridViewTextBoxColumn550->Width = 6;
			// 
			// dataGridViewTextBoxColumn551
			// 
			this->dataGridViewTextBoxColumn551->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn551->Name = L"dataGridViewTextBoxColumn551";
			this->dataGridViewTextBoxColumn551->ReadOnly = true;
			this->dataGridViewTextBoxColumn551->Width = 6;
			// 
			// dataGridViewTextBoxColumn552
			// 
			this->dataGridViewTextBoxColumn552->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn552->Name = L"dataGridViewTextBoxColumn552";
			this->dataGridViewTextBoxColumn552->ReadOnly = true;
			this->dataGridViewTextBoxColumn552->Width = 6;
			// 
			// dataGridViewTextBoxColumn553
			// 
			this->dataGridViewTextBoxColumn553->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn553->Name = L"dataGridViewTextBoxColumn553";
			this->dataGridViewTextBoxColumn553->ReadOnly = true;
			this->dataGridViewTextBoxColumn553->Width = 6;
			// 
			// dataGridViewTextBoxColumn554
			// 
			this->dataGridViewTextBoxColumn554->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn554->Name = L"dataGridViewTextBoxColumn554";
			this->dataGridViewTextBoxColumn554->ReadOnly = true;
			this->dataGridViewTextBoxColumn554->Width = 6;
			// 
			// dataGridViewTextBoxColumn555
			// 
			this->dataGridViewTextBoxColumn555->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn555->Name = L"dataGridViewTextBoxColumn555";
			this->dataGridViewTextBoxColumn555->ReadOnly = true;
			this->dataGridViewTextBoxColumn555->Width = 6;
			// 
			// dataGridViewTextBoxColumn556
			// 
			this->dataGridViewTextBoxColumn556->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn556->Name = L"dataGridViewTextBoxColumn556";
			this->dataGridViewTextBoxColumn556->ReadOnly = true;
			this->dataGridViewTextBoxColumn556->Width = 6;
			// 
			// dataGridViewTextBoxColumn557
			// 
			this->dataGridViewTextBoxColumn557->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn557->Name = L"dataGridViewTextBoxColumn557";
			this->dataGridViewTextBoxColumn557->ReadOnly = true;
			this->dataGridViewTextBoxColumn557->Width = 6;
			// 
			// dataGridViewTextBoxColumn558
			// 
			this->dataGridViewTextBoxColumn558->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn558->Name = L"dataGridViewTextBoxColumn558";
			this->dataGridViewTextBoxColumn558->ReadOnly = true;
			this->dataGridViewTextBoxColumn558->Width = 6;
			// 
			// dataGridViewTextBoxColumn559
			// 
			this->dataGridViewTextBoxColumn559->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn559->Name = L"dataGridViewTextBoxColumn559";
			this->dataGridViewTextBoxColumn559->ReadOnly = true;
			this->dataGridViewTextBoxColumn559->Width = 6;
			// 
			// dataGridViewTextBoxColumn560
			// 
			this->dataGridViewTextBoxColumn560->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn560->Name = L"dataGridViewTextBoxColumn560";
			this->dataGridViewTextBoxColumn560->ReadOnly = true;
			this->dataGridViewTextBoxColumn560->Width = 6;
			// 
			// dataGridViewTextBoxColumn561
			// 
			this->dataGridViewTextBoxColumn561->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn561->Name = L"dataGridViewTextBoxColumn561";
			this->dataGridViewTextBoxColumn561->ReadOnly = true;
			this->dataGridViewTextBoxColumn561->Width = 6;
			// 
			// dataGridViewTextBoxColumn562
			// 
			this->dataGridViewTextBoxColumn562->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn562->Name = L"dataGridViewTextBoxColumn562";
			this->dataGridViewTextBoxColumn562->ReadOnly = true;
			this->dataGridViewTextBoxColumn562->Width = 6;
			// 
			// dataGridViewTextBoxColumn563
			// 
			this->dataGridViewTextBoxColumn563->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn563->Name = L"dataGridViewTextBoxColumn563";
			this->dataGridViewTextBoxColumn563->ReadOnly = true;
			this->dataGridViewTextBoxColumn563->Width = 6;
			// 
			// dataGridViewTextBoxColumn564
			// 
			this->dataGridViewTextBoxColumn564->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn564->Name = L"dataGridViewTextBoxColumn564";
			this->dataGridViewTextBoxColumn564->ReadOnly = true;
			this->dataGridViewTextBoxColumn564->Width = 6;
			// 
			// dataGridViewTextBoxColumn565
			// 
			this->dataGridViewTextBoxColumn565->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn565->Name = L"dataGridViewTextBoxColumn565";
			this->dataGridViewTextBoxColumn565->ReadOnly = true;
			this->dataGridViewTextBoxColumn565->Width = 6;
			// 
			// dataGridViewTextBoxColumn566
			// 
			this->dataGridViewTextBoxColumn566->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn566->Name = L"dataGridViewTextBoxColumn566";
			this->dataGridViewTextBoxColumn566->ReadOnly = true;
			this->dataGridViewTextBoxColumn566->Width = 6;
			// 
			// dataGridViewTextBoxColumn567
			// 
			this->dataGridViewTextBoxColumn567->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn567->Name = L"dataGridViewTextBoxColumn567";
			this->dataGridViewTextBoxColumn567->ReadOnly = true;
			this->dataGridViewTextBoxColumn567->Width = 6;
			// 
			// dataGridViewTextBoxColumn568
			// 
			this->dataGridViewTextBoxColumn568->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn568->Name = L"dataGridViewTextBoxColumn568";
			this->dataGridViewTextBoxColumn568->ReadOnly = true;
			this->dataGridViewTextBoxColumn568->Width = 6;
			// 
			// dataGridViewTextBoxColumn569
			// 
			this->dataGridViewTextBoxColumn569->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn569->Name = L"dataGridViewTextBoxColumn569";
			this->dataGridViewTextBoxColumn569->ReadOnly = true;
			this->dataGridViewTextBoxColumn569->Width = 6;
			// 
			// dataGridViewTextBoxColumn570
			// 
			this->dataGridViewTextBoxColumn570->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn570->Name = L"dataGridViewTextBoxColumn570";
			this->dataGridViewTextBoxColumn570->ReadOnly = true;
			this->dataGridViewTextBoxColumn570->Width = 6;
			// 
			// dataGridViewTextBoxColumn571
			// 
			this->dataGridViewTextBoxColumn571->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn571->Name = L"dataGridViewTextBoxColumn571";
			this->dataGridViewTextBoxColumn571->ReadOnly = true;
			this->dataGridViewTextBoxColumn571->Width = 6;
			// 
			// dataGridViewTextBoxColumn572
			// 
			this->dataGridViewTextBoxColumn572->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn572->Name = L"dataGridViewTextBoxColumn572";
			this->dataGridViewTextBoxColumn572->ReadOnly = true;
			this->dataGridViewTextBoxColumn572->Width = 6;
			// 
			// dataGridViewTextBoxColumn573
			// 
			this->dataGridViewTextBoxColumn573->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn573->Name = L"dataGridViewTextBoxColumn573";
			this->dataGridViewTextBoxColumn573->ReadOnly = true;
			this->dataGridViewTextBoxColumn573->Width = 6;
			// 
			// dataGridViewTextBoxColumn574
			// 
			this->dataGridViewTextBoxColumn574->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn574->Name = L"dataGridViewTextBoxColumn574";
			this->dataGridViewTextBoxColumn574->ReadOnly = true;
			this->dataGridViewTextBoxColumn574->Width = 6;
			// 
			// dataGridViewTextBoxColumn575
			// 
			this->dataGridViewTextBoxColumn575->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn575->Name = L"dataGridViewTextBoxColumn575";
			this->dataGridViewTextBoxColumn575->ReadOnly = true;
			this->dataGridViewTextBoxColumn575->Width = 6;
			// 
			// dataGridViewTextBoxColumn576
			// 
			this->dataGridViewTextBoxColumn576->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn576->Name = L"dataGridViewTextBoxColumn576";
			this->dataGridViewTextBoxColumn576->ReadOnly = true;
			this->dataGridViewTextBoxColumn576->Width = 6;
			// 
			// label23
			// 
			this->label23->AutoSize = true;
			this->label23->Location = System::Drawing::Point(74, 501);
			this->label23->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label23->Name = L"label23";
			this->label23->Size = System::Drawing::Size(78, 13);
			this->label23->TabIndex = 47;
			this->label23->Text = L"Voxel Pos (Val)";
			// 
			// label24
			// 
			this->label24->AutoSize = true;
			this->label24->Location = System::Drawing::Point(318, 501);
			this->label24->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label24->Name = L"label24";
			this->label24->Size = System::Drawing::Size(35, 13);
			this->label24->TabIndex = 46;
			this->label24->Text = L"Pos Y";
			// 
			// label25
			// 
			this->label25->AutoSize = true;
			this->label25->Location = System::Drawing::Point(227, 501);
			this->label25->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label25->Name = L"label25";
			this->label25->Size = System::Drawing::Size(35, 13);
			this->label25->TabIndex = 45;
			this->label25->Text = L"Pos X";
			// 
			// label26
			// 
			this->label26->AutoSize = true;
			this->label26->Location = System::Drawing::Point(30, 452);
			this->label26->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label26->Name = L"label26";
			this->label26->Size = System::Drawing::Size(43, 13);
			this->label26->TabIndex = 44;
			this->label26->Text = L"HEX 0x";
			// 
			// label27
			// 
			this->label27->AutoSize = true;
			this->label27->Location = System::Drawing::Point(44, 430);
			this->label27->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label27->Name = L"label27";
			this->label27->Size = System::Drawing::Size(27, 13);
			this->label27->TabIndex = 43;
			this->label27->Text = L"Bits:";
			// 
			// label28
			// 
			this->label28->AutoSize = true;
			this->label28->Location = System::Drawing::Point(18, 402);
			this->label28->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label28->Name = L"label28";
			this->label28->Size = System::Drawing::Size(20, 13);
			this->label28->TabIndex = 42;
			this->label28->Text = L"Y=";
			// 
			// label29
			// 
			this->label29->AutoSize = true;
			this->label29->Location = System::Drawing::Point(18, 373);
			this->label29->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label29->Name = L"label29";
			this->label29->Size = System::Drawing::Size(20, 13);
			this->label29->TabIndex = 41;
			this->label29->Text = L"X=";
			// 
			// label18
			// 
			this->label18->AutoSize = true;
			this->label18->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label18->Location = System::Drawing::Point(34, 403);
			this->label18->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label18->Name = L"label18";
			this->label18->Size = System::Drawing::Size(21, 13);
			this->label18->TabIndex = 39;
			this->label18->Text = L"__";
			// 
			// label17
			// 
			this->label17->AutoSize = true;
			this->label17->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label17->Location = System::Drawing::Point(34, 373);
			this->label17->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label17->Name = L"label17";
			this->label17->Size = System::Drawing::Size(21, 13);
			this->label17->TabIndex = 38;
			this->label17->Text = L"__";
			// 
			// textBox10
			// 
			this->textBox10->Location = System::Drawing::Point(77, 516);
			this->textBox10->Margin = System::Windows::Forms::Padding(2);
			this->textBox10->Name = L"textBox10";
			this->textBox10->Size = System::Drawing::Size(76, 20);
			this->textBox10->TabIndex = 37;
			// 
			// textBox9
			// 
			this->textBox9->Location = System::Drawing::Point(230, 516);
			this->textBox9->Margin = System::Windows::Forms::Padding(2);
			this->textBox9->Name = L"textBox9";
			this->textBox9->Size = System::Drawing::Size(76, 20);
			this->textBox9->TabIndex = 36;
			// 
			// textBox8
			// 
			this->textBox8->Location = System::Drawing::Point(321, 516);
			this->textBox8->Margin = System::Windows::Forms::Padding(2);
			this->textBox8->Name = L"textBox8";
			this->textBox8->Size = System::Drawing::Size(76, 20);
			this->textBox8->TabIndex = 35;
			// 
			// textBox7
			// 
			this->textBox7->Location = System::Drawing::Point(75, 448);
			this->textBox7->Margin = System::Windows::Forms::Padding(2);
			this->textBox7->MaxLength = 16;
			this->textBox7->Name = L"textBox7";
			this->textBox7->Size = System::Drawing::Size(349, 20);
			this->textBox7->TabIndex = 34;
			// 
			// textBox6
			// 
			this->textBox6->Location = System::Drawing::Point(75, 425);
			this->textBox6->Margin = System::Windows::Forms::Padding(2);
			this->textBox6->MaxLength = 64;
			this->textBox6->Name = L"textBox6";
			this->textBox6->Size = System::Drawing::Size(397, 20);
			this->textBox6->TabIndex = 33;
			// 
			// dataGridView2
			// 
			this->dataGridView2->AllowDrop = true;
			this->dataGridView2->AllowUserToAddRows = false;
			this->dataGridView2->AllowUserToDeleteRows = false;
			this->dataGridView2->AllowUserToResizeColumns = false;
			this->dataGridView2->AllowUserToResizeRows = false;
			this->dataGridView2->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView2->ColumnHeadersVisible = false;
			this->dataGridView2->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn1, 
				this->dataGridViewTextBoxColumn2, this->dataGridViewTextBoxColumn3, this->dataGridViewTextBoxColumn4, this->dataGridViewTextBoxColumn5, 
				this->dataGridViewTextBoxColumn6, this->dataGridViewTextBoxColumn7, this->dataGridViewTextBoxColumn8, this->dataGridViewTextBoxColumn9, 
				this->dataGridViewTextBoxColumn10, this->dataGridViewTextBoxColumn11, this->dataGridViewTextBoxColumn12, this->dataGridViewTextBoxColumn13, 
				this->dataGridViewTextBoxColumn14, this->dataGridViewTextBoxColumn15, this->dataGridViewTextBoxColumn16, this->dataGridViewTextBoxColumn17, 
				this->dataGridViewTextBoxColumn18, this->dataGridViewTextBoxColumn19, this->dataGridViewTextBoxColumn20, this->dataGridViewTextBoxColumn21, 
				this->dataGridViewTextBoxColumn22, this->dataGridViewTextBoxColumn23, this->dataGridViewTextBoxColumn24, this->dataGridViewTextBoxColumn25, 
				this->dataGridViewTextBoxColumn26, this->dataGridViewTextBoxColumn27, this->dataGridViewTextBoxColumn28, this->dataGridViewTextBoxColumn29, 
				this->dataGridViewTextBoxColumn30, this->dataGridViewTextBoxColumn31, this->dataGridViewTextBoxColumn32, this->dataGridViewTextBoxColumn33, 
				this->dataGridViewTextBoxColumn34, this->dataGridViewTextBoxColumn35, this->dataGridViewTextBoxColumn36, this->dataGridViewTextBoxColumn37, 
				this->dataGridViewTextBoxColumn38, this->dataGridViewTextBoxColumn39, this->dataGridViewTextBoxColumn40, this->dataGridViewTextBoxColumn41, 
				this->dataGridViewTextBoxColumn42, this->dataGridViewTextBoxColumn43, this->dataGridViewTextBoxColumn44, this->dataGridViewTextBoxColumn45, 
				this->dataGridViewTextBoxColumn46, this->dataGridViewTextBoxColumn47, this->dataGridViewTextBoxColumn48, this->dataGridViewTextBoxColumn49, 
				this->dataGridViewTextBoxColumn50, this->dataGridViewTextBoxColumn51, this->dataGridViewTextBoxColumn52, this->dataGridViewTextBoxColumn53, 
				this->dataGridViewTextBoxColumn54, this->dataGridViewTextBoxColumn55, this->dataGridViewTextBoxColumn56, this->dataGridViewTextBoxColumn57, 
				this->dataGridViewTextBoxColumn58, this->dataGridViewTextBoxColumn59, this->dataGridViewTextBoxColumn60, this->dataGridViewTextBoxColumn61, 
				this->dataGridViewTextBoxColumn62, this->dataGridViewTextBoxColumn63, this->dataGridViewTextBoxColumn64});
			this->dataGridView2->Location = System::Drawing::Point(36, 15);
			this->dataGridView2->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView2->MultiSelect = false;
			this->dataGridView2->Name = L"dataGridView2";
			this->dataGridView2->ReadOnly = true;
			this->dataGridView2->RowHeadersVisible = false;
			this->dataGridView2->RowHeadersWidth = 15;
			dataGridViewCellStyle4->BackColor = System::Drawing::Color::White;
			this->dataGridView2->RowsDefaultCellStyle = dataGridViewCellStyle4;
			this->dataGridView2->RowTemplate->Height = 10;
			this->dataGridView2->Size = System::Drawing::Size(656, 338);
			this->dataGridView2->TabIndex = 32;
			this->dataGridView2->CellMouseClick += gcnew System::Windows::Forms::DataGridViewCellMouseEventHandler(this, &Form1::dataGridView2_CellMouseClick);
			this->dataGridView2->SelectionChanged += gcnew System::EventHandler(this, &Form1::dataGridView2_SelectionChanged);
			// 
			// dataGridViewTextBoxColumn1
			// 
			this->dataGridViewTextBoxColumn1->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn1->Name = L"dataGridViewTextBoxColumn1";
			this->dataGridViewTextBoxColumn1->ReadOnly = true;
			this->dataGridViewTextBoxColumn1->Width = 10;
			// 
			// dataGridViewTextBoxColumn2
			// 
			this->dataGridViewTextBoxColumn2->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn2->Name = L"dataGridViewTextBoxColumn2";
			this->dataGridViewTextBoxColumn2->ReadOnly = true;
			this->dataGridViewTextBoxColumn2->Width = 10;
			// 
			// dataGridViewTextBoxColumn3
			// 
			this->dataGridViewTextBoxColumn3->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn3->Name = L"dataGridViewTextBoxColumn3";
			this->dataGridViewTextBoxColumn3->ReadOnly = true;
			this->dataGridViewTextBoxColumn3->Width = 10;
			// 
			// dataGridViewTextBoxColumn4
			// 
			this->dataGridViewTextBoxColumn4->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn4->Name = L"dataGridViewTextBoxColumn4";
			this->dataGridViewTextBoxColumn4->ReadOnly = true;
			this->dataGridViewTextBoxColumn4->Width = 10;
			// 
			// dataGridViewTextBoxColumn5
			// 
			this->dataGridViewTextBoxColumn5->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn5->Name = L"dataGridViewTextBoxColumn5";
			this->dataGridViewTextBoxColumn5->ReadOnly = true;
			this->dataGridViewTextBoxColumn5->Width = 10;
			// 
			// dataGridViewTextBoxColumn6
			// 
			this->dataGridViewTextBoxColumn6->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn6->Name = L"dataGridViewTextBoxColumn6";
			this->dataGridViewTextBoxColumn6->ReadOnly = true;
			this->dataGridViewTextBoxColumn6->Width = 10;
			// 
			// dataGridViewTextBoxColumn7
			// 
			this->dataGridViewTextBoxColumn7->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn7->Name = L"dataGridViewTextBoxColumn7";
			this->dataGridViewTextBoxColumn7->ReadOnly = true;
			this->dataGridViewTextBoxColumn7->Width = 10;
			// 
			// dataGridViewTextBoxColumn8
			// 
			this->dataGridViewTextBoxColumn8->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn8->Name = L"dataGridViewTextBoxColumn8";
			this->dataGridViewTextBoxColumn8->ReadOnly = true;
			this->dataGridViewTextBoxColumn8->Width = 10;
			// 
			// dataGridViewTextBoxColumn9
			// 
			this->dataGridViewTextBoxColumn9->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn9->Name = L"dataGridViewTextBoxColumn9";
			this->dataGridViewTextBoxColumn9->ReadOnly = true;
			this->dataGridViewTextBoxColumn9->Width = 10;
			// 
			// dataGridViewTextBoxColumn10
			// 
			this->dataGridViewTextBoxColumn10->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn10->Name = L"dataGridViewTextBoxColumn10";
			this->dataGridViewTextBoxColumn10->ReadOnly = true;
			this->dataGridViewTextBoxColumn10->Width = 10;
			// 
			// dataGridViewTextBoxColumn11
			// 
			this->dataGridViewTextBoxColumn11->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn11->Name = L"dataGridViewTextBoxColumn11";
			this->dataGridViewTextBoxColumn11->ReadOnly = true;
			this->dataGridViewTextBoxColumn11->Width = 10;
			// 
			// dataGridViewTextBoxColumn12
			// 
			this->dataGridViewTextBoxColumn12->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn12->Name = L"dataGridViewTextBoxColumn12";
			this->dataGridViewTextBoxColumn12->ReadOnly = true;
			this->dataGridViewTextBoxColumn12->Width = 10;
			// 
			// dataGridViewTextBoxColumn13
			// 
			this->dataGridViewTextBoxColumn13->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn13->Name = L"dataGridViewTextBoxColumn13";
			this->dataGridViewTextBoxColumn13->ReadOnly = true;
			this->dataGridViewTextBoxColumn13->Width = 10;
			// 
			// dataGridViewTextBoxColumn14
			// 
			this->dataGridViewTextBoxColumn14->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn14->Name = L"dataGridViewTextBoxColumn14";
			this->dataGridViewTextBoxColumn14->ReadOnly = true;
			this->dataGridViewTextBoxColumn14->Width = 10;
			// 
			// dataGridViewTextBoxColumn15
			// 
			this->dataGridViewTextBoxColumn15->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn15->Name = L"dataGridViewTextBoxColumn15";
			this->dataGridViewTextBoxColumn15->ReadOnly = true;
			this->dataGridViewTextBoxColumn15->Width = 10;
			// 
			// dataGridViewTextBoxColumn16
			// 
			this->dataGridViewTextBoxColumn16->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn16->Name = L"dataGridViewTextBoxColumn16";
			this->dataGridViewTextBoxColumn16->ReadOnly = true;
			this->dataGridViewTextBoxColumn16->Width = 10;
			// 
			// dataGridViewTextBoxColumn17
			// 
			this->dataGridViewTextBoxColumn17->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn17->Name = L"dataGridViewTextBoxColumn17";
			this->dataGridViewTextBoxColumn17->ReadOnly = true;
			this->dataGridViewTextBoxColumn17->Width = 10;
			// 
			// dataGridViewTextBoxColumn18
			// 
			this->dataGridViewTextBoxColumn18->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn18->Name = L"dataGridViewTextBoxColumn18";
			this->dataGridViewTextBoxColumn18->ReadOnly = true;
			this->dataGridViewTextBoxColumn18->Width = 10;
			// 
			// dataGridViewTextBoxColumn19
			// 
			this->dataGridViewTextBoxColumn19->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn19->Name = L"dataGridViewTextBoxColumn19";
			this->dataGridViewTextBoxColumn19->ReadOnly = true;
			this->dataGridViewTextBoxColumn19->Width = 10;
			// 
			// dataGridViewTextBoxColumn20
			// 
			this->dataGridViewTextBoxColumn20->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn20->Name = L"dataGridViewTextBoxColumn20";
			this->dataGridViewTextBoxColumn20->ReadOnly = true;
			this->dataGridViewTextBoxColumn20->Width = 10;
			// 
			// dataGridViewTextBoxColumn21
			// 
			this->dataGridViewTextBoxColumn21->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn21->Name = L"dataGridViewTextBoxColumn21";
			this->dataGridViewTextBoxColumn21->ReadOnly = true;
			this->dataGridViewTextBoxColumn21->Width = 10;
			// 
			// dataGridViewTextBoxColumn22
			// 
			this->dataGridViewTextBoxColumn22->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn22->Name = L"dataGridViewTextBoxColumn22";
			this->dataGridViewTextBoxColumn22->ReadOnly = true;
			this->dataGridViewTextBoxColumn22->Width = 10;
			// 
			// dataGridViewTextBoxColumn23
			// 
			this->dataGridViewTextBoxColumn23->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn23->Name = L"dataGridViewTextBoxColumn23";
			this->dataGridViewTextBoxColumn23->ReadOnly = true;
			this->dataGridViewTextBoxColumn23->Width = 10;
			// 
			// dataGridViewTextBoxColumn24
			// 
			this->dataGridViewTextBoxColumn24->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn24->Name = L"dataGridViewTextBoxColumn24";
			this->dataGridViewTextBoxColumn24->ReadOnly = true;
			this->dataGridViewTextBoxColumn24->Width = 10;
			// 
			// dataGridViewTextBoxColumn25
			// 
			this->dataGridViewTextBoxColumn25->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn25->Name = L"dataGridViewTextBoxColumn25";
			this->dataGridViewTextBoxColumn25->ReadOnly = true;
			this->dataGridViewTextBoxColumn25->Width = 10;
			// 
			// dataGridViewTextBoxColumn26
			// 
			this->dataGridViewTextBoxColumn26->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn26->Name = L"dataGridViewTextBoxColumn26";
			this->dataGridViewTextBoxColumn26->ReadOnly = true;
			this->dataGridViewTextBoxColumn26->Width = 10;
			// 
			// dataGridViewTextBoxColumn27
			// 
			this->dataGridViewTextBoxColumn27->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn27->Name = L"dataGridViewTextBoxColumn27";
			this->dataGridViewTextBoxColumn27->ReadOnly = true;
			this->dataGridViewTextBoxColumn27->Width = 10;
			// 
			// dataGridViewTextBoxColumn28
			// 
			this->dataGridViewTextBoxColumn28->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn28->Name = L"dataGridViewTextBoxColumn28";
			this->dataGridViewTextBoxColumn28->ReadOnly = true;
			this->dataGridViewTextBoxColumn28->Width = 10;
			// 
			// dataGridViewTextBoxColumn29
			// 
			this->dataGridViewTextBoxColumn29->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn29->Name = L"dataGridViewTextBoxColumn29";
			this->dataGridViewTextBoxColumn29->ReadOnly = true;
			this->dataGridViewTextBoxColumn29->Width = 10;
			// 
			// dataGridViewTextBoxColumn30
			// 
			this->dataGridViewTextBoxColumn30->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn30->Name = L"dataGridViewTextBoxColumn30";
			this->dataGridViewTextBoxColumn30->ReadOnly = true;
			this->dataGridViewTextBoxColumn30->Width = 10;
			// 
			// dataGridViewTextBoxColumn31
			// 
			this->dataGridViewTextBoxColumn31->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn31->Name = L"dataGridViewTextBoxColumn31";
			this->dataGridViewTextBoxColumn31->ReadOnly = true;
			this->dataGridViewTextBoxColumn31->Width = 10;
			// 
			// dataGridViewTextBoxColumn32
			// 
			this->dataGridViewTextBoxColumn32->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn32->Name = L"dataGridViewTextBoxColumn32";
			this->dataGridViewTextBoxColumn32->ReadOnly = true;
			this->dataGridViewTextBoxColumn32->Width = 10;
			// 
			// dataGridViewTextBoxColumn33
			// 
			this->dataGridViewTextBoxColumn33->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn33->Name = L"dataGridViewTextBoxColumn33";
			this->dataGridViewTextBoxColumn33->ReadOnly = true;
			this->dataGridViewTextBoxColumn33->Width = 10;
			// 
			// dataGridViewTextBoxColumn34
			// 
			this->dataGridViewTextBoxColumn34->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn34->Name = L"dataGridViewTextBoxColumn34";
			this->dataGridViewTextBoxColumn34->ReadOnly = true;
			this->dataGridViewTextBoxColumn34->Width = 10;
			// 
			// dataGridViewTextBoxColumn35
			// 
			this->dataGridViewTextBoxColumn35->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn35->Name = L"dataGridViewTextBoxColumn35";
			this->dataGridViewTextBoxColumn35->ReadOnly = true;
			this->dataGridViewTextBoxColumn35->Width = 10;
			// 
			// dataGridViewTextBoxColumn36
			// 
			this->dataGridViewTextBoxColumn36->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn36->Name = L"dataGridViewTextBoxColumn36";
			this->dataGridViewTextBoxColumn36->ReadOnly = true;
			this->dataGridViewTextBoxColumn36->Width = 10;
			// 
			// dataGridViewTextBoxColumn37
			// 
			this->dataGridViewTextBoxColumn37->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn37->Name = L"dataGridViewTextBoxColumn37";
			this->dataGridViewTextBoxColumn37->ReadOnly = true;
			this->dataGridViewTextBoxColumn37->Width = 10;
			// 
			// dataGridViewTextBoxColumn38
			// 
			this->dataGridViewTextBoxColumn38->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn38->Name = L"dataGridViewTextBoxColumn38";
			this->dataGridViewTextBoxColumn38->ReadOnly = true;
			this->dataGridViewTextBoxColumn38->Width = 10;
			// 
			// dataGridViewTextBoxColumn39
			// 
			this->dataGridViewTextBoxColumn39->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn39->Name = L"dataGridViewTextBoxColumn39";
			this->dataGridViewTextBoxColumn39->ReadOnly = true;
			this->dataGridViewTextBoxColumn39->Width = 10;
			// 
			// dataGridViewTextBoxColumn40
			// 
			this->dataGridViewTextBoxColumn40->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn40->Name = L"dataGridViewTextBoxColumn40";
			this->dataGridViewTextBoxColumn40->ReadOnly = true;
			this->dataGridViewTextBoxColumn40->Width = 10;
			// 
			// dataGridViewTextBoxColumn41
			// 
			this->dataGridViewTextBoxColumn41->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn41->Name = L"dataGridViewTextBoxColumn41";
			this->dataGridViewTextBoxColumn41->ReadOnly = true;
			this->dataGridViewTextBoxColumn41->Width = 10;
			// 
			// dataGridViewTextBoxColumn42
			// 
			this->dataGridViewTextBoxColumn42->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn42->Name = L"dataGridViewTextBoxColumn42";
			this->dataGridViewTextBoxColumn42->ReadOnly = true;
			this->dataGridViewTextBoxColumn42->Width = 10;
			// 
			// dataGridViewTextBoxColumn43
			// 
			this->dataGridViewTextBoxColumn43->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn43->Name = L"dataGridViewTextBoxColumn43";
			this->dataGridViewTextBoxColumn43->ReadOnly = true;
			this->dataGridViewTextBoxColumn43->Width = 10;
			// 
			// dataGridViewTextBoxColumn44
			// 
			this->dataGridViewTextBoxColumn44->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn44->Name = L"dataGridViewTextBoxColumn44";
			this->dataGridViewTextBoxColumn44->ReadOnly = true;
			this->dataGridViewTextBoxColumn44->Width = 10;
			// 
			// dataGridViewTextBoxColumn45
			// 
			this->dataGridViewTextBoxColumn45->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn45->Name = L"dataGridViewTextBoxColumn45";
			this->dataGridViewTextBoxColumn45->ReadOnly = true;
			this->dataGridViewTextBoxColumn45->Width = 10;
			// 
			// dataGridViewTextBoxColumn46
			// 
			this->dataGridViewTextBoxColumn46->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn46->Name = L"dataGridViewTextBoxColumn46";
			this->dataGridViewTextBoxColumn46->ReadOnly = true;
			this->dataGridViewTextBoxColumn46->Width = 10;
			// 
			// dataGridViewTextBoxColumn47
			// 
			this->dataGridViewTextBoxColumn47->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn47->Name = L"dataGridViewTextBoxColumn47";
			this->dataGridViewTextBoxColumn47->ReadOnly = true;
			this->dataGridViewTextBoxColumn47->Width = 10;
			// 
			// dataGridViewTextBoxColumn48
			// 
			this->dataGridViewTextBoxColumn48->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn48->Name = L"dataGridViewTextBoxColumn48";
			this->dataGridViewTextBoxColumn48->ReadOnly = true;
			this->dataGridViewTextBoxColumn48->Width = 10;
			// 
			// dataGridViewTextBoxColumn49
			// 
			this->dataGridViewTextBoxColumn49->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn49->Name = L"dataGridViewTextBoxColumn49";
			this->dataGridViewTextBoxColumn49->ReadOnly = true;
			this->dataGridViewTextBoxColumn49->Width = 10;
			// 
			// dataGridViewTextBoxColumn50
			// 
			this->dataGridViewTextBoxColumn50->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn50->Name = L"dataGridViewTextBoxColumn50";
			this->dataGridViewTextBoxColumn50->ReadOnly = true;
			this->dataGridViewTextBoxColumn50->Width = 10;
			// 
			// dataGridViewTextBoxColumn51
			// 
			this->dataGridViewTextBoxColumn51->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn51->Name = L"dataGridViewTextBoxColumn51";
			this->dataGridViewTextBoxColumn51->ReadOnly = true;
			this->dataGridViewTextBoxColumn51->Width = 10;
			// 
			// dataGridViewTextBoxColumn52
			// 
			this->dataGridViewTextBoxColumn52->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn52->Name = L"dataGridViewTextBoxColumn52";
			this->dataGridViewTextBoxColumn52->ReadOnly = true;
			this->dataGridViewTextBoxColumn52->Width = 10;
			// 
			// dataGridViewTextBoxColumn53
			// 
			this->dataGridViewTextBoxColumn53->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn53->Name = L"dataGridViewTextBoxColumn53";
			this->dataGridViewTextBoxColumn53->ReadOnly = true;
			this->dataGridViewTextBoxColumn53->Width = 10;
			// 
			// dataGridViewTextBoxColumn54
			// 
			this->dataGridViewTextBoxColumn54->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn54->Name = L"dataGridViewTextBoxColumn54";
			this->dataGridViewTextBoxColumn54->ReadOnly = true;
			this->dataGridViewTextBoxColumn54->Width = 10;
			// 
			// dataGridViewTextBoxColumn55
			// 
			this->dataGridViewTextBoxColumn55->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn55->Name = L"dataGridViewTextBoxColumn55";
			this->dataGridViewTextBoxColumn55->ReadOnly = true;
			this->dataGridViewTextBoxColumn55->Width = 10;
			// 
			// dataGridViewTextBoxColumn56
			// 
			this->dataGridViewTextBoxColumn56->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn56->Name = L"dataGridViewTextBoxColumn56";
			this->dataGridViewTextBoxColumn56->ReadOnly = true;
			this->dataGridViewTextBoxColumn56->Width = 10;
			// 
			// dataGridViewTextBoxColumn57
			// 
			this->dataGridViewTextBoxColumn57->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn57->Name = L"dataGridViewTextBoxColumn57";
			this->dataGridViewTextBoxColumn57->ReadOnly = true;
			this->dataGridViewTextBoxColumn57->Width = 10;
			// 
			// dataGridViewTextBoxColumn58
			// 
			this->dataGridViewTextBoxColumn58->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn58->Name = L"dataGridViewTextBoxColumn58";
			this->dataGridViewTextBoxColumn58->ReadOnly = true;
			this->dataGridViewTextBoxColumn58->Width = 10;
			// 
			// dataGridViewTextBoxColumn59
			// 
			this->dataGridViewTextBoxColumn59->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn59->Name = L"dataGridViewTextBoxColumn59";
			this->dataGridViewTextBoxColumn59->ReadOnly = true;
			this->dataGridViewTextBoxColumn59->Width = 10;
			// 
			// dataGridViewTextBoxColumn60
			// 
			this->dataGridViewTextBoxColumn60->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn60->Name = L"dataGridViewTextBoxColumn60";
			this->dataGridViewTextBoxColumn60->ReadOnly = true;
			this->dataGridViewTextBoxColumn60->Width = 10;
			// 
			// dataGridViewTextBoxColumn61
			// 
			this->dataGridViewTextBoxColumn61->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn61->Name = L"dataGridViewTextBoxColumn61";
			this->dataGridViewTextBoxColumn61->ReadOnly = true;
			this->dataGridViewTextBoxColumn61->Width = 10;
			// 
			// dataGridViewTextBoxColumn62
			// 
			this->dataGridViewTextBoxColumn62->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn62->Name = L"dataGridViewTextBoxColumn62";
			this->dataGridViewTextBoxColumn62->ReadOnly = true;
			this->dataGridViewTextBoxColumn62->Width = 10;
			// 
			// dataGridViewTextBoxColumn63
			// 
			this->dataGridViewTextBoxColumn63->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn63->Name = L"dataGridViewTextBoxColumn63";
			this->dataGridViewTextBoxColumn63->ReadOnly = true;
			this->dataGridViewTextBoxColumn63->Width = 10;
			// 
			// dataGridViewTextBoxColumn64
			// 
			this->dataGridViewTextBoxColumn64->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn64->Name = L"dataGridViewTextBoxColumn64";
			this->dataGridViewTextBoxColumn64->ReadOnly = true;
			this->dataGridViewTextBoxColumn64->Width = 10;
			// 
			// tabPage3
			// 
			this->tabPage3->Controls->Add(this->checkBox12);
			this->tabPage3->Controls->Add(this->checkBox4);
			this->tabPage3->Controls->Add(this->button26);
			this->tabPage3->Controls->Add(this->label164);
			this->tabPage3->Controls->Add(this->textBox46);
			this->tabPage3->Controls->Add(this->label144);
			this->tabPage3->Controls->Add(this->button10);
			this->tabPage3->Controls->Add(this->label145);
			this->tabPage3->Controls->Add(this->button11);
			this->tabPage3->Controls->Add(this->label97);
			this->tabPage3->Controls->Add(this->label98);
			this->tabPage3->Controls->Add(this->label99);
			this->tabPage3->Controls->Add(this->label100);
			this->tabPage3->Controls->Add(this->label101);
			this->tabPage3->Controls->Add(this->label102);
			this->tabPage3->Controls->Add(this->label103);
			this->tabPage3->Controls->Add(this->dataGridView12);
			this->tabPage3->Controls->Add(this->label19);
			this->tabPage3->Controls->Add(this->label20);
			this->tabPage3->Controls->Add(this->label30);
			this->tabPage3->Controls->Add(this->label31);
			this->tabPage3->Controls->Add(this->label32);
			this->tabPage3->Controls->Add(this->label33);
			this->tabPage3->Controls->Add(this->label34);
			this->tabPage3->Controls->Add(this->label35);
			this->tabPage3->Controls->Add(this->label36);
			this->tabPage3->Controls->Add(this->textBox11);
			this->tabPage3->Controls->Add(this->textBox12);
			this->tabPage3->Controls->Add(this->textBox13);
			this->tabPage3->Controls->Add(this->textBox14);
			this->tabPage3->Controls->Add(this->textBox15);
			this->tabPage3->Controls->Add(this->dataGridView3);
			this->tabPage3->Location = System::Drawing::Point(4, 22);
			this->tabPage3->Margin = System::Windows::Forms::Padding(2);
			this->tabPage3->Name = L"tabPage3";
			this->tabPage3->Padding = System::Windows::Forms::Padding(2);
			this->tabPage3->Size = System::Drawing::Size(698, 555);
			this->tabPage3->TabIndex = 2;
			this->tabPage3->Text = L"Floor 2";
			this->tabPage3->UseVisualStyleBackColor = true;
			// 
			// checkBox12
			// 
			this->checkBox12->AutoSize = true;
			this->checkBox12->Location = System::Drawing::Point(560, 496);
			this->checkBox12->Name = L"checkBox12";
			this->checkBox12->Size = System::Drawing::Size(96, 17);
			this->checkBox12->TabIndex = 91;
			this->checkBox12->Text = L"Show teleports";
			this->checkBox12->UseVisualStyleBackColor = true;
			this->checkBox12->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox12_CheckedChanged);
			// 
			// checkBox4
			// 
			this->checkBox4->AutoSize = true;
			this->checkBox4->Location = System::Drawing::Point(560, 475);
			this->checkBox4->Name = L"checkBox4";
			this->checkBox4->Size = System::Drawing::Size(136, 17);
			this->checkBox4->TabIndex = 88;
			this->checkBox4->Text = L"Show cubes with doors";
			this->checkBox4->UseVisualStyleBackColor = true;
			this->checkBox4->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox4_CheckedChanged);
			// 
			// button26
			// 
			this->button26->Enabled = false;
			this->button26->Location = System::Drawing::Point(610, 390);
			this->button26->Name = L"button26";
			this->button26->Size = System::Drawing::Size(32, 20);
			this->button26->TabIndex = 76;
			this->button26->Text = L"OK";
			this->button26->UseVisualStyleBackColor = true;
			this->button26->Click += gcnew System::EventHandler(this, &Form1::button26_Click);
			// 
			// label164
			// 
			this->label164->AutoSize = true;
			this->label164->Location = System::Drawing::Point(533, 373);
			this->label164->Name = L"label164";
			this->label164->Size = System::Drawing::Size(69, 13);
			this->label164->TabIndex = 75;
			this->label164->Text = L"Cube N (hex)";
			// 
			// textBox46
			// 
			this->textBox46->Location = System::Drawing::Point(533, 390);
			this->textBox46->MaxLength = 3;
			this->textBox46->Name = L"textBox46";
			this->textBox46->Size = System::Drawing::Size(70, 20);
			this->textBox46->TabIndex = 74;
			// 
			// label144
			// 
			this->label144->AutoSize = true;
			this->label144->Location = System::Drawing::Point(556, 434);
			this->label144->Name = L"label144";
			this->label144->Size = System::Drawing::Size(47, 13);
			this->label144->TabIndex = 73;
			this->label144->Text = L"label144";
			// 
			// button10
			// 
			this->button10->Location = System::Drawing::Point(475, 424);
			this->button10->Name = L"button10";
			this->button10->Size = System::Drawing::Size(75, 23);
			this->button10->TabIndex = 72;
			this->button10->Text = L"Edit value";
			this->button10->UseVisualStyleBackColor = true;
			this->button10->Click += gcnew System::EventHandler(this, &Form1::button10_Click);
			// 
			// label145
			// 
			this->label145->AutoSize = true;
			this->label145->Location = System::Drawing::Point(503, 458);
			this->label145->Name = L"label145";
			this->label145->Size = System::Drawing::Size(47, 13);
			this->label145->TabIndex = 71;
			this->label145->Text = L"label145";
			// 
			// button11
			// 
			this->button11->Location = System::Drawing::Point(428, 448);
			this->button11->Name = L"button11";
			this->button11->Size = System::Drawing::Size(75, 23);
			this->button11->TabIndex = 70;
			this->button11->Text = L"Edit value";
			this->button11->UseVisualStyleBackColor = true;
			this->button11->Click += gcnew System::EventHandler(this, &Form1::button11_Click);
			// 
			// label97
			// 
			this->label97->AutoSize = true;
			this->label97->Location = System::Drawing::Point(436, 369);
			this->label97->Name = L"label97";
			this->label97->Size = System::Drawing::Size(31, 13);
			this->label97->TabIndex = 69;
			this->label97->Text = L"0123";
			// 
			// label98
			// 
			this->label98->AutoSize = true;
			this->label98->Location = System::Drawing::Point(376, 356);
			this->label98->Name = L"label98";
			this->label98->Size = System::Drawing::Size(67, 13);
			this->label98->TabIndex = 68;
			this->label98->Text = L"0123456789";
			// 
			// label99
			// 
			this->label99->AutoSize = true;
			this->label99->Location = System::Drawing::Point(316, 369);
			this->label99->Name = L"label99";
			this->label99->Size = System::Drawing::Size(67, 13);
			this->label99->TabIndex = 67;
			this->label99->Text = L"0123456789";
			// 
			// label100
			// 
			this->label100->AutoSize = true;
			this->label100->Location = System::Drawing::Point(256, 356);
			this->label100->Name = L"label100";
			this->label100->Size = System::Drawing::Size(67, 13);
			this->label100->TabIndex = 66;
			this->label100->Text = L"0123456789";
			// 
			// label101
			// 
			this->label101->AutoSize = true;
			this->label101->Location = System::Drawing::Point(197, 367);
			this->label101->Name = L"label101";
			this->label101->Size = System::Drawing::Size(67, 13);
			this->label101->TabIndex = 65;
			this->label101->Text = L"0123456789";
			// 
			// label102
			// 
			this->label102->AutoSize = true;
			this->label102->Location = System::Drawing::Point(135, 356);
			this->label102->Name = L"label102";
			this->label102->Size = System::Drawing::Size(67, 13);
			this->label102->TabIndex = 64;
			this->label102->Text = L"0123456789";
			// 
			// label103
			// 
			this->label103->AutoSize = true;
			this->label103->Location = System::Drawing::Point(75, 367);
			this->label103->Name = L"label103";
			this->label103->Size = System::Drawing::Size(67, 13);
			this->label103->TabIndex = 63;
			this->label103->Text = L"0123456789";
			// 
			// dataGridView12
			// 
			this->dataGridView12->AllowDrop = true;
			this->dataGridView12->AllowUserToAddRows = false;
			this->dataGridView12->AllowUserToDeleteRows = false;
			this->dataGridView12->AllowUserToResizeColumns = false;
			this->dataGridView12->AllowUserToResizeRows = false;
			this->dataGridView12->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView12->ColumnHeadersVisible = false;
			this->dataGridView12->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn577, 
				this->dataGridViewTextBoxColumn578, this->dataGridViewTextBoxColumn579, this->dataGridViewTextBoxColumn580, this->dataGridViewTextBoxColumn581, 
				this->dataGridViewTextBoxColumn582, this->dataGridViewTextBoxColumn583, this->dataGridViewTextBoxColumn584, this->dataGridViewTextBoxColumn585, 
				this->dataGridViewTextBoxColumn586, this->dataGridViewTextBoxColumn587, this->dataGridViewTextBoxColumn588, this->dataGridViewTextBoxColumn589, 
				this->dataGridViewTextBoxColumn590, this->dataGridViewTextBoxColumn591, this->dataGridViewTextBoxColumn592, this->dataGridViewTextBoxColumn593, 
				this->dataGridViewTextBoxColumn594, this->dataGridViewTextBoxColumn595, this->dataGridViewTextBoxColumn596, this->dataGridViewTextBoxColumn597, 
				this->dataGridViewTextBoxColumn598, this->dataGridViewTextBoxColumn599, this->dataGridViewTextBoxColumn600, this->dataGridViewTextBoxColumn601, 
				this->dataGridViewTextBoxColumn602, this->dataGridViewTextBoxColumn603, this->dataGridViewTextBoxColumn604, this->dataGridViewTextBoxColumn605, 
				this->dataGridViewTextBoxColumn606, this->dataGridViewTextBoxColumn607, this->dataGridViewTextBoxColumn608, this->dataGridViewTextBoxColumn609, 
				this->dataGridViewTextBoxColumn610, this->dataGridViewTextBoxColumn611, this->dataGridViewTextBoxColumn612, this->dataGridViewTextBoxColumn613, 
				this->dataGridViewTextBoxColumn614, this->dataGridViewTextBoxColumn615, this->dataGridViewTextBoxColumn616, this->dataGridViewTextBoxColumn617, 
				this->dataGridViewTextBoxColumn618, this->dataGridViewTextBoxColumn619, this->dataGridViewTextBoxColumn620, this->dataGridViewTextBoxColumn621, 
				this->dataGridViewTextBoxColumn622, this->dataGridViewTextBoxColumn623, this->dataGridViewTextBoxColumn624, this->dataGridViewTextBoxColumn625, 
				this->dataGridViewTextBoxColumn626, this->dataGridViewTextBoxColumn627, this->dataGridViewTextBoxColumn628, this->dataGridViewTextBoxColumn629, 
				this->dataGridViewTextBoxColumn630, this->dataGridViewTextBoxColumn631, this->dataGridViewTextBoxColumn632, this->dataGridViewTextBoxColumn633, 
				this->dataGridViewTextBoxColumn634, this->dataGridViewTextBoxColumn635, this->dataGridViewTextBoxColumn636, this->dataGridViewTextBoxColumn637, 
				this->dataGridViewTextBoxColumn638, this->dataGridViewTextBoxColumn639, this->dataGridViewTextBoxColumn640});
			this->dataGridView12->Location = System::Drawing::Point(77, 383);
			this->dataGridView12->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView12->Name = L"dataGridView12";
			this->dataGridView12->ReadOnly = true;
			this->dataGridView12->RowHeadersVisible = false;
			this->dataGridView12->RowHeadersWidth = 15;
			dataGridViewCellStyle5->BackColor = System::Drawing::Color::White;
			this->dataGridView12->RowsDefaultCellStyle = dataGridViewCellStyle5;
			this->dataGridView12->RowTemplate->Height = 35;
			this->dataGridView12->Size = System::Drawing::Size(390, 41);
			this->dataGridView12->TabIndex = 62;
			// 
			// dataGridViewTextBoxColumn577
			// 
			this->dataGridViewTextBoxColumn577->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn577->Name = L"dataGridViewTextBoxColumn577";
			this->dataGridViewTextBoxColumn577->ReadOnly = true;
			this->dataGridViewTextBoxColumn577->Width = 6;
			// 
			// dataGridViewTextBoxColumn578
			// 
			this->dataGridViewTextBoxColumn578->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn578->Name = L"dataGridViewTextBoxColumn578";
			this->dataGridViewTextBoxColumn578->ReadOnly = true;
			this->dataGridViewTextBoxColumn578->Width = 6;
			// 
			// dataGridViewTextBoxColumn579
			// 
			this->dataGridViewTextBoxColumn579->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn579->Name = L"dataGridViewTextBoxColumn579";
			this->dataGridViewTextBoxColumn579->ReadOnly = true;
			this->dataGridViewTextBoxColumn579->Width = 6;
			// 
			// dataGridViewTextBoxColumn580
			// 
			this->dataGridViewTextBoxColumn580->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn580->Name = L"dataGridViewTextBoxColumn580";
			this->dataGridViewTextBoxColumn580->ReadOnly = true;
			this->dataGridViewTextBoxColumn580->Width = 6;
			// 
			// dataGridViewTextBoxColumn581
			// 
			this->dataGridViewTextBoxColumn581->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn581->Name = L"dataGridViewTextBoxColumn581";
			this->dataGridViewTextBoxColumn581->ReadOnly = true;
			this->dataGridViewTextBoxColumn581->Width = 6;
			// 
			// dataGridViewTextBoxColumn582
			// 
			this->dataGridViewTextBoxColumn582->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn582->Name = L"dataGridViewTextBoxColumn582";
			this->dataGridViewTextBoxColumn582->ReadOnly = true;
			this->dataGridViewTextBoxColumn582->Width = 6;
			// 
			// dataGridViewTextBoxColumn583
			// 
			this->dataGridViewTextBoxColumn583->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn583->Name = L"dataGridViewTextBoxColumn583";
			this->dataGridViewTextBoxColumn583->ReadOnly = true;
			this->dataGridViewTextBoxColumn583->Width = 6;
			// 
			// dataGridViewTextBoxColumn584
			// 
			this->dataGridViewTextBoxColumn584->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn584->Name = L"dataGridViewTextBoxColumn584";
			this->dataGridViewTextBoxColumn584->ReadOnly = true;
			this->dataGridViewTextBoxColumn584->Width = 6;
			// 
			// dataGridViewTextBoxColumn585
			// 
			this->dataGridViewTextBoxColumn585->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn585->Name = L"dataGridViewTextBoxColumn585";
			this->dataGridViewTextBoxColumn585->ReadOnly = true;
			this->dataGridViewTextBoxColumn585->Width = 6;
			// 
			// dataGridViewTextBoxColumn586
			// 
			this->dataGridViewTextBoxColumn586->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn586->Name = L"dataGridViewTextBoxColumn586";
			this->dataGridViewTextBoxColumn586->ReadOnly = true;
			this->dataGridViewTextBoxColumn586->Width = 6;
			// 
			// dataGridViewTextBoxColumn587
			// 
			this->dataGridViewTextBoxColumn587->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn587->Name = L"dataGridViewTextBoxColumn587";
			this->dataGridViewTextBoxColumn587->ReadOnly = true;
			this->dataGridViewTextBoxColumn587->Width = 6;
			// 
			// dataGridViewTextBoxColumn588
			// 
			this->dataGridViewTextBoxColumn588->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn588->Name = L"dataGridViewTextBoxColumn588";
			this->dataGridViewTextBoxColumn588->ReadOnly = true;
			this->dataGridViewTextBoxColumn588->Width = 6;
			// 
			// dataGridViewTextBoxColumn589
			// 
			this->dataGridViewTextBoxColumn589->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn589->Name = L"dataGridViewTextBoxColumn589";
			this->dataGridViewTextBoxColumn589->ReadOnly = true;
			this->dataGridViewTextBoxColumn589->Width = 6;
			// 
			// dataGridViewTextBoxColumn590
			// 
			this->dataGridViewTextBoxColumn590->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn590->Name = L"dataGridViewTextBoxColumn590";
			this->dataGridViewTextBoxColumn590->ReadOnly = true;
			this->dataGridViewTextBoxColumn590->Width = 6;
			// 
			// dataGridViewTextBoxColumn591
			// 
			this->dataGridViewTextBoxColumn591->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn591->Name = L"dataGridViewTextBoxColumn591";
			this->dataGridViewTextBoxColumn591->ReadOnly = true;
			this->dataGridViewTextBoxColumn591->Width = 6;
			// 
			// dataGridViewTextBoxColumn592
			// 
			this->dataGridViewTextBoxColumn592->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn592->Name = L"dataGridViewTextBoxColumn592";
			this->dataGridViewTextBoxColumn592->ReadOnly = true;
			this->dataGridViewTextBoxColumn592->Width = 6;
			// 
			// dataGridViewTextBoxColumn593
			// 
			this->dataGridViewTextBoxColumn593->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn593->Name = L"dataGridViewTextBoxColumn593";
			this->dataGridViewTextBoxColumn593->ReadOnly = true;
			this->dataGridViewTextBoxColumn593->Width = 6;
			// 
			// dataGridViewTextBoxColumn594
			// 
			this->dataGridViewTextBoxColumn594->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn594->Name = L"dataGridViewTextBoxColumn594";
			this->dataGridViewTextBoxColumn594->ReadOnly = true;
			this->dataGridViewTextBoxColumn594->Width = 6;
			// 
			// dataGridViewTextBoxColumn595
			// 
			this->dataGridViewTextBoxColumn595->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn595->Name = L"dataGridViewTextBoxColumn595";
			this->dataGridViewTextBoxColumn595->ReadOnly = true;
			this->dataGridViewTextBoxColumn595->Width = 6;
			// 
			// dataGridViewTextBoxColumn596
			// 
			this->dataGridViewTextBoxColumn596->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn596->Name = L"dataGridViewTextBoxColumn596";
			this->dataGridViewTextBoxColumn596->ReadOnly = true;
			this->dataGridViewTextBoxColumn596->Width = 6;
			// 
			// dataGridViewTextBoxColumn597
			// 
			this->dataGridViewTextBoxColumn597->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn597->Name = L"dataGridViewTextBoxColumn597";
			this->dataGridViewTextBoxColumn597->ReadOnly = true;
			this->dataGridViewTextBoxColumn597->Width = 6;
			// 
			// dataGridViewTextBoxColumn598
			// 
			this->dataGridViewTextBoxColumn598->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn598->Name = L"dataGridViewTextBoxColumn598";
			this->dataGridViewTextBoxColumn598->ReadOnly = true;
			this->dataGridViewTextBoxColumn598->Width = 6;
			// 
			// dataGridViewTextBoxColumn599
			// 
			this->dataGridViewTextBoxColumn599->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn599->Name = L"dataGridViewTextBoxColumn599";
			this->dataGridViewTextBoxColumn599->ReadOnly = true;
			this->dataGridViewTextBoxColumn599->Width = 6;
			// 
			// dataGridViewTextBoxColumn600
			// 
			this->dataGridViewTextBoxColumn600->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn600->Name = L"dataGridViewTextBoxColumn600";
			this->dataGridViewTextBoxColumn600->ReadOnly = true;
			this->dataGridViewTextBoxColumn600->Width = 6;
			// 
			// dataGridViewTextBoxColumn601
			// 
			this->dataGridViewTextBoxColumn601->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn601->Name = L"dataGridViewTextBoxColumn601";
			this->dataGridViewTextBoxColumn601->ReadOnly = true;
			this->dataGridViewTextBoxColumn601->Width = 6;
			// 
			// dataGridViewTextBoxColumn602
			// 
			this->dataGridViewTextBoxColumn602->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn602->Name = L"dataGridViewTextBoxColumn602";
			this->dataGridViewTextBoxColumn602->ReadOnly = true;
			this->dataGridViewTextBoxColumn602->Width = 6;
			// 
			// dataGridViewTextBoxColumn603
			// 
			this->dataGridViewTextBoxColumn603->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn603->Name = L"dataGridViewTextBoxColumn603";
			this->dataGridViewTextBoxColumn603->ReadOnly = true;
			this->dataGridViewTextBoxColumn603->Width = 6;
			// 
			// dataGridViewTextBoxColumn604
			// 
			this->dataGridViewTextBoxColumn604->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn604->Name = L"dataGridViewTextBoxColumn604";
			this->dataGridViewTextBoxColumn604->ReadOnly = true;
			this->dataGridViewTextBoxColumn604->Width = 6;
			// 
			// dataGridViewTextBoxColumn605
			// 
			this->dataGridViewTextBoxColumn605->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn605->Name = L"dataGridViewTextBoxColumn605";
			this->dataGridViewTextBoxColumn605->ReadOnly = true;
			this->dataGridViewTextBoxColumn605->Width = 6;
			// 
			// dataGridViewTextBoxColumn606
			// 
			this->dataGridViewTextBoxColumn606->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn606->Name = L"dataGridViewTextBoxColumn606";
			this->dataGridViewTextBoxColumn606->ReadOnly = true;
			this->dataGridViewTextBoxColumn606->Width = 6;
			// 
			// dataGridViewTextBoxColumn607
			// 
			this->dataGridViewTextBoxColumn607->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn607->Name = L"dataGridViewTextBoxColumn607";
			this->dataGridViewTextBoxColumn607->ReadOnly = true;
			this->dataGridViewTextBoxColumn607->Width = 6;
			// 
			// dataGridViewTextBoxColumn608
			// 
			this->dataGridViewTextBoxColumn608->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn608->Name = L"dataGridViewTextBoxColumn608";
			this->dataGridViewTextBoxColumn608->ReadOnly = true;
			this->dataGridViewTextBoxColumn608->Width = 6;
			// 
			// dataGridViewTextBoxColumn609
			// 
			this->dataGridViewTextBoxColumn609->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn609->Name = L"dataGridViewTextBoxColumn609";
			this->dataGridViewTextBoxColumn609->ReadOnly = true;
			this->dataGridViewTextBoxColumn609->Width = 6;
			// 
			// dataGridViewTextBoxColumn610
			// 
			this->dataGridViewTextBoxColumn610->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn610->Name = L"dataGridViewTextBoxColumn610";
			this->dataGridViewTextBoxColumn610->ReadOnly = true;
			this->dataGridViewTextBoxColumn610->Width = 6;
			// 
			// dataGridViewTextBoxColumn611
			// 
			this->dataGridViewTextBoxColumn611->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn611->Name = L"dataGridViewTextBoxColumn611";
			this->dataGridViewTextBoxColumn611->ReadOnly = true;
			this->dataGridViewTextBoxColumn611->Width = 6;
			// 
			// dataGridViewTextBoxColumn612
			// 
			this->dataGridViewTextBoxColumn612->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn612->Name = L"dataGridViewTextBoxColumn612";
			this->dataGridViewTextBoxColumn612->ReadOnly = true;
			this->dataGridViewTextBoxColumn612->Width = 6;
			// 
			// dataGridViewTextBoxColumn613
			// 
			this->dataGridViewTextBoxColumn613->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn613->Name = L"dataGridViewTextBoxColumn613";
			this->dataGridViewTextBoxColumn613->ReadOnly = true;
			this->dataGridViewTextBoxColumn613->Width = 6;
			// 
			// dataGridViewTextBoxColumn614
			// 
			this->dataGridViewTextBoxColumn614->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn614->Name = L"dataGridViewTextBoxColumn614";
			this->dataGridViewTextBoxColumn614->ReadOnly = true;
			this->dataGridViewTextBoxColumn614->Width = 6;
			// 
			// dataGridViewTextBoxColumn615
			// 
			this->dataGridViewTextBoxColumn615->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn615->Name = L"dataGridViewTextBoxColumn615";
			this->dataGridViewTextBoxColumn615->ReadOnly = true;
			this->dataGridViewTextBoxColumn615->Width = 6;
			// 
			// dataGridViewTextBoxColumn616
			// 
			this->dataGridViewTextBoxColumn616->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn616->Name = L"dataGridViewTextBoxColumn616";
			this->dataGridViewTextBoxColumn616->ReadOnly = true;
			this->dataGridViewTextBoxColumn616->Width = 6;
			// 
			// dataGridViewTextBoxColumn617
			// 
			this->dataGridViewTextBoxColumn617->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn617->Name = L"dataGridViewTextBoxColumn617";
			this->dataGridViewTextBoxColumn617->ReadOnly = true;
			this->dataGridViewTextBoxColumn617->Width = 6;
			// 
			// dataGridViewTextBoxColumn618
			// 
			this->dataGridViewTextBoxColumn618->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn618->Name = L"dataGridViewTextBoxColumn618";
			this->dataGridViewTextBoxColumn618->ReadOnly = true;
			this->dataGridViewTextBoxColumn618->Width = 6;
			// 
			// dataGridViewTextBoxColumn619
			// 
			this->dataGridViewTextBoxColumn619->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn619->Name = L"dataGridViewTextBoxColumn619";
			this->dataGridViewTextBoxColumn619->ReadOnly = true;
			this->dataGridViewTextBoxColumn619->Width = 6;
			// 
			// dataGridViewTextBoxColumn620
			// 
			this->dataGridViewTextBoxColumn620->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn620->Name = L"dataGridViewTextBoxColumn620";
			this->dataGridViewTextBoxColumn620->ReadOnly = true;
			this->dataGridViewTextBoxColumn620->Width = 6;
			// 
			// dataGridViewTextBoxColumn621
			// 
			this->dataGridViewTextBoxColumn621->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn621->Name = L"dataGridViewTextBoxColumn621";
			this->dataGridViewTextBoxColumn621->ReadOnly = true;
			this->dataGridViewTextBoxColumn621->Width = 6;
			// 
			// dataGridViewTextBoxColumn622
			// 
			this->dataGridViewTextBoxColumn622->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn622->Name = L"dataGridViewTextBoxColumn622";
			this->dataGridViewTextBoxColumn622->ReadOnly = true;
			this->dataGridViewTextBoxColumn622->Width = 6;
			// 
			// dataGridViewTextBoxColumn623
			// 
			this->dataGridViewTextBoxColumn623->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn623->Name = L"dataGridViewTextBoxColumn623";
			this->dataGridViewTextBoxColumn623->ReadOnly = true;
			this->dataGridViewTextBoxColumn623->Width = 6;
			// 
			// dataGridViewTextBoxColumn624
			// 
			this->dataGridViewTextBoxColumn624->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn624->Name = L"dataGridViewTextBoxColumn624";
			this->dataGridViewTextBoxColumn624->ReadOnly = true;
			this->dataGridViewTextBoxColumn624->Width = 6;
			// 
			// dataGridViewTextBoxColumn625
			// 
			this->dataGridViewTextBoxColumn625->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn625->Name = L"dataGridViewTextBoxColumn625";
			this->dataGridViewTextBoxColumn625->ReadOnly = true;
			this->dataGridViewTextBoxColumn625->Width = 6;
			// 
			// dataGridViewTextBoxColumn626
			// 
			this->dataGridViewTextBoxColumn626->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn626->Name = L"dataGridViewTextBoxColumn626";
			this->dataGridViewTextBoxColumn626->ReadOnly = true;
			this->dataGridViewTextBoxColumn626->Width = 6;
			// 
			// dataGridViewTextBoxColumn627
			// 
			this->dataGridViewTextBoxColumn627->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn627->Name = L"dataGridViewTextBoxColumn627";
			this->dataGridViewTextBoxColumn627->ReadOnly = true;
			this->dataGridViewTextBoxColumn627->Width = 6;
			// 
			// dataGridViewTextBoxColumn628
			// 
			this->dataGridViewTextBoxColumn628->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn628->Name = L"dataGridViewTextBoxColumn628";
			this->dataGridViewTextBoxColumn628->ReadOnly = true;
			this->dataGridViewTextBoxColumn628->Width = 6;
			// 
			// dataGridViewTextBoxColumn629
			// 
			this->dataGridViewTextBoxColumn629->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn629->Name = L"dataGridViewTextBoxColumn629";
			this->dataGridViewTextBoxColumn629->ReadOnly = true;
			this->dataGridViewTextBoxColumn629->Width = 6;
			// 
			// dataGridViewTextBoxColumn630
			// 
			this->dataGridViewTextBoxColumn630->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn630->Name = L"dataGridViewTextBoxColumn630";
			this->dataGridViewTextBoxColumn630->ReadOnly = true;
			this->dataGridViewTextBoxColumn630->Width = 6;
			// 
			// dataGridViewTextBoxColumn631
			// 
			this->dataGridViewTextBoxColumn631->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn631->Name = L"dataGridViewTextBoxColumn631";
			this->dataGridViewTextBoxColumn631->ReadOnly = true;
			this->dataGridViewTextBoxColumn631->Width = 6;
			// 
			// dataGridViewTextBoxColumn632
			// 
			this->dataGridViewTextBoxColumn632->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn632->Name = L"dataGridViewTextBoxColumn632";
			this->dataGridViewTextBoxColumn632->ReadOnly = true;
			this->dataGridViewTextBoxColumn632->Width = 6;
			// 
			// dataGridViewTextBoxColumn633
			// 
			this->dataGridViewTextBoxColumn633->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn633->Name = L"dataGridViewTextBoxColumn633";
			this->dataGridViewTextBoxColumn633->ReadOnly = true;
			this->dataGridViewTextBoxColumn633->Width = 6;
			// 
			// dataGridViewTextBoxColumn634
			// 
			this->dataGridViewTextBoxColumn634->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn634->Name = L"dataGridViewTextBoxColumn634";
			this->dataGridViewTextBoxColumn634->ReadOnly = true;
			this->dataGridViewTextBoxColumn634->Width = 6;
			// 
			// dataGridViewTextBoxColumn635
			// 
			this->dataGridViewTextBoxColumn635->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn635->Name = L"dataGridViewTextBoxColumn635";
			this->dataGridViewTextBoxColumn635->ReadOnly = true;
			this->dataGridViewTextBoxColumn635->Width = 6;
			// 
			// dataGridViewTextBoxColumn636
			// 
			this->dataGridViewTextBoxColumn636->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn636->Name = L"dataGridViewTextBoxColumn636";
			this->dataGridViewTextBoxColumn636->ReadOnly = true;
			this->dataGridViewTextBoxColumn636->Width = 6;
			// 
			// dataGridViewTextBoxColumn637
			// 
			this->dataGridViewTextBoxColumn637->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn637->Name = L"dataGridViewTextBoxColumn637";
			this->dataGridViewTextBoxColumn637->ReadOnly = true;
			this->dataGridViewTextBoxColumn637->Width = 6;
			// 
			// dataGridViewTextBoxColumn638
			// 
			this->dataGridViewTextBoxColumn638->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn638->Name = L"dataGridViewTextBoxColumn638";
			this->dataGridViewTextBoxColumn638->ReadOnly = true;
			this->dataGridViewTextBoxColumn638->Width = 6;
			// 
			// dataGridViewTextBoxColumn639
			// 
			this->dataGridViewTextBoxColumn639->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn639->Name = L"dataGridViewTextBoxColumn639";
			this->dataGridViewTextBoxColumn639->ReadOnly = true;
			this->dataGridViewTextBoxColumn639->Width = 6;
			// 
			// dataGridViewTextBoxColumn640
			// 
			this->dataGridViewTextBoxColumn640->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn640->Name = L"dataGridViewTextBoxColumn640";
			this->dataGridViewTextBoxColumn640->ReadOnly = true;
			this->dataGridViewTextBoxColumn640->Width = 6;
			// 
			// label19
			// 
			this->label19->AutoSize = true;
			this->label19->Location = System::Drawing::Point(74, 501);
			this->label19->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label19->Name = L"label19";
			this->label19->Size = System::Drawing::Size(78, 13);
			this->label19->TabIndex = 61;
			this->label19->Text = L"Voxel Pos (Val)";
			// 
			// label20
			// 
			this->label20->AutoSize = true;
			this->label20->Location = System::Drawing::Point(318, 501);
			this->label20->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label20->Name = L"label20";
			this->label20->Size = System::Drawing::Size(35, 13);
			this->label20->TabIndex = 60;
			this->label20->Text = L"Pos Y";
			// 
			// label30
			// 
			this->label30->AutoSize = true;
			this->label30->Location = System::Drawing::Point(227, 501);
			this->label30->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label30->Name = L"label30";
			this->label30->Size = System::Drawing::Size(35, 13);
			this->label30->TabIndex = 59;
			this->label30->Text = L"Pos X";
			// 
			// label31
			// 
			this->label31->AutoSize = true;
			this->label31->Location = System::Drawing::Point(30, 452);
			this->label31->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label31->Name = L"label31";
			this->label31->Size = System::Drawing::Size(43, 13);
			this->label31->TabIndex = 58;
			this->label31->Text = L"HEX 0x";
			// 
			// label32
			// 
			this->label32->AutoSize = true;
			this->label32->Location = System::Drawing::Point(44, 430);
			this->label32->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label32->Name = L"label32";
			this->label32->Size = System::Drawing::Size(27, 13);
			this->label32->TabIndex = 57;
			this->label32->Text = L"Bits:";
			// 
			// label33
			// 
			this->label33->AutoSize = true;
			this->label33->Location = System::Drawing::Point(18, 402);
			this->label33->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label33->Name = L"label33";
			this->label33->Size = System::Drawing::Size(20, 13);
			this->label33->TabIndex = 56;
			this->label33->Text = L"Y=";
			// 
			// label34
			// 
			this->label34->AutoSize = true;
			this->label34->Location = System::Drawing::Point(18, 373);
			this->label34->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label34->Name = L"label34";
			this->label34->Size = System::Drawing::Size(20, 13);
			this->label34->TabIndex = 55;
			this->label34->Text = L"X=";
			// 
			// label35
			// 
			this->label35->AutoSize = true;
			this->label35->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label35->Location = System::Drawing::Point(34, 403);
			this->label35->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label35->Name = L"label35";
			this->label35->Size = System::Drawing::Size(21, 13);
			this->label35->TabIndex = 54;
			this->label35->Text = L"__";
			// 
			// label36
			// 
			this->label36->AutoSize = true;
			this->label36->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label36->Location = System::Drawing::Point(34, 373);
			this->label36->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label36->Name = L"label36";
			this->label36->Size = System::Drawing::Size(21, 13);
			this->label36->TabIndex = 53;
			this->label36->Text = L"__";
			// 
			// textBox11
			// 
			this->textBox11->Location = System::Drawing::Point(77, 516);
			this->textBox11->Margin = System::Windows::Forms::Padding(2);
			this->textBox11->Name = L"textBox11";
			this->textBox11->Size = System::Drawing::Size(76, 20);
			this->textBox11->TabIndex = 52;
			// 
			// textBox12
			// 
			this->textBox12->Location = System::Drawing::Point(230, 516);
			this->textBox12->Margin = System::Windows::Forms::Padding(2);
			this->textBox12->Name = L"textBox12";
			this->textBox12->Size = System::Drawing::Size(76, 20);
			this->textBox12->TabIndex = 51;
			// 
			// textBox13
			// 
			this->textBox13->Location = System::Drawing::Point(321, 516);
			this->textBox13->Margin = System::Windows::Forms::Padding(2);
			this->textBox13->Name = L"textBox13";
			this->textBox13->Size = System::Drawing::Size(76, 20);
			this->textBox13->TabIndex = 50;
			// 
			// textBox14
			// 
			this->textBox14->Location = System::Drawing::Point(75, 448);
			this->textBox14->Margin = System::Windows::Forms::Padding(2);
			this->textBox14->MaxLength = 16;
			this->textBox14->Name = L"textBox14";
			this->textBox14->Size = System::Drawing::Size(349, 20);
			this->textBox14->TabIndex = 49;
			// 
			// textBox15
			// 
			this->textBox15->Location = System::Drawing::Point(75, 425);
			this->textBox15->Margin = System::Windows::Forms::Padding(2);
			this->textBox15->MaxLength = 64;
			this->textBox15->Name = L"textBox15";
			this->textBox15->Size = System::Drawing::Size(397, 20);
			this->textBox15->TabIndex = 48;
			// 
			// dataGridView3
			// 
			this->dataGridView3->AllowDrop = true;
			this->dataGridView3->AllowUserToAddRows = false;
			this->dataGridView3->AllowUserToDeleteRows = false;
			this->dataGridView3->AllowUserToResizeColumns = false;
			this->dataGridView3->AllowUserToResizeRows = false;
			this->dataGridView3->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView3->ColumnHeadersVisible = false;
			this->dataGridView3->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn65, 
				this->dataGridViewTextBoxColumn66, this->dataGridViewTextBoxColumn67, this->dataGridViewTextBoxColumn68, this->dataGridViewTextBoxColumn69, 
				this->dataGridViewTextBoxColumn70, this->dataGridViewTextBoxColumn71, this->dataGridViewTextBoxColumn72, this->dataGridViewTextBoxColumn73, 
				this->dataGridViewTextBoxColumn74, this->dataGridViewTextBoxColumn75, this->dataGridViewTextBoxColumn76, this->dataGridViewTextBoxColumn77, 
				this->dataGridViewTextBoxColumn78, this->dataGridViewTextBoxColumn79, this->dataGridViewTextBoxColumn80, this->dataGridViewTextBoxColumn81, 
				this->dataGridViewTextBoxColumn82, this->dataGridViewTextBoxColumn83, this->dataGridViewTextBoxColumn84, this->dataGridViewTextBoxColumn85, 
				this->dataGridViewTextBoxColumn86, this->dataGridViewTextBoxColumn87, this->dataGridViewTextBoxColumn88, this->dataGridViewTextBoxColumn89, 
				this->dataGridViewTextBoxColumn90, this->dataGridViewTextBoxColumn91, this->dataGridViewTextBoxColumn92, this->dataGridViewTextBoxColumn93, 
				this->dataGridViewTextBoxColumn94, this->dataGridViewTextBoxColumn95, this->dataGridViewTextBoxColumn96, this->dataGridViewTextBoxColumn97, 
				this->dataGridViewTextBoxColumn98, this->dataGridViewTextBoxColumn99, this->dataGridViewTextBoxColumn100, this->dataGridViewTextBoxColumn101, 
				this->dataGridViewTextBoxColumn102, this->dataGridViewTextBoxColumn103, this->dataGridViewTextBoxColumn104, this->dataGridViewTextBoxColumn105, 
				this->dataGridViewTextBoxColumn106, this->dataGridViewTextBoxColumn107, this->dataGridViewTextBoxColumn108, this->dataGridViewTextBoxColumn109, 
				this->dataGridViewTextBoxColumn110, this->dataGridViewTextBoxColumn111, this->dataGridViewTextBoxColumn112, this->dataGridViewTextBoxColumn113, 
				this->dataGridViewTextBoxColumn114, this->dataGridViewTextBoxColumn115, this->dataGridViewTextBoxColumn116, this->dataGridViewTextBoxColumn117, 
				this->dataGridViewTextBoxColumn118, this->dataGridViewTextBoxColumn119, this->dataGridViewTextBoxColumn120, this->dataGridViewTextBoxColumn121, 
				this->dataGridViewTextBoxColumn122, this->dataGridViewTextBoxColumn123, this->dataGridViewTextBoxColumn124, this->dataGridViewTextBoxColumn125, 
				this->dataGridViewTextBoxColumn126, this->dataGridViewTextBoxColumn127, this->dataGridViewTextBoxColumn128});
			this->dataGridView3->Location = System::Drawing::Point(36, 15);
			this->dataGridView3->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView3->MultiSelect = false;
			this->dataGridView3->Name = L"dataGridView3";
			this->dataGridView3->ReadOnly = true;
			this->dataGridView3->RowHeadersVisible = false;
			this->dataGridView3->RowHeadersWidth = 15;
			dataGridViewCellStyle6->BackColor = System::Drawing::Color::White;
			this->dataGridView3->RowsDefaultCellStyle = dataGridViewCellStyle6;
			this->dataGridView3->RowTemplate->Height = 10;
			this->dataGridView3->Size = System::Drawing::Size(656, 338);
			this->dataGridView3->TabIndex = 32;
			this->dataGridView3->CellMouseClick += gcnew System::Windows::Forms::DataGridViewCellMouseEventHandler(this, &Form1::dataGridView3_CellMouseClick);
			this->dataGridView3->SelectionChanged += gcnew System::EventHandler(this, &Form1::dataGridView3_SelectionChanged);
			// 
			// dataGridViewTextBoxColumn65
			// 
			this->dataGridViewTextBoxColumn65->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn65->Name = L"dataGridViewTextBoxColumn65";
			this->dataGridViewTextBoxColumn65->ReadOnly = true;
			this->dataGridViewTextBoxColumn65->Width = 10;
			// 
			// dataGridViewTextBoxColumn66
			// 
			this->dataGridViewTextBoxColumn66->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn66->Name = L"dataGridViewTextBoxColumn66";
			this->dataGridViewTextBoxColumn66->ReadOnly = true;
			this->dataGridViewTextBoxColumn66->Width = 10;
			// 
			// dataGridViewTextBoxColumn67
			// 
			this->dataGridViewTextBoxColumn67->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn67->Name = L"dataGridViewTextBoxColumn67";
			this->dataGridViewTextBoxColumn67->ReadOnly = true;
			this->dataGridViewTextBoxColumn67->Width = 10;
			// 
			// dataGridViewTextBoxColumn68
			// 
			this->dataGridViewTextBoxColumn68->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn68->Name = L"dataGridViewTextBoxColumn68";
			this->dataGridViewTextBoxColumn68->ReadOnly = true;
			this->dataGridViewTextBoxColumn68->Width = 10;
			// 
			// dataGridViewTextBoxColumn69
			// 
			this->dataGridViewTextBoxColumn69->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn69->Name = L"dataGridViewTextBoxColumn69";
			this->dataGridViewTextBoxColumn69->ReadOnly = true;
			this->dataGridViewTextBoxColumn69->Width = 10;
			// 
			// dataGridViewTextBoxColumn70
			// 
			this->dataGridViewTextBoxColumn70->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn70->Name = L"dataGridViewTextBoxColumn70";
			this->dataGridViewTextBoxColumn70->ReadOnly = true;
			this->dataGridViewTextBoxColumn70->Width = 10;
			// 
			// dataGridViewTextBoxColumn71
			// 
			this->dataGridViewTextBoxColumn71->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn71->Name = L"dataGridViewTextBoxColumn71";
			this->dataGridViewTextBoxColumn71->ReadOnly = true;
			this->dataGridViewTextBoxColumn71->Width = 10;
			// 
			// dataGridViewTextBoxColumn72
			// 
			this->dataGridViewTextBoxColumn72->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn72->Name = L"dataGridViewTextBoxColumn72";
			this->dataGridViewTextBoxColumn72->ReadOnly = true;
			this->dataGridViewTextBoxColumn72->Width = 10;
			// 
			// dataGridViewTextBoxColumn73
			// 
			this->dataGridViewTextBoxColumn73->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn73->Name = L"dataGridViewTextBoxColumn73";
			this->dataGridViewTextBoxColumn73->ReadOnly = true;
			this->dataGridViewTextBoxColumn73->Width = 10;
			// 
			// dataGridViewTextBoxColumn74
			// 
			this->dataGridViewTextBoxColumn74->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn74->Name = L"dataGridViewTextBoxColumn74";
			this->dataGridViewTextBoxColumn74->ReadOnly = true;
			this->dataGridViewTextBoxColumn74->Width = 10;
			// 
			// dataGridViewTextBoxColumn75
			// 
			this->dataGridViewTextBoxColumn75->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn75->Name = L"dataGridViewTextBoxColumn75";
			this->dataGridViewTextBoxColumn75->ReadOnly = true;
			this->dataGridViewTextBoxColumn75->Width = 10;
			// 
			// dataGridViewTextBoxColumn76
			// 
			this->dataGridViewTextBoxColumn76->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn76->Name = L"dataGridViewTextBoxColumn76";
			this->dataGridViewTextBoxColumn76->ReadOnly = true;
			this->dataGridViewTextBoxColumn76->Width = 10;
			// 
			// dataGridViewTextBoxColumn77
			// 
			this->dataGridViewTextBoxColumn77->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn77->Name = L"dataGridViewTextBoxColumn77";
			this->dataGridViewTextBoxColumn77->ReadOnly = true;
			this->dataGridViewTextBoxColumn77->Width = 10;
			// 
			// dataGridViewTextBoxColumn78
			// 
			this->dataGridViewTextBoxColumn78->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn78->Name = L"dataGridViewTextBoxColumn78";
			this->dataGridViewTextBoxColumn78->ReadOnly = true;
			this->dataGridViewTextBoxColumn78->Width = 10;
			// 
			// dataGridViewTextBoxColumn79
			// 
			this->dataGridViewTextBoxColumn79->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn79->Name = L"dataGridViewTextBoxColumn79";
			this->dataGridViewTextBoxColumn79->ReadOnly = true;
			this->dataGridViewTextBoxColumn79->Width = 10;
			// 
			// dataGridViewTextBoxColumn80
			// 
			this->dataGridViewTextBoxColumn80->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn80->Name = L"dataGridViewTextBoxColumn80";
			this->dataGridViewTextBoxColumn80->ReadOnly = true;
			this->dataGridViewTextBoxColumn80->Width = 10;
			// 
			// dataGridViewTextBoxColumn81
			// 
			this->dataGridViewTextBoxColumn81->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn81->Name = L"dataGridViewTextBoxColumn81";
			this->dataGridViewTextBoxColumn81->ReadOnly = true;
			this->dataGridViewTextBoxColumn81->Width = 10;
			// 
			// dataGridViewTextBoxColumn82
			// 
			this->dataGridViewTextBoxColumn82->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn82->Name = L"dataGridViewTextBoxColumn82";
			this->dataGridViewTextBoxColumn82->ReadOnly = true;
			this->dataGridViewTextBoxColumn82->Width = 10;
			// 
			// dataGridViewTextBoxColumn83
			// 
			this->dataGridViewTextBoxColumn83->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn83->Name = L"dataGridViewTextBoxColumn83";
			this->dataGridViewTextBoxColumn83->ReadOnly = true;
			this->dataGridViewTextBoxColumn83->Width = 10;
			// 
			// dataGridViewTextBoxColumn84
			// 
			this->dataGridViewTextBoxColumn84->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn84->Name = L"dataGridViewTextBoxColumn84";
			this->dataGridViewTextBoxColumn84->ReadOnly = true;
			this->dataGridViewTextBoxColumn84->Width = 10;
			// 
			// dataGridViewTextBoxColumn85
			// 
			this->dataGridViewTextBoxColumn85->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn85->Name = L"dataGridViewTextBoxColumn85";
			this->dataGridViewTextBoxColumn85->ReadOnly = true;
			this->dataGridViewTextBoxColumn85->Width = 10;
			// 
			// dataGridViewTextBoxColumn86
			// 
			this->dataGridViewTextBoxColumn86->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn86->Name = L"dataGridViewTextBoxColumn86";
			this->dataGridViewTextBoxColumn86->ReadOnly = true;
			this->dataGridViewTextBoxColumn86->Width = 10;
			// 
			// dataGridViewTextBoxColumn87
			// 
			this->dataGridViewTextBoxColumn87->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn87->Name = L"dataGridViewTextBoxColumn87";
			this->dataGridViewTextBoxColumn87->ReadOnly = true;
			this->dataGridViewTextBoxColumn87->Width = 10;
			// 
			// dataGridViewTextBoxColumn88
			// 
			this->dataGridViewTextBoxColumn88->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn88->Name = L"dataGridViewTextBoxColumn88";
			this->dataGridViewTextBoxColumn88->ReadOnly = true;
			this->dataGridViewTextBoxColumn88->Width = 10;
			// 
			// dataGridViewTextBoxColumn89
			// 
			this->dataGridViewTextBoxColumn89->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn89->Name = L"dataGridViewTextBoxColumn89";
			this->dataGridViewTextBoxColumn89->ReadOnly = true;
			this->dataGridViewTextBoxColumn89->Width = 10;
			// 
			// dataGridViewTextBoxColumn90
			// 
			this->dataGridViewTextBoxColumn90->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn90->Name = L"dataGridViewTextBoxColumn90";
			this->dataGridViewTextBoxColumn90->ReadOnly = true;
			this->dataGridViewTextBoxColumn90->Width = 10;
			// 
			// dataGridViewTextBoxColumn91
			// 
			this->dataGridViewTextBoxColumn91->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn91->Name = L"dataGridViewTextBoxColumn91";
			this->dataGridViewTextBoxColumn91->ReadOnly = true;
			this->dataGridViewTextBoxColumn91->Width = 10;
			// 
			// dataGridViewTextBoxColumn92
			// 
			this->dataGridViewTextBoxColumn92->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn92->Name = L"dataGridViewTextBoxColumn92";
			this->dataGridViewTextBoxColumn92->ReadOnly = true;
			this->dataGridViewTextBoxColumn92->Width = 10;
			// 
			// dataGridViewTextBoxColumn93
			// 
			this->dataGridViewTextBoxColumn93->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn93->Name = L"dataGridViewTextBoxColumn93";
			this->dataGridViewTextBoxColumn93->ReadOnly = true;
			this->dataGridViewTextBoxColumn93->Width = 10;
			// 
			// dataGridViewTextBoxColumn94
			// 
			this->dataGridViewTextBoxColumn94->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn94->Name = L"dataGridViewTextBoxColumn94";
			this->dataGridViewTextBoxColumn94->ReadOnly = true;
			this->dataGridViewTextBoxColumn94->Width = 10;
			// 
			// dataGridViewTextBoxColumn95
			// 
			this->dataGridViewTextBoxColumn95->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn95->Name = L"dataGridViewTextBoxColumn95";
			this->dataGridViewTextBoxColumn95->ReadOnly = true;
			this->dataGridViewTextBoxColumn95->Width = 10;
			// 
			// dataGridViewTextBoxColumn96
			// 
			this->dataGridViewTextBoxColumn96->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn96->Name = L"dataGridViewTextBoxColumn96";
			this->dataGridViewTextBoxColumn96->ReadOnly = true;
			this->dataGridViewTextBoxColumn96->Width = 10;
			// 
			// dataGridViewTextBoxColumn97
			// 
			this->dataGridViewTextBoxColumn97->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn97->Name = L"dataGridViewTextBoxColumn97";
			this->dataGridViewTextBoxColumn97->ReadOnly = true;
			this->dataGridViewTextBoxColumn97->Width = 10;
			// 
			// dataGridViewTextBoxColumn98
			// 
			this->dataGridViewTextBoxColumn98->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn98->Name = L"dataGridViewTextBoxColumn98";
			this->dataGridViewTextBoxColumn98->ReadOnly = true;
			this->dataGridViewTextBoxColumn98->Width = 10;
			// 
			// dataGridViewTextBoxColumn99
			// 
			this->dataGridViewTextBoxColumn99->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn99->Name = L"dataGridViewTextBoxColumn99";
			this->dataGridViewTextBoxColumn99->ReadOnly = true;
			this->dataGridViewTextBoxColumn99->Width = 10;
			// 
			// dataGridViewTextBoxColumn100
			// 
			this->dataGridViewTextBoxColumn100->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn100->Name = L"dataGridViewTextBoxColumn100";
			this->dataGridViewTextBoxColumn100->ReadOnly = true;
			this->dataGridViewTextBoxColumn100->Width = 10;
			// 
			// dataGridViewTextBoxColumn101
			// 
			this->dataGridViewTextBoxColumn101->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn101->Name = L"dataGridViewTextBoxColumn101";
			this->dataGridViewTextBoxColumn101->ReadOnly = true;
			this->dataGridViewTextBoxColumn101->Width = 10;
			// 
			// dataGridViewTextBoxColumn102
			// 
			this->dataGridViewTextBoxColumn102->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn102->Name = L"dataGridViewTextBoxColumn102";
			this->dataGridViewTextBoxColumn102->ReadOnly = true;
			this->dataGridViewTextBoxColumn102->Width = 10;
			// 
			// dataGridViewTextBoxColumn103
			// 
			this->dataGridViewTextBoxColumn103->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn103->Name = L"dataGridViewTextBoxColumn103";
			this->dataGridViewTextBoxColumn103->ReadOnly = true;
			this->dataGridViewTextBoxColumn103->Width = 10;
			// 
			// dataGridViewTextBoxColumn104
			// 
			this->dataGridViewTextBoxColumn104->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn104->Name = L"dataGridViewTextBoxColumn104";
			this->dataGridViewTextBoxColumn104->ReadOnly = true;
			this->dataGridViewTextBoxColumn104->Width = 10;
			// 
			// dataGridViewTextBoxColumn105
			// 
			this->dataGridViewTextBoxColumn105->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn105->Name = L"dataGridViewTextBoxColumn105";
			this->dataGridViewTextBoxColumn105->ReadOnly = true;
			this->dataGridViewTextBoxColumn105->Width = 10;
			// 
			// dataGridViewTextBoxColumn106
			// 
			this->dataGridViewTextBoxColumn106->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn106->Name = L"dataGridViewTextBoxColumn106";
			this->dataGridViewTextBoxColumn106->ReadOnly = true;
			this->dataGridViewTextBoxColumn106->Width = 10;
			// 
			// dataGridViewTextBoxColumn107
			// 
			this->dataGridViewTextBoxColumn107->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn107->Name = L"dataGridViewTextBoxColumn107";
			this->dataGridViewTextBoxColumn107->ReadOnly = true;
			this->dataGridViewTextBoxColumn107->Width = 10;
			// 
			// dataGridViewTextBoxColumn108
			// 
			this->dataGridViewTextBoxColumn108->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn108->Name = L"dataGridViewTextBoxColumn108";
			this->dataGridViewTextBoxColumn108->ReadOnly = true;
			this->dataGridViewTextBoxColumn108->Width = 10;
			// 
			// dataGridViewTextBoxColumn109
			// 
			this->dataGridViewTextBoxColumn109->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn109->Name = L"dataGridViewTextBoxColumn109";
			this->dataGridViewTextBoxColumn109->ReadOnly = true;
			this->dataGridViewTextBoxColumn109->Width = 10;
			// 
			// dataGridViewTextBoxColumn110
			// 
			this->dataGridViewTextBoxColumn110->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn110->Name = L"dataGridViewTextBoxColumn110";
			this->dataGridViewTextBoxColumn110->ReadOnly = true;
			this->dataGridViewTextBoxColumn110->Width = 10;
			// 
			// dataGridViewTextBoxColumn111
			// 
			this->dataGridViewTextBoxColumn111->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn111->Name = L"dataGridViewTextBoxColumn111";
			this->dataGridViewTextBoxColumn111->ReadOnly = true;
			this->dataGridViewTextBoxColumn111->Width = 10;
			// 
			// dataGridViewTextBoxColumn112
			// 
			this->dataGridViewTextBoxColumn112->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn112->Name = L"dataGridViewTextBoxColumn112";
			this->dataGridViewTextBoxColumn112->ReadOnly = true;
			this->dataGridViewTextBoxColumn112->Width = 10;
			// 
			// dataGridViewTextBoxColumn113
			// 
			this->dataGridViewTextBoxColumn113->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn113->Name = L"dataGridViewTextBoxColumn113";
			this->dataGridViewTextBoxColumn113->ReadOnly = true;
			this->dataGridViewTextBoxColumn113->Width = 10;
			// 
			// dataGridViewTextBoxColumn114
			// 
			this->dataGridViewTextBoxColumn114->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn114->Name = L"dataGridViewTextBoxColumn114";
			this->dataGridViewTextBoxColumn114->ReadOnly = true;
			this->dataGridViewTextBoxColumn114->Width = 10;
			// 
			// dataGridViewTextBoxColumn115
			// 
			this->dataGridViewTextBoxColumn115->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn115->Name = L"dataGridViewTextBoxColumn115";
			this->dataGridViewTextBoxColumn115->ReadOnly = true;
			this->dataGridViewTextBoxColumn115->Width = 10;
			// 
			// dataGridViewTextBoxColumn116
			// 
			this->dataGridViewTextBoxColumn116->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn116->Name = L"dataGridViewTextBoxColumn116";
			this->dataGridViewTextBoxColumn116->ReadOnly = true;
			this->dataGridViewTextBoxColumn116->Width = 10;
			// 
			// dataGridViewTextBoxColumn117
			// 
			this->dataGridViewTextBoxColumn117->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn117->Name = L"dataGridViewTextBoxColumn117";
			this->dataGridViewTextBoxColumn117->ReadOnly = true;
			this->dataGridViewTextBoxColumn117->Width = 10;
			// 
			// dataGridViewTextBoxColumn118
			// 
			this->dataGridViewTextBoxColumn118->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn118->Name = L"dataGridViewTextBoxColumn118";
			this->dataGridViewTextBoxColumn118->ReadOnly = true;
			this->dataGridViewTextBoxColumn118->Width = 10;
			// 
			// dataGridViewTextBoxColumn119
			// 
			this->dataGridViewTextBoxColumn119->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn119->Name = L"dataGridViewTextBoxColumn119";
			this->dataGridViewTextBoxColumn119->ReadOnly = true;
			this->dataGridViewTextBoxColumn119->Width = 10;
			// 
			// dataGridViewTextBoxColumn120
			// 
			this->dataGridViewTextBoxColumn120->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn120->Name = L"dataGridViewTextBoxColumn120";
			this->dataGridViewTextBoxColumn120->ReadOnly = true;
			this->dataGridViewTextBoxColumn120->Width = 10;
			// 
			// dataGridViewTextBoxColumn121
			// 
			this->dataGridViewTextBoxColumn121->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn121->Name = L"dataGridViewTextBoxColumn121";
			this->dataGridViewTextBoxColumn121->ReadOnly = true;
			this->dataGridViewTextBoxColumn121->Width = 10;
			// 
			// dataGridViewTextBoxColumn122
			// 
			this->dataGridViewTextBoxColumn122->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn122->Name = L"dataGridViewTextBoxColumn122";
			this->dataGridViewTextBoxColumn122->ReadOnly = true;
			this->dataGridViewTextBoxColumn122->Width = 10;
			// 
			// dataGridViewTextBoxColumn123
			// 
			this->dataGridViewTextBoxColumn123->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn123->Name = L"dataGridViewTextBoxColumn123";
			this->dataGridViewTextBoxColumn123->ReadOnly = true;
			this->dataGridViewTextBoxColumn123->Width = 10;
			// 
			// dataGridViewTextBoxColumn124
			// 
			this->dataGridViewTextBoxColumn124->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn124->Name = L"dataGridViewTextBoxColumn124";
			this->dataGridViewTextBoxColumn124->ReadOnly = true;
			this->dataGridViewTextBoxColumn124->Width = 10;
			// 
			// dataGridViewTextBoxColumn125
			// 
			this->dataGridViewTextBoxColumn125->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn125->Name = L"dataGridViewTextBoxColumn125";
			this->dataGridViewTextBoxColumn125->ReadOnly = true;
			this->dataGridViewTextBoxColumn125->Width = 10;
			// 
			// dataGridViewTextBoxColumn126
			// 
			this->dataGridViewTextBoxColumn126->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn126->Name = L"dataGridViewTextBoxColumn126";
			this->dataGridViewTextBoxColumn126->ReadOnly = true;
			this->dataGridViewTextBoxColumn126->Width = 10;
			// 
			// dataGridViewTextBoxColumn127
			// 
			this->dataGridViewTextBoxColumn127->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn127->Name = L"dataGridViewTextBoxColumn127";
			this->dataGridViewTextBoxColumn127->ReadOnly = true;
			this->dataGridViewTextBoxColumn127->Width = 10;
			// 
			// dataGridViewTextBoxColumn128
			// 
			this->dataGridViewTextBoxColumn128->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn128->Name = L"dataGridViewTextBoxColumn128";
			this->dataGridViewTextBoxColumn128->ReadOnly = true;
			this->dataGridViewTextBoxColumn128->Width = 10;
			// 
			// tabPage4
			// 
			this->tabPage4->Controls->Add(this->checkBox13);
			this->tabPage4->Controls->Add(this->checkBox5);
			this->tabPage4->Controls->Add(this->button27);
			this->tabPage4->Controls->Add(this->label165);
			this->tabPage4->Controls->Add(this->textBox47);
			this->tabPage4->Controls->Add(this->label146);
			this->tabPage4->Controls->Add(this->button12);
			this->tabPage4->Controls->Add(this->label147);
			this->tabPage4->Controls->Add(this->button13);
			this->tabPage4->Controls->Add(this->label104);
			this->tabPage4->Controls->Add(this->label105);
			this->tabPage4->Controls->Add(this->label106);
			this->tabPage4->Controls->Add(this->label107);
			this->tabPage4->Controls->Add(this->label108);
			this->tabPage4->Controls->Add(this->label109);
			this->tabPage4->Controls->Add(this->label110);
			this->tabPage4->Controls->Add(this->dataGridView13);
			this->tabPage4->Controls->Add(this->label21);
			this->tabPage4->Controls->Add(this->label22);
			this->tabPage4->Controls->Add(this->label37);
			this->tabPage4->Controls->Add(this->label38);
			this->tabPage4->Controls->Add(this->label39);
			this->tabPage4->Controls->Add(this->label40);
			this->tabPage4->Controls->Add(this->label41);
			this->tabPage4->Controls->Add(this->label42);
			this->tabPage4->Controls->Add(this->label43);
			this->tabPage4->Controls->Add(this->textBox16);
			this->tabPage4->Controls->Add(this->textBox17);
			this->tabPage4->Controls->Add(this->textBox18);
			this->tabPage4->Controls->Add(this->textBox19);
			this->tabPage4->Controls->Add(this->textBox20);
			this->tabPage4->Controls->Add(this->dataGridView4);
			this->tabPage4->Location = System::Drawing::Point(4, 22);
			this->tabPage4->Margin = System::Windows::Forms::Padding(2);
			this->tabPage4->Name = L"tabPage4";
			this->tabPage4->Padding = System::Windows::Forms::Padding(2);
			this->tabPage4->Size = System::Drawing::Size(698, 555);
			this->tabPage4->TabIndex = 3;
			this->tabPage4->Text = L"Floor 3";
			this->tabPage4->UseVisualStyleBackColor = true;
			// 
			// checkBox13
			// 
			this->checkBox13->AutoSize = true;
			this->checkBox13->Location = System::Drawing::Point(560, 496);
			this->checkBox13->Name = L"checkBox13";
			this->checkBox13->Size = System::Drawing::Size(96, 17);
			this->checkBox13->TabIndex = 91;
			this->checkBox13->Text = L"Show teleports";
			this->checkBox13->UseVisualStyleBackColor = true;
			this->checkBox13->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox13_CheckedChanged);
			// 
			// checkBox5
			// 
			this->checkBox5->AutoSize = true;
			this->checkBox5->Location = System::Drawing::Point(560, 475);
			this->checkBox5->Name = L"checkBox5";
			this->checkBox5->Size = System::Drawing::Size(136, 17);
			this->checkBox5->TabIndex = 88;
			this->checkBox5->Text = L"Show cubes with doors";
			this->checkBox5->UseVisualStyleBackColor = true;
			this->checkBox5->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox5_CheckedChanged);
			// 
			// button27
			// 
			this->button27->Enabled = false;
			this->button27->Location = System::Drawing::Point(610, 390);
			this->button27->Name = L"button27";
			this->button27->Size = System::Drawing::Size(32, 20);
			this->button27->TabIndex = 77;
			this->button27->Text = L"OK";
			this->button27->UseVisualStyleBackColor = true;
			this->button27->Click += gcnew System::EventHandler(this, &Form1::button27_Click);
			// 
			// label165
			// 
			this->label165->AutoSize = true;
			this->label165->Location = System::Drawing::Point(533, 373);
			this->label165->Name = L"label165";
			this->label165->Size = System::Drawing::Size(69, 13);
			this->label165->TabIndex = 76;
			this->label165->Text = L"Cube N (hex)";
			// 
			// textBox47
			// 
			this->textBox47->Location = System::Drawing::Point(533, 390);
			this->textBox47->MaxLength = 3;
			this->textBox47->Name = L"textBox47";
			this->textBox47->Size = System::Drawing::Size(70, 20);
			this->textBox47->TabIndex = 75;
			// 
			// label146
			// 
			this->label146->AutoSize = true;
			this->label146->Location = System::Drawing::Point(556, 434);
			this->label146->Name = L"label146";
			this->label146->Size = System::Drawing::Size(47, 13);
			this->label146->TabIndex = 74;
			this->label146->Text = L"label146";
			// 
			// button12
			// 
			this->button12->Location = System::Drawing::Point(475, 424);
			this->button12->Name = L"button12";
			this->button12->Size = System::Drawing::Size(75, 23);
			this->button12->TabIndex = 73;
			this->button12->Text = L"Edit value";
			this->button12->UseVisualStyleBackColor = true;
			this->button12->Click += gcnew System::EventHandler(this, &Form1::button12_Click);
			// 
			// label147
			// 
			this->label147->AutoSize = true;
			this->label147->Location = System::Drawing::Point(503, 458);
			this->label147->Name = L"label147";
			this->label147->Size = System::Drawing::Size(47, 13);
			this->label147->TabIndex = 72;
			this->label147->Text = L"label147";
			// 
			// button13
			// 
			this->button13->Location = System::Drawing::Point(428, 448);
			this->button13->Name = L"button13";
			this->button13->Size = System::Drawing::Size(75, 23);
			this->button13->TabIndex = 71;
			this->button13->Text = L"Edit value";
			this->button13->UseVisualStyleBackColor = true;
			this->button13->Click += gcnew System::EventHandler(this, &Form1::button13_Click);
			// 
			// label104
			// 
			this->label104->AutoSize = true;
			this->label104->Location = System::Drawing::Point(436, 369);
			this->label104->Name = L"label104";
			this->label104->Size = System::Drawing::Size(31, 13);
			this->label104->TabIndex = 70;
			this->label104->Text = L"0123";
			// 
			// label105
			// 
			this->label105->AutoSize = true;
			this->label105->Location = System::Drawing::Point(376, 356);
			this->label105->Name = L"label105";
			this->label105->Size = System::Drawing::Size(67, 13);
			this->label105->TabIndex = 69;
			this->label105->Text = L"0123456789";
			// 
			// label106
			// 
			this->label106->AutoSize = true;
			this->label106->Location = System::Drawing::Point(316, 369);
			this->label106->Name = L"label106";
			this->label106->Size = System::Drawing::Size(67, 13);
			this->label106->TabIndex = 68;
			this->label106->Text = L"0123456789";
			// 
			// label107
			// 
			this->label107->AutoSize = true;
			this->label107->Location = System::Drawing::Point(256, 356);
			this->label107->Name = L"label107";
			this->label107->Size = System::Drawing::Size(67, 13);
			this->label107->TabIndex = 67;
			this->label107->Text = L"0123456789";
			// 
			// label108
			// 
			this->label108->AutoSize = true;
			this->label108->Location = System::Drawing::Point(197, 367);
			this->label108->Name = L"label108";
			this->label108->Size = System::Drawing::Size(67, 13);
			this->label108->TabIndex = 66;
			this->label108->Text = L"0123456789";
			// 
			// label109
			// 
			this->label109->AutoSize = true;
			this->label109->Location = System::Drawing::Point(135, 356);
			this->label109->Name = L"label109";
			this->label109->Size = System::Drawing::Size(67, 13);
			this->label109->TabIndex = 65;
			this->label109->Text = L"0123456789";
			// 
			// label110
			// 
			this->label110->AutoSize = true;
			this->label110->Location = System::Drawing::Point(75, 367);
			this->label110->Name = L"label110";
			this->label110->Size = System::Drawing::Size(67, 13);
			this->label110->TabIndex = 64;
			this->label110->Text = L"0123456789";
			// 
			// dataGridView13
			// 
			this->dataGridView13->AllowDrop = true;
			this->dataGridView13->AllowUserToAddRows = false;
			this->dataGridView13->AllowUserToDeleteRows = false;
			this->dataGridView13->AllowUserToResizeColumns = false;
			this->dataGridView13->AllowUserToResizeRows = false;
			this->dataGridView13->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView13->ColumnHeadersVisible = false;
			this->dataGridView13->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn641, 
				this->dataGridViewTextBoxColumn642, this->dataGridViewTextBoxColumn643, this->dataGridViewTextBoxColumn644, this->dataGridViewTextBoxColumn645, 
				this->dataGridViewTextBoxColumn646, this->dataGridViewTextBoxColumn647, this->dataGridViewTextBoxColumn648, this->dataGridViewTextBoxColumn649, 
				this->dataGridViewTextBoxColumn650, this->dataGridViewTextBoxColumn651, this->dataGridViewTextBoxColumn652, this->dataGridViewTextBoxColumn653, 
				this->dataGridViewTextBoxColumn654, this->dataGridViewTextBoxColumn655, this->dataGridViewTextBoxColumn656, this->dataGridViewTextBoxColumn657, 
				this->dataGridViewTextBoxColumn658, this->dataGridViewTextBoxColumn659, this->dataGridViewTextBoxColumn660, this->dataGridViewTextBoxColumn661, 
				this->dataGridViewTextBoxColumn662, this->dataGridViewTextBoxColumn663, this->dataGridViewTextBoxColumn664, this->dataGridViewTextBoxColumn665, 
				this->dataGridViewTextBoxColumn666, this->dataGridViewTextBoxColumn667, this->dataGridViewTextBoxColumn668, this->dataGridViewTextBoxColumn669, 
				this->dataGridViewTextBoxColumn670, this->dataGridViewTextBoxColumn671, this->dataGridViewTextBoxColumn672, this->dataGridViewTextBoxColumn673, 
				this->dataGridViewTextBoxColumn674, this->dataGridViewTextBoxColumn675, this->dataGridViewTextBoxColumn676, this->dataGridViewTextBoxColumn677, 
				this->dataGridViewTextBoxColumn678, this->dataGridViewTextBoxColumn679, this->dataGridViewTextBoxColumn680, this->dataGridViewTextBoxColumn681, 
				this->dataGridViewTextBoxColumn682, this->dataGridViewTextBoxColumn683, this->dataGridViewTextBoxColumn684, this->dataGridViewTextBoxColumn685, 
				this->dataGridViewTextBoxColumn686, this->dataGridViewTextBoxColumn687, this->dataGridViewTextBoxColumn688, this->dataGridViewTextBoxColumn689, 
				this->dataGridViewTextBoxColumn690, this->dataGridViewTextBoxColumn691, this->dataGridViewTextBoxColumn692, this->dataGridViewTextBoxColumn693, 
				this->dataGridViewTextBoxColumn694, this->dataGridViewTextBoxColumn695, this->dataGridViewTextBoxColumn696, this->dataGridViewTextBoxColumn697, 
				this->dataGridViewTextBoxColumn698, this->dataGridViewTextBoxColumn699, this->dataGridViewTextBoxColumn700, this->dataGridViewTextBoxColumn701, 
				this->dataGridViewTextBoxColumn702, this->dataGridViewTextBoxColumn703, this->dataGridViewTextBoxColumn704});
			this->dataGridView13->Location = System::Drawing::Point(77, 383);
			this->dataGridView13->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView13->Name = L"dataGridView13";
			this->dataGridView13->ReadOnly = true;
			this->dataGridView13->RowHeadersVisible = false;
			this->dataGridView13->RowHeadersWidth = 15;
			dataGridViewCellStyle7->BackColor = System::Drawing::Color::White;
			this->dataGridView13->RowsDefaultCellStyle = dataGridViewCellStyle7;
			this->dataGridView13->RowTemplate->Height = 35;
			this->dataGridView13->Size = System::Drawing::Size(390, 41);
			this->dataGridView13->TabIndex = 63;
			// 
			// dataGridViewTextBoxColumn641
			// 
			this->dataGridViewTextBoxColumn641->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn641->Name = L"dataGridViewTextBoxColumn641";
			this->dataGridViewTextBoxColumn641->ReadOnly = true;
			this->dataGridViewTextBoxColumn641->Width = 6;
			// 
			// dataGridViewTextBoxColumn642
			// 
			this->dataGridViewTextBoxColumn642->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn642->Name = L"dataGridViewTextBoxColumn642";
			this->dataGridViewTextBoxColumn642->ReadOnly = true;
			this->dataGridViewTextBoxColumn642->Width = 6;
			// 
			// dataGridViewTextBoxColumn643
			// 
			this->dataGridViewTextBoxColumn643->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn643->Name = L"dataGridViewTextBoxColumn643";
			this->dataGridViewTextBoxColumn643->ReadOnly = true;
			this->dataGridViewTextBoxColumn643->Width = 6;
			// 
			// dataGridViewTextBoxColumn644
			// 
			this->dataGridViewTextBoxColumn644->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn644->Name = L"dataGridViewTextBoxColumn644";
			this->dataGridViewTextBoxColumn644->ReadOnly = true;
			this->dataGridViewTextBoxColumn644->Width = 6;
			// 
			// dataGridViewTextBoxColumn645
			// 
			this->dataGridViewTextBoxColumn645->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn645->Name = L"dataGridViewTextBoxColumn645";
			this->dataGridViewTextBoxColumn645->ReadOnly = true;
			this->dataGridViewTextBoxColumn645->Width = 6;
			// 
			// dataGridViewTextBoxColumn646
			// 
			this->dataGridViewTextBoxColumn646->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn646->Name = L"dataGridViewTextBoxColumn646";
			this->dataGridViewTextBoxColumn646->ReadOnly = true;
			this->dataGridViewTextBoxColumn646->Width = 6;
			// 
			// dataGridViewTextBoxColumn647
			// 
			this->dataGridViewTextBoxColumn647->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn647->Name = L"dataGridViewTextBoxColumn647";
			this->dataGridViewTextBoxColumn647->ReadOnly = true;
			this->dataGridViewTextBoxColumn647->Width = 6;
			// 
			// dataGridViewTextBoxColumn648
			// 
			this->dataGridViewTextBoxColumn648->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn648->Name = L"dataGridViewTextBoxColumn648";
			this->dataGridViewTextBoxColumn648->ReadOnly = true;
			this->dataGridViewTextBoxColumn648->Width = 6;
			// 
			// dataGridViewTextBoxColumn649
			// 
			this->dataGridViewTextBoxColumn649->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn649->Name = L"dataGridViewTextBoxColumn649";
			this->dataGridViewTextBoxColumn649->ReadOnly = true;
			this->dataGridViewTextBoxColumn649->Width = 6;
			// 
			// dataGridViewTextBoxColumn650
			// 
			this->dataGridViewTextBoxColumn650->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn650->Name = L"dataGridViewTextBoxColumn650";
			this->dataGridViewTextBoxColumn650->ReadOnly = true;
			this->dataGridViewTextBoxColumn650->Width = 6;
			// 
			// dataGridViewTextBoxColumn651
			// 
			this->dataGridViewTextBoxColumn651->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn651->Name = L"dataGridViewTextBoxColumn651";
			this->dataGridViewTextBoxColumn651->ReadOnly = true;
			this->dataGridViewTextBoxColumn651->Width = 6;
			// 
			// dataGridViewTextBoxColumn652
			// 
			this->dataGridViewTextBoxColumn652->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn652->Name = L"dataGridViewTextBoxColumn652";
			this->dataGridViewTextBoxColumn652->ReadOnly = true;
			this->dataGridViewTextBoxColumn652->Width = 6;
			// 
			// dataGridViewTextBoxColumn653
			// 
			this->dataGridViewTextBoxColumn653->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn653->Name = L"dataGridViewTextBoxColumn653";
			this->dataGridViewTextBoxColumn653->ReadOnly = true;
			this->dataGridViewTextBoxColumn653->Width = 6;
			// 
			// dataGridViewTextBoxColumn654
			// 
			this->dataGridViewTextBoxColumn654->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn654->Name = L"dataGridViewTextBoxColumn654";
			this->dataGridViewTextBoxColumn654->ReadOnly = true;
			this->dataGridViewTextBoxColumn654->Width = 6;
			// 
			// dataGridViewTextBoxColumn655
			// 
			this->dataGridViewTextBoxColumn655->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn655->Name = L"dataGridViewTextBoxColumn655";
			this->dataGridViewTextBoxColumn655->ReadOnly = true;
			this->dataGridViewTextBoxColumn655->Width = 6;
			// 
			// dataGridViewTextBoxColumn656
			// 
			this->dataGridViewTextBoxColumn656->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn656->Name = L"dataGridViewTextBoxColumn656";
			this->dataGridViewTextBoxColumn656->ReadOnly = true;
			this->dataGridViewTextBoxColumn656->Width = 6;
			// 
			// dataGridViewTextBoxColumn657
			// 
			this->dataGridViewTextBoxColumn657->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn657->Name = L"dataGridViewTextBoxColumn657";
			this->dataGridViewTextBoxColumn657->ReadOnly = true;
			this->dataGridViewTextBoxColumn657->Width = 6;
			// 
			// dataGridViewTextBoxColumn658
			// 
			this->dataGridViewTextBoxColumn658->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn658->Name = L"dataGridViewTextBoxColumn658";
			this->dataGridViewTextBoxColumn658->ReadOnly = true;
			this->dataGridViewTextBoxColumn658->Width = 6;
			// 
			// dataGridViewTextBoxColumn659
			// 
			this->dataGridViewTextBoxColumn659->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn659->Name = L"dataGridViewTextBoxColumn659";
			this->dataGridViewTextBoxColumn659->ReadOnly = true;
			this->dataGridViewTextBoxColumn659->Width = 6;
			// 
			// dataGridViewTextBoxColumn660
			// 
			this->dataGridViewTextBoxColumn660->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn660->Name = L"dataGridViewTextBoxColumn660";
			this->dataGridViewTextBoxColumn660->ReadOnly = true;
			this->dataGridViewTextBoxColumn660->Width = 6;
			// 
			// dataGridViewTextBoxColumn661
			// 
			this->dataGridViewTextBoxColumn661->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn661->Name = L"dataGridViewTextBoxColumn661";
			this->dataGridViewTextBoxColumn661->ReadOnly = true;
			this->dataGridViewTextBoxColumn661->Width = 6;
			// 
			// dataGridViewTextBoxColumn662
			// 
			this->dataGridViewTextBoxColumn662->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn662->Name = L"dataGridViewTextBoxColumn662";
			this->dataGridViewTextBoxColumn662->ReadOnly = true;
			this->dataGridViewTextBoxColumn662->Width = 6;
			// 
			// dataGridViewTextBoxColumn663
			// 
			this->dataGridViewTextBoxColumn663->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn663->Name = L"dataGridViewTextBoxColumn663";
			this->dataGridViewTextBoxColumn663->ReadOnly = true;
			this->dataGridViewTextBoxColumn663->Width = 6;
			// 
			// dataGridViewTextBoxColumn664
			// 
			this->dataGridViewTextBoxColumn664->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn664->Name = L"dataGridViewTextBoxColumn664";
			this->dataGridViewTextBoxColumn664->ReadOnly = true;
			this->dataGridViewTextBoxColumn664->Width = 6;
			// 
			// dataGridViewTextBoxColumn665
			// 
			this->dataGridViewTextBoxColumn665->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn665->Name = L"dataGridViewTextBoxColumn665";
			this->dataGridViewTextBoxColumn665->ReadOnly = true;
			this->dataGridViewTextBoxColumn665->Width = 6;
			// 
			// dataGridViewTextBoxColumn666
			// 
			this->dataGridViewTextBoxColumn666->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn666->Name = L"dataGridViewTextBoxColumn666";
			this->dataGridViewTextBoxColumn666->ReadOnly = true;
			this->dataGridViewTextBoxColumn666->Width = 6;
			// 
			// dataGridViewTextBoxColumn667
			// 
			this->dataGridViewTextBoxColumn667->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn667->Name = L"dataGridViewTextBoxColumn667";
			this->dataGridViewTextBoxColumn667->ReadOnly = true;
			this->dataGridViewTextBoxColumn667->Width = 6;
			// 
			// dataGridViewTextBoxColumn668
			// 
			this->dataGridViewTextBoxColumn668->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn668->Name = L"dataGridViewTextBoxColumn668";
			this->dataGridViewTextBoxColumn668->ReadOnly = true;
			this->dataGridViewTextBoxColumn668->Width = 6;
			// 
			// dataGridViewTextBoxColumn669
			// 
			this->dataGridViewTextBoxColumn669->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn669->Name = L"dataGridViewTextBoxColumn669";
			this->dataGridViewTextBoxColumn669->ReadOnly = true;
			this->dataGridViewTextBoxColumn669->Width = 6;
			// 
			// dataGridViewTextBoxColumn670
			// 
			this->dataGridViewTextBoxColumn670->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn670->Name = L"dataGridViewTextBoxColumn670";
			this->dataGridViewTextBoxColumn670->ReadOnly = true;
			this->dataGridViewTextBoxColumn670->Width = 6;
			// 
			// dataGridViewTextBoxColumn671
			// 
			this->dataGridViewTextBoxColumn671->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn671->Name = L"dataGridViewTextBoxColumn671";
			this->dataGridViewTextBoxColumn671->ReadOnly = true;
			this->dataGridViewTextBoxColumn671->Width = 6;
			// 
			// dataGridViewTextBoxColumn672
			// 
			this->dataGridViewTextBoxColumn672->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn672->Name = L"dataGridViewTextBoxColumn672";
			this->dataGridViewTextBoxColumn672->ReadOnly = true;
			this->dataGridViewTextBoxColumn672->Width = 6;
			// 
			// dataGridViewTextBoxColumn673
			// 
			this->dataGridViewTextBoxColumn673->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn673->Name = L"dataGridViewTextBoxColumn673";
			this->dataGridViewTextBoxColumn673->ReadOnly = true;
			this->dataGridViewTextBoxColumn673->Width = 6;
			// 
			// dataGridViewTextBoxColumn674
			// 
			this->dataGridViewTextBoxColumn674->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn674->Name = L"dataGridViewTextBoxColumn674";
			this->dataGridViewTextBoxColumn674->ReadOnly = true;
			this->dataGridViewTextBoxColumn674->Width = 6;
			// 
			// dataGridViewTextBoxColumn675
			// 
			this->dataGridViewTextBoxColumn675->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn675->Name = L"dataGridViewTextBoxColumn675";
			this->dataGridViewTextBoxColumn675->ReadOnly = true;
			this->dataGridViewTextBoxColumn675->Width = 6;
			// 
			// dataGridViewTextBoxColumn676
			// 
			this->dataGridViewTextBoxColumn676->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn676->Name = L"dataGridViewTextBoxColumn676";
			this->dataGridViewTextBoxColumn676->ReadOnly = true;
			this->dataGridViewTextBoxColumn676->Width = 6;
			// 
			// dataGridViewTextBoxColumn677
			// 
			this->dataGridViewTextBoxColumn677->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn677->Name = L"dataGridViewTextBoxColumn677";
			this->dataGridViewTextBoxColumn677->ReadOnly = true;
			this->dataGridViewTextBoxColumn677->Width = 6;
			// 
			// dataGridViewTextBoxColumn678
			// 
			this->dataGridViewTextBoxColumn678->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn678->Name = L"dataGridViewTextBoxColumn678";
			this->dataGridViewTextBoxColumn678->ReadOnly = true;
			this->dataGridViewTextBoxColumn678->Width = 6;
			// 
			// dataGridViewTextBoxColumn679
			// 
			this->dataGridViewTextBoxColumn679->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn679->Name = L"dataGridViewTextBoxColumn679";
			this->dataGridViewTextBoxColumn679->ReadOnly = true;
			this->dataGridViewTextBoxColumn679->Width = 6;
			// 
			// dataGridViewTextBoxColumn680
			// 
			this->dataGridViewTextBoxColumn680->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn680->Name = L"dataGridViewTextBoxColumn680";
			this->dataGridViewTextBoxColumn680->ReadOnly = true;
			this->dataGridViewTextBoxColumn680->Width = 6;
			// 
			// dataGridViewTextBoxColumn681
			// 
			this->dataGridViewTextBoxColumn681->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn681->Name = L"dataGridViewTextBoxColumn681";
			this->dataGridViewTextBoxColumn681->ReadOnly = true;
			this->dataGridViewTextBoxColumn681->Width = 6;
			// 
			// dataGridViewTextBoxColumn682
			// 
			this->dataGridViewTextBoxColumn682->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn682->Name = L"dataGridViewTextBoxColumn682";
			this->dataGridViewTextBoxColumn682->ReadOnly = true;
			this->dataGridViewTextBoxColumn682->Width = 6;
			// 
			// dataGridViewTextBoxColumn683
			// 
			this->dataGridViewTextBoxColumn683->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn683->Name = L"dataGridViewTextBoxColumn683";
			this->dataGridViewTextBoxColumn683->ReadOnly = true;
			this->dataGridViewTextBoxColumn683->Width = 6;
			// 
			// dataGridViewTextBoxColumn684
			// 
			this->dataGridViewTextBoxColumn684->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn684->Name = L"dataGridViewTextBoxColumn684";
			this->dataGridViewTextBoxColumn684->ReadOnly = true;
			this->dataGridViewTextBoxColumn684->Width = 6;
			// 
			// dataGridViewTextBoxColumn685
			// 
			this->dataGridViewTextBoxColumn685->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn685->Name = L"dataGridViewTextBoxColumn685";
			this->dataGridViewTextBoxColumn685->ReadOnly = true;
			this->dataGridViewTextBoxColumn685->Width = 6;
			// 
			// dataGridViewTextBoxColumn686
			// 
			this->dataGridViewTextBoxColumn686->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn686->Name = L"dataGridViewTextBoxColumn686";
			this->dataGridViewTextBoxColumn686->ReadOnly = true;
			this->dataGridViewTextBoxColumn686->Width = 6;
			// 
			// dataGridViewTextBoxColumn687
			// 
			this->dataGridViewTextBoxColumn687->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn687->Name = L"dataGridViewTextBoxColumn687";
			this->dataGridViewTextBoxColumn687->ReadOnly = true;
			this->dataGridViewTextBoxColumn687->Width = 6;
			// 
			// dataGridViewTextBoxColumn688
			// 
			this->dataGridViewTextBoxColumn688->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn688->Name = L"dataGridViewTextBoxColumn688";
			this->dataGridViewTextBoxColumn688->ReadOnly = true;
			this->dataGridViewTextBoxColumn688->Width = 6;
			// 
			// dataGridViewTextBoxColumn689
			// 
			this->dataGridViewTextBoxColumn689->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn689->Name = L"dataGridViewTextBoxColumn689";
			this->dataGridViewTextBoxColumn689->ReadOnly = true;
			this->dataGridViewTextBoxColumn689->Width = 6;
			// 
			// dataGridViewTextBoxColumn690
			// 
			this->dataGridViewTextBoxColumn690->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn690->Name = L"dataGridViewTextBoxColumn690";
			this->dataGridViewTextBoxColumn690->ReadOnly = true;
			this->dataGridViewTextBoxColumn690->Width = 6;
			// 
			// dataGridViewTextBoxColumn691
			// 
			this->dataGridViewTextBoxColumn691->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn691->Name = L"dataGridViewTextBoxColumn691";
			this->dataGridViewTextBoxColumn691->ReadOnly = true;
			this->dataGridViewTextBoxColumn691->Width = 6;
			// 
			// dataGridViewTextBoxColumn692
			// 
			this->dataGridViewTextBoxColumn692->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn692->Name = L"dataGridViewTextBoxColumn692";
			this->dataGridViewTextBoxColumn692->ReadOnly = true;
			this->dataGridViewTextBoxColumn692->Width = 6;
			// 
			// dataGridViewTextBoxColumn693
			// 
			this->dataGridViewTextBoxColumn693->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn693->Name = L"dataGridViewTextBoxColumn693";
			this->dataGridViewTextBoxColumn693->ReadOnly = true;
			this->dataGridViewTextBoxColumn693->Width = 6;
			// 
			// dataGridViewTextBoxColumn694
			// 
			this->dataGridViewTextBoxColumn694->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn694->Name = L"dataGridViewTextBoxColumn694";
			this->dataGridViewTextBoxColumn694->ReadOnly = true;
			this->dataGridViewTextBoxColumn694->Width = 6;
			// 
			// dataGridViewTextBoxColumn695
			// 
			this->dataGridViewTextBoxColumn695->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn695->Name = L"dataGridViewTextBoxColumn695";
			this->dataGridViewTextBoxColumn695->ReadOnly = true;
			this->dataGridViewTextBoxColumn695->Width = 6;
			// 
			// dataGridViewTextBoxColumn696
			// 
			this->dataGridViewTextBoxColumn696->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn696->Name = L"dataGridViewTextBoxColumn696";
			this->dataGridViewTextBoxColumn696->ReadOnly = true;
			this->dataGridViewTextBoxColumn696->Width = 6;
			// 
			// dataGridViewTextBoxColumn697
			// 
			this->dataGridViewTextBoxColumn697->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn697->Name = L"dataGridViewTextBoxColumn697";
			this->dataGridViewTextBoxColumn697->ReadOnly = true;
			this->dataGridViewTextBoxColumn697->Width = 6;
			// 
			// dataGridViewTextBoxColumn698
			// 
			this->dataGridViewTextBoxColumn698->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn698->Name = L"dataGridViewTextBoxColumn698";
			this->dataGridViewTextBoxColumn698->ReadOnly = true;
			this->dataGridViewTextBoxColumn698->Width = 6;
			// 
			// dataGridViewTextBoxColumn699
			// 
			this->dataGridViewTextBoxColumn699->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn699->Name = L"dataGridViewTextBoxColumn699";
			this->dataGridViewTextBoxColumn699->ReadOnly = true;
			this->dataGridViewTextBoxColumn699->Width = 6;
			// 
			// dataGridViewTextBoxColumn700
			// 
			this->dataGridViewTextBoxColumn700->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn700->Name = L"dataGridViewTextBoxColumn700";
			this->dataGridViewTextBoxColumn700->ReadOnly = true;
			this->dataGridViewTextBoxColumn700->Width = 6;
			// 
			// dataGridViewTextBoxColumn701
			// 
			this->dataGridViewTextBoxColumn701->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn701->Name = L"dataGridViewTextBoxColumn701";
			this->dataGridViewTextBoxColumn701->ReadOnly = true;
			this->dataGridViewTextBoxColumn701->Width = 6;
			// 
			// dataGridViewTextBoxColumn702
			// 
			this->dataGridViewTextBoxColumn702->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn702->Name = L"dataGridViewTextBoxColumn702";
			this->dataGridViewTextBoxColumn702->ReadOnly = true;
			this->dataGridViewTextBoxColumn702->Width = 6;
			// 
			// dataGridViewTextBoxColumn703
			// 
			this->dataGridViewTextBoxColumn703->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn703->Name = L"dataGridViewTextBoxColumn703";
			this->dataGridViewTextBoxColumn703->ReadOnly = true;
			this->dataGridViewTextBoxColumn703->Width = 6;
			// 
			// dataGridViewTextBoxColumn704
			// 
			this->dataGridViewTextBoxColumn704->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn704->Name = L"dataGridViewTextBoxColumn704";
			this->dataGridViewTextBoxColumn704->ReadOnly = true;
			this->dataGridViewTextBoxColumn704->Width = 6;
			// 
			// label21
			// 
			this->label21->AutoSize = true;
			this->label21->Location = System::Drawing::Point(74, 501);
			this->label21->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label21->Name = L"label21";
			this->label21->Size = System::Drawing::Size(78, 13);
			this->label21->TabIndex = 61;
			this->label21->Text = L"Voxel Pos (Val)";
			// 
			// label22
			// 
			this->label22->AutoSize = true;
			this->label22->Location = System::Drawing::Point(318, 501);
			this->label22->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label22->Name = L"label22";
			this->label22->Size = System::Drawing::Size(35, 13);
			this->label22->TabIndex = 60;
			this->label22->Text = L"Pos Y";
			// 
			// label37
			// 
			this->label37->AutoSize = true;
			this->label37->Location = System::Drawing::Point(227, 501);
			this->label37->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label37->Name = L"label37";
			this->label37->Size = System::Drawing::Size(35, 13);
			this->label37->TabIndex = 59;
			this->label37->Text = L"Pos X";
			// 
			// label38
			// 
			this->label38->AutoSize = true;
			this->label38->Location = System::Drawing::Point(30, 452);
			this->label38->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label38->Name = L"label38";
			this->label38->Size = System::Drawing::Size(43, 13);
			this->label38->TabIndex = 58;
			this->label38->Text = L"HEX 0x";
			// 
			// label39
			// 
			this->label39->AutoSize = true;
			this->label39->Location = System::Drawing::Point(44, 430);
			this->label39->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label39->Name = L"label39";
			this->label39->Size = System::Drawing::Size(27, 13);
			this->label39->TabIndex = 57;
			this->label39->Text = L"Bits:";
			// 
			// label40
			// 
			this->label40->AutoSize = true;
			this->label40->Location = System::Drawing::Point(18, 402);
			this->label40->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label40->Name = L"label40";
			this->label40->Size = System::Drawing::Size(20, 13);
			this->label40->TabIndex = 56;
			this->label40->Text = L"Y=";
			// 
			// label41
			// 
			this->label41->AutoSize = true;
			this->label41->Location = System::Drawing::Point(18, 373);
			this->label41->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label41->Name = L"label41";
			this->label41->Size = System::Drawing::Size(20, 13);
			this->label41->TabIndex = 55;
			this->label41->Text = L"X=";
			// 
			// label42
			// 
			this->label42->AutoSize = true;
			this->label42->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label42->Location = System::Drawing::Point(34, 403);
			this->label42->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label42->Name = L"label42";
			this->label42->Size = System::Drawing::Size(21, 13);
			this->label42->TabIndex = 54;
			this->label42->Text = L"__";
			// 
			// label43
			// 
			this->label43->AutoSize = true;
			this->label43->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label43->Location = System::Drawing::Point(34, 373);
			this->label43->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label43->Name = L"label43";
			this->label43->Size = System::Drawing::Size(21, 13);
			this->label43->TabIndex = 53;
			this->label43->Text = L"__";
			// 
			// textBox16
			// 
			this->textBox16->Location = System::Drawing::Point(77, 516);
			this->textBox16->Margin = System::Windows::Forms::Padding(2);
			this->textBox16->Name = L"textBox16";
			this->textBox16->Size = System::Drawing::Size(76, 20);
			this->textBox16->TabIndex = 52;
			// 
			// textBox17
			// 
			this->textBox17->Location = System::Drawing::Point(230, 516);
			this->textBox17->Margin = System::Windows::Forms::Padding(2);
			this->textBox17->Name = L"textBox17";
			this->textBox17->Size = System::Drawing::Size(76, 20);
			this->textBox17->TabIndex = 51;
			// 
			// textBox18
			// 
			this->textBox18->Location = System::Drawing::Point(321, 516);
			this->textBox18->Margin = System::Windows::Forms::Padding(2);
			this->textBox18->Name = L"textBox18";
			this->textBox18->Size = System::Drawing::Size(76, 20);
			this->textBox18->TabIndex = 50;
			// 
			// textBox19
			// 
			this->textBox19->Location = System::Drawing::Point(75, 448);
			this->textBox19->Margin = System::Windows::Forms::Padding(2);
			this->textBox19->MaxLength = 16;
			this->textBox19->Name = L"textBox19";
			this->textBox19->Size = System::Drawing::Size(349, 20);
			this->textBox19->TabIndex = 49;
			// 
			// textBox20
			// 
			this->textBox20->Location = System::Drawing::Point(75, 425);
			this->textBox20->Margin = System::Windows::Forms::Padding(2);
			this->textBox20->MaxLength = 64;
			this->textBox20->Name = L"textBox20";
			this->textBox20->Size = System::Drawing::Size(397, 20);
			this->textBox20->TabIndex = 48;
			// 
			// dataGridView4
			// 
			this->dataGridView4->AllowDrop = true;
			this->dataGridView4->AllowUserToAddRows = false;
			this->dataGridView4->AllowUserToDeleteRows = false;
			this->dataGridView4->AllowUserToResizeColumns = false;
			this->dataGridView4->AllowUserToResizeRows = false;
			this->dataGridView4->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView4->ColumnHeadersVisible = false;
			this->dataGridView4->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn129, 
				this->dataGridViewTextBoxColumn130, this->dataGridViewTextBoxColumn131, this->dataGridViewTextBoxColumn132, this->dataGridViewTextBoxColumn133, 
				this->dataGridViewTextBoxColumn134, this->dataGridViewTextBoxColumn135, this->dataGridViewTextBoxColumn136, this->dataGridViewTextBoxColumn137, 
				this->dataGridViewTextBoxColumn138, this->dataGridViewTextBoxColumn139, this->dataGridViewTextBoxColumn140, this->dataGridViewTextBoxColumn141, 
				this->dataGridViewTextBoxColumn142, this->dataGridViewTextBoxColumn143, this->dataGridViewTextBoxColumn144, this->dataGridViewTextBoxColumn145, 
				this->dataGridViewTextBoxColumn146, this->dataGridViewTextBoxColumn147, this->dataGridViewTextBoxColumn148, this->dataGridViewTextBoxColumn149, 
				this->dataGridViewTextBoxColumn150, this->dataGridViewTextBoxColumn151, this->dataGridViewTextBoxColumn152, this->dataGridViewTextBoxColumn153, 
				this->dataGridViewTextBoxColumn154, this->dataGridViewTextBoxColumn155, this->dataGridViewTextBoxColumn156, this->dataGridViewTextBoxColumn157, 
				this->dataGridViewTextBoxColumn158, this->dataGridViewTextBoxColumn159, this->dataGridViewTextBoxColumn160, this->dataGridViewTextBoxColumn161, 
				this->dataGridViewTextBoxColumn162, this->dataGridViewTextBoxColumn163, this->dataGridViewTextBoxColumn164, this->dataGridViewTextBoxColumn165, 
				this->dataGridViewTextBoxColumn166, this->dataGridViewTextBoxColumn167, this->dataGridViewTextBoxColumn168, this->dataGridViewTextBoxColumn169, 
				this->dataGridViewTextBoxColumn170, this->dataGridViewTextBoxColumn171, this->dataGridViewTextBoxColumn172, this->dataGridViewTextBoxColumn173, 
				this->dataGridViewTextBoxColumn174, this->dataGridViewTextBoxColumn175, this->dataGridViewTextBoxColumn176, this->dataGridViewTextBoxColumn177, 
				this->dataGridViewTextBoxColumn178, this->dataGridViewTextBoxColumn179, this->dataGridViewTextBoxColumn180, this->dataGridViewTextBoxColumn181, 
				this->dataGridViewTextBoxColumn182, this->dataGridViewTextBoxColumn183, this->dataGridViewTextBoxColumn184, this->dataGridViewTextBoxColumn185, 
				this->dataGridViewTextBoxColumn186, this->dataGridViewTextBoxColumn187, this->dataGridViewTextBoxColumn188, this->dataGridViewTextBoxColumn189, 
				this->dataGridViewTextBoxColumn190, this->dataGridViewTextBoxColumn191, this->dataGridViewTextBoxColumn192});
			this->dataGridView4->Location = System::Drawing::Point(36, 15);
			this->dataGridView4->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView4->MultiSelect = false;
			this->dataGridView4->Name = L"dataGridView4";
			this->dataGridView4->ReadOnly = true;
			this->dataGridView4->RowHeadersVisible = false;
			this->dataGridView4->RowHeadersWidth = 15;
			dataGridViewCellStyle8->BackColor = System::Drawing::Color::White;
			this->dataGridView4->RowsDefaultCellStyle = dataGridViewCellStyle8;
			this->dataGridView4->RowTemplate->Height = 10;
			this->dataGridView4->Size = System::Drawing::Size(656, 338);
			this->dataGridView4->TabIndex = 32;
			this->dataGridView4->CellMouseClick += gcnew System::Windows::Forms::DataGridViewCellMouseEventHandler(this, &Form1::dataGridView4_CellMouseClick);
			this->dataGridView4->SelectionChanged += gcnew System::EventHandler(this, &Form1::dataGridView4_SelectionChanged);
			// 
			// dataGridViewTextBoxColumn129
			// 
			this->dataGridViewTextBoxColumn129->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn129->Name = L"dataGridViewTextBoxColumn129";
			this->dataGridViewTextBoxColumn129->ReadOnly = true;
			this->dataGridViewTextBoxColumn129->Width = 10;
			// 
			// dataGridViewTextBoxColumn130
			// 
			this->dataGridViewTextBoxColumn130->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn130->Name = L"dataGridViewTextBoxColumn130";
			this->dataGridViewTextBoxColumn130->ReadOnly = true;
			this->dataGridViewTextBoxColumn130->Width = 10;
			// 
			// dataGridViewTextBoxColumn131
			// 
			this->dataGridViewTextBoxColumn131->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn131->Name = L"dataGridViewTextBoxColumn131";
			this->dataGridViewTextBoxColumn131->ReadOnly = true;
			this->dataGridViewTextBoxColumn131->Width = 10;
			// 
			// dataGridViewTextBoxColumn132
			// 
			this->dataGridViewTextBoxColumn132->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn132->Name = L"dataGridViewTextBoxColumn132";
			this->dataGridViewTextBoxColumn132->ReadOnly = true;
			this->dataGridViewTextBoxColumn132->Width = 10;
			// 
			// dataGridViewTextBoxColumn133
			// 
			this->dataGridViewTextBoxColumn133->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn133->Name = L"dataGridViewTextBoxColumn133";
			this->dataGridViewTextBoxColumn133->ReadOnly = true;
			this->dataGridViewTextBoxColumn133->Width = 10;
			// 
			// dataGridViewTextBoxColumn134
			// 
			this->dataGridViewTextBoxColumn134->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn134->Name = L"dataGridViewTextBoxColumn134";
			this->dataGridViewTextBoxColumn134->ReadOnly = true;
			this->dataGridViewTextBoxColumn134->Width = 10;
			// 
			// dataGridViewTextBoxColumn135
			// 
			this->dataGridViewTextBoxColumn135->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn135->Name = L"dataGridViewTextBoxColumn135";
			this->dataGridViewTextBoxColumn135->ReadOnly = true;
			this->dataGridViewTextBoxColumn135->Width = 10;
			// 
			// dataGridViewTextBoxColumn136
			// 
			this->dataGridViewTextBoxColumn136->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn136->Name = L"dataGridViewTextBoxColumn136";
			this->dataGridViewTextBoxColumn136->ReadOnly = true;
			this->dataGridViewTextBoxColumn136->Width = 10;
			// 
			// dataGridViewTextBoxColumn137
			// 
			this->dataGridViewTextBoxColumn137->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn137->Name = L"dataGridViewTextBoxColumn137";
			this->dataGridViewTextBoxColumn137->ReadOnly = true;
			this->dataGridViewTextBoxColumn137->Width = 10;
			// 
			// dataGridViewTextBoxColumn138
			// 
			this->dataGridViewTextBoxColumn138->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn138->Name = L"dataGridViewTextBoxColumn138";
			this->dataGridViewTextBoxColumn138->ReadOnly = true;
			this->dataGridViewTextBoxColumn138->Width = 10;
			// 
			// dataGridViewTextBoxColumn139
			// 
			this->dataGridViewTextBoxColumn139->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn139->Name = L"dataGridViewTextBoxColumn139";
			this->dataGridViewTextBoxColumn139->ReadOnly = true;
			this->dataGridViewTextBoxColumn139->Width = 10;
			// 
			// dataGridViewTextBoxColumn140
			// 
			this->dataGridViewTextBoxColumn140->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn140->Name = L"dataGridViewTextBoxColumn140";
			this->dataGridViewTextBoxColumn140->ReadOnly = true;
			this->dataGridViewTextBoxColumn140->Width = 10;
			// 
			// dataGridViewTextBoxColumn141
			// 
			this->dataGridViewTextBoxColumn141->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn141->Name = L"dataGridViewTextBoxColumn141";
			this->dataGridViewTextBoxColumn141->ReadOnly = true;
			this->dataGridViewTextBoxColumn141->Width = 10;
			// 
			// dataGridViewTextBoxColumn142
			// 
			this->dataGridViewTextBoxColumn142->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn142->Name = L"dataGridViewTextBoxColumn142";
			this->dataGridViewTextBoxColumn142->ReadOnly = true;
			this->dataGridViewTextBoxColumn142->Width = 10;
			// 
			// dataGridViewTextBoxColumn143
			// 
			this->dataGridViewTextBoxColumn143->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn143->Name = L"dataGridViewTextBoxColumn143";
			this->dataGridViewTextBoxColumn143->ReadOnly = true;
			this->dataGridViewTextBoxColumn143->Width = 10;
			// 
			// dataGridViewTextBoxColumn144
			// 
			this->dataGridViewTextBoxColumn144->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn144->Name = L"dataGridViewTextBoxColumn144";
			this->dataGridViewTextBoxColumn144->ReadOnly = true;
			this->dataGridViewTextBoxColumn144->Width = 10;
			// 
			// dataGridViewTextBoxColumn145
			// 
			this->dataGridViewTextBoxColumn145->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn145->Name = L"dataGridViewTextBoxColumn145";
			this->dataGridViewTextBoxColumn145->ReadOnly = true;
			this->dataGridViewTextBoxColumn145->Width = 10;
			// 
			// dataGridViewTextBoxColumn146
			// 
			this->dataGridViewTextBoxColumn146->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn146->Name = L"dataGridViewTextBoxColumn146";
			this->dataGridViewTextBoxColumn146->ReadOnly = true;
			this->dataGridViewTextBoxColumn146->Width = 10;
			// 
			// dataGridViewTextBoxColumn147
			// 
			this->dataGridViewTextBoxColumn147->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn147->Name = L"dataGridViewTextBoxColumn147";
			this->dataGridViewTextBoxColumn147->ReadOnly = true;
			this->dataGridViewTextBoxColumn147->Width = 10;
			// 
			// dataGridViewTextBoxColumn148
			// 
			this->dataGridViewTextBoxColumn148->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn148->Name = L"dataGridViewTextBoxColumn148";
			this->dataGridViewTextBoxColumn148->ReadOnly = true;
			this->dataGridViewTextBoxColumn148->Width = 10;
			// 
			// dataGridViewTextBoxColumn149
			// 
			this->dataGridViewTextBoxColumn149->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn149->Name = L"dataGridViewTextBoxColumn149";
			this->dataGridViewTextBoxColumn149->ReadOnly = true;
			this->dataGridViewTextBoxColumn149->Width = 10;
			// 
			// dataGridViewTextBoxColumn150
			// 
			this->dataGridViewTextBoxColumn150->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn150->Name = L"dataGridViewTextBoxColumn150";
			this->dataGridViewTextBoxColumn150->ReadOnly = true;
			this->dataGridViewTextBoxColumn150->Width = 10;
			// 
			// dataGridViewTextBoxColumn151
			// 
			this->dataGridViewTextBoxColumn151->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn151->Name = L"dataGridViewTextBoxColumn151";
			this->dataGridViewTextBoxColumn151->ReadOnly = true;
			this->dataGridViewTextBoxColumn151->Width = 10;
			// 
			// dataGridViewTextBoxColumn152
			// 
			this->dataGridViewTextBoxColumn152->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn152->Name = L"dataGridViewTextBoxColumn152";
			this->dataGridViewTextBoxColumn152->ReadOnly = true;
			this->dataGridViewTextBoxColumn152->Width = 10;
			// 
			// dataGridViewTextBoxColumn153
			// 
			this->dataGridViewTextBoxColumn153->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn153->Name = L"dataGridViewTextBoxColumn153";
			this->dataGridViewTextBoxColumn153->ReadOnly = true;
			this->dataGridViewTextBoxColumn153->Width = 10;
			// 
			// dataGridViewTextBoxColumn154
			// 
			this->dataGridViewTextBoxColumn154->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn154->Name = L"dataGridViewTextBoxColumn154";
			this->dataGridViewTextBoxColumn154->ReadOnly = true;
			this->dataGridViewTextBoxColumn154->Width = 10;
			// 
			// dataGridViewTextBoxColumn155
			// 
			this->dataGridViewTextBoxColumn155->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn155->Name = L"dataGridViewTextBoxColumn155";
			this->dataGridViewTextBoxColumn155->ReadOnly = true;
			this->dataGridViewTextBoxColumn155->Width = 10;
			// 
			// dataGridViewTextBoxColumn156
			// 
			this->dataGridViewTextBoxColumn156->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn156->Name = L"dataGridViewTextBoxColumn156";
			this->dataGridViewTextBoxColumn156->ReadOnly = true;
			this->dataGridViewTextBoxColumn156->Width = 10;
			// 
			// dataGridViewTextBoxColumn157
			// 
			this->dataGridViewTextBoxColumn157->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn157->Name = L"dataGridViewTextBoxColumn157";
			this->dataGridViewTextBoxColumn157->ReadOnly = true;
			this->dataGridViewTextBoxColumn157->Width = 10;
			// 
			// dataGridViewTextBoxColumn158
			// 
			this->dataGridViewTextBoxColumn158->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn158->Name = L"dataGridViewTextBoxColumn158";
			this->dataGridViewTextBoxColumn158->ReadOnly = true;
			this->dataGridViewTextBoxColumn158->Width = 10;
			// 
			// dataGridViewTextBoxColumn159
			// 
			this->dataGridViewTextBoxColumn159->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn159->Name = L"dataGridViewTextBoxColumn159";
			this->dataGridViewTextBoxColumn159->ReadOnly = true;
			this->dataGridViewTextBoxColumn159->Width = 10;
			// 
			// dataGridViewTextBoxColumn160
			// 
			this->dataGridViewTextBoxColumn160->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn160->Name = L"dataGridViewTextBoxColumn160";
			this->dataGridViewTextBoxColumn160->ReadOnly = true;
			this->dataGridViewTextBoxColumn160->Width = 10;
			// 
			// dataGridViewTextBoxColumn161
			// 
			this->dataGridViewTextBoxColumn161->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn161->Name = L"dataGridViewTextBoxColumn161";
			this->dataGridViewTextBoxColumn161->ReadOnly = true;
			this->dataGridViewTextBoxColumn161->Width = 10;
			// 
			// dataGridViewTextBoxColumn162
			// 
			this->dataGridViewTextBoxColumn162->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn162->Name = L"dataGridViewTextBoxColumn162";
			this->dataGridViewTextBoxColumn162->ReadOnly = true;
			this->dataGridViewTextBoxColumn162->Width = 10;
			// 
			// dataGridViewTextBoxColumn163
			// 
			this->dataGridViewTextBoxColumn163->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn163->Name = L"dataGridViewTextBoxColumn163";
			this->dataGridViewTextBoxColumn163->ReadOnly = true;
			this->dataGridViewTextBoxColumn163->Width = 10;
			// 
			// dataGridViewTextBoxColumn164
			// 
			this->dataGridViewTextBoxColumn164->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn164->Name = L"dataGridViewTextBoxColumn164";
			this->dataGridViewTextBoxColumn164->ReadOnly = true;
			this->dataGridViewTextBoxColumn164->Width = 10;
			// 
			// dataGridViewTextBoxColumn165
			// 
			this->dataGridViewTextBoxColumn165->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn165->Name = L"dataGridViewTextBoxColumn165";
			this->dataGridViewTextBoxColumn165->ReadOnly = true;
			this->dataGridViewTextBoxColumn165->Width = 10;
			// 
			// dataGridViewTextBoxColumn166
			// 
			this->dataGridViewTextBoxColumn166->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn166->Name = L"dataGridViewTextBoxColumn166";
			this->dataGridViewTextBoxColumn166->ReadOnly = true;
			this->dataGridViewTextBoxColumn166->Width = 10;
			// 
			// dataGridViewTextBoxColumn167
			// 
			this->dataGridViewTextBoxColumn167->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn167->Name = L"dataGridViewTextBoxColumn167";
			this->dataGridViewTextBoxColumn167->ReadOnly = true;
			this->dataGridViewTextBoxColumn167->Width = 10;
			// 
			// dataGridViewTextBoxColumn168
			// 
			this->dataGridViewTextBoxColumn168->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn168->Name = L"dataGridViewTextBoxColumn168";
			this->dataGridViewTextBoxColumn168->ReadOnly = true;
			this->dataGridViewTextBoxColumn168->Width = 10;
			// 
			// dataGridViewTextBoxColumn169
			// 
			this->dataGridViewTextBoxColumn169->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn169->Name = L"dataGridViewTextBoxColumn169";
			this->dataGridViewTextBoxColumn169->ReadOnly = true;
			this->dataGridViewTextBoxColumn169->Width = 10;
			// 
			// dataGridViewTextBoxColumn170
			// 
			this->dataGridViewTextBoxColumn170->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn170->Name = L"dataGridViewTextBoxColumn170";
			this->dataGridViewTextBoxColumn170->ReadOnly = true;
			this->dataGridViewTextBoxColumn170->Width = 10;
			// 
			// dataGridViewTextBoxColumn171
			// 
			this->dataGridViewTextBoxColumn171->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn171->Name = L"dataGridViewTextBoxColumn171";
			this->dataGridViewTextBoxColumn171->ReadOnly = true;
			this->dataGridViewTextBoxColumn171->Width = 10;
			// 
			// dataGridViewTextBoxColumn172
			// 
			this->dataGridViewTextBoxColumn172->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn172->Name = L"dataGridViewTextBoxColumn172";
			this->dataGridViewTextBoxColumn172->ReadOnly = true;
			this->dataGridViewTextBoxColumn172->Width = 10;
			// 
			// dataGridViewTextBoxColumn173
			// 
			this->dataGridViewTextBoxColumn173->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn173->Name = L"dataGridViewTextBoxColumn173";
			this->dataGridViewTextBoxColumn173->ReadOnly = true;
			this->dataGridViewTextBoxColumn173->Width = 10;
			// 
			// dataGridViewTextBoxColumn174
			// 
			this->dataGridViewTextBoxColumn174->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn174->Name = L"dataGridViewTextBoxColumn174";
			this->dataGridViewTextBoxColumn174->ReadOnly = true;
			this->dataGridViewTextBoxColumn174->Width = 10;
			// 
			// dataGridViewTextBoxColumn175
			// 
			this->dataGridViewTextBoxColumn175->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn175->Name = L"dataGridViewTextBoxColumn175";
			this->dataGridViewTextBoxColumn175->ReadOnly = true;
			this->dataGridViewTextBoxColumn175->Width = 10;
			// 
			// dataGridViewTextBoxColumn176
			// 
			this->dataGridViewTextBoxColumn176->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn176->Name = L"dataGridViewTextBoxColumn176";
			this->dataGridViewTextBoxColumn176->ReadOnly = true;
			this->dataGridViewTextBoxColumn176->Width = 10;
			// 
			// dataGridViewTextBoxColumn177
			// 
			this->dataGridViewTextBoxColumn177->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn177->Name = L"dataGridViewTextBoxColumn177";
			this->dataGridViewTextBoxColumn177->ReadOnly = true;
			this->dataGridViewTextBoxColumn177->Width = 10;
			// 
			// dataGridViewTextBoxColumn178
			// 
			this->dataGridViewTextBoxColumn178->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn178->Name = L"dataGridViewTextBoxColumn178";
			this->dataGridViewTextBoxColumn178->ReadOnly = true;
			this->dataGridViewTextBoxColumn178->Width = 10;
			// 
			// dataGridViewTextBoxColumn179
			// 
			this->dataGridViewTextBoxColumn179->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn179->Name = L"dataGridViewTextBoxColumn179";
			this->dataGridViewTextBoxColumn179->ReadOnly = true;
			this->dataGridViewTextBoxColumn179->Width = 10;
			// 
			// dataGridViewTextBoxColumn180
			// 
			this->dataGridViewTextBoxColumn180->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn180->Name = L"dataGridViewTextBoxColumn180";
			this->dataGridViewTextBoxColumn180->ReadOnly = true;
			this->dataGridViewTextBoxColumn180->Width = 10;
			// 
			// dataGridViewTextBoxColumn181
			// 
			this->dataGridViewTextBoxColumn181->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn181->Name = L"dataGridViewTextBoxColumn181";
			this->dataGridViewTextBoxColumn181->ReadOnly = true;
			this->dataGridViewTextBoxColumn181->Width = 10;
			// 
			// dataGridViewTextBoxColumn182
			// 
			this->dataGridViewTextBoxColumn182->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn182->Name = L"dataGridViewTextBoxColumn182";
			this->dataGridViewTextBoxColumn182->ReadOnly = true;
			this->dataGridViewTextBoxColumn182->Width = 10;
			// 
			// dataGridViewTextBoxColumn183
			// 
			this->dataGridViewTextBoxColumn183->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn183->Name = L"dataGridViewTextBoxColumn183";
			this->dataGridViewTextBoxColumn183->ReadOnly = true;
			this->dataGridViewTextBoxColumn183->Width = 10;
			// 
			// dataGridViewTextBoxColumn184
			// 
			this->dataGridViewTextBoxColumn184->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn184->Name = L"dataGridViewTextBoxColumn184";
			this->dataGridViewTextBoxColumn184->ReadOnly = true;
			this->dataGridViewTextBoxColumn184->Width = 10;
			// 
			// dataGridViewTextBoxColumn185
			// 
			this->dataGridViewTextBoxColumn185->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn185->Name = L"dataGridViewTextBoxColumn185";
			this->dataGridViewTextBoxColumn185->ReadOnly = true;
			this->dataGridViewTextBoxColumn185->Width = 10;
			// 
			// dataGridViewTextBoxColumn186
			// 
			this->dataGridViewTextBoxColumn186->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn186->Name = L"dataGridViewTextBoxColumn186";
			this->dataGridViewTextBoxColumn186->ReadOnly = true;
			this->dataGridViewTextBoxColumn186->Width = 10;
			// 
			// dataGridViewTextBoxColumn187
			// 
			this->dataGridViewTextBoxColumn187->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn187->Name = L"dataGridViewTextBoxColumn187";
			this->dataGridViewTextBoxColumn187->ReadOnly = true;
			this->dataGridViewTextBoxColumn187->Width = 10;
			// 
			// dataGridViewTextBoxColumn188
			// 
			this->dataGridViewTextBoxColumn188->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn188->Name = L"dataGridViewTextBoxColumn188";
			this->dataGridViewTextBoxColumn188->ReadOnly = true;
			this->dataGridViewTextBoxColumn188->Width = 10;
			// 
			// dataGridViewTextBoxColumn189
			// 
			this->dataGridViewTextBoxColumn189->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn189->Name = L"dataGridViewTextBoxColumn189";
			this->dataGridViewTextBoxColumn189->ReadOnly = true;
			this->dataGridViewTextBoxColumn189->Width = 10;
			// 
			// dataGridViewTextBoxColumn190
			// 
			this->dataGridViewTextBoxColumn190->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn190->Name = L"dataGridViewTextBoxColumn190";
			this->dataGridViewTextBoxColumn190->ReadOnly = true;
			this->dataGridViewTextBoxColumn190->Width = 10;
			// 
			// dataGridViewTextBoxColumn191
			// 
			this->dataGridViewTextBoxColumn191->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn191->Name = L"dataGridViewTextBoxColumn191";
			this->dataGridViewTextBoxColumn191->ReadOnly = true;
			this->dataGridViewTextBoxColumn191->Width = 10;
			// 
			// dataGridViewTextBoxColumn192
			// 
			this->dataGridViewTextBoxColumn192->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn192->Name = L"dataGridViewTextBoxColumn192";
			this->dataGridViewTextBoxColumn192->ReadOnly = true;
			this->dataGridViewTextBoxColumn192->Width = 10;
			// 
			// tabPage5
			// 
			this->tabPage5->Controls->Add(this->checkBox14);
			this->tabPage5->Controls->Add(this->checkBox6);
			this->tabPage5->Controls->Add(this->button28);
			this->tabPage5->Controls->Add(this->label166);
			this->tabPage5->Controls->Add(this->textBox48);
			this->tabPage5->Controls->Add(this->label148);
			this->tabPage5->Controls->Add(this->button14);
			this->tabPage5->Controls->Add(this->label149);
			this->tabPage5->Controls->Add(this->button15);
			this->tabPage5->Controls->Add(this->label111);
			this->tabPage5->Controls->Add(this->label112);
			this->tabPage5->Controls->Add(this->label113);
			this->tabPage5->Controls->Add(this->label114);
			this->tabPage5->Controls->Add(this->label115);
			this->tabPage5->Controls->Add(this->label116);
			this->tabPage5->Controls->Add(this->label117);
			this->tabPage5->Controls->Add(this->dataGridView14);
			this->tabPage5->Controls->Add(this->label44);
			this->tabPage5->Controls->Add(this->label45);
			this->tabPage5->Controls->Add(this->label46);
			this->tabPage5->Controls->Add(this->label47);
			this->tabPage5->Controls->Add(this->label48);
			this->tabPage5->Controls->Add(this->label49);
			this->tabPage5->Controls->Add(this->label50);
			this->tabPage5->Controls->Add(this->label51);
			this->tabPage5->Controls->Add(this->label52);
			this->tabPage5->Controls->Add(this->textBox21);
			this->tabPage5->Controls->Add(this->textBox22);
			this->tabPage5->Controls->Add(this->textBox23);
			this->tabPage5->Controls->Add(this->textBox24);
			this->tabPage5->Controls->Add(this->textBox25);
			this->tabPage5->Controls->Add(this->dataGridView5);
			this->tabPage5->Location = System::Drawing::Point(4, 22);
			this->tabPage5->Margin = System::Windows::Forms::Padding(2);
			this->tabPage5->Name = L"tabPage5";
			this->tabPage5->Padding = System::Windows::Forms::Padding(2);
			this->tabPage5->Size = System::Drawing::Size(698, 555);
			this->tabPage5->TabIndex = 4;
			this->tabPage5->Text = L"Floor 4";
			this->tabPage5->UseVisualStyleBackColor = true;
			// 
			// checkBox14
			// 
			this->checkBox14->AutoSize = true;
			this->checkBox14->Location = System::Drawing::Point(560, 496);
			this->checkBox14->Name = L"checkBox14";
			this->checkBox14->Size = System::Drawing::Size(96, 17);
			this->checkBox14->TabIndex = 91;
			this->checkBox14->Text = L"Show teleports";
			this->checkBox14->UseVisualStyleBackColor = true;
			this->checkBox14->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox14_CheckedChanged);
			// 
			// checkBox6
			// 
			this->checkBox6->AutoSize = true;
			this->checkBox6->Location = System::Drawing::Point(560, 475);
			this->checkBox6->Name = L"checkBox6";
			this->checkBox6->Size = System::Drawing::Size(136, 17);
			this->checkBox6->TabIndex = 88;
			this->checkBox6->Text = L"Show cubes with doors";
			this->checkBox6->UseVisualStyleBackColor = true;
			this->checkBox6->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox6_CheckedChanged);
			// 
			// button28
			// 
			this->button28->Enabled = false;
			this->button28->Location = System::Drawing::Point(610, 390);
			this->button28->Name = L"button28";
			this->button28->Size = System::Drawing::Size(32, 20);
			this->button28->TabIndex = 77;
			this->button28->Text = L"OK";
			this->button28->UseVisualStyleBackColor = true;
			this->button28->Click += gcnew System::EventHandler(this, &Form1::button28_Click);
			// 
			// label166
			// 
			this->label166->AutoSize = true;
			this->label166->Location = System::Drawing::Point(533, 373);
			this->label166->Name = L"label166";
			this->label166->Size = System::Drawing::Size(69, 13);
			this->label166->TabIndex = 76;
			this->label166->Text = L"Cube N (hex)";
			// 
			// textBox48
			// 
			this->textBox48->Location = System::Drawing::Point(533, 390);
			this->textBox48->MaxLength = 3;
			this->textBox48->Name = L"textBox48";
			this->textBox48->Size = System::Drawing::Size(70, 20);
			this->textBox48->TabIndex = 75;
			// 
			// label148
			// 
			this->label148->AutoSize = true;
			this->label148->Location = System::Drawing::Point(556, 434);
			this->label148->Name = L"label148";
			this->label148->Size = System::Drawing::Size(47, 13);
			this->label148->TabIndex = 74;
			this->label148->Text = L"label148";
			// 
			// button14
			// 
			this->button14->Location = System::Drawing::Point(475, 424);
			this->button14->Name = L"button14";
			this->button14->Size = System::Drawing::Size(75, 23);
			this->button14->TabIndex = 73;
			this->button14->Text = L"Edit value";
			this->button14->UseVisualStyleBackColor = true;
			this->button14->Click += gcnew System::EventHandler(this, &Form1::button14_Click);
			// 
			// label149
			// 
			this->label149->AutoSize = true;
			this->label149->Location = System::Drawing::Point(503, 458);
			this->label149->Name = L"label149";
			this->label149->Size = System::Drawing::Size(47, 13);
			this->label149->TabIndex = 72;
			this->label149->Text = L"label149";
			// 
			// button15
			// 
			this->button15->Location = System::Drawing::Point(428, 448);
			this->button15->Name = L"button15";
			this->button15->Size = System::Drawing::Size(75, 23);
			this->button15->TabIndex = 71;
			this->button15->Text = L"Edit value";
			this->button15->UseVisualStyleBackColor = true;
			this->button15->Click += gcnew System::EventHandler(this, &Form1::button15_Click);
			// 
			// label111
			// 
			this->label111->AutoSize = true;
			this->label111->Location = System::Drawing::Point(436, 369);
			this->label111->Name = L"label111";
			this->label111->Size = System::Drawing::Size(31, 13);
			this->label111->TabIndex = 70;
			this->label111->Text = L"0123";
			// 
			// label112
			// 
			this->label112->AutoSize = true;
			this->label112->Location = System::Drawing::Point(376, 356);
			this->label112->Name = L"label112";
			this->label112->Size = System::Drawing::Size(67, 13);
			this->label112->TabIndex = 69;
			this->label112->Text = L"0123456789";
			// 
			// label113
			// 
			this->label113->AutoSize = true;
			this->label113->Location = System::Drawing::Point(316, 369);
			this->label113->Name = L"label113";
			this->label113->Size = System::Drawing::Size(67, 13);
			this->label113->TabIndex = 68;
			this->label113->Text = L"0123456789";
			// 
			// label114
			// 
			this->label114->AutoSize = true;
			this->label114->Location = System::Drawing::Point(256, 356);
			this->label114->Name = L"label114";
			this->label114->Size = System::Drawing::Size(67, 13);
			this->label114->TabIndex = 67;
			this->label114->Text = L"0123456789";
			// 
			// label115
			// 
			this->label115->AutoSize = true;
			this->label115->Location = System::Drawing::Point(197, 367);
			this->label115->Name = L"label115";
			this->label115->Size = System::Drawing::Size(67, 13);
			this->label115->TabIndex = 66;
			this->label115->Text = L"0123456789";
			// 
			// label116
			// 
			this->label116->AutoSize = true;
			this->label116->Location = System::Drawing::Point(135, 356);
			this->label116->Name = L"label116";
			this->label116->Size = System::Drawing::Size(67, 13);
			this->label116->TabIndex = 65;
			this->label116->Text = L"0123456789";
			// 
			// label117
			// 
			this->label117->AutoSize = true;
			this->label117->Location = System::Drawing::Point(75, 367);
			this->label117->Name = L"label117";
			this->label117->Size = System::Drawing::Size(67, 13);
			this->label117->TabIndex = 64;
			this->label117->Text = L"0123456789";
			// 
			// dataGridView14
			// 
			this->dataGridView14->AllowDrop = true;
			this->dataGridView14->AllowUserToAddRows = false;
			this->dataGridView14->AllowUserToDeleteRows = false;
			this->dataGridView14->AllowUserToResizeColumns = false;
			this->dataGridView14->AllowUserToResizeRows = false;
			this->dataGridView14->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView14->ColumnHeadersVisible = false;
			this->dataGridView14->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn705, 
				this->dataGridViewTextBoxColumn706, this->dataGridViewTextBoxColumn707, this->dataGridViewTextBoxColumn708, this->dataGridViewTextBoxColumn709, 
				this->dataGridViewTextBoxColumn710, this->dataGridViewTextBoxColumn711, this->dataGridViewTextBoxColumn712, this->dataGridViewTextBoxColumn713, 
				this->dataGridViewTextBoxColumn714, this->dataGridViewTextBoxColumn715, this->dataGridViewTextBoxColumn716, this->dataGridViewTextBoxColumn717, 
				this->dataGridViewTextBoxColumn718, this->dataGridViewTextBoxColumn719, this->dataGridViewTextBoxColumn720, this->dataGridViewTextBoxColumn721, 
				this->dataGridViewTextBoxColumn722, this->dataGridViewTextBoxColumn723, this->dataGridViewTextBoxColumn724, this->dataGridViewTextBoxColumn725, 
				this->dataGridViewTextBoxColumn726, this->dataGridViewTextBoxColumn727, this->dataGridViewTextBoxColumn728, this->dataGridViewTextBoxColumn729, 
				this->dataGridViewTextBoxColumn730, this->dataGridViewTextBoxColumn731, this->dataGridViewTextBoxColumn732, this->dataGridViewTextBoxColumn733, 
				this->dataGridViewTextBoxColumn734, this->dataGridViewTextBoxColumn735, this->dataGridViewTextBoxColumn736, this->dataGridViewTextBoxColumn737, 
				this->dataGridViewTextBoxColumn738, this->dataGridViewTextBoxColumn739, this->dataGridViewTextBoxColumn740, this->dataGridViewTextBoxColumn741, 
				this->dataGridViewTextBoxColumn742, this->dataGridViewTextBoxColumn743, this->dataGridViewTextBoxColumn744, this->dataGridViewTextBoxColumn745, 
				this->dataGridViewTextBoxColumn746, this->dataGridViewTextBoxColumn747, this->dataGridViewTextBoxColumn748, this->dataGridViewTextBoxColumn749, 
				this->dataGridViewTextBoxColumn750, this->dataGridViewTextBoxColumn751, this->dataGridViewTextBoxColumn752, this->dataGridViewTextBoxColumn753, 
				this->dataGridViewTextBoxColumn754, this->dataGridViewTextBoxColumn755, this->dataGridViewTextBoxColumn756, this->dataGridViewTextBoxColumn757, 
				this->dataGridViewTextBoxColumn758, this->dataGridViewTextBoxColumn759, this->dataGridViewTextBoxColumn760, this->dataGridViewTextBoxColumn761, 
				this->dataGridViewTextBoxColumn762, this->dataGridViewTextBoxColumn763, this->dataGridViewTextBoxColumn764, this->dataGridViewTextBoxColumn765, 
				this->dataGridViewTextBoxColumn766, this->dataGridViewTextBoxColumn767, this->dataGridViewTextBoxColumn768});
			this->dataGridView14->Location = System::Drawing::Point(77, 383);
			this->dataGridView14->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView14->Name = L"dataGridView14";
			this->dataGridView14->ReadOnly = true;
			this->dataGridView14->RowHeadersVisible = false;
			this->dataGridView14->RowHeadersWidth = 15;
			dataGridViewCellStyle9->BackColor = System::Drawing::Color::White;
			this->dataGridView14->RowsDefaultCellStyle = dataGridViewCellStyle9;
			this->dataGridView14->RowTemplate->Height = 35;
			this->dataGridView14->Size = System::Drawing::Size(390, 41);
			this->dataGridView14->TabIndex = 63;
			// 
			// dataGridViewTextBoxColumn705
			// 
			this->dataGridViewTextBoxColumn705->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn705->Name = L"dataGridViewTextBoxColumn705";
			this->dataGridViewTextBoxColumn705->ReadOnly = true;
			this->dataGridViewTextBoxColumn705->Width = 6;
			// 
			// dataGridViewTextBoxColumn706
			// 
			this->dataGridViewTextBoxColumn706->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn706->Name = L"dataGridViewTextBoxColumn706";
			this->dataGridViewTextBoxColumn706->ReadOnly = true;
			this->dataGridViewTextBoxColumn706->Width = 6;
			// 
			// dataGridViewTextBoxColumn707
			// 
			this->dataGridViewTextBoxColumn707->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn707->Name = L"dataGridViewTextBoxColumn707";
			this->dataGridViewTextBoxColumn707->ReadOnly = true;
			this->dataGridViewTextBoxColumn707->Width = 6;
			// 
			// dataGridViewTextBoxColumn708
			// 
			this->dataGridViewTextBoxColumn708->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn708->Name = L"dataGridViewTextBoxColumn708";
			this->dataGridViewTextBoxColumn708->ReadOnly = true;
			this->dataGridViewTextBoxColumn708->Width = 6;
			// 
			// dataGridViewTextBoxColumn709
			// 
			this->dataGridViewTextBoxColumn709->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn709->Name = L"dataGridViewTextBoxColumn709";
			this->dataGridViewTextBoxColumn709->ReadOnly = true;
			this->dataGridViewTextBoxColumn709->Width = 6;
			// 
			// dataGridViewTextBoxColumn710
			// 
			this->dataGridViewTextBoxColumn710->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn710->Name = L"dataGridViewTextBoxColumn710";
			this->dataGridViewTextBoxColumn710->ReadOnly = true;
			this->dataGridViewTextBoxColumn710->Width = 6;
			// 
			// dataGridViewTextBoxColumn711
			// 
			this->dataGridViewTextBoxColumn711->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn711->Name = L"dataGridViewTextBoxColumn711";
			this->dataGridViewTextBoxColumn711->ReadOnly = true;
			this->dataGridViewTextBoxColumn711->Width = 6;
			// 
			// dataGridViewTextBoxColumn712
			// 
			this->dataGridViewTextBoxColumn712->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn712->Name = L"dataGridViewTextBoxColumn712";
			this->dataGridViewTextBoxColumn712->ReadOnly = true;
			this->dataGridViewTextBoxColumn712->Width = 6;
			// 
			// dataGridViewTextBoxColumn713
			// 
			this->dataGridViewTextBoxColumn713->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn713->Name = L"dataGridViewTextBoxColumn713";
			this->dataGridViewTextBoxColumn713->ReadOnly = true;
			this->dataGridViewTextBoxColumn713->Width = 6;
			// 
			// dataGridViewTextBoxColumn714
			// 
			this->dataGridViewTextBoxColumn714->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn714->Name = L"dataGridViewTextBoxColumn714";
			this->dataGridViewTextBoxColumn714->ReadOnly = true;
			this->dataGridViewTextBoxColumn714->Width = 6;
			// 
			// dataGridViewTextBoxColumn715
			// 
			this->dataGridViewTextBoxColumn715->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn715->Name = L"dataGridViewTextBoxColumn715";
			this->dataGridViewTextBoxColumn715->ReadOnly = true;
			this->dataGridViewTextBoxColumn715->Width = 6;
			// 
			// dataGridViewTextBoxColumn716
			// 
			this->dataGridViewTextBoxColumn716->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn716->Name = L"dataGridViewTextBoxColumn716";
			this->dataGridViewTextBoxColumn716->ReadOnly = true;
			this->dataGridViewTextBoxColumn716->Width = 6;
			// 
			// dataGridViewTextBoxColumn717
			// 
			this->dataGridViewTextBoxColumn717->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn717->Name = L"dataGridViewTextBoxColumn717";
			this->dataGridViewTextBoxColumn717->ReadOnly = true;
			this->dataGridViewTextBoxColumn717->Width = 6;
			// 
			// dataGridViewTextBoxColumn718
			// 
			this->dataGridViewTextBoxColumn718->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn718->Name = L"dataGridViewTextBoxColumn718";
			this->dataGridViewTextBoxColumn718->ReadOnly = true;
			this->dataGridViewTextBoxColumn718->Width = 6;
			// 
			// dataGridViewTextBoxColumn719
			// 
			this->dataGridViewTextBoxColumn719->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn719->Name = L"dataGridViewTextBoxColumn719";
			this->dataGridViewTextBoxColumn719->ReadOnly = true;
			this->dataGridViewTextBoxColumn719->Width = 6;
			// 
			// dataGridViewTextBoxColumn720
			// 
			this->dataGridViewTextBoxColumn720->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn720->Name = L"dataGridViewTextBoxColumn720";
			this->dataGridViewTextBoxColumn720->ReadOnly = true;
			this->dataGridViewTextBoxColumn720->Width = 6;
			// 
			// dataGridViewTextBoxColumn721
			// 
			this->dataGridViewTextBoxColumn721->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn721->Name = L"dataGridViewTextBoxColumn721";
			this->dataGridViewTextBoxColumn721->ReadOnly = true;
			this->dataGridViewTextBoxColumn721->Width = 6;
			// 
			// dataGridViewTextBoxColumn722
			// 
			this->dataGridViewTextBoxColumn722->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn722->Name = L"dataGridViewTextBoxColumn722";
			this->dataGridViewTextBoxColumn722->ReadOnly = true;
			this->dataGridViewTextBoxColumn722->Width = 6;
			// 
			// dataGridViewTextBoxColumn723
			// 
			this->dataGridViewTextBoxColumn723->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn723->Name = L"dataGridViewTextBoxColumn723";
			this->dataGridViewTextBoxColumn723->ReadOnly = true;
			this->dataGridViewTextBoxColumn723->Width = 6;
			// 
			// dataGridViewTextBoxColumn724
			// 
			this->dataGridViewTextBoxColumn724->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn724->Name = L"dataGridViewTextBoxColumn724";
			this->dataGridViewTextBoxColumn724->ReadOnly = true;
			this->dataGridViewTextBoxColumn724->Width = 6;
			// 
			// dataGridViewTextBoxColumn725
			// 
			this->dataGridViewTextBoxColumn725->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn725->Name = L"dataGridViewTextBoxColumn725";
			this->dataGridViewTextBoxColumn725->ReadOnly = true;
			this->dataGridViewTextBoxColumn725->Width = 6;
			// 
			// dataGridViewTextBoxColumn726
			// 
			this->dataGridViewTextBoxColumn726->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn726->Name = L"dataGridViewTextBoxColumn726";
			this->dataGridViewTextBoxColumn726->ReadOnly = true;
			this->dataGridViewTextBoxColumn726->Width = 6;
			// 
			// dataGridViewTextBoxColumn727
			// 
			this->dataGridViewTextBoxColumn727->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn727->Name = L"dataGridViewTextBoxColumn727";
			this->dataGridViewTextBoxColumn727->ReadOnly = true;
			this->dataGridViewTextBoxColumn727->Width = 6;
			// 
			// dataGridViewTextBoxColumn728
			// 
			this->dataGridViewTextBoxColumn728->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn728->Name = L"dataGridViewTextBoxColumn728";
			this->dataGridViewTextBoxColumn728->ReadOnly = true;
			this->dataGridViewTextBoxColumn728->Width = 6;
			// 
			// dataGridViewTextBoxColumn729
			// 
			this->dataGridViewTextBoxColumn729->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn729->Name = L"dataGridViewTextBoxColumn729";
			this->dataGridViewTextBoxColumn729->ReadOnly = true;
			this->dataGridViewTextBoxColumn729->Width = 6;
			// 
			// dataGridViewTextBoxColumn730
			// 
			this->dataGridViewTextBoxColumn730->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn730->Name = L"dataGridViewTextBoxColumn730";
			this->dataGridViewTextBoxColumn730->ReadOnly = true;
			this->dataGridViewTextBoxColumn730->Width = 6;
			// 
			// dataGridViewTextBoxColumn731
			// 
			this->dataGridViewTextBoxColumn731->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn731->Name = L"dataGridViewTextBoxColumn731";
			this->dataGridViewTextBoxColumn731->ReadOnly = true;
			this->dataGridViewTextBoxColumn731->Width = 6;
			// 
			// dataGridViewTextBoxColumn732
			// 
			this->dataGridViewTextBoxColumn732->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn732->Name = L"dataGridViewTextBoxColumn732";
			this->dataGridViewTextBoxColumn732->ReadOnly = true;
			this->dataGridViewTextBoxColumn732->Width = 6;
			// 
			// dataGridViewTextBoxColumn733
			// 
			this->dataGridViewTextBoxColumn733->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn733->Name = L"dataGridViewTextBoxColumn733";
			this->dataGridViewTextBoxColumn733->ReadOnly = true;
			this->dataGridViewTextBoxColumn733->Width = 6;
			// 
			// dataGridViewTextBoxColumn734
			// 
			this->dataGridViewTextBoxColumn734->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn734->Name = L"dataGridViewTextBoxColumn734";
			this->dataGridViewTextBoxColumn734->ReadOnly = true;
			this->dataGridViewTextBoxColumn734->Width = 6;
			// 
			// dataGridViewTextBoxColumn735
			// 
			this->dataGridViewTextBoxColumn735->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn735->Name = L"dataGridViewTextBoxColumn735";
			this->dataGridViewTextBoxColumn735->ReadOnly = true;
			this->dataGridViewTextBoxColumn735->Width = 6;
			// 
			// dataGridViewTextBoxColumn736
			// 
			this->dataGridViewTextBoxColumn736->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn736->Name = L"dataGridViewTextBoxColumn736";
			this->dataGridViewTextBoxColumn736->ReadOnly = true;
			this->dataGridViewTextBoxColumn736->Width = 6;
			// 
			// dataGridViewTextBoxColumn737
			// 
			this->dataGridViewTextBoxColumn737->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn737->Name = L"dataGridViewTextBoxColumn737";
			this->dataGridViewTextBoxColumn737->ReadOnly = true;
			this->dataGridViewTextBoxColumn737->Width = 6;
			// 
			// dataGridViewTextBoxColumn738
			// 
			this->dataGridViewTextBoxColumn738->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn738->Name = L"dataGridViewTextBoxColumn738";
			this->dataGridViewTextBoxColumn738->ReadOnly = true;
			this->dataGridViewTextBoxColumn738->Width = 6;
			// 
			// dataGridViewTextBoxColumn739
			// 
			this->dataGridViewTextBoxColumn739->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn739->Name = L"dataGridViewTextBoxColumn739";
			this->dataGridViewTextBoxColumn739->ReadOnly = true;
			this->dataGridViewTextBoxColumn739->Width = 6;
			// 
			// dataGridViewTextBoxColumn740
			// 
			this->dataGridViewTextBoxColumn740->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn740->Name = L"dataGridViewTextBoxColumn740";
			this->dataGridViewTextBoxColumn740->ReadOnly = true;
			this->dataGridViewTextBoxColumn740->Width = 6;
			// 
			// dataGridViewTextBoxColumn741
			// 
			this->dataGridViewTextBoxColumn741->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn741->Name = L"dataGridViewTextBoxColumn741";
			this->dataGridViewTextBoxColumn741->ReadOnly = true;
			this->dataGridViewTextBoxColumn741->Width = 6;
			// 
			// dataGridViewTextBoxColumn742
			// 
			this->dataGridViewTextBoxColumn742->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn742->Name = L"dataGridViewTextBoxColumn742";
			this->dataGridViewTextBoxColumn742->ReadOnly = true;
			this->dataGridViewTextBoxColumn742->Width = 6;
			// 
			// dataGridViewTextBoxColumn743
			// 
			this->dataGridViewTextBoxColumn743->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn743->Name = L"dataGridViewTextBoxColumn743";
			this->dataGridViewTextBoxColumn743->ReadOnly = true;
			this->dataGridViewTextBoxColumn743->Width = 6;
			// 
			// dataGridViewTextBoxColumn744
			// 
			this->dataGridViewTextBoxColumn744->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn744->Name = L"dataGridViewTextBoxColumn744";
			this->dataGridViewTextBoxColumn744->ReadOnly = true;
			this->dataGridViewTextBoxColumn744->Width = 6;
			// 
			// dataGridViewTextBoxColumn745
			// 
			this->dataGridViewTextBoxColumn745->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn745->Name = L"dataGridViewTextBoxColumn745";
			this->dataGridViewTextBoxColumn745->ReadOnly = true;
			this->dataGridViewTextBoxColumn745->Width = 6;
			// 
			// dataGridViewTextBoxColumn746
			// 
			this->dataGridViewTextBoxColumn746->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn746->Name = L"dataGridViewTextBoxColumn746";
			this->dataGridViewTextBoxColumn746->ReadOnly = true;
			this->dataGridViewTextBoxColumn746->Width = 6;
			// 
			// dataGridViewTextBoxColumn747
			// 
			this->dataGridViewTextBoxColumn747->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn747->Name = L"dataGridViewTextBoxColumn747";
			this->dataGridViewTextBoxColumn747->ReadOnly = true;
			this->dataGridViewTextBoxColumn747->Width = 6;
			// 
			// dataGridViewTextBoxColumn748
			// 
			this->dataGridViewTextBoxColumn748->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn748->Name = L"dataGridViewTextBoxColumn748";
			this->dataGridViewTextBoxColumn748->ReadOnly = true;
			this->dataGridViewTextBoxColumn748->Width = 6;
			// 
			// dataGridViewTextBoxColumn749
			// 
			this->dataGridViewTextBoxColumn749->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn749->Name = L"dataGridViewTextBoxColumn749";
			this->dataGridViewTextBoxColumn749->ReadOnly = true;
			this->dataGridViewTextBoxColumn749->Width = 6;
			// 
			// dataGridViewTextBoxColumn750
			// 
			this->dataGridViewTextBoxColumn750->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn750->Name = L"dataGridViewTextBoxColumn750";
			this->dataGridViewTextBoxColumn750->ReadOnly = true;
			this->dataGridViewTextBoxColumn750->Width = 6;
			// 
			// dataGridViewTextBoxColumn751
			// 
			this->dataGridViewTextBoxColumn751->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn751->Name = L"dataGridViewTextBoxColumn751";
			this->dataGridViewTextBoxColumn751->ReadOnly = true;
			this->dataGridViewTextBoxColumn751->Width = 6;
			// 
			// dataGridViewTextBoxColumn752
			// 
			this->dataGridViewTextBoxColumn752->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn752->Name = L"dataGridViewTextBoxColumn752";
			this->dataGridViewTextBoxColumn752->ReadOnly = true;
			this->dataGridViewTextBoxColumn752->Width = 6;
			// 
			// dataGridViewTextBoxColumn753
			// 
			this->dataGridViewTextBoxColumn753->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn753->Name = L"dataGridViewTextBoxColumn753";
			this->dataGridViewTextBoxColumn753->ReadOnly = true;
			this->dataGridViewTextBoxColumn753->Width = 6;
			// 
			// dataGridViewTextBoxColumn754
			// 
			this->dataGridViewTextBoxColumn754->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn754->Name = L"dataGridViewTextBoxColumn754";
			this->dataGridViewTextBoxColumn754->ReadOnly = true;
			this->dataGridViewTextBoxColumn754->Width = 6;
			// 
			// dataGridViewTextBoxColumn755
			// 
			this->dataGridViewTextBoxColumn755->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn755->Name = L"dataGridViewTextBoxColumn755";
			this->dataGridViewTextBoxColumn755->ReadOnly = true;
			this->dataGridViewTextBoxColumn755->Width = 6;
			// 
			// dataGridViewTextBoxColumn756
			// 
			this->dataGridViewTextBoxColumn756->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn756->Name = L"dataGridViewTextBoxColumn756";
			this->dataGridViewTextBoxColumn756->ReadOnly = true;
			this->dataGridViewTextBoxColumn756->Width = 6;
			// 
			// dataGridViewTextBoxColumn757
			// 
			this->dataGridViewTextBoxColumn757->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn757->Name = L"dataGridViewTextBoxColumn757";
			this->dataGridViewTextBoxColumn757->ReadOnly = true;
			this->dataGridViewTextBoxColumn757->Width = 6;
			// 
			// dataGridViewTextBoxColumn758
			// 
			this->dataGridViewTextBoxColumn758->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn758->Name = L"dataGridViewTextBoxColumn758";
			this->dataGridViewTextBoxColumn758->ReadOnly = true;
			this->dataGridViewTextBoxColumn758->Width = 6;
			// 
			// dataGridViewTextBoxColumn759
			// 
			this->dataGridViewTextBoxColumn759->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn759->Name = L"dataGridViewTextBoxColumn759";
			this->dataGridViewTextBoxColumn759->ReadOnly = true;
			this->dataGridViewTextBoxColumn759->Width = 6;
			// 
			// dataGridViewTextBoxColumn760
			// 
			this->dataGridViewTextBoxColumn760->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn760->Name = L"dataGridViewTextBoxColumn760";
			this->dataGridViewTextBoxColumn760->ReadOnly = true;
			this->dataGridViewTextBoxColumn760->Width = 6;
			// 
			// dataGridViewTextBoxColumn761
			// 
			this->dataGridViewTextBoxColumn761->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn761->Name = L"dataGridViewTextBoxColumn761";
			this->dataGridViewTextBoxColumn761->ReadOnly = true;
			this->dataGridViewTextBoxColumn761->Width = 6;
			// 
			// dataGridViewTextBoxColumn762
			// 
			this->dataGridViewTextBoxColumn762->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn762->Name = L"dataGridViewTextBoxColumn762";
			this->dataGridViewTextBoxColumn762->ReadOnly = true;
			this->dataGridViewTextBoxColumn762->Width = 6;
			// 
			// dataGridViewTextBoxColumn763
			// 
			this->dataGridViewTextBoxColumn763->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn763->Name = L"dataGridViewTextBoxColumn763";
			this->dataGridViewTextBoxColumn763->ReadOnly = true;
			this->dataGridViewTextBoxColumn763->Width = 6;
			// 
			// dataGridViewTextBoxColumn764
			// 
			this->dataGridViewTextBoxColumn764->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn764->Name = L"dataGridViewTextBoxColumn764";
			this->dataGridViewTextBoxColumn764->ReadOnly = true;
			this->dataGridViewTextBoxColumn764->Width = 6;
			// 
			// dataGridViewTextBoxColumn765
			// 
			this->dataGridViewTextBoxColumn765->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn765->Name = L"dataGridViewTextBoxColumn765";
			this->dataGridViewTextBoxColumn765->ReadOnly = true;
			this->dataGridViewTextBoxColumn765->Width = 6;
			// 
			// dataGridViewTextBoxColumn766
			// 
			this->dataGridViewTextBoxColumn766->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn766->Name = L"dataGridViewTextBoxColumn766";
			this->dataGridViewTextBoxColumn766->ReadOnly = true;
			this->dataGridViewTextBoxColumn766->Width = 6;
			// 
			// dataGridViewTextBoxColumn767
			// 
			this->dataGridViewTextBoxColumn767->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn767->Name = L"dataGridViewTextBoxColumn767";
			this->dataGridViewTextBoxColumn767->ReadOnly = true;
			this->dataGridViewTextBoxColumn767->Width = 6;
			// 
			// dataGridViewTextBoxColumn768
			// 
			this->dataGridViewTextBoxColumn768->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn768->Name = L"dataGridViewTextBoxColumn768";
			this->dataGridViewTextBoxColumn768->ReadOnly = true;
			this->dataGridViewTextBoxColumn768->Width = 6;
			// 
			// label44
			// 
			this->label44->AutoSize = true;
			this->label44->Location = System::Drawing::Point(74, 501);
			this->label44->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label44->Name = L"label44";
			this->label44->Size = System::Drawing::Size(78, 13);
			this->label44->TabIndex = 61;
			this->label44->Text = L"Voxel Pos (Val)";
			// 
			// label45
			// 
			this->label45->AutoSize = true;
			this->label45->Location = System::Drawing::Point(318, 501);
			this->label45->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label45->Name = L"label45";
			this->label45->Size = System::Drawing::Size(35, 13);
			this->label45->TabIndex = 60;
			this->label45->Text = L"Pos Y";
			// 
			// label46
			// 
			this->label46->AutoSize = true;
			this->label46->Location = System::Drawing::Point(227, 501);
			this->label46->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label46->Name = L"label46";
			this->label46->Size = System::Drawing::Size(35, 13);
			this->label46->TabIndex = 59;
			this->label46->Text = L"Pos X";
			// 
			// label47
			// 
			this->label47->AutoSize = true;
			this->label47->Location = System::Drawing::Point(30, 452);
			this->label47->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label47->Name = L"label47";
			this->label47->Size = System::Drawing::Size(43, 13);
			this->label47->TabIndex = 58;
			this->label47->Text = L"HEX 0x";
			// 
			// label48
			// 
			this->label48->AutoSize = true;
			this->label48->Location = System::Drawing::Point(44, 430);
			this->label48->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label48->Name = L"label48";
			this->label48->Size = System::Drawing::Size(27, 13);
			this->label48->TabIndex = 57;
			this->label48->Text = L"Bits:";
			// 
			// label49
			// 
			this->label49->AutoSize = true;
			this->label49->Location = System::Drawing::Point(18, 402);
			this->label49->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label49->Name = L"label49";
			this->label49->Size = System::Drawing::Size(20, 13);
			this->label49->TabIndex = 56;
			this->label49->Text = L"Y=";
			// 
			// label50
			// 
			this->label50->AutoSize = true;
			this->label50->Location = System::Drawing::Point(18, 373);
			this->label50->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label50->Name = L"label50";
			this->label50->Size = System::Drawing::Size(20, 13);
			this->label50->TabIndex = 55;
			this->label50->Text = L"X=";
			// 
			// label51
			// 
			this->label51->AutoSize = true;
			this->label51->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label51->Location = System::Drawing::Point(34, 403);
			this->label51->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label51->Name = L"label51";
			this->label51->Size = System::Drawing::Size(21, 13);
			this->label51->TabIndex = 54;
			this->label51->Text = L"__";
			// 
			// label52
			// 
			this->label52->AutoSize = true;
			this->label52->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label52->Location = System::Drawing::Point(34, 373);
			this->label52->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label52->Name = L"label52";
			this->label52->Size = System::Drawing::Size(21, 13);
			this->label52->TabIndex = 53;
			this->label52->Text = L"__";
			// 
			// textBox21
			// 
			this->textBox21->Location = System::Drawing::Point(77, 516);
			this->textBox21->Margin = System::Windows::Forms::Padding(2);
			this->textBox21->Name = L"textBox21";
			this->textBox21->Size = System::Drawing::Size(76, 20);
			this->textBox21->TabIndex = 52;
			// 
			// textBox22
			// 
			this->textBox22->Location = System::Drawing::Point(230, 516);
			this->textBox22->Margin = System::Windows::Forms::Padding(2);
			this->textBox22->Name = L"textBox22";
			this->textBox22->Size = System::Drawing::Size(76, 20);
			this->textBox22->TabIndex = 51;
			// 
			// textBox23
			// 
			this->textBox23->Location = System::Drawing::Point(321, 516);
			this->textBox23->Margin = System::Windows::Forms::Padding(2);
			this->textBox23->Name = L"textBox23";
			this->textBox23->Size = System::Drawing::Size(76, 20);
			this->textBox23->TabIndex = 50;
			// 
			// textBox24
			// 
			this->textBox24->Location = System::Drawing::Point(75, 448);
			this->textBox24->Margin = System::Windows::Forms::Padding(2);
			this->textBox24->MaxLength = 16;
			this->textBox24->Name = L"textBox24";
			this->textBox24->Size = System::Drawing::Size(349, 20);
			this->textBox24->TabIndex = 49;
			// 
			// textBox25
			// 
			this->textBox25->Location = System::Drawing::Point(75, 425);
			this->textBox25->Margin = System::Windows::Forms::Padding(2);
			this->textBox25->MaxLength = 64;
			this->textBox25->Name = L"textBox25";
			this->textBox25->Size = System::Drawing::Size(397, 20);
			this->textBox25->TabIndex = 48;
			// 
			// dataGridView5
			// 
			this->dataGridView5->AllowDrop = true;
			this->dataGridView5->AllowUserToAddRows = false;
			this->dataGridView5->AllowUserToDeleteRows = false;
			this->dataGridView5->AllowUserToResizeColumns = false;
			this->dataGridView5->AllowUserToResizeRows = false;
			this->dataGridView5->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView5->ColumnHeadersVisible = false;
			this->dataGridView5->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn193, 
				this->dataGridViewTextBoxColumn194, this->dataGridViewTextBoxColumn195, this->dataGridViewTextBoxColumn196, this->dataGridViewTextBoxColumn197, 
				this->dataGridViewTextBoxColumn198, this->dataGridViewTextBoxColumn199, this->dataGridViewTextBoxColumn200, this->dataGridViewTextBoxColumn201, 
				this->dataGridViewTextBoxColumn202, this->dataGridViewTextBoxColumn203, this->dataGridViewTextBoxColumn204, this->dataGridViewTextBoxColumn205, 
				this->dataGridViewTextBoxColumn206, this->dataGridViewTextBoxColumn207, this->dataGridViewTextBoxColumn208, this->dataGridViewTextBoxColumn209, 
				this->dataGridViewTextBoxColumn210, this->dataGridViewTextBoxColumn211, this->dataGridViewTextBoxColumn212, this->dataGridViewTextBoxColumn213, 
				this->dataGridViewTextBoxColumn214, this->dataGridViewTextBoxColumn215, this->dataGridViewTextBoxColumn216, this->dataGridViewTextBoxColumn217, 
				this->dataGridViewTextBoxColumn218, this->dataGridViewTextBoxColumn219, this->dataGridViewTextBoxColumn220, this->dataGridViewTextBoxColumn221, 
				this->dataGridViewTextBoxColumn222, this->dataGridViewTextBoxColumn223, this->dataGridViewTextBoxColumn224, this->dataGridViewTextBoxColumn225, 
				this->dataGridViewTextBoxColumn226, this->dataGridViewTextBoxColumn227, this->dataGridViewTextBoxColumn228, this->dataGridViewTextBoxColumn229, 
				this->dataGridViewTextBoxColumn230, this->dataGridViewTextBoxColumn231, this->dataGridViewTextBoxColumn232, this->dataGridViewTextBoxColumn233, 
				this->dataGridViewTextBoxColumn234, this->dataGridViewTextBoxColumn235, this->dataGridViewTextBoxColumn236, this->dataGridViewTextBoxColumn237, 
				this->dataGridViewTextBoxColumn238, this->dataGridViewTextBoxColumn239, this->dataGridViewTextBoxColumn240, this->dataGridViewTextBoxColumn241, 
				this->dataGridViewTextBoxColumn242, this->dataGridViewTextBoxColumn243, this->dataGridViewTextBoxColumn244, this->dataGridViewTextBoxColumn245, 
				this->dataGridViewTextBoxColumn246, this->dataGridViewTextBoxColumn247, this->dataGridViewTextBoxColumn248, this->dataGridViewTextBoxColumn249, 
				this->dataGridViewTextBoxColumn250, this->dataGridViewTextBoxColumn251, this->dataGridViewTextBoxColumn252, this->dataGridViewTextBoxColumn253, 
				this->dataGridViewTextBoxColumn254, this->dataGridViewTextBoxColumn255, this->dataGridViewTextBoxColumn256});
			this->dataGridView5->Location = System::Drawing::Point(36, 15);
			this->dataGridView5->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView5->MultiSelect = false;
			this->dataGridView5->Name = L"dataGridView5";
			this->dataGridView5->ReadOnly = true;
			this->dataGridView5->RowHeadersVisible = false;
			this->dataGridView5->RowHeadersWidth = 15;
			dataGridViewCellStyle10->BackColor = System::Drawing::Color::White;
			this->dataGridView5->RowsDefaultCellStyle = dataGridViewCellStyle10;
			this->dataGridView5->RowTemplate->Height = 10;
			this->dataGridView5->Size = System::Drawing::Size(656, 338);
			this->dataGridView5->TabIndex = 32;
			this->dataGridView5->CellMouseClick += gcnew System::Windows::Forms::DataGridViewCellMouseEventHandler(this, &Form1::dataGridView5_CellMouseClick);
			this->dataGridView5->SelectionChanged += gcnew System::EventHandler(this, &Form1::dataGridView5_SelectionChanged);
			// 
			// dataGridViewTextBoxColumn193
			// 
			this->dataGridViewTextBoxColumn193->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn193->Name = L"dataGridViewTextBoxColumn193";
			this->dataGridViewTextBoxColumn193->ReadOnly = true;
			this->dataGridViewTextBoxColumn193->Width = 10;
			// 
			// dataGridViewTextBoxColumn194
			// 
			this->dataGridViewTextBoxColumn194->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn194->Name = L"dataGridViewTextBoxColumn194";
			this->dataGridViewTextBoxColumn194->ReadOnly = true;
			this->dataGridViewTextBoxColumn194->Width = 10;
			// 
			// dataGridViewTextBoxColumn195
			// 
			this->dataGridViewTextBoxColumn195->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn195->Name = L"dataGridViewTextBoxColumn195";
			this->dataGridViewTextBoxColumn195->ReadOnly = true;
			this->dataGridViewTextBoxColumn195->Width = 10;
			// 
			// dataGridViewTextBoxColumn196
			// 
			this->dataGridViewTextBoxColumn196->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn196->Name = L"dataGridViewTextBoxColumn196";
			this->dataGridViewTextBoxColumn196->ReadOnly = true;
			this->dataGridViewTextBoxColumn196->Width = 10;
			// 
			// dataGridViewTextBoxColumn197
			// 
			this->dataGridViewTextBoxColumn197->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn197->Name = L"dataGridViewTextBoxColumn197";
			this->dataGridViewTextBoxColumn197->ReadOnly = true;
			this->dataGridViewTextBoxColumn197->Width = 10;
			// 
			// dataGridViewTextBoxColumn198
			// 
			this->dataGridViewTextBoxColumn198->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn198->Name = L"dataGridViewTextBoxColumn198";
			this->dataGridViewTextBoxColumn198->ReadOnly = true;
			this->dataGridViewTextBoxColumn198->Width = 10;
			// 
			// dataGridViewTextBoxColumn199
			// 
			this->dataGridViewTextBoxColumn199->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn199->Name = L"dataGridViewTextBoxColumn199";
			this->dataGridViewTextBoxColumn199->ReadOnly = true;
			this->dataGridViewTextBoxColumn199->Width = 10;
			// 
			// dataGridViewTextBoxColumn200
			// 
			this->dataGridViewTextBoxColumn200->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn200->Name = L"dataGridViewTextBoxColumn200";
			this->dataGridViewTextBoxColumn200->ReadOnly = true;
			this->dataGridViewTextBoxColumn200->Width = 10;
			// 
			// dataGridViewTextBoxColumn201
			// 
			this->dataGridViewTextBoxColumn201->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn201->Name = L"dataGridViewTextBoxColumn201";
			this->dataGridViewTextBoxColumn201->ReadOnly = true;
			this->dataGridViewTextBoxColumn201->Width = 10;
			// 
			// dataGridViewTextBoxColumn202
			// 
			this->dataGridViewTextBoxColumn202->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn202->Name = L"dataGridViewTextBoxColumn202";
			this->dataGridViewTextBoxColumn202->ReadOnly = true;
			this->dataGridViewTextBoxColumn202->Width = 10;
			// 
			// dataGridViewTextBoxColumn203
			// 
			this->dataGridViewTextBoxColumn203->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn203->Name = L"dataGridViewTextBoxColumn203";
			this->dataGridViewTextBoxColumn203->ReadOnly = true;
			this->dataGridViewTextBoxColumn203->Width = 10;
			// 
			// dataGridViewTextBoxColumn204
			// 
			this->dataGridViewTextBoxColumn204->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn204->Name = L"dataGridViewTextBoxColumn204";
			this->dataGridViewTextBoxColumn204->ReadOnly = true;
			this->dataGridViewTextBoxColumn204->Width = 10;
			// 
			// dataGridViewTextBoxColumn205
			// 
			this->dataGridViewTextBoxColumn205->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn205->Name = L"dataGridViewTextBoxColumn205";
			this->dataGridViewTextBoxColumn205->ReadOnly = true;
			this->dataGridViewTextBoxColumn205->Width = 10;
			// 
			// dataGridViewTextBoxColumn206
			// 
			this->dataGridViewTextBoxColumn206->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn206->Name = L"dataGridViewTextBoxColumn206";
			this->dataGridViewTextBoxColumn206->ReadOnly = true;
			this->dataGridViewTextBoxColumn206->Width = 10;
			// 
			// dataGridViewTextBoxColumn207
			// 
			this->dataGridViewTextBoxColumn207->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn207->Name = L"dataGridViewTextBoxColumn207";
			this->dataGridViewTextBoxColumn207->ReadOnly = true;
			this->dataGridViewTextBoxColumn207->Width = 10;
			// 
			// dataGridViewTextBoxColumn208
			// 
			this->dataGridViewTextBoxColumn208->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn208->Name = L"dataGridViewTextBoxColumn208";
			this->dataGridViewTextBoxColumn208->ReadOnly = true;
			this->dataGridViewTextBoxColumn208->Width = 10;
			// 
			// dataGridViewTextBoxColumn209
			// 
			this->dataGridViewTextBoxColumn209->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn209->Name = L"dataGridViewTextBoxColumn209";
			this->dataGridViewTextBoxColumn209->ReadOnly = true;
			this->dataGridViewTextBoxColumn209->Width = 10;
			// 
			// dataGridViewTextBoxColumn210
			// 
			this->dataGridViewTextBoxColumn210->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn210->Name = L"dataGridViewTextBoxColumn210";
			this->dataGridViewTextBoxColumn210->ReadOnly = true;
			this->dataGridViewTextBoxColumn210->Width = 10;
			// 
			// dataGridViewTextBoxColumn211
			// 
			this->dataGridViewTextBoxColumn211->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn211->Name = L"dataGridViewTextBoxColumn211";
			this->dataGridViewTextBoxColumn211->ReadOnly = true;
			this->dataGridViewTextBoxColumn211->Width = 10;
			// 
			// dataGridViewTextBoxColumn212
			// 
			this->dataGridViewTextBoxColumn212->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn212->Name = L"dataGridViewTextBoxColumn212";
			this->dataGridViewTextBoxColumn212->ReadOnly = true;
			this->dataGridViewTextBoxColumn212->Width = 10;
			// 
			// dataGridViewTextBoxColumn213
			// 
			this->dataGridViewTextBoxColumn213->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn213->Name = L"dataGridViewTextBoxColumn213";
			this->dataGridViewTextBoxColumn213->ReadOnly = true;
			this->dataGridViewTextBoxColumn213->Width = 10;
			// 
			// dataGridViewTextBoxColumn214
			// 
			this->dataGridViewTextBoxColumn214->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn214->Name = L"dataGridViewTextBoxColumn214";
			this->dataGridViewTextBoxColumn214->ReadOnly = true;
			this->dataGridViewTextBoxColumn214->Width = 10;
			// 
			// dataGridViewTextBoxColumn215
			// 
			this->dataGridViewTextBoxColumn215->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn215->Name = L"dataGridViewTextBoxColumn215";
			this->dataGridViewTextBoxColumn215->ReadOnly = true;
			this->dataGridViewTextBoxColumn215->Width = 10;
			// 
			// dataGridViewTextBoxColumn216
			// 
			this->dataGridViewTextBoxColumn216->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn216->Name = L"dataGridViewTextBoxColumn216";
			this->dataGridViewTextBoxColumn216->ReadOnly = true;
			this->dataGridViewTextBoxColumn216->Width = 10;
			// 
			// dataGridViewTextBoxColumn217
			// 
			this->dataGridViewTextBoxColumn217->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn217->Name = L"dataGridViewTextBoxColumn217";
			this->dataGridViewTextBoxColumn217->ReadOnly = true;
			this->dataGridViewTextBoxColumn217->Width = 10;
			// 
			// dataGridViewTextBoxColumn218
			// 
			this->dataGridViewTextBoxColumn218->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn218->Name = L"dataGridViewTextBoxColumn218";
			this->dataGridViewTextBoxColumn218->ReadOnly = true;
			this->dataGridViewTextBoxColumn218->Width = 10;
			// 
			// dataGridViewTextBoxColumn219
			// 
			this->dataGridViewTextBoxColumn219->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn219->Name = L"dataGridViewTextBoxColumn219";
			this->dataGridViewTextBoxColumn219->ReadOnly = true;
			this->dataGridViewTextBoxColumn219->Width = 10;
			// 
			// dataGridViewTextBoxColumn220
			// 
			this->dataGridViewTextBoxColumn220->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn220->Name = L"dataGridViewTextBoxColumn220";
			this->dataGridViewTextBoxColumn220->ReadOnly = true;
			this->dataGridViewTextBoxColumn220->Width = 10;
			// 
			// dataGridViewTextBoxColumn221
			// 
			this->dataGridViewTextBoxColumn221->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn221->Name = L"dataGridViewTextBoxColumn221";
			this->dataGridViewTextBoxColumn221->ReadOnly = true;
			this->dataGridViewTextBoxColumn221->Width = 10;
			// 
			// dataGridViewTextBoxColumn222
			// 
			this->dataGridViewTextBoxColumn222->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn222->Name = L"dataGridViewTextBoxColumn222";
			this->dataGridViewTextBoxColumn222->ReadOnly = true;
			this->dataGridViewTextBoxColumn222->Width = 10;
			// 
			// dataGridViewTextBoxColumn223
			// 
			this->dataGridViewTextBoxColumn223->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn223->Name = L"dataGridViewTextBoxColumn223";
			this->dataGridViewTextBoxColumn223->ReadOnly = true;
			this->dataGridViewTextBoxColumn223->Width = 10;
			// 
			// dataGridViewTextBoxColumn224
			// 
			this->dataGridViewTextBoxColumn224->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn224->Name = L"dataGridViewTextBoxColumn224";
			this->dataGridViewTextBoxColumn224->ReadOnly = true;
			this->dataGridViewTextBoxColumn224->Width = 10;
			// 
			// dataGridViewTextBoxColumn225
			// 
			this->dataGridViewTextBoxColumn225->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn225->Name = L"dataGridViewTextBoxColumn225";
			this->dataGridViewTextBoxColumn225->ReadOnly = true;
			this->dataGridViewTextBoxColumn225->Width = 10;
			// 
			// dataGridViewTextBoxColumn226
			// 
			this->dataGridViewTextBoxColumn226->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn226->Name = L"dataGridViewTextBoxColumn226";
			this->dataGridViewTextBoxColumn226->ReadOnly = true;
			this->dataGridViewTextBoxColumn226->Width = 10;
			// 
			// dataGridViewTextBoxColumn227
			// 
			this->dataGridViewTextBoxColumn227->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn227->Name = L"dataGridViewTextBoxColumn227";
			this->dataGridViewTextBoxColumn227->ReadOnly = true;
			this->dataGridViewTextBoxColumn227->Width = 10;
			// 
			// dataGridViewTextBoxColumn228
			// 
			this->dataGridViewTextBoxColumn228->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn228->Name = L"dataGridViewTextBoxColumn228";
			this->dataGridViewTextBoxColumn228->ReadOnly = true;
			this->dataGridViewTextBoxColumn228->Width = 10;
			// 
			// dataGridViewTextBoxColumn229
			// 
			this->dataGridViewTextBoxColumn229->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn229->Name = L"dataGridViewTextBoxColumn229";
			this->dataGridViewTextBoxColumn229->ReadOnly = true;
			this->dataGridViewTextBoxColumn229->Width = 10;
			// 
			// dataGridViewTextBoxColumn230
			// 
			this->dataGridViewTextBoxColumn230->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn230->Name = L"dataGridViewTextBoxColumn230";
			this->dataGridViewTextBoxColumn230->ReadOnly = true;
			this->dataGridViewTextBoxColumn230->Width = 10;
			// 
			// dataGridViewTextBoxColumn231
			// 
			this->dataGridViewTextBoxColumn231->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn231->Name = L"dataGridViewTextBoxColumn231";
			this->dataGridViewTextBoxColumn231->ReadOnly = true;
			this->dataGridViewTextBoxColumn231->Width = 10;
			// 
			// dataGridViewTextBoxColumn232
			// 
			this->dataGridViewTextBoxColumn232->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn232->Name = L"dataGridViewTextBoxColumn232";
			this->dataGridViewTextBoxColumn232->ReadOnly = true;
			this->dataGridViewTextBoxColumn232->Width = 10;
			// 
			// dataGridViewTextBoxColumn233
			// 
			this->dataGridViewTextBoxColumn233->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn233->Name = L"dataGridViewTextBoxColumn233";
			this->dataGridViewTextBoxColumn233->ReadOnly = true;
			this->dataGridViewTextBoxColumn233->Width = 10;
			// 
			// dataGridViewTextBoxColumn234
			// 
			this->dataGridViewTextBoxColumn234->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn234->Name = L"dataGridViewTextBoxColumn234";
			this->dataGridViewTextBoxColumn234->ReadOnly = true;
			this->dataGridViewTextBoxColumn234->Width = 10;
			// 
			// dataGridViewTextBoxColumn235
			// 
			this->dataGridViewTextBoxColumn235->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn235->Name = L"dataGridViewTextBoxColumn235";
			this->dataGridViewTextBoxColumn235->ReadOnly = true;
			this->dataGridViewTextBoxColumn235->Width = 10;
			// 
			// dataGridViewTextBoxColumn236
			// 
			this->dataGridViewTextBoxColumn236->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn236->Name = L"dataGridViewTextBoxColumn236";
			this->dataGridViewTextBoxColumn236->ReadOnly = true;
			this->dataGridViewTextBoxColumn236->Width = 10;
			// 
			// dataGridViewTextBoxColumn237
			// 
			this->dataGridViewTextBoxColumn237->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn237->Name = L"dataGridViewTextBoxColumn237";
			this->dataGridViewTextBoxColumn237->ReadOnly = true;
			this->dataGridViewTextBoxColumn237->Width = 10;
			// 
			// dataGridViewTextBoxColumn238
			// 
			this->dataGridViewTextBoxColumn238->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn238->Name = L"dataGridViewTextBoxColumn238";
			this->dataGridViewTextBoxColumn238->ReadOnly = true;
			this->dataGridViewTextBoxColumn238->Width = 10;
			// 
			// dataGridViewTextBoxColumn239
			// 
			this->dataGridViewTextBoxColumn239->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn239->Name = L"dataGridViewTextBoxColumn239";
			this->dataGridViewTextBoxColumn239->ReadOnly = true;
			this->dataGridViewTextBoxColumn239->Width = 10;
			// 
			// dataGridViewTextBoxColumn240
			// 
			this->dataGridViewTextBoxColumn240->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn240->Name = L"dataGridViewTextBoxColumn240";
			this->dataGridViewTextBoxColumn240->ReadOnly = true;
			this->dataGridViewTextBoxColumn240->Width = 10;
			// 
			// dataGridViewTextBoxColumn241
			// 
			this->dataGridViewTextBoxColumn241->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn241->Name = L"dataGridViewTextBoxColumn241";
			this->dataGridViewTextBoxColumn241->ReadOnly = true;
			this->dataGridViewTextBoxColumn241->Width = 10;
			// 
			// dataGridViewTextBoxColumn242
			// 
			this->dataGridViewTextBoxColumn242->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn242->Name = L"dataGridViewTextBoxColumn242";
			this->dataGridViewTextBoxColumn242->ReadOnly = true;
			this->dataGridViewTextBoxColumn242->Width = 10;
			// 
			// dataGridViewTextBoxColumn243
			// 
			this->dataGridViewTextBoxColumn243->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn243->Name = L"dataGridViewTextBoxColumn243";
			this->dataGridViewTextBoxColumn243->ReadOnly = true;
			this->dataGridViewTextBoxColumn243->Width = 10;
			// 
			// dataGridViewTextBoxColumn244
			// 
			this->dataGridViewTextBoxColumn244->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn244->Name = L"dataGridViewTextBoxColumn244";
			this->dataGridViewTextBoxColumn244->ReadOnly = true;
			this->dataGridViewTextBoxColumn244->Width = 10;
			// 
			// dataGridViewTextBoxColumn245
			// 
			this->dataGridViewTextBoxColumn245->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn245->Name = L"dataGridViewTextBoxColumn245";
			this->dataGridViewTextBoxColumn245->ReadOnly = true;
			this->dataGridViewTextBoxColumn245->Width = 10;
			// 
			// dataGridViewTextBoxColumn246
			// 
			this->dataGridViewTextBoxColumn246->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn246->Name = L"dataGridViewTextBoxColumn246";
			this->dataGridViewTextBoxColumn246->ReadOnly = true;
			this->dataGridViewTextBoxColumn246->Width = 10;
			// 
			// dataGridViewTextBoxColumn247
			// 
			this->dataGridViewTextBoxColumn247->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn247->Name = L"dataGridViewTextBoxColumn247";
			this->dataGridViewTextBoxColumn247->ReadOnly = true;
			this->dataGridViewTextBoxColumn247->Width = 10;
			// 
			// dataGridViewTextBoxColumn248
			// 
			this->dataGridViewTextBoxColumn248->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn248->Name = L"dataGridViewTextBoxColumn248";
			this->dataGridViewTextBoxColumn248->ReadOnly = true;
			this->dataGridViewTextBoxColumn248->Width = 10;
			// 
			// dataGridViewTextBoxColumn249
			// 
			this->dataGridViewTextBoxColumn249->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn249->Name = L"dataGridViewTextBoxColumn249";
			this->dataGridViewTextBoxColumn249->ReadOnly = true;
			this->dataGridViewTextBoxColumn249->Width = 10;
			// 
			// dataGridViewTextBoxColumn250
			// 
			this->dataGridViewTextBoxColumn250->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn250->Name = L"dataGridViewTextBoxColumn250";
			this->dataGridViewTextBoxColumn250->ReadOnly = true;
			this->dataGridViewTextBoxColumn250->Width = 10;
			// 
			// dataGridViewTextBoxColumn251
			// 
			this->dataGridViewTextBoxColumn251->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn251->Name = L"dataGridViewTextBoxColumn251";
			this->dataGridViewTextBoxColumn251->ReadOnly = true;
			this->dataGridViewTextBoxColumn251->Width = 10;
			// 
			// dataGridViewTextBoxColumn252
			// 
			this->dataGridViewTextBoxColumn252->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn252->Name = L"dataGridViewTextBoxColumn252";
			this->dataGridViewTextBoxColumn252->ReadOnly = true;
			this->dataGridViewTextBoxColumn252->Width = 10;
			// 
			// dataGridViewTextBoxColumn253
			// 
			this->dataGridViewTextBoxColumn253->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn253->Name = L"dataGridViewTextBoxColumn253";
			this->dataGridViewTextBoxColumn253->ReadOnly = true;
			this->dataGridViewTextBoxColumn253->Width = 10;
			// 
			// dataGridViewTextBoxColumn254
			// 
			this->dataGridViewTextBoxColumn254->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn254->Name = L"dataGridViewTextBoxColumn254";
			this->dataGridViewTextBoxColumn254->ReadOnly = true;
			this->dataGridViewTextBoxColumn254->Width = 10;
			// 
			// dataGridViewTextBoxColumn255
			// 
			this->dataGridViewTextBoxColumn255->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn255->Name = L"dataGridViewTextBoxColumn255";
			this->dataGridViewTextBoxColumn255->ReadOnly = true;
			this->dataGridViewTextBoxColumn255->Width = 10;
			// 
			// dataGridViewTextBoxColumn256
			// 
			this->dataGridViewTextBoxColumn256->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn256->Name = L"dataGridViewTextBoxColumn256";
			this->dataGridViewTextBoxColumn256->ReadOnly = true;
			this->dataGridViewTextBoxColumn256->Width = 10;
			// 
			// tabPage6
			// 
			this->tabPage6->Controls->Add(this->checkBox15);
			this->tabPage6->Controls->Add(this->checkBox7);
			this->tabPage6->Controls->Add(this->button29);
			this->tabPage6->Controls->Add(this->label167);
			this->tabPage6->Controls->Add(this->textBox49);
			this->tabPage6->Controls->Add(this->label150);
			this->tabPage6->Controls->Add(this->button16);
			this->tabPage6->Controls->Add(this->label151);
			this->tabPage6->Controls->Add(this->button17);
			this->tabPage6->Controls->Add(this->label118);
			this->tabPage6->Controls->Add(this->label119);
			this->tabPage6->Controls->Add(this->label120);
			this->tabPage6->Controls->Add(this->label121);
			this->tabPage6->Controls->Add(this->label122);
			this->tabPage6->Controls->Add(this->label123);
			this->tabPage6->Controls->Add(this->label124);
			this->tabPage6->Controls->Add(this->dataGridView15);
			this->tabPage6->Controls->Add(this->label53);
			this->tabPage6->Controls->Add(this->label54);
			this->tabPage6->Controls->Add(this->label55);
			this->tabPage6->Controls->Add(this->label56);
			this->tabPage6->Controls->Add(this->label57);
			this->tabPage6->Controls->Add(this->label58);
			this->tabPage6->Controls->Add(this->label59);
			this->tabPage6->Controls->Add(this->label60);
			this->tabPage6->Controls->Add(this->label61);
			this->tabPage6->Controls->Add(this->textBox26);
			this->tabPage6->Controls->Add(this->textBox27);
			this->tabPage6->Controls->Add(this->textBox28);
			this->tabPage6->Controls->Add(this->textBox29);
			this->tabPage6->Controls->Add(this->textBox30);
			this->tabPage6->Controls->Add(this->dataGridView6);
			this->tabPage6->Location = System::Drawing::Point(4, 22);
			this->tabPage6->Margin = System::Windows::Forms::Padding(2);
			this->tabPage6->Name = L"tabPage6";
			this->tabPage6->Padding = System::Windows::Forms::Padding(2);
			this->tabPage6->Size = System::Drawing::Size(698, 555);
			this->tabPage6->TabIndex = 5;
			this->tabPage6->Text = L"Floor 5";
			this->tabPage6->UseVisualStyleBackColor = true;
			// 
			// checkBox15
			// 
			this->checkBox15->AutoSize = true;
			this->checkBox15->Location = System::Drawing::Point(560, 496);
			this->checkBox15->Name = L"checkBox15";
			this->checkBox15->Size = System::Drawing::Size(96, 17);
			this->checkBox15->TabIndex = 91;
			this->checkBox15->Text = L"Show teleports";
			this->checkBox15->UseVisualStyleBackColor = true;
			this->checkBox15->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox15_CheckedChanged);
			// 
			// checkBox7
			// 
			this->checkBox7->AutoSize = true;
			this->checkBox7->Location = System::Drawing::Point(560, 475);
			this->checkBox7->Name = L"checkBox7";
			this->checkBox7->Size = System::Drawing::Size(136, 17);
			this->checkBox7->TabIndex = 88;
			this->checkBox7->Text = L"Show cubes with doors";
			this->checkBox7->UseVisualStyleBackColor = true;
			this->checkBox7->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox7_CheckedChanged);
			// 
			// button29
			// 
			this->button29->Enabled = false;
			this->button29->Location = System::Drawing::Point(610, 390);
			this->button29->Name = L"button29";
			this->button29->Size = System::Drawing::Size(32, 20);
			this->button29->TabIndex = 77;
			this->button29->Text = L"OK";
			this->button29->UseVisualStyleBackColor = true;
			this->button29->Click += gcnew System::EventHandler(this, &Form1::button29_Click);
			// 
			// label167
			// 
			this->label167->AutoSize = true;
			this->label167->Location = System::Drawing::Point(533, 373);
			this->label167->Name = L"label167";
			this->label167->Size = System::Drawing::Size(69, 13);
			this->label167->TabIndex = 76;
			this->label167->Text = L"Cube N (hex)";
			// 
			// textBox49
			// 
			this->textBox49->Location = System::Drawing::Point(533, 390);
			this->textBox49->MaxLength = 3;
			this->textBox49->Name = L"textBox49";
			this->textBox49->Size = System::Drawing::Size(70, 20);
			this->textBox49->TabIndex = 75;
			// 
			// label150
			// 
			this->label150->AutoSize = true;
			this->label150->Location = System::Drawing::Point(556, 434);
			this->label150->Name = L"label150";
			this->label150->Size = System::Drawing::Size(47, 13);
			this->label150->TabIndex = 74;
			this->label150->Text = L"label150";
			// 
			// button16
			// 
			this->button16->Location = System::Drawing::Point(475, 424);
			this->button16->Name = L"button16";
			this->button16->Size = System::Drawing::Size(75, 23);
			this->button16->TabIndex = 73;
			this->button16->Text = L"Edit value";
			this->button16->UseVisualStyleBackColor = true;
			this->button16->Click += gcnew System::EventHandler(this, &Form1::button16_Click);
			// 
			// label151
			// 
			this->label151->AutoSize = true;
			this->label151->Location = System::Drawing::Point(503, 458);
			this->label151->Name = L"label151";
			this->label151->Size = System::Drawing::Size(47, 13);
			this->label151->TabIndex = 72;
			this->label151->Text = L"label151";
			// 
			// button17
			// 
			this->button17->Location = System::Drawing::Point(428, 448);
			this->button17->Name = L"button17";
			this->button17->Size = System::Drawing::Size(75, 23);
			this->button17->TabIndex = 71;
			this->button17->Text = L"Edit value";
			this->button17->UseVisualStyleBackColor = true;
			this->button17->Click += gcnew System::EventHandler(this, &Form1::button17_Click);
			// 
			// label118
			// 
			this->label118->AutoSize = true;
			this->label118->Location = System::Drawing::Point(436, 369);
			this->label118->Name = L"label118";
			this->label118->Size = System::Drawing::Size(31, 13);
			this->label118->TabIndex = 70;
			this->label118->Text = L"0123";
			// 
			// label119
			// 
			this->label119->AutoSize = true;
			this->label119->Location = System::Drawing::Point(376, 356);
			this->label119->Name = L"label119";
			this->label119->Size = System::Drawing::Size(67, 13);
			this->label119->TabIndex = 69;
			this->label119->Text = L"0123456789";
			// 
			// label120
			// 
			this->label120->AutoSize = true;
			this->label120->Location = System::Drawing::Point(316, 369);
			this->label120->Name = L"label120";
			this->label120->Size = System::Drawing::Size(67, 13);
			this->label120->TabIndex = 68;
			this->label120->Text = L"0123456789";
			// 
			// label121
			// 
			this->label121->AutoSize = true;
			this->label121->Location = System::Drawing::Point(256, 356);
			this->label121->Name = L"label121";
			this->label121->Size = System::Drawing::Size(67, 13);
			this->label121->TabIndex = 67;
			this->label121->Text = L"0123456789";
			// 
			// label122
			// 
			this->label122->AutoSize = true;
			this->label122->Location = System::Drawing::Point(197, 367);
			this->label122->Name = L"label122";
			this->label122->Size = System::Drawing::Size(67, 13);
			this->label122->TabIndex = 66;
			this->label122->Text = L"0123456789";
			// 
			// label123
			// 
			this->label123->AutoSize = true;
			this->label123->Location = System::Drawing::Point(135, 356);
			this->label123->Name = L"label123";
			this->label123->Size = System::Drawing::Size(67, 13);
			this->label123->TabIndex = 65;
			this->label123->Text = L"0123456789";
			// 
			// label124
			// 
			this->label124->AutoSize = true;
			this->label124->Location = System::Drawing::Point(75, 367);
			this->label124->Name = L"label124";
			this->label124->Size = System::Drawing::Size(67, 13);
			this->label124->TabIndex = 64;
			this->label124->Text = L"0123456789";
			// 
			// dataGridView15
			// 
			this->dataGridView15->AllowDrop = true;
			this->dataGridView15->AllowUserToAddRows = false;
			this->dataGridView15->AllowUserToDeleteRows = false;
			this->dataGridView15->AllowUserToResizeColumns = false;
			this->dataGridView15->AllowUserToResizeRows = false;
			this->dataGridView15->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView15->ColumnHeadersVisible = false;
			this->dataGridView15->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn769, 
				this->dataGridViewTextBoxColumn770, this->dataGridViewTextBoxColumn771, this->dataGridViewTextBoxColumn772, this->dataGridViewTextBoxColumn773, 
				this->dataGridViewTextBoxColumn774, this->dataGridViewTextBoxColumn775, this->dataGridViewTextBoxColumn776, this->dataGridViewTextBoxColumn777, 
				this->dataGridViewTextBoxColumn778, this->dataGridViewTextBoxColumn779, this->dataGridViewTextBoxColumn780, this->dataGridViewTextBoxColumn781, 
				this->dataGridViewTextBoxColumn782, this->dataGridViewTextBoxColumn783, this->dataGridViewTextBoxColumn784, this->dataGridViewTextBoxColumn785, 
				this->dataGridViewTextBoxColumn786, this->dataGridViewTextBoxColumn787, this->dataGridViewTextBoxColumn788, this->dataGridViewTextBoxColumn789, 
				this->dataGridViewTextBoxColumn790, this->dataGridViewTextBoxColumn791, this->dataGridViewTextBoxColumn792, this->dataGridViewTextBoxColumn793, 
				this->dataGridViewTextBoxColumn794, this->dataGridViewTextBoxColumn795, this->dataGridViewTextBoxColumn796, this->dataGridViewTextBoxColumn797, 
				this->dataGridViewTextBoxColumn798, this->dataGridViewTextBoxColumn799, this->dataGridViewTextBoxColumn800, this->dataGridViewTextBoxColumn801, 
				this->dataGridViewTextBoxColumn802, this->dataGridViewTextBoxColumn803, this->dataGridViewTextBoxColumn804, this->dataGridViewTextBoxColumn805, 
				this->dataGridViewTextBoxColumn806, this->dataGridViewTextBoxColumn807, this->dataGridViewTextBoxColumn808, this->dataGridViewTextBoxColumn809, 
				this->dataGridViewTextBoxColumn810, this->dataGridViewTextBoxColumn811, this->dataGridViewTextBoxColumn812, this->dataGridViewTextBoxColumn813, 
				this->dataGridViewTextBoxColumn814, this->dataGridViewTextBoxColumn815, this->dataGridViewTextBoxColumn816, this->dataGridViewTextBoxColumn817, 
				this->dataGridViewTextBoxColumn818, this->dataGridViewTextBoxColumn819, this->dataGridViewTextBoxColumn820, this->dataGridViewTextBoxColumn821, 
				this->dataGridViewTextBoxColumn822, this->dataGridViewTextBoxColumn823, this->dataGridViewTextBoxColumn824, this->dataGridViewTextBoxColumn825, 
				this->dataGridViewTextBoxColumn826, this->dataGridViewTextBoxColumn827, this->dataGridViewTextBoxColumn828, this->dataGridViewTextBoxColumn829, 
				this->dataGridViewTextBoxColumn830, this->dataGridViewTextBoxColumn831, this->dataGridViewTextBoxColumn832});
			this->dataGridView15->Location = System::Drawing::Point(77, 383);
			this->dataGridView15->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView15->Name = L"dataGridView15";
			this->dataGridView15->ReadOnly = true;
			this->dataGridView15->RowHeadersVisible = false;
			this->dataGridView15->RowHeadersWidth = 15;
			dataGridViewCellStyle11->BackColor = System::Drawing::Color::White;
			this->dataGridView15->RowsDefaultCellStyle = dataGridViewCellStyle11;
			this->dataGridView15->RowTemplate->Height = 35;
			this->dataGridView15->Size = System::Drawing::Size(390, 41);
			this->dataGridView15->TabIndex = 63;
			// 
			// dataGridViewTextBoxColumn769
			// 
			this->dataGridViewTextBoxColumn769->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn769->Name = L"dataGridViewTextBoxColumn769";
			this->dataGridViewTextBoxColumn769->ReadOnly = true;
			this->dataGridViewTextBoxColumn769->Width = 6;
			// 
			// dataGridViewTextBoxColumn770
			// 
			this->dataGridViewTextBoxColumn770->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn770->Name = L"dataGridViewTextBoxColumn770";
			this->dataGridViewTextBoxColumn770->ReadOnly = true;
			this->dataGridViewTextBoxColumn770->Width = 6;
			// 
			// dataGridViewTextBoxColumn771
			// 
			this->dataGridViewTextBoxColumn771->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn771->Name = L"dataGridViewTextBoxColumn771";
			this->dataGridViewTextBoxColumn771->ReadOnly = true;
			this->dataGridViewTextBoxColumn771->Width = 6;
			// 
			// dataGridViewTextBoxColumn772
			// 
			this->dataGridViewTextBoxColumn772->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn772->Name = L"dataGridViewTextBoxColumn772";
			this->dataGridViewTextBoxColumn772->ReadOnly = true;
			this->dataGridViewTextBoxColumn772->Width = 6;
			// 
			// dataGridViewTextBoxColumn773
			// 
			this->dataGridViewTextBoxColumn773->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn773->Name = L"dataGridViewTextBoxColumn773";
			this->dataGridViewTextBoxColumn773->ReadOnly = true;
			this->dataGridViewTextBoxColumn773->Width = 6;
			// 
			// dataGridViewTextBoxColumn774
			// 
			this->dataGridViewTextBoxColumn774->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn774->Name = L"dataGridViewTextBoxColumn774";
			this->dataGridViewTextBoxColumn774->ReadOnly = true;
			this->dataGridViewTextBoxColumn774->Width = 6;
			// 
			// dataGridViewTextBoxColumn775
			// 
			this->dataGridViewTextBoxColumn775->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn775->Name = L"dataGridViewTextBoxColumn775";
			this->dataGridViewTextBoxColumn775->ReadOnly = true;
			this->dataGridViewTextBoxColumn775->Width = 6;
			// 
			// dataGridViewTextBoxColumn776
			// 
			this->dataGridViewTextBoxColumn776->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn776->Name = L"dataGridViewTextBoxColumn776";
			this->dataGridViewTextBoxColumn776->ReadOnly = true;
			this->dataGridViewTextBoxColumn776->Width = 6;
			// 
			// dataGridViewTextBoxColumn777
			// 
			this->dataGridViewTextBoxColumn777->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn777->Name = L"dataGridViewTextBoxColumn777";
			this->dataGridViewTextBoxColumn777->ReadOnly = true;
			this->dataGridViewTextBoxColumn777->Width = 6;
			// 
			// dataGridViewTextBoxColumn778
			// 
			this->dataGridViewTextBoxColumn778->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn778->Name = L"dataGridViewTextBoxColumn778";
			this->dataGridViewTextBoxColumn778->ReadOnly = true;
			this->dataGridViewTextBoxColumn778->Width = 6;
			// 
			// dataGridViewTextBoxColumn779
			// 
			this->dataGridViewTextBoxColumn779->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn779->Name = L"dataGridViewTextBoxColumn779";
			this->dataGridViewTextBoxColumn779->ReadOnly = true;
			this->dataGridViewTextBoxColumn779->Width = 6;
			// 
			// dataGridViewTextBoxColumn780
			// 
			this->dataGridViewTextBoxColumn780->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn780->Name = L"dataGridViewTextBoxColumn780";
			this->dataGridViewTextBoxColumn780->ReadOnly = true;
			this->dataGridViewTextBoxColumn780->Width = 6;
			// 
			// dataGridViewTextBoxColumn781
			// 
			this->dataGridViewTextBoxColumn781->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn781->Name = L"dataGridViewTextBoxColumn781";
			this->dataGridViewTextBoxColumn781->ReadOnly = true;
			this->dataGridViewTextBoxColumn781->Width = 6;
			// 
			// dataGridViewTextBoxColumn782
			// 
			this->dataGridViewTextBoxColumn782->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn782->Name = L"dataGridViewTextBoxColumn782";
			this->dataGridViewTextBoxColumn782->ReadOnly = true;
			this->dataGridViewTextBoxColumn782->Width = 6;
			// 
			// dataGridViewTextBoxColumn783
			// 
			this->dataGridViewTextBoxColumn783->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn783->Name = L"dataGridViewTextBoxColumn783";
			this->dataGridViewTextBoxColumn783->ReadOnly = true;
			this->dataGridViewTextBoxColumn783->Width = 6;
			// 
			// dataGridViewTextBoxColumn784
			// 
			this->dataGridViewTextBoxColumn784->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn784->Name = L"dataGridViewTextBoxColumn784";
			this->dataGridViewTextBoxColumn784->ReadOnly = true;
			this->dataGridViewTextBoxColumn784->Width = 6;
			// 
			// dataGridViewTextBoxColumn785
			// 
			this->dataGridViewTextBoxColumn785->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn785->Name = L"dataGridViewTextBoxColumn785";
			this->dataGridViewTextBoxColumn785->ReadOnly = true;
			this->dataGridViewTextBoxColumn785->Width = 6;
			// 
			// dataGridViewTextBoxColumn786
			// 
			this->dataGridViewTextBoxColumn786->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn786->Name = L"dataGridViewTextBoxColumn786";
			this->dataGridViewTextBoxColumn786->ReadOnly = true;
			this->dataGridViewTextBoxColumn786->Width = 6;
			// 
			// dataGridViewTextBoxColumn787
			// 
			this->dataGridViewTextBoxColumn787->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn787->Name = L"dataGridViewTextBoxColumn787";
			this->dataGridViewTextBoxColumn787->ReadOnly = true;
			this->dataGridViewTextBoxColumn787->Width = 6;
			// 
			// dataGridViewTextBoxColumn788
			// 
			this->dataGridViewTextBoxColumn788->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn788->Name = L"dataGridViewTextBoxColumn788";
			this->dataGridViewTextBoxColumn788->ReadOnly = true;
			this->dataGridViewTextBoxColumn788->Width = 6;
			// 
			// dataGridViewTextBoxColumn789
			// 
			this->dataGridViewTextBoxColumn789->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn789->Name = L"dataGridViewTextBoxColumn789";
			this->dataGridViewTextBoxColumn789->ReadOnly = true;
			this->dataGridViewTextBoxColumn789->Width = 6;
			// 
			// dataGridViewTextBoxColumn790
			// 
			this->dataGridViewTextBoxColumn790->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn790->Name = L"dataGridViewTextBoxColumn790";
			this->dataGridViewTextBoxColumn790->ReadOnly = true;
			this->dataGridViewTextBoxColumn790->Width = 6;
			// 
			// dataGridViewTextBoxColumn791
			// 
			this->dataGridViewTextBoxColumn791->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn791->Name = L"dataGridViewTextBoxColumn791";
			this->dataGridViewTextBoxColumn791->ReadOnly = true;
			this->dataGridViewTextBoxColumn791->Width = 6;
			// 
			// dataGridViewTextBoxColumn792
			// 
			this->dataGridViewTextBoxColumn792->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn792->Name = L"dataGridViewTextBoxColumn792";
			this->dataGridViewTextBoxColumn792->ReadOnly = true;
			this->dataGridViewTextBoxColumn792->Width = 6;
			// 
			// dataGridViewTextBoxColumn793
			// 
			this->dataGridViewTextBoxColumn793->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn793->Name = L"dataGridViewTextBoxColumn793";
			this->dataGridViewTextBoxColumn793->ReadOnly = true;
			this->dataGridViewTextBoxColumn793->Width = 6;
			// 
			// dataGridViewTextBoxColumn794
			// 
			this->dataGridViewTextBoxColumn794->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn794->Name = L"dataGridViewTextBoxColumn794";
			this->dataGridViewTextBoxColumn794->ReadOnly = true;
			this->dataGridViewTextBoxColumn794->Width = 6;
			// 
			// dataGridViewTextBoxColumn795
			// 
			this->dataGridViewTextBoxColumn795->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn795->Name = L"dataGridViewTextBoxColumn795";
			this->dataGridViewTextBoxColumn795->ReadOnly = true;
			this->dataGridViewTextBoxColumn795->Width = 6;
			// 
			// dataGridViewTextBoxColumn796
			// 
			this->dataGridViewTextBoxColumn796->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn796->Name = L"dataGridViewTextBoxColumn796";
			this->dataGridViewTextBoxColumn796->ReadOnly = true;
			this->dataGridViewTextBoxColumn796->Width = 6;
			// 
			// dataGridViewTextBoxColumn797
			// 
			this->dataGridViewTextBoxColumn797->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn797->Name = L"dataGridViewTextBoxColumn797";
			this->dataGridViewTextBoxColumn797->ReadOnly = true;
			this->dataGridViewTextBoxColumn797->Width = 6;
			// 
			// dataGridViewTextBoxColumn798
			// 
			this->dataGridViewTextBoxColumn798->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn798->Name = L"dataGridViewTextBoxColumn798";
			this->dataGridViewTextBoxColumn798->ReadOnly = true;
			this->dataGridViewTextBoxColumn798->Width = 6;
			// 
			// dataGridViewTextBoxColumn799
			// 
			this->dataGridViewTextBoxColumn799->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn799->Name = L"dataGridViewTextBoxColumn799";
			this->dataGridViewTextBoxColumn799->ReadOnly = true;
			this->dataGridViewTextBoxColumn799->Width = 6;
			// 
			// dataGridViewTextBoxColumn800
			// 
			this->dataGridViewTextBoxColumn800->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn800->Name = L"dataGridViewTextBoxColumn800";
			this->dataGridViewTextBoxColumn800->ReadOnly = true;
			this->dataGridViewTextBoxColumn800->Width = 6;
			// 
			// dataGridViewTextBoxColumn801
			// 
			this->dataGridViewTextBoxColumn801->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn801->Name = L"dataGridViewTextBoxColumn801";
			this->dataGridViewTextBoxColumn801->ReadOnly = true;
			this->dataGridViewTextBoxColumn801->Width = 6;
			// 
			// dataGridViewTextBoxColumn802
			// 
			this->dataGridViewTextBoxColumn802->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn802->Name = L"dataGridViewTextBoxColumn802";
			this->dataGridViewTextBoxColumn802->ReadOnly = true;
			this->dataGridViewTextBoxColumn802->Width = 6;
			// 
			// dataGridViewTextBoxColumn803
			// 
			this->dataGridViewTextBoxColumn803->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn803->Name = L"dataGridViewTextBoxColumn803";
			this->dataGridViewTextBoxColumn803->ReadOnly = true;
			this->dataGridViewTextBoxColumn803->Width = 6;
			// 
			// dataGridViewTextBoxColumn804
			// 
			this->dataGridViewTextBoxColumn804->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn804->Name = L"dataGridViewTextBoxColumn804";
			this->dataGridViewTextBoxColumn804->ReadOnly = true;
			this->dataGridViewTextBoxColumn804->Width = 6;
			// 
			// dataGridViewTextBoxColumn805
			// 
			this->dataGridViewTextBoxColumn805->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn805->Name = L"dataGridViewTextBoxColumn805";
			this->dataGridViewTextBoxColumn805->ReadOnly = true;
			this->dataGridViewTextBoxColumn805->Width = 6;
			// 
			// dataGridViewTextBoxColumn806
			// 
			this->dataGridViewTextBoxColumn806->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn806->Name = L"dataGridViewTextBoxColumn806";
			this->dataGridViewTextBoxColumn806->ReadOnly = true;
			this->dataGridViewTextBoxColumn806->Width = 6;
			// 
			// dataGridViewTextBoxColumn807
			// 
			this->dataGridViewTextBoxColumn807->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn807->Name = L"dataGridViewTextBoxColumn807";
			this->dataGridViewTextBoxColumn807->ReadOnly = true;
			this->dataGridViewTextBoxColumn807->Width = 6;
			// 
			// dataGridViewTextBoxColumn808
			// 
			this->dataGridViewTextBoxColumn808->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn808->Name = L"dataGridViewTextBoxColumn808";
			this->dataGridViewTextBoxColumn808->ReadOnly = true;
			this->dataGridViewTextBoxColumn808->Width = 6;
			// 
			// dataGridViewTextBoxColumn809
			// 
			this->dataGridViewTextBoxColumn809->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn809->Name = L"dataGridViewTextBoxColumn809";
			this->dataGridViewTextBoxColumn809->ReadOnly = true;
			this->dataGridViewTextBoxColumn809->Width = 6;
			// 
			// dataGridViewTextBoxColumn810
			// 
			this->dataGridViewTextBoxColumn810->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn810->Name = L"dataGridViewTextBoxColumn810";
			this->dataGridViewTextBoxColumn810->ReadOnly = true;
			this->dataGridViewTextBoxColumn810->Width = 6;
			// 
			// dataGridViewTextBoxColumn811
			// 
			this->dataGridViewTextBoxColumn811->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn811->Name = L"dataGridViewTextBoxColumn811";
			this->dataGridViewTextBoxColumn811->ReadOnly = true;
			this->dataGridViewTextBoxColumn811->Width = 6;
			// 
			// dataGridViewTextBoxColumn812
			// 
			this->dataGridViewTextBoxColumn812->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn812->Name = L"dataGridViewTextBoxColumn812";
			this->dataGridViewTextBoxColumn812->ReadOnly = true;
			this->dataGridViewTextBoxColumn812->Width = 6;
			// 
			// dataGridViewTextBoxColumn813
			// 
			this->dataGridViewTextBoxColumn813->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn813->Name = L"dataGridViewTextBoxColumn813";
			this->dataGridViewTextBoxColumn813->ReadOnly = true;
			this->dataGridViewTextBoxColumn813->Width = 6;
			// 
			// dataGridViewTextBoxColumn814
			// 
			this->dataGridViewTextBoxColumn814->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn814->Name = L"dataGridViewTextBoxColumn814";
			this->dataGridViewTextBoxColumn814->ReadOnly = true;
			this->dataGridViewTextBoxColumn814->Width = 6;
			// 
			// dataGridViewTextBoxColumn815
			// 
			this->dataGridViewTextBoxColumn815->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn815->Name = L"dataGridViewTextBoxColumn815";
			this->dataGridViewTextBoxColumn815->ReadOnly = true;
			this->dataGridViewTextBoxColumn815->Width = 6;
			// 
			// dataGridViewTextBoxColumn816
			// 
			this->dataGridViewTextBoxColumn816->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn816->Name = L"dataGridViewTextBoxColumn816";
			this->dataGridViewTextBoxColumn816->ReadOnly = true;
			this->dataGridViewTextBoxColumn816->Width = 6;
			// 
			// dataGridViewTextBoxColumn817
			// 
			this->dataGridViewTextBoxColumn817->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn817->Name = L"dataGridViewTextBoxColumn817";
			this->dataGridViewTextBoxColumn817->ReadOnly = true;
			this->dataGridViewTextBoxColumn817->Width = 6;
			// 
			// dataGridViewTextBoxColumn818
			// 
			this->dataGridViewTextBoxColumn818->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn818->Name = L"dataGridViewTextBoxColumn818";
			this->dataGridViewTextBoxColumn818->ReadOnly = true;
			this->dataGridViewTextBoxColumn818->Width = 6;
			// 
			// dataGridViewTextBoxColumn819
			// 
			this->dataGridViewTextBoxColumn819->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn819->Name = L"dataGridViewTextBoxColumn819";
			this->dataGridViewTextBoxColumn819->ReadOnly = true;
			this->dataGridViewTextBoxColumn819->Width = 6;
			// 
			// dataGridViewTextBoxColumn820
			// 
			this->dataGridViewTextBoxColumn820->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn820->Name = L"dataGridViewTextBoxColumn820";
			this->dataGridViewTextBoxColumn820->ReadOnly = true;
			this->dataGridViewTextBoxColumn820->Width = 6;
			// 
			// dataGridViewTextBoxColumn821
			// 
			this->dataGridViewTextBoxColumn821->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn821->Name = L"dataGridViewTextBoxColumn821";
			this->dataGridViewTextBoxColumn821->ReadOnly = true;
			this->dataGridViewTextBoxColumn821->Width = 6;
			// 
			// dataGridViewTextBoxColumn822
			// 
			this->dataGridViewTextBoxColumn822->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn822->Name = L"dataGridViewTextBoxColumn822";
			this->dataGridViewTextBoxColumn822->ReadOnly = true;
			this->dataGridViewTextBoxColumn822->Width = 6;
			// 
			// dataGridViewTextBoxColumn823
			// 
			this->dataGridViewTextBoxColumn823->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn823->Name = L"dataGridViewTextBoxColumn823";
			this->dataGridViewTextBoxColumn823->ReadOnly = true;
			this->dataGridViewTextBoxColumn823->Width = 6;
			// 
			// dataGridViewTextBoxColumn824
			// 
			this->dataGridViewTextBoxColumn824->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn824->Name = L"dataGridViewTextBoxColumn824";
			this->dataGridViewTextBoxColumn824->ReadOnly = true;
			this->dataGridViewTextBoxColumn824->Width = 6;
			// 
			// dataGridViewTextBoxColumn825
			// 
			this->dataGridViewTextBoxColumn825->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn825->Name = L"dataGridViewTextBoxColumn825";
			this->dataGridViewTextBoxColumn825->ReadOnly = true;
			this->dataGridViewTextBoxColumn825->Width = 6;
			// 
			// dataGridViewTextBoxColumn826
			// 
			this->dataGridViewTextBoxColumn826->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn826->Name = L"dataGridViewTextBoxColumn826";
			this->dataGridViewTextBoxColumn826->ReadOnly = true;
			this->dataGridViewTextBoxColumn826->Width = 6;
			// 
			// dataGridViewTextBoxColumn827
			// 
			this->dataGridViewTextBoxColumn827->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn827->Name = L"dataGridViewTextBoxColumn827";
			this->dataGridViewTextBoxColumn827->ReadOnly = true;
			this->dataGridViewTextBoxColumn827->Width = 6;
			// 
			// dataGridViewTextBoxColumn828
			// 
			this->dataGridViewTextBoxColumn828->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn828->Name = L"dataGridViewTextBoxColumn828";
			this->dataGridViewTextBoxColumn828->ReadOnly = true;
			this->dataGridViewTextBoxColumn828->Width = 6;
			// 
			// dataGridViewTextBoxColumn829
			// 
			this->dataGridViewTextBoxColumn829->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn829->Name = L"dataGridViewTextBoxColumn829";
			this->dataGridViewTextBoxColumn829->ReadOnly = true;
			this->dataGridViewTextBoxColumn829->Width = 6;
			// 
			// dataGridViewTextBoxColumn830
			// 
			this->dataGridViewTextBoxColumn830->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn830->Name = L"dataGridViewTextBoxColumn830";
			this->dataGridViewTextBoxColumn830->ReadOnly = true;
			this->dataGridViewTextBoxColumn830->Width = 6;
			// 
			// dataGridViewTextBoxColumn831
			// 
			this->dataGridViewTextBoxColumn831->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn831->Name = L"dataGridViewTextBoxColumn831";
			this->dataGridViewTextBoxColumn831->ReadOnly = true;
			this->dataGridViewTextBoxColumn831->Width = 6;
			// 
			// dataGridViewTextBoxColumn832
			// 
			this->dataGridViewTextBoxColumn832->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn832->Name = L"dataGridViewTextBoxColumn832";
			this->dataGridViewTextBoxColumn832->ReadOnly = true;
			this->dataGridViewTextBoxColumn832->Width = 6;
			// 
			// label53
			// 
			this->label53->AutoSize = true;
			this->label53->Location = System::Drawing::Point(74, 501);
			this->label53->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label53->Name = L"label53";
			this->label53->Size = System::Drawing::Size(78, 13);
			this->label53->TabIndex = 61;
			this->label53->Text = L"Voxel Pos (Val)";
			// 
			// label54
			// 
			this->label54->AutoSize = true;
			this->label54->Location = System::Drawing::Point(318, 501);
			this->label54->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label54->Name = L"label54";
			this->label54->Size = System::Drawing::Size(35, 13);
			this->label54->TabIndex = 60;
			this->label54->Text = L"Pos Y";
			// 
			// label55
			// 
			this->label55->AutoSize = true;
			this->label55->Location = System::Drawing::Point(227, 501);
			this->label55->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label55->Name = L"label55";
			this->label55->Size = System::Drawing::Size(35, 13);
			this->label55->TabIndex = 59;
			this->label55->Text = L"Pos X";
			// 
			// label56
			// 
			this->label56->AutoSize = true;
			this->label56->Location = System::Drawing::Point(30, 452);
			this->label56->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label56->Name = L"label56";
			this->label56->Size = System::Drawing::Size(43, 13);
			this->label56->TabIndex = 58;
			this->label56->Text = L"HEX 0x";
			// 
			// label57
			// 
			this->label57->AutoSize = true;
			this->label57->Location = System::Drawing::Point(44, 430);
			this->label57->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label57->Name = L"label57";
			this->label57->Size = System::Drawing::Size(27, 13);
			this->label57->TabIndex = 57;
			this->label57->Text = L"Bits:";
			// 
			// label58
			// 
			this->label58->AutoSize = true;
			this->label58->Location = System::Drawing::Point(18, 402);
			this->label58->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label58->Name = L"label58";
			this->label58->Size = System::Drawing::Size(20, 13);
			this->label58->TabIndex = 56;
			this->label58->Text = L"Y=";
			// 
			// label59
			// 
			this->label59->AutoSize = true;
			this->label59->Location = System::Drawing::Point(18, 373);
			this->label59->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label59->Name = L"label59";
			this->label59->Size = System::Drawing::Size(20, 13);
			this->label59->TabIndex = 55;
			this->label59->Text = L"X=";
			// 
			// label60
			// 
			this->label60->AutoSize = true;
			this->label60->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label60->Location = System::Drawing::Point(34, 403);
			this->label60->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label60->Name = L"label60";
			this->label60->Size = System::Drawing::Size(21, 13);
			this->label60->TabIndex = 54;
			this->label60->Text = L"__";
			// 
			// label61
			// 
			this->label61->AutoSize = true;
			this->label61->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label61->Location = System::Drawing::Point(34, 373);
			this->label61->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label61->Name = L"label61";
			this->label61->Size = System::Drawing::Size(21, 13);
			this->label61->TabIndex = 53;
			this->label61->Text = L"__";
			// 
			// textBox26
			// 
			this->textBox26->Location = System::Drawing::Point(77, 516);
			this->textBox26->Margin = System::Windows::Forms::Padding(2);
			this->textBox26->Name = L"textBox26";
			this->textBox26->Size = System::Drawing::Size(76, 20);
			this->textBox26->TabIndex = 52;
			// 
			// textBox27
			// 
			this->textBox27->Location = System::Drawing::Point(230, 516);
			this->textBox27->Margin = System::Windows::Forms::Padding(2);
			this->textBox27->Name = L"textBox27";
			this->textBox27->Size = System::Drawing::Size(76, 20);
			this->textBox27->TabIndex = 51;
			// 
			// textBox28
			// 
			this->textBox28->Location = System::Drawing::Point(321, 516);
			this->textBox28->Margin = System::Windows::Forms::Padding(2);
			this->textBox28->Name = L"textBox28";
			this->textBox28->Size = System::Drawing::Size(76, 20);
			this->textBox28->TabIndex = 50;
			// 
			// textBox29
			// 
			this->textBox29->Location = System::Drawing::Point(75, 448);
			this->textBox29->Margin = System::Windows::Forms::Padding(2);
			this->textBox29->MaxLength = 16;
			this->textBox29->Name = L"textBox29";
			this->textBox29->Size = System::Drawing::Size(349, 20);
			this->textBox29->TabIndex = 49;
			// 
			// textBox30
			// 
			this->textBox30->Location = System::Drawing::Point(75, 425);
			this->textBox30->Margin = System::Windows::Forms::Padding(2);
			this->textBox30->MaxLength = 64;
			this->textBox30->Name = L"textBox30";
			this->textBox30->Size = System::Drawing::Size(397, 20);
			this->textBox30->TabIndex = 48;
			// 
			// dataGridView6
			// 
			this->dataGridView6->AllowDrop = true;
			this->dataGridView6->AllowUserToAddRows = false;
			this->dataGridView6->AllowUserToDeleteRows = false;
			this->dataGridView6->AllowUserToResizeColumns = false;
			this->dataGridView6->AllowUserToResizeRows = false;
			this->dataGridView6->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView6->ColumnHeadersVisible = false;
			this->dataGridView6->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn257, 
				this->dataGridViewTextBoxColumn258, this->dataGridViewTextBoxColumn259, this->dataGridViewTextBoxColumn260, this->dataGridViewTextBoxColumn261, 
				this->dataGridViewTextBoxColumn262, this->dataGridViewTextBoxColumn263, this->dataGridViewTextBoxColumn264, this->dataGridViewTextBoxColumn265, 
				this->dataGridViewTextBoxColumn266, this->dataGridViewTextBoxColumn267, this->dataGridViewTextBoxColumn268, this->dataGridViewTextBoxColumn269, 
				this->dataGridViewTextBoxColumn270, this->dataGridViewTextBoxColumn271, this->dataGridViewTextBoxColumn272, this->dataGridViewTextBoxColumn273, 
				this->dataGridViewTextBoxColumn274, this->dataGridViewTextBoxColumn275, this->dataGridViewTextBoxColumn276, this->dataGridViewTextBoxColumn277, 
				this->dataGridViewTextBoxColumn278, this->dataGridViewTextBoxColumn279, this->dataGridViewTextBoxColumn280, this->dataGridViewTextBoxColumn281, 
				this->dataGridViewTextBoxColumn282, this->dataGridViewTextBoxColumn283, this->dataGridViewTextBoxColumn284, this->dataGridViewTextBoxColumn285, 
				this->dataGridViewTextBoxColumn286, this->dataGridViewTextBoxColumn287, this->dataGridViewTextBoxColumn288, this->dataGridViewTextBoxColumn289, 
				this->dataGridViewTextBoxColumn290, this->dataGridViewTextBoxColumn291, this->dataGridViewTextBoxColumn292, this->dataGridViewTextBoxColumn293, 
				this->dataGridViewTextBoxColumn294, this->dataGridViewTextBoxColumn295, this->dataGridViewTextBoxColumn296, this->dataGridViewTextBoxColumn297, 
				this->dataGridViewTextBoxColumn298, this->dataGridViewTextBoxColumn299, this->dataGridViewTextBoxColumn300, this->dataGridViewTextBoxColumn301, 
				this->dataGridViewTextBoxColumn302, this->dataGridViewTextBoxColumn303, this->dataGridViewTextBoxColumn304, this->dataGridViewTextBoxColumn305, 
				this->dataGridViewTextBoxColumn306, this->dataGridViewTextBoxColumn307, this->dataGridViewTextBoxColumn308, this->dataGridViewTextBoxColumn309, 
				this->dataGridViewTextBoxColumn310, this->dataGridViewTextBoxColumn311, this->dataGridViewTextBoxColumn312, this->dataGridViewTextBoxColumn313, 
				this->dataGridViewTextBoxColumn314, this->dataGridViewTextBoxColumn315, this->dataGridViewTextBoxColumn316, this->dataGridViewTextBoxColumn317, 
				this->dataGridViewTextBoxColumn318, this->dataGridViewTextBoxColumn319, this->dataGridViewTextBoxColumn320});
			this->dataGridView6->Location = System::Drawing::Point(36, 15);
			this->dataGridView6->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView6->MultiSelect = false;
			this->dataGridView6->Name = L"dataGridView6";
			this->dataGridView6->ReadOnly = true;
			this->dataGridView6->RowHeadersVisible = false;
			this->dataGridView6->RowHeadersWidth = 15;
			dataGridViewCellStyle12->BackColor = System::Drawing::Color::White;
			this->dataGridView6->RowsDefaultCellStyle = dataGridViewCellStyle12;
			this->dataGridView6->RowTemplate->Height = 10;
			this->dataGridView6->Size = System::Drawing::Size(656, 338);
			this->dataGridView6->TabIndex = 32;
			this->dataGridView6->CellMouseClick += gcnew System::Windows::Forms::DataGridViewCellMouseEventHandler(this, &Form1::dataGridView6_CellMouseClick);
			this->dataGridView6->SelectionChanged += gcnew System::EventHandler(this, &Form1::dataGridView6_SelectionChanged);
			// 
			// dataGridViewTextBoxColumn257
			// 
			this->dataGridViewTextBoxColumn257->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn257->Name = L"dataGridViewTextBoxColumn257";
			this->dataGridViewTextBoxColumn257->ReadOnly = true;
			this->dataGridViewTextBoxColumn257->Width = 10;
			// 
			// dataGridViewTextBoxColumn258
			// 
			this->dataGridViewTextBoxColumn258->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn258->Name = L"dataGridViewTextBoxColumn258";
			this->dataGridViewTextBoxColumn258->ReadOnly = true;
			this->dataGridViewTextBoxColumn258->Width = 10;
			// 
			// dataGridViewTextBoxColumn259
			// 
			this->dataGridViewTextBoxColumn259->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn259->Name = L"dataGridViewTextBoxColumn259";
			this->dataGridViewTextBoxColumn259->ReadOnly = true;
			this->dataGridViewTextBoxColumn259->Width = 10;
			// 
			// dataGridViewTextBoxColumn260
			// 
			this->dataGridViewTextBoxColumn260->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn260->Name = L"dataGridViewTextBoxColumn260";
			this->dataGridViewTextBoxColumn260->ReadOnly = true;
			this->dataGridViewTextBoxColumn260->Width = 10;
			// 
			// dataGridViewTextBoxColumn261
			// 
			this->dataGridViewTextBoxColumn261->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn261->Name = L"dataGridViewTextBoxColumn261";
			this->dataGridViewTextBoxColumn261->ReadOnly = true;
			this->dataGridViewTextBoxColumn261->Width = 10;
			// 
			// dataGridViewTextBoxColumn262
			// 
			this->dataGridViewTextBoxColumn262->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn262->Name = L"dataGridViewTextBoxColumn262";
			this->dataGridViewTextBoxColumn262->ReadOnly = true;
			this->dataGridViewTextBoxColumn262->Width = 10;
			// 
			// dataGridViewTextBoxColumn263
			// 
			this->dataGridViewTextBoxColumn263->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn263->Name = L"dataGridViewTextBoxColumn263";
			this->dataGridViewTextBoxColumn263->ReadOnly = true;
			this->dataGridViewTextBoxColumn263->Width = 10;
			// 
			// dataGridViewTextBoxColumn264
			// 
			this->dataGridViewTextBoxColumn264->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn264->Name = L"dataGridViewTextBoxColumn264";
			this->dataGridViewTextBoxColumn264->ReadOnly = true;
			this->dataGridViewTextBoxColumn264->Width = 10;
			// 
			// dataGridViewTextBoxColumn265
			// 
			this->dataGridViewTextBoxColumn265->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn265->Name = L"dataGridViewTextBoxColumn265";
			this->dataGridViewTextBoxColumn265->ReadOnly = true;
			this->dataGridViewTextBoxColumn265->Width = 10;
			// 
			// dataGridViewTextBoxColumn266
			// 
			this->dataGridViewTextBoxColumn266->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn266->Name = L"dataGridViewTextBoxColumn266";
			this->dataGridViewTextBoxColumn266->ReadOnly = true;
			this->dataGridViewTextBoxColumn266->Width = 10;
			// 
			// dataGridViewTextBoxColumn267
			// 
			this->dataGridViewTextBoxColumn267->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn267->Name = L"dataGridViewTextBoxColumn267";
			this->dataGridViewTextBoxColumn267->ReadOnly = true;
			this->dataGridViewTextBoxColumn267->Width = 10;
			// 
			// dataGridViewTextBoxColumn268
			// 
			this->dataGridViewTextBoxColumn268->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn268->Name = L"dataGridViewTextBoxColumn268";
			this->dataGridViewTextBoxColumn268->ReadOnly = true;
			this->dataGridViewTextBoxColumn268->Width = 10;
			// 
			// dataGridViewTextBoxColumn269
			// 
			this->dataGridViewTextBoxColumn269->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn269->Name = L"dataGridViewTextBoxColumn269";
			this->dataGridViewTextBoxColumn269->ReadOnly = true;
			this->dataGridViewTextBoxColumn269->Width = 10;
			// 
			// dataGridViewTextBoxColumn270
			// 
			this->dataGridViewTextBoxColumn270->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn270->Name = L"dataGridViewTextBoxColumn270";
			this->dataGridViewTextBoxColumn270->ReadOnly = true;
			this->dataGridViewTextBoxColumn270->Width = 10;
			// 
			// dataGridViewTextBoxColumn271
			// 
			this->dataGridViewTextBoxColumn271->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn271->Name = L"dataGridViewTextBoxColumn271";
			this->dataGridViewTextBoxColumn271->ReadOnly = true;
			this->dataGridViewTextBoxColumn271->Width = 10;
			// 
			// dataGridViewTextBoxColumn272
			// 
			this->dataGridViewTextBoxColumn272->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn272->Name = L"dataGridViewTextBoxColumn272";
			this->dataGridViewTextBoxColumn272->ReadOnly = true;
			this->dataGridViewTextBoxColumn272->Width = 10;
			// 
			// dataGridViewTextBoxColumn273
			// 
			this->dataGridViewTextBoxColumn273->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn273->Name = L"dataGridViewTextBoxColumn273";
			this->dataGridViewTextBoxColumn273->ReadOnly = true;
			this->dataGridViewTextBoxColumn273->Width = 10;
			// 
			// dataGridViewTextBoxColumn274
			// 
			this->dataGridViewTextBoxColumn274->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn274->Name = L"dataGridViewTextBoxColumn274";
			this->dataGridViewTextBoxColumn274->ReadOnly = true;
			this->dataGridViewTextBoxColumn274->Width = 10;
			// 
			// dataGridViewTextBoxColumn275
			// 
			this->dataGridViewTextBoxColumn275->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn275->Name = L"dataGridViewTextBoxColumn275";
			this->dataGridViewTextBoxColumn275->ReadOnly = true;
			this->dataGridViewTextBoxColumn275->Width = 10;
			// 
			// dataGridViewTextBoxColumn276
			// 
			this->dataGridViewTextBoxColumn276->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn276->Name = L"dataGridViewTextBoxColumn276";
			this->dataGridViewTextBoxColumn276->ReadOnly = true;
			this->dataGridViewTextBoxColumn276->Width = 10;
			// 
			// dataGridViewTextBoxColumn277
			// 
			this->dataGridViewTextBoxColumn277->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn277->Name = L"dataGridViewTextBoxColumn277";
			this->dataGridViewTextBoxColumn277->ReadOnly = true;
			this->dataGridViewTextBoxColumn277->Width = 10;
			// 
			// dataGridViewTextBoxColumn278
			// 
			this->dataGridViewTextBoxColumn278->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn278->Name = L"dataGridViewTextBoxColumn278";
			this->dataGridViewTextBoxColumn278->ReadOnly = true;
			this->dataGridViewTextBoxColumn278->Width = 10;
			// 
			// dataGridViewTextBoxColumn279
			// 
			this->dataGridViewTextBoxColumn279->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn279->Name = L"dataGridViewTextBoxColumn279";
			this->dataGridViewTextBoxColumn279->ReadOnly = true;
			this->dataGridViewTextBoxColumn279->Width = 10;
			// 
			// dataGridViewTextBoxColumn280
			// 
			this->dataGridViewTextBoxColumn280->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn280->Name = L"dataGridViewTextBoxColumn280";
			this->dataGridViewTextBoxColumn280->ReadOnly = true;
			this->dataGridViewTextBoxColumn280->Width = 10;
			// 
			// dataGridViewTextBoxColumn281
			// 
			this->dataGridViewTextBoxColumn281->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn281->Name = L"dataGridViewTextBoxColumn281";
			this->dataGridViewTextBoxColumn281->ReadOnly = true;
			this->dataGridViewTextBoxColumn281->Width = 10;
			// 
			// dataGridViewTextBoxColumn282
			// 
			this->dataGridViewTextBoxColumn282->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn282->Name = L"dataGridViewTextBoxColumn282";
			this->dataGridViewTextBoxColumn282->ReadOnly = true;
			this->dataGridViewTextBoxColumn282->Width = 10;
			// 
			// dataGridViewTextBoxColumn283
			// 
			this->dataGridViewTextBoxColumn283->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn283->Name = L"dataGridViewTextBoxColumn283";
			this->dataGridViewTextBoxColumn283->ReadOnly = true;
			this->dataGridViewTextBoxColumn283->Width = 10;
			// 
			// dataGridViewTextBoxColumn284
			// 
			this->dataGridViewTextBoxColumn284->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn284->Name = L"dataGridViewTextBoxColumn284";
			this->dataGridViewTextBoxColumn284->ReadOnly = true;
			this->dataGridViewTextBoxColumn284->Width = 10;
			// 
			// dataGridViewTextBoxColumn285
			// 
			this->dataGridViewTextBoxColumn285->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn285->Name = L"dataGridViewTextBoxColumn285";
			this->dataGridViewTextBoxColumn285->ReadOnly = true;
			this->dataGridViewTextBoxColumn285->Width = 10;
			// 
			// dataGridViewTextBoxColumn286
			// 
			this->dataGridViewTextBoxColumn286->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn286->Name = L"dataGridViewTextBoxColumn286";
			this->dataGridViewTextBoxColumn286->ReadOnly = true;
			this->dataGridViewTextBoxColumn286->Width = 10;
			// 
			// dataGridViewTextBoxColumn287
			// 
			this->dataGridViewTextBoxColumn287->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn287->Name = L"dataGridViewTextBoxColumn287";
			this->dataGridViewTextBoxColumn287->ReadOnly = true;
			this->dataGridViewTextBoxColumn287->Width = 10;
			// 
			// dataGridViewTextBoxColumn288
			// 
			this->dataGridViewTextBoxColumn288->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn288->Name = L"dataGridViewTextBoxColumn288";
			this->dataGridViewTextBoxColumn288->ReadOnly = true;
			this->dataGridViewTextBoxColumn288->Width = 10;
			// 
			// dataGridViewTextBoxColumn289
			// 
			this->dataGridViewTextBoxColumn289->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn289->Name = L"dataGridViewTextBoxColumn289";
			this->dataGridViewTextBoxColumn289->ReadOnly = true;
			this->dataGridViewTextBoxColumn289->Width = 10;
			// 
			// dataGridViewTextBoxColumn290
			// 
			this->dataGridViewTextBoxColumn290->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn290->Name = L"dataGridViewTextBoxColumn290";
			this->dataGridViewTextBoxColumn290->ReadOnly = true;
			this->dataGridViewTextBoxColumn290->Width = 10;
			// 
			// dataGridViewTextBoxColumn291
			// 
			this->dataGridViewTextBoxColumn291->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn291->Name = L"dataGridViewTextBoxColumn291";
			this->dataGridViewTextBoxColumn291->ReadOnly = true;
			this->dataGridViewTextBoxColumn291->Width = 10;
			// 
			// dataGridViewTextBoxColumn292
			// 
			this->dataGridViewTextBoxColumn292->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn292->Name = L"dataGridViewTextBoxColumn292";
			this->dataGridViewTextBoxColumn292->ReadOnly = true;
			this->dataGridViewTextBoxColumn292->Width = 10;
			// 
			// dataGridViewTextBoxColumn293
			// 
			this->dataGridViewTextBoxColumn293->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn293->Name = L"dataGridViewTextBoxColumn293";
			this->dataGridViewTextBoxColumn293->ReadOnly = true;
			this->dataGridViewTextBoxColumn293->Width = 10;
			// 
			// dataGridViewTextBoxColumn294
			// 
			this->dataGridViewTextBoxColumn294->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn294->Name = L"dataGridViewTextBoxColumn294";
			this->dataGridViewTextBoxColumn294->ReadOnly = true;
			this->dataGridViewTextBoxColumn294->Width = 10;
			// 
			// dataGridViewTextBoxColumn295
			// 
			this->dataGridViewTextBoxColumn295->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn295->Name = L"dataGridViewTextBoxColumn295";
			this->dataGridViewTextBoxColumn295->ReadOnly = true;
			this->dataGridViewTextBoxColumn295->Width = 10;
			// 
			// dataGridViewTextBoxColumn296
			// 
			this->dataGridViewTextBoxColumn296->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn296->Name = L"dataGridViewTextBoxColumn296";
			this->dataGridViewTextBoxColumn296->ReadOnly = true;
			this->dataGridViewTextBoxColumn296->Width = 10;
			// 
			// dataGridViewTextBoxColumn297
			// 
			this->dataGridViewTextBoxColumn297->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn297->Name = L"dataGridViewTextBoxColumn297";
			this->dataGridViewTextBoxColumn297->ReadOnly = true;
			this->dataGridViewTextBoxColumn297->Width = 10;
			// 
			// dataGridViewTextBoxColumn298
			// 
			this->dataGridViewTextBoxColumn298->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn298->Name = L"dataGridViewTextBoxColumn298";
			this->dataGridViewTextBoxColumn298->ReadOnly = true;
			this->dataGridViewTextBoxColumn298->Width = 10;
			// 
			// dataGridViewTextBoxColumn299
			// 
			this->dataGridViewTextBoxColumn299->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn299->Name = L"dataGridViewTextBoxColumn299";
			this->dataGridViewTextBoxColumn299->ReadOnly = true;
			this->dataGridViewTextBoxColumn299->Width = 10;
			// 
			// dataGridViewTextBoxColumn300
			// 
			this->dataGridViewTextBoxColumn300->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn300->Name = L"dataGridViewTextBoxColumn300";
			this->dataGridViewTextBoxColumn300->ReadOnly = true;
			this->dataGridViewTextBoxColumn300->Width = 10;
			// 
			// dataGridViewTextBoxColumn301
			// 
			this->dataGridViewTextBoxColumn301->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn301->Name = L"dataGridViewTextBoxColumn301";
			this->dataGridViewTextBoxColumn301->ReadOnly = true;
			this->dataGridViewTextBoxColumn301->Width = 10;
			// 
			// dataGridViewTextBoxColumn302
			// 
			this->dataGridViewTextBoxColumn302->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn302->Name = L"dataGridViewTextBoxColumn302";
			this->dataGridViewTextBoxColumn302->ReadOnly = true;
			this->dataGridViewTextBoxColumn302->Width = 10;
			// 
			// dataGridViewTextBoxColumn303
			// 
			this->dataGridViewTextBoxColumn303->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn303->Name = L"dataGridViewTextBoxColumn303";
			this->dataGridViewTextBoxColumn303->ReadOnly = true;
			this->dataGridViewTextBoxColumn303->Width = 10;
			// 
			// dataGridViewTextBoxColumn304
			// 
			this->dataGridViewTextBoxColumn304->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn304->Name = L"dataGridViewTextBoxColumn304";
			this->dataGridViewTextBoxColumn304->ReadOnly = true;
			this->dataGridViewTextBoxColumn304->Width = 10;
			// 
			// dataGridViewTextBoxColumn305
			// 
			this->dataGridViewTextBoxColumn305->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn305->Name = L"dataGridViewTextBoxColumn305";
			this->dataGridViewTextBoxColumn305->ReadOnly = true;
			this->dataGridViewTextBoxColumn305->Width = 10;
			// 
			// dataGridViewTextBoxColumn306
			// 
			this->dataGridViewTextBoxColumn306->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn306->Name = L"dataGridViewTextBoxColumn306";
			this->dataGridViewTextBoxColumn306->ReadOnly = true;
			this->dataGridViewTextBoxColumn306->Width = 10;
			// 
			// dataGridViewTextBoxColumn307
			// 
			this->dataGridViewTextBoxColumn307->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn307->Name = L"dataGridViewTextBoxColumn307";
			this->dataGridViewTextBoxColumn307->ReadOnly = true;
			this->dataGridViewTextBoxColumn307->Width = 10;
			// 
			// dataGridViewTextBoxColumn308
			// 
			this->dataGridViewTextBoxColumn308->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn308->Name = L"dataGridViewTextBoxColumn308";
			this->dataGridViewTextBoxColumn308->ReadOnly = true;
			this->dataGridViewTextBoxColumn308->Width = 10;
			// 
			// dataGridViewTextBoxColumn309
			// 
			this->dataGridViewTextBoxColumn309->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn309->Name = L"dataGridViewTextBoxColumn309";
			this->dataGridViewTextBoxColumn309->ReadOnly = true;
			this->dataGridViewTextBoxColumn309->Width = 10;
			// 
			// dataGridViewTextBoxColumn310
			// 
			this->dataGridViewTextBoxColumn310->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn310->Name = L"dataGridViewTextBoxColumn310";
			this->dataGridViewTextBoxColumn310->ReadOnly = true;
			this->dataGridViewTextBoxColumn310->Width = 10;
			// 
			// dataGridViewTextBoxColumn311
			// 
			this->dataGridViewTextBoxColumn311->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn311->Name = L"dataGridViewTextBoxColumn311";
			this->dataGridViewTextBoxColumn311->ReadOnly = true;
			this->dataGridViewTextBoxColumn311->Width = 10;
			// 
			// dataGridViewTextBoxColumn312
			// 
			this->dataGridViewTextBoxColumn312->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn312->Name = L"dataGridViewTextBoxColumn312";
			this->dataGridViewTextBoxColumn312->ReadOnly = true;
			this->dataGridViewTextBoxColumn312->Width = 10;
			// 
			// dataGridViewTextBoxColumn313
			// 
			this->dataGridViewTextBoxColumn313->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn313->Name = L"dataGridViewTextBoxColumn313";
			this->dataGridViewTextBoxColumn313->ReadOnly = true;
			this->dataGridViewTextBoxColumn313->Width = 10;
			// 
			// dataGridViewTextBoxColumn314
			// 
			this->dataGridViewTextBoxColumn314->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn314->Name = L"dataGridViewTextBoxColumn314";
			this->dataGridViewTextBoxColumn314->ReadOnly = true;
			this->dataGridViewTextBoxColumn314->Width = 10;
			// 
			// dataGridViewTextBoxColumn315
			// 
			this->dataGridViewTextBoxColumn315->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn315->Name = L"dataGridViewTextBoxColumn315";
			this->dataGridViewTextBoxColumn315->ReadOnly = true;
			this->dataGridViewTextBoxColumn315->Width = 10;
			// 
			// dataGridViewTextBoxColumn316
			// 
			this->dataGridViewTextBoxColumn316->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn316->Name = L"dataGridViewTextBoxColumn316";
			this->dataGridViewTextBoxColumn316->ReadOnly = true;
			this->dataGridViewTextBoxColumn316->Width = 10;
			// 
			// dataGridViewTextBoxColumn317
			// 
			this->dataGridViewTextBoxColumn317->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn317->Name = L"dataGridViewTextBoxColumn317";
			this->dataGridViewTextBoxColumn317->ReadOnly = true;
			this->dataGridViewTextBoxColumn317->Width = 10;
			// 
			// dataGridViewTextBoxColumn318
			// 
			this->dataGridViewTextBoxColumn318->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn318->Name = L"dataGridViewTextBoxColumn318";
			this->dataGridViewTextBoxColumn318->ReadOnly = true;
			this->dataGridViewTextBoxColumn318->Width = 10;
			// 
			// dataGridViewTextBoxColumn319
			// 
			this->dataGridViewTextBoxColumn319->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn319->Name = L"dataGridViewTextBoxColumn319";
			this->dataGridViewTextBoxColumn319->ReadOnly = true;
			this->dataGridViewTextBoxColumn319->Width = 10;
			// 
			// dataGridViewTextBoxColumn320
			// 
			this->dataGridViewTextBoxColumn320->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn320->Name = L"dataGridViewTextBoxColumn320";
			this->dataGridViewTextBoxColumn320->ReadOnly = true;
			this->dataGridViewTextBoxColumn320->Width = 10;
			// 
			// tabPage7
			// 
			this->tabPage7->Controls->Add(this->checkBox16);
			this->tabPage7->Controls->Add(this->checkBox8);
			this->tabPage7->Controls->Add(this->button30);
			this->tabPage7->Controls->Add(this->label168);
			this->tabPage7->Controls->Add(this->textBox50);
			this->tabPage7->Controls->Add(this->label152);
			this->tabPage7->Controls->Add(this->button18);
			this->tabPage7->Controls->Add(this->label153);
			this->tabPage7->Controls->Add(this->button19);
			this->tabPage7->Controls->Add(this->label125);
			this->tabPage7->Controls->Add(this->label126);
			this->tabPage7->Controls->Add(this->label127);
			this->tabPage7->Controls->Add(this->label128);
			this->tabPage7->Controls->Add(this->label129);
			this->tabPage7->Controls->Add(this->label130);
			this->tabPage7->Controls->Add(this->label131);
			this->tabPage7->Controls->Add(this->dataGridView16);
			this->tabPage7->Controls->Add(this->label62);
			this->tabPage7->Controls->Add(this->label63);
			this->tabPage7->Controls->Add(this->label64);
			this->tabPage7->Controls->Add(this->label65);
			this->tabPage7->Controls->Add(this->label66);
			this->tabPage7->Controls->Add(this->label67);
			this->tabPage7->Controls->Add(this->label68);
			this->tabPage7->Controls->Add(this->label69);
			this->tabPage7->Controls->Add(this->label70);
			this->tabPage7->Controls->Add(this->textBox31);
			this->tabPage7->Controls->Add(this->textBox32);
			this->tabPage7->Controls->Add(this->textBox33);
			this->tabPage7->Controls->Add(this->textBox34);
			this->tabPage7->Controls->Add(this->textBox35);
			this->tabPage7->Controls->Add(this->dataGridView7);
			this->tabPage7->Location = System::Drawing::Point(4, 22);
			this->tabPage7->Margin = System::Windows::Forms::Padding(2);
			this->tabPage7->Name = L"tabPage7";
			this->tabPage7->Padding = System::Windows::Forms::Padding(2);
			this->tabPage7->Size = System::Drawing::Size(698, 555);
			this->tabPage7->TabIndex = 6;
			this->tabPage7->Text = L"Floor 6";
			this->tabPage7->UseVisualStyleBackColor = true;
			// 
			// checkBox16
			// 
			this->checkBox16->AutoSize = true;
			this->checkBox16->Location = System::Drawing::Point(560, 496);
			this->checkBox16->Name = L"checkBox16";
			this->checkBox16->Size = System::Drawing::Size(96, 17);
			this->checkBox16->TabIndex = 91;
			this->checkBox16->Text = L"Show teleports";
			this->checkBox16->UseVisualStyleBackColor = true;
			this->checkBox16->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox16_CheckedChanged);
			// 
			// checkBox8
			// 
			this->checkBox8->AutoSize = true;
			this->checkBox8->Location = System::Drawing::Point(560, 475);
			this->checkBox8->Name = L"checkBox8";
			this->checkBox8->Size = System::Drawing::Size(136, 17);
			this->checkBox8->TabIndex = 88;
			this->checkBox8->Text = L"Show cubes with doors";
			this->checkBox8->UseVisualStyleBackColor = true;
			this->checkBox8->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox8_CheckedChanged);
			// 
			// button30
			// 
			this->button30->Enabled = false;
			this->button30->Location = System::Drawing::Point(610, 390);
			this->button30->Name = L"button30";
			this->button30->Size = System::Drawing::Size(32, 20);
			this->button30->TabIndex = 77;
			this->button30->Text = L"OK";
			this->button30->UseVisualStyleBackColor = true;
			this->button30->Click += gcnew System::EventHandler(this, &Form1::button30_Click);
			// 
			// label168
			// 
			this->label168->AutoSize = true;
			this->label168->Location = System::Drawing::Point(533, 373);
			this->label168->Name = L"label168";
			this->label168->Size = System::Drawing::Size(69, 13);
			this->label168->TabIndex = 76;
			this->label168->Text = L"Cube N (hex)";
			// 
			// textBox50
			// 
			this->textBox50->Location = System::Drawing::Point(533, 390);
			this->textBox50->MaxLength = 3;
			this->textBox50->Name = L"textBox50";
			this->textBox50->Size = System::Drawing::Size(70, 20);
			this->textBox50->TabIndex = 75;
			// 
			// label152
			// 
			this->label152->AutoSize = true;
			this->label152->Location = System::Drawing::Point(556, 434);
			this->label152->Name = L"label152";
			this->label152->Size = System::Drawing::Size(47, 13);
			this->label152->TabIndex = 74;
			this->label152->Text = L"label152";
			// 
			// button18
			// 
			this->button18->Location = System::Drawing::Point(475, 424);
			this->button18->Name = L"button18";
			this->button18->Size = System::Drawing::Size(75, 23);
			this->button18->TabIndex = 73;
			this->button18->Text = L"Edit value";
			this->button18->UseVisualStyleBackColor = true;
			this->button18->Click += gcnew System::EventHandler(this, &Form1::button18_Click);
			// 
			// label153
			// 
			this->label153->AutoSize = true;
			this->label153->Location = System::Drawing::Point(503, 458);
			this->label153->Name = L"label153";
			this->label153->Size = System::Drawing::Size(47, 13);
			this->label153->TabIndex = 72;
			this->label153->Text = L"label153";
			// 
			// button19
			// 
			this->button19->Location = System::Drawing::Point(428, 448);
			this->button19->Name = L"button19";
			this->button19->Size = System::Drawing::Size(75, 23);
			this->button19->TabIndex = 71;
			this->button19->Text = L"Edit value";
			this->button19->UseVisualStyleBackColor = true;
			this->button19->Click += gcnew System::EventHandler(this, &Form1::button19_Click);
			// 
			// label125
			// 
			this->label125->AutoSize = true;
			this->label125->Location = System::Drawing::Point(436, 369);
			this->label125->Name = L"label125";
			this->label125->Size = System::Drawing::Size(31, 13);
			this->label125->TabIndex = 70;
			this->label125->Text = L"0123";
			// 
			// label126
			// 
			this->label126->AutoSize = true;
			this->label126->Location = System::Drawing::Point(376, 356);
			this->label126->Name = L"label126";
			this->label126->Size = System::Drawing::Size(67, 13);
			this->label126->TabIndex = 69;
			this->label126->Text = L"0123456789";
			// 
			// label127
			// 
			this->label127->AutoSize = true;
			this->label127->Location = System::Drawing::Point(316, 369);
			this->label127->Name = L"label127";
			this->label127->Size = System::Drawing::Size(67, 13);
			this->label127->TabIndex = 68;
			this->label127->Text = L"0123456789";
			// 
			// label128
			// 
			this->label128->AutoSize = true;
			this->label128->Location = System::Drawing::Point(256, 356);
			this->label128->Name = L"label128";
			this->label128->Size = System::Drawing::Size(67, 13);
			this->label128->TabIndex = 67;
			this->label128->Text = L"0123456789";
			// 
			// label129
			// 
			this->label129->AutoSize = true;
			this->label129->Location = System::Drawing::Point(197, 367);
			this->label129->Name = L"label129";
			this->label129->Size = System::Drawing::Size(67, 13);
			this->label129->TabIndex = 66;
			this->label129->Text = L"0123456789";
			// 
			// label130
			// 
			this->label130->AutoSize = true;
			this->label130->Location = System::Drawing::Point(135, 356);
			this->label130->Name = L"label130";
			this->label130->Size = System::Drawing::Size(67, 13);
			this->label130->TabIndex = 65;
			this->label130->Text = L"0123456789";
			// 
			// label131
			// 
			this->label131->AutoSize = true;
			this->label131->Location = System::Drawing::Point(75, 367);
			this->label131->Name = L"label131";
			this->label131->Size = System::Drawing::Size(67, 13);
			this->label131->TabIndex = 64;
			this->label131->Text = L"0123456789";
			// 
			// dataGridView16
			// 
			this->dataGridView16->AllowDrop = true;
			this->dataGridView16->AllowUserToAddRows = false;
			this->dataGridView16->AllowUserToDeleteRows = false;
			this->dataGridView16->AllowUserToResizeColumns = false;
			this->dataGridView16->AllowUserToResizeRows = false;
			this->dataGridView16->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView16->ColumnHeadersVisible = false;
			this->dataGridView16->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn833, 
				this->dataGridViewTextBoxColumn834, this->dataGridViewTextBoxColumn835, this->dataGridViewTextBoxColumn836, this->dataGridViewTextBoxColumn837, 
				this->dataGridViewTextBoxColumn838, this->dataGridViewTextBoxColumn839, this->dataGridViewTextBoxColumn840, this->dataGridViewTextBoxColumn841, 
				this->dataGridViewTextBoxColumn842, this->dataGridViewTextBoxColumn843, this->dataGridViewTextBoxColumn844, this->dataGridViewTextBoxColumn845, 
				this->dataGridViewTextBoxColumn846, this->dataGridViewTextBoxColumn847, this->dataGridViewTextBoxColumn848, this->dataGridViewTextBoxColumn849, 
				this->dataGridViewTextBoxColumn850, this->dataGridViewTextBoxColumn851, this->dataGridViewTextBoxColumn852, this->dataGridViewTextBoxColumn853, 
				this->dataGridViewTextBoxColumn854, this->dataGridViewTextBoxColumn855, this->dataGridViewTextBoxColumn856, this->dataGridViewTextBoxColumn857, 
				this->dataGridViewTextBoxColumn858, this->dataGridViewTextBoxColumn859, this->dataGridViewTextBoxColumn860, this->dataGridViewTextBoxColumn861, 
				this->dataGridViewTextBoxColumn862, this->dataGridViewTextBoxColumn863, this->dataGridViewTextBoxColumn864, this->dataGridViewTextBoxColumn865, 
				this->dataGridViewTextBoxColumn866, this->dataGridViewTextBoxColumn867, this->dataGridViewTextBoxColumn868, this->dataGridViewTextBoxColumn869, 
				this->dataGridViewTextBoxColumn870, this->dataGridViewTextBoxColumn871, this->dataGridViewTextBoxColumn872, this->dataGridViewTextBoxColumn873, 
				this->dataGridViewTextBoxColumn874, this->dataGridViewTextBoxColumn875, this->dataGridViewTextBoxColumn876, this->dataGridViewTextBoxColumn877, 
				this->dataGridViewTextBoxColumn878, this->dataGridViewTextBoxColumn879, this->dataGridViewTextBoxColumn880, this->dataGridViewTextBoxColumn881, 
				this->dataGridViewTextBoxColumn882, this->dataGridViewTextBoxColumn883, this->dataGridViewTextBoxColumn884, this->dataGridViewTextBoxColumn885, 
				this->dataGridViewTextBoxColumn886, this->dataGridViewTextBoxColumn887, this->dataGridViewTextBoxColumn888, this->dataGridViewTextBoxColumn889, 
				this->dataGridViewTextBoxColumn890, this->dataGridViewTextBoxColumn891, this->dataGridViewTextBoxColumn892, this->dataGridViewTextBoxColumn893, 
				this->dataGridViewTextBoxColumn894, this->dataGridViewTextBoxColumn895, this->dataGridViewTextBoxColumn896});
			this->dataGridView16->Location = System::Drawing::Point(77, 383);
			this->dataGridView16->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView16->Name = L"dataGridView16";
			this->dataGridView16->ReadOnly = true;
			this->dataGridView16->RowHeadersVisible = false;
			this->dataGridView16->RowHeadersWidth = 15;
			dataGridViewCellStyle13->BackColor = System::Drawing::Color::White;
			this->dataGridView16->RowsDefaultCellStyle = dataGridViewCellStyle13;
			this->dataGridView16->RowTemplate->Height = 35;
			this->dataGridView16->Size = System::Drawing::Size(390, 41);
			this->dataGridView16->TabIndex = 63;
			// 
			// dataGridViewTextBoxColumn833
			// 
			this->dataGridViewTextBoxColumn833->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn833->Name = L"dataGridViewTextBoxColumn833";
			this->dataGridViewTextBoxColumn833->ReadOnly = true;
			this->dataGridViewTextBoxColumn833->Width = 6;
			// 
			// dataGridViewTextBoxColumn834
			// 
			this->dataGridViewTextBoxColumn834->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn834->Name = L"dataGridViewTextBoxColumn834";
			this->dataGridViewTextBoxColumn834->ReadOnly = true;
			this->dataGridViewTextBoxColumn834->Width = 6;
			// 
			// dataGridViewTextBoxColumn835
			// 
			this->dataGridViewTextBoxColumn835->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn835->Name = L"dataGridViewTextBoxColumn835";
			this->dataGridViewTextBoxColumn835->ReadOnly = true;
			this->dataGridViewTextBoxColumn835->Width = 6;
			// 
			// dataGridViewTextBoxColumn836
			// 
			this->dataGridViewTextBoxColumn836->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn836->Name = L"dataGridViewTextBoxColumn836";
			this->dataGridViewTextBoxColumn836->ReadOnly = true;
			this->dataGridViewTextBoxColumn836->Width = 6;
			// 
			// dataGridViewTextBoxColumn837
			// 
			this->dataGridViewTextBoxColumn837->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn837->Name = L"dataGridViewTextBoxColumn837";
			this->dataGridViewTextBoxColumn837->ReadOnly = true;
			this->dataGridViewTextBoxColumn837->Width = 6;
			// 
			// dataGridViewTextBoxColumn838
			// 
			this->dataGridViewTextBoxColumn838->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn838->Name = L"dataGridViewTextBoxColumn838";
			this->dataGridViewTextBoxColumn838->ReadOnly = true;
			this->dataGridViewTextBoxColumn838->Width = 6;
			// 
			// dataGridViewTextBoxColumn839
			// 
			this->dataGridViewTextBoxColumn839->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn839->Name = L"dataGridViewTextBoxColumn839";
			this->dataGridViewTextBoxColumn839->ReadOnly = true;
			this->dataGridViewTextBoxColumn839->Width = 6;
			// 
			// dataGridViewTextBoxColumn840
			// 
			this->dataGridViewTextBoxColumn840->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn840->Name = L"dataGridViewTextBoxColumn840";
			this->dataGridViewTextBoxColumn840->ReadOnly = true;
			this->dataGridViewTextBoxColumn840->Width = 6;
			// 
			// dataGridViewTextBoxColumn841
			// 
			this->dataGridViewTextBoxColumn841->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn841->Name = L"dataGridViewTextBoxColumn841";
			this->dataGridViewTextBoxColumn841->ReadOnly = true;
			this->dataGridViewTextBoxColumn841->Width = 6;
			// 
			// dataGridViewTextBoxColumn842
			// 
			this->dataGridViewTextBoxColumn842->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn842->Name = L"dataGridViewTextBoxColumn842";
			this->dataGridViewTextBoxColumn842->ReadOnly = true;
			this->dataGridViewTextBoxColumn842->Width = 6;
			// 
			// dataGridViewTextBoxColumn843
			// 
			this->dataGridViewTextBoxColumn843->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn843->Name = L"dataGridViewTextBoxColumn843";
			this->dataGridViewTextBoxColumn843->ReadOnly = true;
			this->dataGridViewTextBoxColumn843->Width = 6;
			// 
			// dataGridViewTextBoxColumn844
			// 
			this->dataGridViewTextBoxColumn844->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn844->Name = L"dataGridViewTextBoxColumn844";
			this->dataGridViewTextBoxColumn844->ReadOnly = true;
			this->dataGridViewTextBoxColumn844->Width = 6;
			// 
			// dataGridViewTextBoxColumn845
			// 
			this->dataGridViewTextBoxColumn845->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn845->Name = L"dataGridViewTextBoxColumn845";
			this->dataGridViewTextBoxColumn845->ReadOnly = true;
			this->dataGridViewTextBoxColumn845->Width = 6;
			// 
			// dataGridViewTextBoxColumn846
			// 
			this->dataGridViewTextBoxColumn846->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn846->Name = L"dataGridViewTextBoxColumn846";
			this->dataGridViewTextBoxColumn846->ReadOnly = true;
			this->dataGridViewTextBoxColumn846->Width = 6;
			// 
			// dataGridViewTextBoxColumn847
			// 
			this->dataGridViewTextBoxColumn847->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn847->Name = L"dataGridViewTextBoxColumn847";
			this->dataGridViewTextBoxColumn847->ReadOnly = true;
			this->dataGridViewTextBoxColumn847->Width = 6;
			// 
			// dataGridViewTextBoxColumn848
			// 
			this->dataGridViewTextBoxColumn848->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn848->Name = L"dataGridViewTextBoxColumn848";
			this->dataGridViewTextBoxColumn848->ReadOnly = true;
			this->dataGridViewTextBoxColumn848->Width = 6;
			// 
			// dataGridViewTextBoxColumn849
			// 
			this->dataGridViewTextBoxColumn849->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn849->Name = L"dataGridViewTextBoxColumn849";
			this->dataGridViewTextBoxColumn849->ReadOnly = true;
			this->dataGridViewTextBoxColumn849->Width = 6;
			// 
			// dataGridViewTextBoxColumn850
			// 
			this->dataGridViewTextBoxColumn850->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn850->Name = L"dataGridViewTextBoxColumn850";
			this->dataGridViewTextBoxColumn850->ReadOnly = true;
			this->dataGridViewTextBoxColumn850->Width = 6;
			// 
			// dataGridViewTextBoxColumn851
			// 
			this->dataGridViewTextBoxColumn851->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn851->Name = L"dataGridViewTextBoxColumn851";
			this->dataGridViewTextBoxColumn851->ReadOnly = true;
			this->dataGridViewTextBoxColumn851->Width = 6;
			// 
			// dataGridViewTextBoxColumn852
			// 
			this->dataGridViewTextBoxColumn852->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn852->Name = L"dataGridViewTextBoxColumn852";
			this->dataGridViewTextBoxColumn852->ReadOnly = true;
			this->dataGridViewTextBoxColumn852->Width = 6;
			// 
			// dataGridViewTextBoxColumn853
			// 
			this->dataGridViewTextBoxColumn853->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn853->Name = L"dataGridViewTextBoxColumn853";
			this->dataGridViewTextBoxColumn853->ReadOnly = true;
			this->dataGridViewTextBoxColumn853->Width = 6;
			// 
			// dataGridViewTextBoxColumn854
			// 
			this->dataGridViewTextBoxColumn854->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn854->Name = L"dataGridViewTextBoxColumn854";
			this->dataGridViewTextBoxColumn854->ReadOnly = true;
			this->dataGridViewTextBoxColumn854->Width = 6;
			// 
			// dataGridViewTextBoxColumn855
			// 
			this->dataGridViewTextBoxColumn855->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn855->Name = L"dataGridViewTextBoxColumn855";
			this->dataGridViewTextBoxColumn855->ReadOnly = true;
			this->dataGridViewTextBoxColumn855->Width = 6;
			// 
			// dataGridViewTextBoxColumn856
			// 
			this->dataGridViewTextBoxColumn856->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn856->Name = L"dataGridViewTextBoxColumn856";
			this->dataGridViewTextBoxColumn856->ReadOnly = true;
			this->dataGridViewTextBoxColumn856->Width = 6;
			// 
			// dataGridViewTextBoxColumn857
			// 
			this->dataGridViewTextBoxColumn857->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn857->Name = L"dataGridViewTextBoxColumn857";
			this->dataGridViewTextBoxColumn857->ReadOnly = true;
			this->dataGridViewTextBoxColumn857->Width = 6;
			// 
			// dataGridViewTextBoxColumn858
			// 
			this->dataGridViewTextBoxColumn858->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn858->Name = L"dataGridViewTextBoxColumn858";
			this->dataGridViewTextBoxColumn858->ReadOnly = true;
			this->dataGridViewTextBoxColumn858->Width = 6;
			// 
			// dataGridViewTextBoxColumn859
			// 
			this->dataGridViewTextBoxColumn859->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn859->Name = L"dataGridViewTextBoxColumn859";
			this->dataGridViewTextBoxColumn859->ReadOnly = true;
			this->dataGridViewTextBoxColumn859->Width = 6;
			// 
			// dataGridViewTextBoxColumn860
			// 
			this->dataGridViewTextBoxColumn860->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn860->Name = L"dataGridViewTextBoxColumn860";
			this->dataGridViewTextBoxColumn860->ReadOnly = true;
			this->dataGridViewTextBoxColumn860->Width = 6;
			// 
			// dataGridViewTextBoxColumn861
			// 
			this->dataGridViewTextBoxColumn861->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn861->Name = L"dataGridViewTextBoxColumn861";
			this->dataGridViewTextBoxColumn861->ReadOnly = true;
			this->dataGridViewTextBoxColumn861->Width = 6;
			// 
			// dataGridViewTextBoxColumn862
			// 
			this->dataGridViewTextBoxColumn862->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn862->Name = L"dataGridViewTextBoxColumn862";
			this->dataGridViewTextBoxColumn862->ReadOnly = true;
			this->dataGridViewTextBoxColumn862->Width = 6;
			// 
			// dataGridViewTextBoxColumn863
			// 
			this->dataGridViewTextBoxColumn863->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn863->Name = L"dataGridViewTextBoxColumn863";
			this->dataGridViewTextBoxColumn863->ReadOnly = true;
			this->dataGridViewTextBoxColumn863->Width = 6;
			// 
			// dataGridViewTextBoxColumn864
			// 
			this->dataGridViewTextBoxColumn864->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn864->Name = L"dataGridViewTextBoxColumn864";
			this->dataGridViewTextBoxColumn864->ReadOnly = true;
			this->dataGridViewTextBoxColumn864->Width = 6;
			// 
			// dataGridViewTextBoxColumn865
			// 
			this->dataGridViewTextBoxColumn865->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn865->Name = L"dataGridViewTextBoxColumn865";
			this->dataGridViewTextBoxColumn865->ReadOnly = true;
			this->dataGridViewTextBoxColumn865->Width = 6;
			// 
			// dataGridViewTextBoxColumn866
			// 
			this->dataGridViewTextBoxColumn866->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn866->Name = L"dataGridViewTextBoxColumn866";
			this->dataGridViewTextBoxColumn866->ReadOnly = true;
			this->dataGridViewTextBoxColumn866->Width = 6;
			// 
			// dataGridViewTextBoxColumn867
			// 
			this->dataGridViewTextBoxColumn867->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn867->Name = L"dataGridViewTextBoxColumn867";
			this->dataGridViewTextBoxColumn867->ReadOnly = true;
			this->dataGridViewTextBoxColumn867->Width = 6;
			// 
			// dataGridViewTextBoxColumn868
			// 
			this->dataGridViewTextBoxColumn868->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn868->Name = L"dataGridViewTextBoxColumn868";
			this->dataGridViewTextBoxColumn868->ReadOnly = true;
			this->dataGridViewTextBoxColumn868->Width = 6;
			// 
			// dataGridViewTextBoxColumn869
			// 
			this->dataGridViewTextBoxColumn869->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn869->Name = L"dataGridViewTextBoxColumn869";
			this->dataGridViewTextBoxColumn869->ReadOnly = true;
			this->dataGridViewTextBoxColumn869->Width = 6;
			// 
			// dataGridViewTextBoxColumn870
			// 
			this->dataGridViewTextBoxColumn870->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn870->Name = L"dataGridViewTextBoxColumn870";
			this->dataGridViewTextBoxColumn870->ReadOnly = true;
			this->dataGridViewTextBoxColumn870->Width = 6;
			// 
			// dataGridViewTextBoxColumn871
			// 
			this->dataGridViewTextBoxColumn871->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn871->Name = L"dataGridViewTextBoxColumn871";
			this->dataGridViewTextBoxColumn871->ReadOnly = true;
			this->dataGridViewTextBoxColumn871->Width = 6;
			// 
			// dataGridViewTextBoxColumn872
			// 
			this->dataGridViewTextBoxColumn872->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn872->Name = L"dataGridViewTextBoxColumn872";
			this->dataGridViewTextBoxColumn872->ReadOnly = true;
			this->dataGridViewTextBoxColumn872->Width = 6;
			// 
			// dataGridViewTextBoxColumn873
			// 
			this->dataGridViewTextBoxColumn873->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn873->Name = L"dataGridViewTextBoxColumn873";
			this->dataGridViewTextBoxColumn873->ReadOnly = true;
			this->dataGridViewTextBoxColumn873->Width = 6;
			// 
			// dataGridViewTextBoxColumn874
			// 
			this->dataGridViewTextBoxColumn874->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn874->Name = L"dataGridViewTextBoxColumn874";
			this->dataGridViewTextBoxColumn874->ReadOnly = true;
			this->dataGridViewTextBoxColumn874->Width = 6;
			// 
			// dataGridViewTextBoxColumn875
			// 
			this->dataGridViewTextBoxColumn875->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn875->Name = L"dataGridViewTextBoxColumn875";
			this->dataGridViewTextBoxColumn875->ReadOnly = true;
			this->dataGridViewTextBoxColumn875->Width = 6;
			// 
			// dataGridViewTextBoxColumn876
			// 
			this->dataGridViewTextBoxColumn876->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn876->Name = L"dataGridViewTextBoxColumn876";
			this->dataGridViewTextBoxColumn876->ReadOnly = true;
			this->dataGridViewTextBoxColumn876->Width = 6;
			// 
			// dataGridViewTextBoxColumn877
			// 
			this->dataGridViewTextBoxColumn877->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn877->Name = L"dataGridViewTextBoxColumn877";
			this->dataGridViewTextBoxColumn877->ReadOnly = true;
			this->dataGridViewTextBoxColumn877->Width = 6;
			// 
			// dataGridViewTextBoxColumn878
			// 
			this->dataGridViewTextBoxColumn878->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn878->Name = L"dataGridViewTextBoxColumn878";
			this->dataGridViewTextBoxColumn878->ReadOnly = true;
			this->dataGridViewTextBoxColumn878->Width = 6;
			// 
			// dataGridViewTextBoxColumn879
			// 
			this->dataGridViewTextBoxColumn879->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn879->Name = L"dataGridViewTextBoxColumn879";
			this->dataGridViewTextBoxColumn879->ReadOnly = true;
			this->dataGridViewTextBoxColumn879->Width = 6;
			// 
			// dataGridViewTextBoxColumn880
			// 
			this->dataGridViewTextBoxColumn880->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn880->Name = L"dataGridViewTextBoxColumn880";
			this->dataGridViewTextBoxColumn880->ReadOnly = true;
			this->dataGridViewTextBoxColumn880->Width = 6;
			// 
			// dataGridViewTextBoxColumn881
			// 
			this->dataGridViewTextBoxColumn881->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn881->Name = L"dataGridViewTextBoxColumn881";
			this->dataGridViewTextBoxColumn881->ReadOnly = true;
			this->dataGridViewTextBoxColumn881->Width = 6;
			// 
			// dataGridViewTextBoxColumn882
			// 
			this->dataGridViewTextBoxColumn882->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn882->Name = L"dataGridViewTextBoxColumn882";
			this->dataGridViewTextBoxColumn882->ReadOnly = true;
			this->dataGridViewTextBoxColumn882->Width = 6;
			// 
			// dataGridViewTextBoxColumn883
			// 
			this->dataGridViewTextBoxColumn883->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn883->Name = L"dataGridViewTextBoxColumn883";
			this->dataGridViewTextBoxColumn883->ReadOnly = true;
			this->dataGridViewTextBoxColumn883->Width = 6;
			// 
			// dataGridViewTextBoxColumn884
			// 
			this->dataGridViewTextBoxColumn884->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn884->Name = L"dataGridViewTextBoxColumn884";
			this->dataGridViewTextBoxColumn884->ReadOnly = true;
			this->dataGridViewTextBoxColumn884->Width = 6;
			// 
			// dataGridViewTextBoxColumn885
			// 
			this->dataGridViewTextBoxColumn885->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn885->Name = L"dataGridViewTextBoxColumn885";
			this->dataGridViewTextBoxColumn885->ReadOnly = true;
			this->dataGridViewTextBoxColumn885->Width = 6;
			// 
			// dataGridViewTextBoxColumn886
			// 
			this->dataGridViewTextBoxColumn886->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn886->Name = L"dataGridViewTextBoxColumn886";
			this->dataGridViewTextBoxColumn886->ReadOnly = true;
			this->dataGridViewTextBoxColumn886->Width = 6;
			// 
			// dataGridViewTextBoxColumn887
			// 
			this->dataGridViewTextBoxColumn887->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn887->Name = L"dataGridViewTextBoxColumn887";
			this->dataGridViewTextBoxColumn887->ReadOnly = true;
			this->dataGridViewTextBoxColumn887->Width = 6;
			// 
			// dataGridViewTextBoxColumn888
			// 
			this->dataGridViewTextBoxColumn888->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn888->Name = L"dataGridViewTextBoxColumn888";
			this->dataGridViewTextBoxColumn888->ReadOnly = true;
			this->dataGridViewTextBoxColumn888->Width = 6;
			// 
			// dataGridViewTextBoxColumn889
			// 
			this->dataGridViewTextBoxColumn889->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn889->Name = L"dataGridViewTextBoxColumn889";
			this->dataGridViewTextBoxColumn889->ReadOnly = true;
			this->dataGridViewTextBoxColumn889->Width = 6;
			// 
			// dataGridViewTextBoxColumn890
			// 
			this->dataGridViewTextBoxColumn890->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn890->Name = L"dataGridViewTextBoxColumn890";
			this->dataGridViewTextBoxColumn890->ReadOnly = true;
			this->dataGridViewTextBoxColumn890->Width = 6;
			// 
			// dataGridViewTextBoxColumn891
			// 
			this->dataGridViewTextBoxColumn891->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn891->Name = L"dataGridViewTextBoxColumn891";
			this->dataGridViewTextBoxColumn891->ReadOnly = true;
			this->dataGridViewTextBoxColumn891->Width = 6;
			// 
			// dataGridViewTextBoxColumn892
			// 
			this->dataGridViewTextBoxColumn892->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn892->Name = L"dataGridViewTextBoxColumn892";
			this->dataGridViewTextBoxColumn892->ReadOnly = true;
			this->dataGridViewTextBoxColumn892->Width = 6;
			// 
			// dataGridViewTextBoxColumn893
			// 
			this->dataGridViewTextBoxColumn893->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn893->Name = L"dataGridViewTextBoxColumn893";
			this->dataGridViewTextBoxColumn893->ReadOnly = true;
			this->dataGridViewTextBoxColumn893->Width = 6;
			// 
			// dataGridViewTextBoxColumn894
			// 
			this->dataGridViewTextBoxColumn894->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn894->Name = L"dataGridViewTextBoxColumn894";
			this->dataGridViewTextBoxColumn894->ReadOnly = true;
			this->dataGridViewTextBoxColumn894->Width = 6;
			// 
			// dataGridViewTextBoxColumn895
			// 
			this->dataGridViewTextBoxColumn895->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn895->Name = L"dataGridViewTextBoxColumn895";
			this->dataGridViewTextBoxColumn895->ReadOnly = true;
			this->dataGridViewTextBoxColumn895->Width = 6;
			// 
			// dataGridViewTextBoxColumn896
			// 
			this->dataGridViewTextBoxColumn896->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn896->Name = L"dataGridViewTextBoxColumn896";
			this->dataGridViewTextBoxColumn896->ReadOnly = true;
			this->dataGridViewTextBoxColumn896->Width = 6;
			// 
			// label62
			// 
			this->label62->AutoSize = true;
			this->label62->Location = System::Drawing::Point(74, 501);
			this->label62->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label62->Name = L"label62";
			this->label62->Size = System::Drawing::Size(78, 13);
			this->label62->TabIndex = 61;
			this->label62->Text = L"Voxel Pos (Val)";
			// 
			// label63
			// 
			this->label63->AutoSize = true;
			this->label63->Location = System::Drawing::Point(318, 501);
			this->label63->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label63->Name = L"label63";
			this->label63->Size = System::Drawing::Size(35, 13);
			this->label63->TabIndex = 60;
			this->label63->Text = L"Pos Y";
			// 
			// label64
			// 
			this->label64->AutoSize = true;
			this->label64->Location = System::Drawing::Point(227, 501);
			this->label64->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label64->Name = L"label64";
			this->label64->Size = System::Drawing::Size(35, 13);
			this->label64->TabIndex = 59;
			this->label64->Text = L"Pos X";
			// 
			// label65
			// 
			this->label65->AutoSize = true;
			this->label65->Location = System::Drawing::Point(30, 452);
			this->label65->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label65->Name = L"label65";
			this->label65->Size = System::Drawing::Size(43, 13);
			this->label65->TabIndex = 58;
			this->label65->Text = L"HEX 0x";
			// 
			// label66
			// 
			this->label66->AutoSize = true;
			this->label66->Location = System::Drawing::Point(44, 430);
			this->label66->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label66->Name = L"label66";
			this->label66->Size = System::Drawing::Size(27, 13);
			this->label66->TabIndex = 57;
			this->label66->Text = L"Bits:";
			// 
			// label67
			// 
			this->label67->AutoSize = true;
			this->label67->Location = System::Drawing::Point(18, 402);
			this->label67->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label67->Name = L"label67";
			this->label67->Size = System::Drawing::Size(20, 13);
			this->label67->TabIndex = 56;
			this->label67->Text = L"Y=";
			// 
			// label68
			// 
			this->label68->AutoSize = true;
			this->label68->Location = System::Drawing::Point(18, 373);
			this->label68->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label68->Name = L"label68";
			this->label68->Size = System::Drawing::Size(20, 13);
			this->label68->TabIndex = 55;
			this->label68->Text = L"X=";
			// 
			// label69
			// 
			this->label69->AutoSize = true;
			this->label69->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label69->Location = System::Drawing::Point(34, 403);
			this->label69->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label69->Name = L"label69";
			this->label69->Size = System::Drawing::Size(21, 13);
			this->label69->TabIndex = 54;
			this->label69->Text = L"__";
			// 
			// label70
			// 
			this->label70->AutoSize = true;
			this->label70->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label70->Location = System::Drawing::Point(34, 373);
			this->label70->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label70->Name = L"label70";
			this->label70->Size = System::Drawing::Size(21, 13);
			this->label70->TabIndex = 53;
			this->label70->Text = L"__";
			// 
			// textBox31
			// 
			this->textBox31->Location = System::Drawing::Point(77, 516);
			this->textBox31->Margin = System::Windows::Forms::Padding(2);
			this->textBox31->Name = L"textBox31";
			this->textBox31->Size = System::Drawing::Size(76, 20);
			this->textBox31->TabIndex = 52;
			// 
			// textBox32
			// 
			this->textBox32->Location = System::Drawing::Point(230, 516);
			this->textBox32->Margin = System::Windows::Forms::Padding(2);
			this->textBox32->Name = L"textBox32";
			this->textBox32->Size = System::Drawing::Size(76, 20);
			this->textBox32->TabIndex = 51;
			// 
			// textBox33
			// 
			this->textBox33->Location = System::Drawing::Point(321, 516);
			this->textBox33->Margin = System::Windows::Forms::Padding(2);
			this->textBox33->Name = L"textBox33";
			this->textBox33->Size = System::Drawing::Size(76, 20);
			this->textBox33->TabIndex = 50;
			// 
			// textBox34
			// 
			this->textBox34->Location = System::Drawing::Point(75, 448);
			this->textBox34->Margin = System::Windows::Forms::Padding(2);
			this->textBox34->MaxLength = 16;
			this->textBox34->Name = L"textBox34";
			this->textBox34->Size = System::Drawing::Size(349, 20);
			this->textBox34->TabIndex = 49;
			// 
			// textBox35
			// 
			this->textBox35->Location = System::Drawing::Point(75, 425);
			this->textBox35->Margin = System::Windows::Forms::Padding(2);
			this->textBox35->MaxLength = 64;
			this->textBox35->Name = L"textBox35";
			this->textBox35->Size = System::Drawing::Size(397, 20);
			this->textBox35->TabIndex = 48;
			// 
			// dataGridView7
			// 
			this->dataGridView7->AllowDrop = true;
			this->dataGridView7->AllowUserToAddRows = false;
			this->dataGridView7->AllowUserToDeleteRows = false;
			this->dataGridView7->AllowUserToResizeColumns = false;
			this->dataGridView7->AllowUserToResizeRows = false;
			this->dataGridView7->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView7->ColumnHeadersVisible = false;
			this->dataGridView7->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn321, 
				this->dataGridViewTextBoxColumn322, this->dataGridViewTextBoxColumn323, this->dataGridViewTextBoxColumn324, this->dataGridViewTextBoxColumn325, 
				this->dataGridViewTextBoxColumn326, this->dataGridViewTextBoxColumn327, this->dataGridViewTextBoxColumn328, this->dataGridViewTextBoxColumn329, 
				this->dataGridViewTextBoxColumn330, this->dataGridViewTextBoxColumn331, this->dataGridViewTextBoxColumn332, this->dataGridViewTextBoxColumn333, 
				this->dataGridViewTextBoxColumn334, this->dataGridViewTextBoxColumn335, this->dataGridViewTextBoxColumn336, this->dataGridViewTextBoxColumn337, 
				this->dataGridViewTextBoxColumn338, this->dataGridViewTextBoxColumn339, this->dataGridViewTextBoxColumn340, this->dataGridViewTextBoxColumn341, 
				this->dataGridViewTextBoxColumn342, this->dataGridViewTextBoxColumn343, this->dataGridViewTextBoxColumn344, this->dataGridViewTextBoxColumn345, 
				this->dataGridViewTextBoxColumn346, this->dataGridViewTextBoxColumn347, this->dataGridViewTextBoxColumn348, this->dataGridViewTextBoxColumn349, 
				this->dataGridViewTextBoxColumn350, this->dataGridViewTextBoxColumn351, this->dataGridViewTextBoxColumn352, this->dataGridViewTextBoxColumn353, 
				this->dataGridViewTextBoxColumn354, this->dataGridViewTextBoxColumn355, this->dataGridViewTextBoxColumn356, this->dataGridViewTextBoxColumn357, 
				this->dataGridViewTextBoxColumn358, this->dataGridViewTextBoxColumn359, this->dataGridViewTextBoxColumn360, this->dataGridViewTextBoxColumn361, 
				this->dataGridViewTextBoxColumn362, this->dataGridViewTextBoxColumn363, this->dataGridViewTextBoxColumn364, this->dataGridViewTextBoxColumn365, 
				this->dataGridViewTextBoxColumn366, this->dataGridViewTextBoxColumn367, this->dataGridViewTextBoxColumn368, this->dataGridViewTextBoxColumn369, 
				this->dataGridViewTextBoxColumn370, this->dataGridViewTextBoxColumn371, this->dataGridViewTextBoxColumn372, this->dataGridViewTextBoxColumn373, 
				this->dataGridViewTextBoxColumn374, this->dataGridViewTextBoxColumn375, this->dataGridViewTextBoxColumn376, this->dataGridViewTextBoxColumn377, 
				this->dataGridViewTextBoxColumn378, this->dataGridViewTextBoxColumn379, this->dataGridViewTextBoxColumn380, this->dataGridViewTextBoxColumn381, 
				this->dataGridViewTextBoxColumn382, this->dataGridViewTextBoxColumn383, this->dataGridViewTextBoxColumn384});
			this->dataGridView7->Location = System::Drawing::Point(36, 15);
			this->dataGridView7->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView7->MultiSelect = false;
			this->dataGridView7->Name = L"dataGridView7";
			this->dataGridView7->ReadOnly = true;
			this->dataGridView7->RowHeadersVisible = false;
			this->dataGridView7->RowHeadersWidth = 15;
			dataGridViewCellStyle14->BackColor = System::Drawing::Color::White;
			this->dataGridView7->RowsDefaultCellStyle = dataGridViewCellStyle14;
			this->dataGridView7->RowTemplate->Height = 10;
			this->dataGridView7->Size = System::Drawing::Size(656, 338);
			this->dataGridView7->TabIndex = 32;
			this->dataGridView7->CellMouseClick += gcnew System::Windows::Forms::DataGridViewCellMouseEventHandler(this, &Form1::dataGridView7_CellMouseClick);
			this->dataGridView7->SelectionChanged += gcnew System::EventHandler(this, &Form1::dataGridView7_SelectionChanged);
			// 
			// dataGridViewTextBoxColumn321
			// 
			this->dataGridViewTextBoxColumn321->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn321->Name = L"dataGridViewTextBoxColumn321";
			this->dataGridViewTextBoxColumn321->ReadOnly = true;
			this->dataGridViewTextBoxColumn321->Width = 10;
			// 
			// dataGridViewTextBoxColumn322
			// 
			this->dataGridViewTextBoxColumn322->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn322->Name = L"dataGridViewTextBoxColumn322";
			this->dataGridViewTextBoxColumn322->ReadOnly = true;
			this->dataGridViewTextBoxColumn322->Width = 10;
			// 
			// dataGridViewTextBoxColumn323
			// 
			this->dataGridViewTextBoxColumn323->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn323->Name = L"dataGridViewTextBoxColumn323";
			this->dataGridViewTextBoxColumn323->ReadOnly = true;
			this->dataGridViewTextBoxColumn323->Width = 10;
			// 
			// dataGridViewTextBoxColumn324
			// 
			this->dataGridViewTextBoxColumn324->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn324->Name = L"dataGridViewTextBoxColumn324";
			this->dataGridViewTextBoxColumn324->ReadOnly = true;
			this->dataGridViewTextBoxColumn324->Width = 10;
			// 
			// dataGridViewTextBoxColumn325
			// 
			this->dataGridViewTextBoxColumn325->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn325->Name = L"dataGridViewTextBoxColumn325";
			this->dataGridViewTextBoxColumn325->ReadOnly = true;
			this->dataGridViewTextBoxColumn325->Width = 10;
			// 
			// dataGridViewTextBoxColumn326
			// 
			this->dataGridViewTextBoxColumn326->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn326->Name = L"dataGridViewTextBoxColumn326";
			this->dataGridViewTextBoxColumn326->ReadOnly = true;
			this->dataGridViewTextBoxColumn326->Width = 10;
			// 
			// dataGridViewTextBoxColumn327
			// 
			this->dataGridViewTextBoxColumn327->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn327->Name = L"dataGridViewTextBoxColumn327";
			this->dataGridViewTextBoxColumn327->ReadOnly = true;
			this->dataGridViewTextBoxColumn327->Width = 10;
			// 
			// dataGridViewTextBoxColumn328
			// 
			this->dataGridViewTextBoxColumn328->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn328->Name = L"dataGridViewTextBoxColumn328";
			this->dataGridViewTextBoxColumn328->ReadOnly = true;
			this->dataGridViewTextBoxColumn328->Width = 10;
			// 
			// dataGridViewTextBoxColumn329
			// 
			this->dataGridViewTextBoxColumn329->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn329->Name = L"dataGridViewTextBoxColumn329";
			this->dataGridViewTextBoxColumn329->ReadOnly = true;
			this->dataGridViewTextBoxColumn329->Width = 10;
			// 
			// dataGridViewTextBoxColumn330
			// 
			this->dataGridViewTextBoxColumn330->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn330->Name = L"dataGridViewTextBoxColumn330";
			this->dataGridViewTextBoxColumn330->ReadOnly = true;
			this->dataGridViewTextBoxColumn330->Width = 10;
			// 
			// dataGridViewTextBoxColumn331
			// 
			this->dataGridViewTextBoxColumn331->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn331->Name = L"dataGridViewTextBoxColumn331";
			this->dataGridViewTextBoxColumn331->ReadOnly = true;
			this->dataGridViewTextBoxColumn331->Width = 10;
			// 
			// dataGridViewTextBoxColumn332
			// 
			this->dataGridViewTextBoxColumn332->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn332->Name = L"dataGridViewTextBoxColumn332";
			this->dataGridViewTextBoxColumn332->ReadOnly = true;
			this->dataGridViewTextBoxColumn332->Width = 10;
			// 
			// dataGridViewTextBoxColumn333
			// 
			this->dataGridViewTextBoxColumn333->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn333->Name = L"dataGridViewTextBoxColumn333";
			this->dataGridViewTextBoxColumn333->ReadOnly = true;
			this->dataGridViewTextBoxColumn333->Width = 10;
			// 
			// dataGridViewTextBoxColumn334
			// 
			this->dataGridViewTextBoxColumn334->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn334->Name = L"dataGridViewTextBoxColumn334";
			this->dataGridViewTextBoxColumn334->ReadOnly = true;
			this->dataGridViewTextBoxColumn334->Width = 10;
			// 
			// dataGridViewTextBoxColumn335
			// 
			this->dataGridViewTextBoxColumn335->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn335->Name = L"dataGridViewTextBoxColumn335";
			this->dataGridViewTextBoxColumn335->ReadOnly = true;
			this->dataGridViewTextBoxColumn335->Width = 10;
			// 
			// dataGridViewTextBoxColumn336
			// 
			this->dataGridViewTextBoxColumn336->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn336->Name = L"dataGridViewTextBoxColumn336";
			this->dataGridViewTextBoxColumn336->ReadOnly = true;
			this->dataGridViewTextBoxColumn336->Width = 10;
			// 
			// dataGridViewTextBoxColumn337
			// 
			this->dataGridViewTextBoxColumn337->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn337->Name = L"dataGridViewTextBoxColumn337";
			this->dataGridViewTextBoxColumn337->ReadOnly = true;
			this->dataGridViewTextBoxColumn337->Width = 10;
			// 
			// dataGridViewTextBoxColumn338
			// 
			this->dataGridViewTextBoxColumn338->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn338->Name = L"dataGridViewTextBoxColumn338";
			this->dataGridViewTextBoxColumn338->ReadOnly = true;
			this->dataGridViewTextBoxColumn338->Width = 10;
			// 
			// dataGridViewTextBoxColumn339
			// 
			this->dataGridViewTextBoxColumn339->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn339->Name = L"dataGridViewTextBoxColumn339";
			this->dataGridViewTextBoxColumn339->ReadOnly = true;
			this->dataGridViewTextBoxColumn339->Width = 10;
			// 
			// dataGridViewTextBoxColumn340
			// 
			this->dataGridViewTextBoxColumn340->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn340->Name = L"dataGridViewTextBoxColumn340";
			this->dataGridViewTextBoxColumn340->ReadOnly = true;
			this->dataGridViewTextBoxColumn340->Width = 10;
			// 
			// dataGridViewTextBoxColumn341
			// 
			this->dataGridViewTextBoxColumn341->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn341->Name = L"dataGridViewTextBoxColumn341";
			this->dataGridViewTextBoxColumn341->ReadOnly = true;
			this->dataGridViewTextBoxColumn341->Width = 10;
			// 
			// dataGridViewTextBoxColumn342
			// 
			this->dataGridViewTextBoxColumn342->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn342->Name = L"dataGridViewTextBoxColumn342";
			this->dataGridViewTextBoxColumn342->ReadOnly = true;
			this->dataGridViewTextBoxColumn342->Width = 10;
			// 
			// dataGridViewTextBoxColumn343
			// 
			this->dataGridViewTextBoxColumn343->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn343->Name = L"dataGridViewTextBoxColumn343";
			this->dataGridViewTextBoxColumn343->ReadOnly = true;
			this->dataGridViewTextBoxColumn343->Width = 10;
			// 
			// dataGridViewTextBoxColumn344
			// 
			this->dataGridViewTextBoxColumn344->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn344->Name = L"dataGridViewTextBoxColumn344";
			this->dataGridViewTextBoxColumn344->ReadOnly = true;
			this->dataGridViewTextBoxColumn344->Width = 10;
			// 
			// dataGridViewTextBoxColumn345
			// 
			this->dataGridViewTextBoxColumn345->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn345->Name = L"dataGridViewTextBoxColumn345";
			this->dataGridViewTextBoxColumn345->ReadOnly = true;
			this->dataGridViewTextBoxColumn345->Width = 10;
			// 
			// dataGridViewTextBoxColumn346
			// 
			this->dataGridViewTextBoxColumn346->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn346->Name = L"dataGridViewTextBoxColumn346";
			this->dataGridViewTextBoxColumn346->ReadOnly = true;
			this->dataGridViewTextBoxColumn346->Width = 10;
			// 
			// dataGridViewTextBoxColumn347
			// 
			this->dataGridViewTextBoxColumn347->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn347->Name = L"dataGridViewTextBoxColumn347";
			this->dataGridViewTextBoxColumn347->ReadOnly = true;
			this->dataGridViewTextBoxColumn347->Width = 10;
			// 
			// dataGridViewTextBoxColumn348
			// 
			this->dataGridViewTextBoxColumn348->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn348->Name = L"dataGridViewTextBoxColumn348";
			this->dataGridViewTextBoxColumn348->ReadOnly = true;
			this->dataGridViewTextBoxColumn348->Width = 10;
			// 
			// dataGridViewTextBoxColumn349
			// 
			this->dataGridViewTextBoxColumn349->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn349->Name = L"dataGridViewTextBoxColumn349";
			this->dataGridViewTextBoxColumn349->ReadOnly = true;
			this->dataGridViewTextBoxColumn349->Width = 10;
			// 
			// dataGridViewTextBoxColumn350
			// 
			this->dataGridViewTextBoxColumn350->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn350->Name = L"dataGridViewTextBoxColumn350";
			this->dataGridViewTextBoxColumn350->ReadOnly = true;
			this->dataGridViewTextBoxColumn350->Width = 10;
			// 
			// dataGridViewTextBoxColumn351
			// 
			this->dataGridViewTextBoxColumn351->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn351->Name = L"dataGridViewTextBoxColumn351";
			this->dataGridViewTextBoxColumn351->ReadOnly = true;
			this->dataGridViewTextBoxColumn351->Width = 10;
			// 
			// dataGridViewTextBoxColumn352
			// 
			this->dataGridViewTextBoxColumn352->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn352->Name = L"dataGridViewTextBoxColumn352";
			this->dataGridViewTextBoxColumn352->ReadOnly = true;
			this->dataGridViewTextBoxColumn352->Width = 10;
			// 
			// dataGridViewTextBoxColumn353
			// 
			this->dataGridViewTextBoxColumn353->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn353->Name = L"dataGridViewTextBoxColumn353";
			this->dataGridViewTextBoxColumn353->ReadOnly = true;
			this->dataGridViewTextBoxColumn353->Width = 10;
			// 
			// dataGridViewTextBoxColumn354
			// 
			this->dataGridViewTextBoxColumn354->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn354->Name = L"dataGridViewTextBoxColumn354";
			this->dataGridViewTextBoxColumn354->ReadOnly = true;
			this->dataGridViewTextBoxColumn354->Width = 10;
			// 
			// dataGridViewTextBoxColumn355
			// 
			this->dataGridViewTextBoxColumn355->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn355->Name = L"dataGridViewTextBoxColumn355";
			this->dataGridViewTextBoxColumn355->ReadOnly = true;
			this->dataGridViewTextBoxColumn355->Width = 10;
			// 
			// dataGridViewTextBoxColumn356
			// 
			this->dataGridViewTextBoxColumn356->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn356->Name = L"dataGridViewTextBoxColumn356";
			this->dataGridViewTextBoxColumn356->ReadOnly = true;
			this->dataGridViewTextBoxColumn356->Width = 10;
			// 
			// dataGridViewTextBoxColumn357
			// 
			this->dataGridViewTextBoxColumn357->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn357->Name = L"dataGridViewTextBoxColumn357";
			this->dataGridViewTextBoxColumn357->ReadOnly = true;
			this->dataGridViewTextBoxColumn357->Width = 10;
			// 
			// dataGridViewTextBoxColumn358
			// 
			this->dataGridViewTextBoxColumn358->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn358->Name = L"dataGridViewTextBoxColumn358";
			this->dataGridViewTextBoxColumn358->ReadOnly = true;
			this->dataGridViewTextBoxColumn358->Width = 10;
			// 
			// dataGridViewTextBoxColumn359
			// 
			this->dataGridViewTextBoxColumn359->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn359->Name = L"dataGridViewTextBoxColumn359";
			this->dataGridViewTextBoxColumn359->ReadOnly = true;
			this->dataGridViewTextBoxColumn359->Width = 10;
			// 
			// dataGridViewTextBoxColumn360
			// 
			this->dataGridViewTextBoxColumn360->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn360->Name = L"dataGridViewTextBoxColumn360";
			this->dataGridViewTextBoxColumn360->ReadOnly = true;
			this->dataGridViewTextBoxColumn360->Width = 10;
			// 
			// dataGridViewTextBoxColumn361
			// 
			this->dataGridViewTextBoxColumn361->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn361->Name = L"dataGridViewTextBoxColumn361";
			this->dataGridViewTextBoxColumn361->ReadOnly = true;
			this->dataGridViewTextBoxColumn361->Width = 10;
			// 
			// dataGridViewTextBoxColumn362
			// 
			this->dataGridViewTextBoxColumn362->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn362->Name = L"dataGridViewTextBoxColumn362";
			this->dataGridViewTextBoxColumn362->ReadOnly = true;
			this->dataGridViewTextBoxColumn362->Width = 10;
			// 
			// dataGridViewTextBoxColumn363
			// 
			this->dataGridViewTextBoxColumn363->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn363->Name = L"dataGridViewTextBoxColumn363";
			this->dataGridViewTextBoxColumn363->ReadOnly = true;
			this->dataGridViewTextBoxColumn363->Width = 10;
			// 
			// dataGridViewTextBoxColumn364
			// 
			this->dataGridViewTextBoxColumn364->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn364->Name = L"dataGridViewTextBoxColumn364";
			this->dataGridViewTextBoxColumn364->ReadOnly = true;
			this->dataGridViewTextBoxColumn364->Width = 10;
			// 
			// dataGridViewTextBoxColumn365
			// 
			this->dataGridViewTextBoxColumn365->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn365->Name = L"dataGridViewTextBoxColumn365";
			this->dataGridViewTextBoxColumn365->ReadOnly = true;
			this->dataGridViewTextBoxColumn365->Width = 10;
			// 
			// dataGridViewTextBoxColumn366
			// 
			this->dataGridViewTextBoxColumn366->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn366->Name = L"dataGridViewTextBoxColumn366";
			this->dataGridViewTextBoxColumn366->ReadOnly = true;
			this->dataGridViewTextBoxColumn366->Width = 10;
			// 
			// dataGridViewTextBoxColumn367
			// 
			this->dataGridViewTextBoxColumn367->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn367->Name = L"dataGridViewTextBoxColumn367";
			this->dataGridViewTextBoxColumn367->ReadOnly = true;
			this->dataGridViewTextBoxColumn367->Width = 10;
			// 
			// dataGridViewTextBoxColumn368
			// 
			this->dataGridViewTextBoxColumn368->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn368->Name = L"dataGridViewTextBoxColumn368";
			this->dataGridViewTextBoxColumn368->ReadOnly = true;
			this->dataGridViewTextBoxColumn368->Width = 10;
			// 
			// dataGridViewTextBoxColumn369
			// 
			this->dataGridViewTextBoxColumn369->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn369->Name = L"dataGridViewTextBoxColumn369";
			this->dataGridViewTextBoxColumn369->ReadOnly = true;
			this->dataGridViewTextBoxColumn369->Width = 10;
			// 
			// dataGridViewTextBoxColumn370
			// 
			this->dataGridViewTextBoxColumn370->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn370->Name = L"dataGridViewTextBoxColumn370";
			this->dataGridViewTextBoxColumn370->ReadOnly = true;
			this->dataGridViewTextBoxColumn370->Width = 10;
			// 
			// dataGridViewTextBoxColumn371
			// 
			this->dataGridViewTextBoxColumn371->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn371->Name = L"dataGridViewTextBoxColumn371";
			this->dataGridViewTextBoxColumn371->ReadOnly = true;
			this->dataGridViewTextBoxColumn371->Width = 10;
			// 
			// dataGridViewTextBoxColumn372
			// 
			this->dataGridViewTextBoxColumn372->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn372->Name = L"dataGridViewTextBoxColumn372";
			this->dataGridViewTextBoxColumn372->ReadOnly = true;
			this->dataGridViewTextBoxColumn372->Width = 10;
			// 
			// dataGridViewTextBoxColumn373
			// 
			this->dataGridViewTextBoxColumn373->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn373->Name = L"dataGridViewTextBoxColumn373";
			this->dataGridViewTextBoxColumn373->ReadOnly = true;
			this->dataGridViewTextBoxColumn373->Width = 10;
			// 
			// dataGridViewTextBoxColumn374
			// 
			this->dataGridViewTextBoxColumn374->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn374->Name = L"dataGridViewTextBoxColumn374";
			this->dataGridViewTextBoxColumn374->ReadOnly = true;
			this->dataGridViewTextBoxColumn374->Width = 10;
			// 
			// dataGridViewTextBoxColumn375
			// 
			this->dataGridViewTextBoxColumn375->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn375->Name = L"dataGridViewTextBoxColumn375";
			this->dataGridViewTextBoxColumn375->ReadOnly = true;
			this->dataGridViewTextBoxColumn375->Width = 10;
			// 
			// dataGridViewTextBoxColumn376
			// 
			this->dataGridViewTextBoxColumn376->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn376->Name = L"dataGridViewTextBoxColumn376";
			this->dataGridViewTextBoxColumn376->ReadOnly = true;
			this->dataGridViewTextBoxColumn376->Width = 10;
			// 
			// dataGridViewTextBoxColumn377
			// 
			this->dataGridViewTextBoxColumn377->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn377->Name = L"dataGridViewTextBoxColumn377";
			this->dataGridViewTextBoxColumn377->ReadOnly = true;
			this->dataGridViewTextBoxColumn377->Width = 10;
			// 
			// dataGridViewTextBoxColumn378
			// 
			this->dataGridViewTextBoxColumn378->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn378->Name = L"dataGridViewTextBoxColumn378";
			this->dataGridViewTextBoxColumn378->ReadOnly = true;
			this->dataGridViewTextBoxColumn378->Width = 10;
			// 
			// dataGridViewTextBoxColumn379
			// 
			this->dataGridViewTextBoxColumn379->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn379->Name = L"dataGridViewTextBoxColumn379";
			this->dataGridViewTextBoxColumn379->ReadOnly = true;
			this->dataGridViewTextBoxColumn379->Width = 10;
			// 
			// dataGridViewTextBoxColumn380
			// 
			this->dataGridViewTextBoxColumn380->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn380->Name = L"dataGridViewTextBoxColumn380";
			this->dataGridViewTextBoxColumn380->ReadOnly = true;
			this->dataGridViewTextBoxColumn380->Width = 10;
			// 
			// dataGridViewTextBoxColumn381
			// 
			this->dataGridViewTextBoxColumn381->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn381->Name = L"dataGridViewTextBoxColumn381";
			this->dataGridViewTextBoxColumn381->ReadOnly = true;
			this->dataGridViewTextBoxColumn381->Width = 10;
			// 
			// dataGridViewTextBoxColumn382
			// 
			this->dataGridViewTextBoxColumn382->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn382->Name = L"dataGridViewTextBoxColumn382";
			this->dataGridViewTextBoxColumn382->ReadOnly = true;
			this->dataGridViewTextBoxColumn382->Width = 10;
			// 
			// dataGridViewTextBoxColumn383
			// 
			this->dataGridViewTextBoxColumn383->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn383->Name = L"dataGridViewTextBoxColumn383";
			this->dataGridViewTextBoxColumn383->ReadOnly = true;
			this->dataGridViewTextBoxColumn383->Width = 10;
			// 
			// dataGridViewTextBoxColumn384
			// 
			this->dataGridViewTextBoxColumn384->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn384->Name = L"dataGridViewTextBoxColumn384";
			this->dataGridViewTextBoxColumn384->ReadOnly = true;
			this->dataGridViewTextBoxColumn384->Width = 10;
			// 
			// tabPage8
			// 
			this->tabPage8->Controls->Add(this->checkBox17);
			this->tabPage8->Controls->Add(this->checkBox9);
			this->tabPage8->Controls->Add(this->button31);
			this->tabPage8->Controls->Add(this->label169);
			this->tabPage8->Controls->Add(this->textBox51);
			this->tabPage8->Controls->Add(this->label154);
			this->tabPage8->Controls->Add(this->button20);
			this->tabPage8->Controls->Add(this->label155);
			this->tabPage8->Controls->Add(this->button21);
			this->tabPage8->Controls->Add(this->label132);
			this->tabPage8->Controls->Add(this->label133);
			this->tabPage8->Controls->Add(this->label134);
			this->tabPage8->Controls->Add(this->label135);
			this->tabPage8->Controls->Add(this->label136);
			this->tabPage8->Controls->Add(this->label137);
			this->tabPage8->Controls->Add(this->label138);
			this->tabPage8->Controls->Add(this->dataGridView17);
			this->tabPage8->Controls->Add(this->label71);
			this->tabPage8->Controls->Add(this->label72);
			this->tabPage8->Controls->Add(this->label73);
			this->tabPage8->Controls->Add(this->label74);
			this->tabPage8->Controls->Add(this->label75);
			this->tabPage8->Controls->Add(this->label76);
			this->tabPage8->Controls->Add(this->label77);
			this->tabPage8->Controls->Add(this->label78);
			this->tabPage8->Controls->Add(this->label79);
			this->tabPage8->Controls->Add(this->textBox36);
			this->tabPage8->Controls->Add(this->textBox37);
			this->tabPage8->Controls->Add(this->textBox38);
			this->tabPage8->Controls->Add(this->textBox39);
			this->tabPage8->Controls->Add(this->textBox40);
			this->tabPage8->Controls->Add(this->dataGridView8);
			this->tabPage8->Location = System::Drawing::Point(4, 22);
			this->tabPage8->Margin = System::Windows::Forms::Padding(2);
			this->tabPage8->Name = L"tabPage8";
			this->tabPage8->Padding = System::Windows::Forms::Padding(2);
			this->tabPage8->Size = System::Drawing::Size(698, 555);
			this->tabPage8->TabIndex = 7;
			this->tabPage8->Text = L"Floor 7";
			this->tabPage8->UseVisualStyleBackColor = true;
			// 
			// checkBox17
			// 
			this->checkBox17->AutoSize = true;
			this->checkBox17->Location = System::Drawing::Point(560, 496);
			this->checkBox17->Name = L"checkBox17";
			this->checkBox17->Size = System::Drawing::Size(96, 17);
			this->checkBox17->TabIndex = 91;
			this->checkBox17->Text = L"Show teleports";
			this->checkBox17->UseVisualStyleBackColor = true;
			this->checkBox17->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox17_CheckedChanged);
			// 
			// checkBox9
			// 
			this->checkBox9->AutoSize = true;
			this->checkBox9->Location = System::Drawing::Point(560, 475);
			this->checkBox9->Name = L"checkBox9";
			this->checkBox9->Size = System::Drawing::Size(136, 17);
			this->checkBox9->TabIndex = 88;
			this->checkBox9->Text = L"Show cubes with doors";
			this->checkBox9->UseVisualStyleBackColor = true;
			this->checkBox9->CheckedChanged += gcnew System::EventHandler(this, &Form1::checkBox9_CheckedChanged);
			// 
			// button31
			// 
			this->button31->Enabled = false;
			this->button31->Location = System::Drawing::Point(610, 390);
			this->button31->Name = L"button31";
			this->button31->Size = System::Drawing::Size(32, 20);
			this->button31->TabIndex = 77;
			this->button31->Text = L"OK";
			this->button31->UseVisualStyleBackColor = true;
			this->button31->Click += gcnew System::EventHandler(this, &Form1::button31_Click);
			// 
			// label169
			// 
			this->label169->AutoSize = true;
			this->label169->Location = System::Drawing::Point(533, 373);
			this->label169->Name = L"label169";
			this->label169->Size = System::Drawing::Size(69, 13);
			this->label169->TabIndex = 76;
			this->label169->Text = L"Cube N (hex)";
			// 
			// textBox51
			// 
			this->textBox51->Location = System::Drawing::Point(533, 390);
			this->textBox51->MaxLength = 3;
			this->textBox51->Name = L"textBox51";
			this->textBox51->Size = System::Drawing::Size(70, 20);
			this->textBox51->TabIndex = 75;
			// 
			// label154
			// 
			this->label154->AutoSize = true;
			this->label154->Location = System::Drawing::Point(556, 434);
			this->label154->Name = L"label154";
			this->label154->Size = System::Drawing::Size(47, 13);
			this->label154->TabIndex = 74;
			this->label154->Text = L"label154";
			// 
			// button20
			// 
			this->button20->Location = System::Drawing::Point(475, 424);
			this->button20->Name = L"button20";
			this->button20->Size = System::Drawing::Size(75, 23);
			this->button20->TabIndex = 73;
			this->button20->Text = L"Edit value";
			this->button20->UseVisualStyleBackColor = true;
			this->button20->Click += gcnew System::EventHandler(this, &Form1::button20_Click);
			// 
			// label155
			// 
			this->label155->AutoSize = true;
			this->label155->Location = System::Drawing::Point(503, 458);
			this->label155->Name = L"label155";
			this->label155->Size = System::Drawing::Size(47, 13);
			this->label155->TabIndex = 72;
			this->label155->Text = L"label155";
			// 
			// button21
			// 
			this->button21->Location = System::Drawing::Point(428, 448);
			this->button21->Name = L"button21";
			this->button21->Size = System::Drawing::Size(75, 23);
			this->button21->TabIndex = 71;
			this->button21->Text = L"Edit value";
			this->button21->UseVisualStyleBackColor = true;
			this->button21->Click += gcnew System::EventHandler(this, &Form1::button21_Click);
			// 
			// label132
			// 
			this->label132->AutoSize = true;
			this->label132->Location = System::Drawing::Point(436, 369);
			this->label132->Name = L"label132";
			this->label132->Size = System::Drawing::Size(31, 13);
			this->label132->TabIndex = 70;
			this->label132->Text = L"0123";
			// 
			// label133
			// 
			this->label133->AutoSize = true;
			this->label133->Location = System::Drawing::Point(376, 356);
			this->label133->Name = L"label133";
			this->label133->Size = System::Drawing::Size(67, 13);
			this->label133->TabIndex = 69;
			this->label133->Text = L"0123456789";
			// 
			// label134
			// 
			this->label134->AutoSize = true;
			this->label134->Location = System::Drawing::Point(316, 369);
			this->label134->Name = L"label134";
			this->label134->Size = System::Drawing::Size(67, 13);
			this->label134->TabIndex = 68;
			this->label134->Text = L"0123456789";
			// 
			// label135
			// 
			this->label135->AutoSize = true;
			this->label135->Location = System::Drawing::Point(256, 356);
			this->label135->Name = L"label135";
			this->label135->Size = System::Drawing::Size(67, 13);
			this->label135->TabIndex = 67;
			this->label135->Text = L"0123456789";
			// 
			// label136
			// 
			this->label136->AutoSize = true;
			this->label136->Location = System::Drawing::Point(197, 367);
			this->label136->Name = L"label136";
			this->label136->Size = System::Drawing::Size(67, 13);
			this->label136->TabIndex = 66;
			this->label136->Text = L"0123456789";
			// 
			// label137
			// 
			this->label137->AutoSize = true;
			this->label137->Location = System::Drawing::Point(135, 356);
			this->label137->Name = L"label137";
			this->label137->Size = System::Drawing::Size(67, 13);
			this->label137->TabIndex = 65;
			this->label137->Text = L"0123456789";
			// 
			// label138
			// 
			this->label138->AutoSize = true;
			this->label138->Location = System::Drawing::Point(75, 367);
			this->label138->Name = L"label138";
			this->label138->Size = System::Drawing::Size(67, 13);
			this->label138->TabIndex = 64;
			this->label138->Text = L"0123456789";
			// 
			// dataGridView17
			// 
			this->dataGridView17->AllowDrop = true;
			this->dataGridView17->AllowUserToAddRows = false;
			this->dataGridView17->AllowUserToDeleteRows = false;
			this->dataGridView17->AllowUserToResizeColumns = false;
			this->dataGridView17->AllowUserToResizeRows = false;
			this->dataGridView17->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView17->ColumnHeadersVisible = false;
			this->dataGridView17->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn897, 
				this->dataGridViewTextBoxColumn898, this->dataGridViewTextBoxColumn899, this->dataGridViewTextBoxColumn900, this->dataGridViewTextBoxColumn901, 
				this->dataGridViewTextBoxColumn902, this->dataGridViewTextBoxColumn903, this->dataGridViewTextBoxColumn904, this->dataGridViewTextBoxColumn905, 
				this->dataGridViewTextBoxColumn906, this->dataGridViewTextBoxColumn907, this->dataGridViewTextBoxColumn908, this->dataGridViewTextBoxColumn909, 
				this->dataGridViewTextBoxColumn910, this->dataGridViewTextBoxColumn911, this->dataGridViewTextBoxColumn912, this->dataGridViewTextBoxColumn913, 
				this->dataGridViewTextBoxColumn914, this->dataGridViewTextBoxColumn915, this->dataGridViewTextBoxColumn916, this->dataGridViewTextBoxColumn917, 
				this->dataGridViewTextBoxColumn918, this->dataGridViewTextBoxColumn919, this->dataGridViewTextBoxColumn920, this->dataGridViewTextBoxColumn921, 
				this->dataGridViewTextBoxColumn922, this->dataGridViewTextBoxColumn923, this->dataGridViewTextBoxColumn924, this->dataGridViewTextBoxColumn925, 
				this->dataGridViewTextBoxColumn926, this->dataGridViewTextBoxColumn927, this->dataGridViewTextBoxColumn928, this->dataGridViewTextBoxColumn929, 
				this->dataGridViewTextBoxColumn930, this->dataGridViewTextBoxColumn931, this->dataGridViewTextBoxColumn932, this->dataGridViewTextBoxColumn933, 
				this->dataGridViewTextBoxColumn934, this->dataGridViewTextBoxColumn935, this->dataGridViewTextBoxColumn936, this->dataGridViewTextBoxColumn937, 
				this->dataGridViewTextBoxColumn938, this->dataGridViewTextBoxColumn939, this->dataGridViewTextBoxColumn940, this->dataGridViewTextBoxColumn941, 
				this->dataGridViewTextBoxColumn942, this->dataGridViewTextBoxColumn943, this->dataGridViewTextBoxColumn944, this->dataGridViewTextBoxColumn945, 
				this->dataGridViewTextBoxColumn946, this->dataGridViewTextBoxColumn947, this->dataGridViewTextBoxColumn948, this->dataGridViewTextBoxColumn949, 
				this->dataGridViewTextBoxColumn950, this->dataGridViewTextBoxColumn951, this->dataGridViewTextBoxColumn952, this->dataGridViewTextBoxColumn953, 
				this->dataGridViewTextBoxColumn954, this->dataGridViewTextBoxColumn955, this->dataGridViewTextBoxColumn956, this->dataGridViewTextBoxColumn957, 
				this->dataGridViewTextBoxColumn958, this->dataGridViewTextBoxColumn959, this->dataGridViewTextBoxColumn960});
			this->dataGridView17->Location = System::Drawing::Point(77, 383);
			this->dataGridView17->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView17->Name = L"dataGridView17";
			this->dataGridView17->ReadOnly = true;
			this->dataGridView17->RowHeadersVisible = false;
			this->dataGridView17->RowHeadersWidth = 15;
			dataGridViewCellStyle15->BackColor = System::Drawing::Color::White;
			this->dataGridView17->RowsDefaultCellStyle = dataGridViewCellStyle15;
			this->dataGridView17->RowTemplate->Height = 35;
			this->dataGridView17->Size = System::Drawing::Size(390, 41);
			this->dataGridView17->TabIndex = 63;
			// 
			// dataGridViewTextBoxColumn897
			// 
			this->dataGridViewTextBoxColumn897->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn897->Name = L"dataGridViewTextBoxColumn897";
			this->dataGridViewTextBoxColumn897->ReadOnly = true;
			this->dataGridViewTextBoxColumn897->Width = 6;
			// 
			// dataGridViewTextBoxColumn898
			// 
			this->dataGridViewTextBoxColumn898->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn898->Name = L"dataGridViewTextBoxColumn898";
			this->dataGridViewTextBoxColumn898->ReadOnly = true;
			this->dataGridViewTextBoxColumn898->Width = 6;
			// 
			// dataGridViewTextBoxColumn899
			// 
			this->dataGridViewTextBoxColumn899->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn899->Name = L"dataGridViewTextBoxColumn899";
			this->dataGridViewTextBoxColumn899->ReadOnly = true;
			this->dataGridViewTextBoxColumn899->Width = 6;
			// 
			// dataGridViewTextBoxColumn900
			// 
			this->dataGridViewTextBoxColumn900->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn900->Name = L"dataGridViewTextBoxColumn900";
			this->dataGridViewTextBoxColumn900->ReadOnly = true;
			this->dataGridViewTextBoxColumn900->Width = 6;
			// 
			// dataGridViewTextBoxColumn901
			// 
			this->dataGridViewTextBoxColumn901->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn901->Name = L"dataGridViewTextBoxColumn901";
			this->dataGridViewTextBoxColumn901->ReadOnly = true;
			this->dataGridViewTextBoxColumn901->Width = 6;
			// 
			// dataGridViewTextBoxColumn902
			// 
			this->dataGridViewTextBoxColumn902->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn902->Name = L"dataGridViewTextBoxColumn902";
			this->dataGridViewTextBoxColumn902->ReadOnly = true;
			this->dataGridViewTextBoxColumn902->Width = 6;
			// 
			// dataGridViewTextBoxColumn903
			// 
			this->dataGridViewTextBoxColumn903->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn903->Name = L"dataGridViewTextBoxColumn903";
			this->dataGridViewTextBoxColumn903->ReadOnly = true;
			this->dataGridViewTextBoxColumn903->Width = 6;
			// 
			// dataGridViewTextBoxColumn904
			// 
			this->dataGridViewTextBoxColumn904->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn904->Name = L"dataGridViewTextBoxColumn904";
			this->dataGridViewTextBoxColumn904->ReadOnly = true;
			this->dataGridViewTextBoxColumn904->Width = 6;
			// 
			// dataGridViewTextBoxColumn905
			// 
			this->dataGridViewTextBoxColumn905->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn905->Name = L"dataGridViewTextBoxColumn905";
			this->dataGridViewTextBoxColumn905->ReadOnly = true;
			this->dataGridViewTextBoxColumn905->Width = 6;
			// 
			// dataGridViewTextBoxColumn906
			// 
			this->dataGridViewTextBoxColumn906->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn906->Name = L"dataGridViewTextBoxColumn906";
			this->dataGridViewTextBoxColumn906->ReadOnly = true;
			this->dataGridViewTextBoxColumn906->Width = 6;
			// 
			// dataGridViewTextBoxColumn907
			// 
			this->dataGridViewTextBoxColumn907->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn907->Name = L"dataGridViewTextBoxColumn907";
			this->dataGridViewTextBoxColumn907->ReadOnly = true;
			this->dataGridViewTextBoxColumn907->Width = 6;
			// 
			// dataGridViewTextBoxColumn908
			// 
			this->dataGridViewTextBoxColumn908->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn908->Name = L"dataGridViewTextBoxColumn908";
			this->dataGridViewTextBoxColumn908->ReadOnly = true;
			this->dataGridViewTextBoxColumn908->Width = 6;
			// 
			// dataGridViewTextBoxColumn909
			// 
			this->dataGridViewTextBoxColumn909->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn909->Name = L"dataGridViewTextBoxColumn909";
			this->dataGridViewTextBoxColumn909->ReadOnly = true;
			this->dataGridViewTextBoxColumn909->Width = 6;
			// 
			// dataGridViewTextBoxColumn910
			// 
			this->dataGridViewTextBoxColumn910->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn910->Name = L"dataGridViewTextBoxColumn910";
			this->dataGridViewTextBoxColumn910->ReadOnly = true;
			this->dataGridViewTextBoxColumn910->Width = 6;
			// 
			// dataGridViewTextBoxColumn911
			// 
			this->dataGridViewTextBoxColumn911->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn911->Name = L"dataGridViewTextBoxColumn911";
			this->dataGridViewTextBoxColumn911->ReadOnly = true;
			this->dataGridViewTextBoxColumn911->Width = 6;
			// 
			// dataGridViewTextBoxColumn912
			// 
			this->dataGridViewTextBoxColumn912->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn912->Name = L"dataGridViewTextBoxColumn912";
			this->dataGridViewTextBoxColumn912->ReadOnly = true;
			this->dataGridViewTextBoxColumn912->Width = 6;
			// 
			// dataGridViewTextBoxColumn913
			// 
			this->dataGridViewTextBoxColumn913->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn913->Name = L"dataGridViewTextBoxColumn913";
			this->dataGridViewTextBoxColumn913->ReadOnly = true;
			this->dataGridViewTextBoxColumn913->Width = 6;
			// 
			// dataGridViewTextBoxColumn914
			// 
			this->dataGridViewTextBoxColumn914->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn914->Name = L"dataGridViewTextBoxColumn914";
			this->dataGridViewTextBoxColumn914->ReadOnly = true;
			this->dataGridViewTextBoxColumn914->Width = 6;
			// 
			// dataGridViewTextBoxColumn915
			// 
			this->dataGridViewTextBoxColumn915->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn915->Name = L"dataGridViewTextBoxColumn915";
			this->dataGridViewTextBoxColumn915->ReadOnly = true;
			this->dataGridViewTextBoxColumn915->Width = 6;
			// 
			// dataGridViewTextBoxColumn916
			// 
			this->dataGridViewTextBoxColumn916->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn916->Name = L"dataGridViewTextBoxColumn916";
			this->dataGridViewTextBoxColumn916->ReadOnly = true;
			this->dataGridViewTextBoxColumn916->Width = 6;
			// 
			// dataGridViewTextBoxColumn917
			// 
			this->dataGridViewTextBoxColumn917->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn917->Name = L"dataGridViewTextBoxColumn917";
			this->dataGridViewTextBoxColumn917->ReadOnly = true;
			this->dataGridViewTextBoxColumn917->Width = 6;
			// 
			// dataGridViewTextBoxColumn918
			// 
			this->dataGridViewTextBoxColumn918->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn918->Name = L"dataGridViewTextBoxColumn918";
			this->dataGridViewTextBoxColumn918->ReadOnly = true;
			this->dataGridViewTextBoxColumn918->Width = 6;
			// 
			// dataGridViewTextBoxColumn919
			// 
			this->dataGridViewTextBoxColumn919->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn919->Name = L"dataGridViewTextBoxColumn919";
			this->dataGridViewTextBoxColumn919->ReadOnly = true;
			this->dataGridViewTextBoxColumn919->Width = 6;
			// 
			// dataGridViewTextBoxColumn920
			// 
			this->dataGridViewTextBoxColumn920->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn920->Name = L"dataGridViewTextBoxColumn920";
			this->dataGridViewTextBoxColumn920->ReadOnly = true;
			this->dataGridViewTextBoxColumn920->Width = 6;
			// 
			// dataGridViewTextBoxColumn921
			// 
			this->dataGridViewTextBoxColumn921->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn921->Name = L"dataGridViewTextBoxColumn921";
			this->dataGridViewTextBoxColumn921->ReadOnly = true;
			this->dataGridViewTextBoxColumn921->Width = 6;
			// 
			// dataGridViewTextBoxColumn922
			// 
			this->dataGridViewTextBoxColumn922->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn922->Name = L"dataGridViewTextBoxColumn922";
			this->dataGridViewTextBoxColumn922->ReadOnly = true;
			this->dataGridViewTextBoxColumn922->Width = 6;
			// 
			// dataGridViewTextBoxColumn923
			// 
			this->dataGridViewTextBoxColumn923->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn923->Name = L"dataGridViewTextBoxColumn923";
			this->dataGridViewTextBoxColumn923->ReadOnly = true;
			this->dataGridViewTextBoxColumn923->Width = 6;
			// 
			// dataGridViewTextBoxColumn924
			// 
			this->dataGridViewTextBoxColumn924->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn924->Name = L"dataGridViewTextBoxColumn924";
			this->dataGridViewTextBoxColumn924->ReadOnly = true;
			this->dataGridViewTextBoxColumn924->Width = 6;
			// 
			// dataGridViewTextBoxColumn925
			// 
			this->dataGridViewTextBoxColumn925->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn925->Name = L"dataGridViewTextBoxColumn925";
			this->dataGridViewTextBoxColumn925->ReadOnly = true;
			this->dataGridViewTextBoxColumn925->Width = 6;
			// 
			// dataGridViewTextBoxColumn926
			// 
			this->dataGridViewTextBoxColumn926->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn926->Name = L"dataGridViewTextBoxColumn926";
			this->dataGridViewTextBoxColumn926->ReadOnly = true;
			this->dataGridViewTextBoxColumn926->Width = 6;
			// 
			// dataGridViewTextBoxColumn927
			// 
			this->dataGridViewTextBoxColumn927->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn927->Name = L"dataGridViewTextBoxColumn927";
			this->dataGridViewTextBoxColumn927->ReadOnly = true;
			this->dataGridViewTextBoxColumn927->Width = 6;
			// 
			// dataGridViewTextBoxColumn928
			// 
			this->dataGridViewTextBoxColumn928->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn928->Name = L"dataGridViewTextBoxColumn928";
			this->dataGridViewTextBoxColumn928->ReadOnly = true;
			this->dataGridViewTextBoxColumn928->Width = 6;
			// 
			// dataGridViewTextBoxColumn929
			// 
			this->dataGridViewTextBoxColumn929->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn929->Name = L"dataGridViewTextBoxColumn929";
			this->dataGridViewTextBoxColumn929->ReadOnly = true;
			this->dataGridViewTextBoxColumn929->Width = 6;
			// 
			// dataGridViewTextBoxColumn930
			// 
			this->dataGridViewTextBoxColumn930->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn930->Name = L"dataGridViewTextBoxColumn930";
			this->dataGridViewTextBoxColumn930->ReadOnly = true;
			this->dataGridViewTextBoxColumn930->Width = 6;
			// 
			// dataGridViewTextBoxColumn931
			// 
			this->dataGridViewTextBoxColumn931->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn931->Name = L"dataGridViewTextBoxColumn931";
			this->dataGridViewTextBoxColumn931->ReadOnly = true;
			this->dataGridViewTextBoxColumn931->Width = 6;
			// 
			// dataGridViewTextBoxColumn932
			// 
			this->dataGridViewTextBoxColumn932->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn932->Name = L"dataGridViewTextBoxColumn932";
			this->dataGridViewTextBoxColumn932->ReadOnly = true;
			this->dataGridViewTextBoxColumn932->Width = 6;
			// 
			// dataGridViewTextBoxColumn933
			// 
			this->dataGridViewTextBoxColumn933->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn933->Name = L"dataGridViewTextBoxColumn933";
			this->dataGridViewTextBoxColumn933->ReadOnly = true;
			this->dataGridViewTextBoxColumn933->Width = 6;
			// 
			// dataGridViewTextBoxColumn934
			// 
			this->dataGridViewTextBoxColumn934->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn934->Name = L"dataGridViewTextBoxColumn934";
			this->dataGridViewTextBoxColumn934->ReadOnly = true;
			this->dataGridViewTextBoxColumn934->Width = 6;
			// 
			// dataGridViewTextBoxColumn935
			// 
			this->dataGridViewTextBoxColumn935->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn935->Name = L"dataGridViewTextBoxColumn935";
			this->dataGridViewTextBoxColumn935->ReadOnly = true;
			this->dataGridViewTextBoxColumn935->Width = 6;
			// 
			// dataGridViewTextBoxColumn936
			// 
			this->dataGridViewTextBoxColumn936->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn936->Name = L"dataGridViewTextBoxColumn936";
			this->dataGridViewTextBoxColumn936->ReadOnly = true;
			this->dataGridViewTextBoxColumn936->Width = 6;
			// 
			// dataGridViewTextBoxColumn937
			// 
			this->dataGridViewTextBoxColumn937->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn937->Name = L"dataGridViewTextBoxColumn937";
			this->dataGridViewTextBoxColumn937->ReadOnly = true;
			this->dataGridViewTextBoxColumn937->Width = 6;
			// 
			// dataGridViewTextBoxColumn938
			// 
			this->dataGridViewTextBoxColumn938->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn938->Name = L"dataGridViewTextBoxColumn938";
			this->dataGridViewTextBoxColumn938->ReadOnly = true;
			this->dataGridViewTextBoxColumn938->Width = 6;
			// 
			// dataGridViewTextBoxColumn939
			// 
			this->dataGridViewTextBoxColumn939->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn939->Name = L"dataGridViewTextBoxColumn939";
			this->dataGridViewTextBoxColumn939->ReadOnly = true;
			this->dataGridViewTextBoxColumn939->Width = 6;
			// 
			// dataGridViewTextBoxColumn940
			// 
			this->dataGridViewTextBoxColumn940->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn940->Name = L"dataGridViewTextBoxColumn940";
			this->dataGridViewTextBoxColumn940->ReadOnly = true;
			this->dataGridViewTextBoxColumn940->Width = 6;
			// 
			// dataGridViewTextBoxColumn941
			// 
			this->dataGridViewTextBoxColumn941->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn941->Name = L"dataGridViewTextBoxColumn941";
			this->dataGridViewTextBoxColumn941->ReadOnly = true;
			this->dataGridViewTextBoxColumn941->Width = 6;
			// 
			// dataGridViewTextBoxColumn942
			// 
			this->dataGridViewTextBoxColumn942->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn942->Name = L"dataGridViewTextBoxColumn942";
			this->dataGridViewTextBoxColumn942->ReadOnly = true;
			this->dataGridViewTextBoxColumn942->Width = 6;
			// 
			// dataGridViewTextBoxColumn943
			// 
			this->dataGridViewTextBoxColumn943->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn943->Name = L"dataGridViewTextBoxColumn943";
			this->dataGridViewTextBoxColumn943->ReadOnly = true;
			this->dataGridViewTextBoxColumn943->Width = 6;
			// 
			// dataGridViewTextBoxColumn944
			// 
			this->dataGridViewTextBoxColumn944->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn944->Name = L"dataGridViewTextBoxColumn944";
			this->dataGridViewTextBoxColumn944->ReadOnly = true;
			this->dataGridViewTextBoxColumn944->Width = 6;
			// 
			// dataGridViewTextBoxColumn945
			// 
			this->dataGridViewTextBoxColumn945->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn945->Name = L"dataGridViewTextBoxColumn945";
			this->dataGridViewTextBoxColumn945->ReadOnly = true;
			this->dataGridViewTextBoxColumn945->Width = 6;
			// 
			// dataGridViewTextBoxColumn946
			// 
			this->dataGridViewTextBoxColumn946->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn946->Name = L"dataGridViewTextBoxColumn946";
			this->dataGridViewTextBoxColumn946->ReadOnly = true;
			this->dataGridViewTextBoxColumn946->Width = 6;
			// 
			// dataGridViewTextBoxColumn947
			// 
			this->dataGridViewTextBoxColumn947->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn947->Name = L"dataGridViewTextBoxColumn947";
			this->dataGridViewTextBoxColumn947->ReadOnly = true;
			this->dataGridViewTextBoxColumn947->Width = 6;
			// 
			// dataGridViewTextBoxColumn948
			// 
			this->dataGridViewTextBoxColumn948->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn948->Name = L"dataGridViewTextBoxColumn948";
			this->dataGridViewTextBoxColumn948->ReadOnly = true;
			this->dataGridViewTextBoxColumn948->Width = 6;
			// 
			// dataGridViewTextBoxColumn949
			// 
			this->dataGridViewTextBoxColumn949->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn949->Name = L"dataGridViewTextBoxColumn949";
			this->dataGridViewTextBoxColumn949->ReadOnly = true;
			this->dataGridViewTextBoxColumn949->Width = 6;
			// 
			// dataGridViewTextBoxColumn950
			// 
			this->dataGridViewTextBoxColumn950->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn950->Name = L"dataGridViewTextBoxColumn950";
			this->dataGridViewTextBoxColumn950->ReadOnly = true;
			this->dataGridViewTextBoxColumn950->Width = 6;
			// 
			// dataGridViewTextBoxColumn951
			// 
			this->dataGridViewTextBoxColumn951->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn951->Name = L"dataGridViewTextBoxColumn951";
			this->dataGridViewTextBoxColumn951->ReadOnly = true;
			this->dataGridViewTextBoxColumn951->Width = 6;
			// 
			// dataGridViewTextBoxColumn952
			// 
			this->dataGridViewTextBoxColumn952->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn952->Name = L"dataGridViewTextBoxColumn952";
			this->dataGridViewTextBoxColumn952->ReadOnly = true;
			this->dataGridViewTextBoxColumn952->Width = 6;
			// 
			// dataGridViewTextBoxColumn953
			// 
			this->dataGridViewTextBoxColumn953->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn953->Name = L"dataGridViewTextBoxColumn953";
			this->dataGridViewTextBoxColumn953->ReadOnly = true;
			this->dataGridViewTextBoxColumn953->Width = 6;
			// 
			// dataGridViewTextBoxColumn954
			// 
			this->dataGridViewTextBoxColumn954->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn954->Name = L"dataGridViewTextBoxColumn954";
			this->dataGridViewTextBoxColumn954->ReadOnly = true;
			this->dataGridViewTextBoxColumn954->Width = 6;
			// 
			// dataGridViewTextBoxColumn955
			// 
			this->dataGridViewTextBoxColumn955->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn955->Name = L"dataGridViewTextBoxColumn955";
			this->dataGridViewTextBoxColumn955->ReadOnly = true;
			this->dataGridViewTextBoxColumn955->Width = 6;
			// 
			// dataGridViewTextBoxColumn956
			// 
			this->dataGridViewTextBoxColumn956->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn956->Name = L"dataGridViewTextBoxColumn956";
			this->dataGridViewTextBoxColumn956->ReadOnly = true;
			this->dataGridViewTextBoxColumn956->Width = 6;
			// 
			// dataGridViewTextBoxColumn957
			// 
			this->dataGridViewTextBoxColumn957->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn957->Name = L"dataGridViewTextBoxColumn957";
			this->dataGridViewTextBoxColumn957->ReadOnly = true;
			this->dataGridViewTextBoxColumn957->Width = 6;
			// 
			// dataGridViewTextBoxColumn958
			// 
			this->dataGridViewTextBoxColumn958->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn958->Name = L"dataGridViewTextBoxColumn958";
			this->dataGridViewTextBoxColumn958->ReadOnly = true;
			this->dataGridViewTextBoxColumn958->Width = 6;
			// 
			// dataGridViewTextBoxColumn959
			// 
			this->dataGridViewTextBoxColumn959->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn959->Name = L"dataGridViewTextBoxColumn959";
			this->dataGridViewTextBoxColumn959->ReadOnly = true;
			this->dataGridViewTextBoxColumn959->Width = 6;
			// 
			// dataGridViewTextBoxColumn960
			// 
			this->dataGridViewTextBoxColumn960->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn960->Name = L"dataGridViewTextBoxColumn960";
			this->dataGridViewTextBoxColumn960->ReadOnly = true;
			this->dataGridViewTextBoxColumn960->Width = 6;
			// 
			// label71
			// 
			this->label71->AutoSize = true;
			this->label71->Location = System::Drawing::Point(74, 501);
			this->label71->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label71->Name = L"label71";
			this->label71->Size = System::Drawing::Size(78, 13);
			this->label71->TabIndex = 61;
			this->label71->Text = L"Voxel Pos (Val)";
			// 
			// label72
			// 
			this->label72->AutoSize = true;
			this->label72->Location = System::Drawing::Point(318, 501);
			this->label72->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label72->Name = L"label72";
			this->label72->Size = System::Drawing::Size(35, 13);
			this->label72->TabIndex = 60;
			this->label72->Text = L"Pos Y";
			// 
			// label73
			// 
			this->label73->AutoSize = true;
			this->label73->Location = System::Drawing::Point(227, 501);
			this->label73->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label73->Name = L"label73";
			this->label73->Size = System::Drawing::Size(35, 13);
			this->label73->TabIndex = 59;
			this->label73->Text = L"Pos X";
			// 
			// label74
			// 
			this->label74->AutoSize = true;
			this->label74->Location = System::Drawing::Point(30, 452);
			this->label74->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label74->Name = L"label74";
			this->label74->Size = System::Drawing::Size(43, 13);
			this->label74->TabIndex = 58;
			this->label74->Text = L"HEX 0x";
			// 
			// label75
			// 
			this->label75->AutoSize = true;
			this->label75->Location = System::Drawing::Point(44, 430);
			this->label75->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label75->Name = L"label75";
			this->label75->Size = System::Drawing::Size(27, 13);
			this->label75->TabIndex = 57;
			this->label75->Text = L"Bits:";
			// 
			// label76
			// 
			this->label76->AutoSize = true;
			this->label76->Location = System::Drawing::Point(18, 402);
			this->label76->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label76->Name = L"label76";
			this->label76->Size = System::Drawing::Size(20, 13);
			this->label76->TabIndex = 56;
			this->label76->Text = L"Y=";
			// 
			// label77
			// 
			this->label77->AutoSize = true;
			this->label77->Location = System::Drawing::Point(18, 373);
			this->label77->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label77->Name = L"label77";
			this->label77->Size = System::Drawing::Size(20, 13);
			this->label77->TabIndex = 55;
			this->label77->Text = L"X=";
			// 
			// label78
			// 
			this->label78->AutoSize = true;
			this->label78->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label78->Location = System::Drawing::Point(34, 403);
			this->label78->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label78->Name = L"label78";
			this->label78->Size = System::Drawing::Size(21, 13);
			this->label78->TabIndex = 54;
			this->label78->Text = L"__";
			// 
			// label79
			// 
			this->label79->AutoSize = true;
			this->label79->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label79->Location = System::Drawing::Point(34, 373);
			this->label79->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label79->Name = L"label79";
			this->label79->Size = System::Drawing::Size(21, 13);
			this->label79->TabIndex = 53;
			this->label79->Text = L"__";
			// 
			// textBox36
			// 
			this->textBox36->Location = System::Drawing::Point(77, 516);
			this->textBox36->Margin = System::Windows::Forms::Padding(2);
			this->textBox36->Name = L"textBox36";
			this->textBox36->Size = System::Drawing::Size(76, 20);
			this->textBox36->TabIndex = 52;
			// 
			// textBox37
			// 
			this->textBox37->Location = System::Drawing::Point(230, 516);
			this->textBox37->Margin = System::Windows::Forms::Padding(2);
			this->textBox37->Name = L"textBox37";
			this->textBox37->Size = System::Drawing::Size(76, 20);
			this->textBox37->TabIndex = 51;
			// 
			// textBox38
			// 
			this->textBox38->Location = System::Drawing::Point(321, 516);
			this->textBox38->Margin = System::Windows::Forms::Padding(2);
			this->textBox38->Name = L"textBox38";
			this->textBox38->Size = System::Drawing::Size(76, 20);
			this->textBox38->TabIndex = 50;
			// 
			// textBox39
			// 
			this->textBox39->Location = System::Drawing::Point(75, 448);
			this->textBox39->Margin = System::Windows::Forms::Padding(2);
			this->textBox39->MaxLength = 16;
			this->textBox39->Name = L"textBox39";
			this->textBox39->Size = System::Drawing::Size(349, 20);
			this->textBox39->TabIndex = 49;
			// 
			// textBox40
			// 
			this->textBox40->Location = System::Drawing::Point(75, 425);
			this->textBox40->Margin = System::Windows::Forms::Padding(2);
			this->textBox40->MaxLength = 64;
			this->textBox40->Name = L"textBox40";
			this->textBox40->Size = System::Drawing::Size(397, 20);
			this->textBox40->TabIndex = 48;
			// 
			// dataGridView8
			// 
			this->dataGridView8->AllowDrop = true;
			this->dataGridView8->AllowUserToAddRows = false;
			this->dataGridView8->AllowUserToDeleteRows = false;
			this->dataGridView8->AllowUserToResizeColumns = false;
			this->dataGridView8->AllowUserToResizeRows = false;
			this->dataGridView8->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView8->ColumnHeadersVisible = false;
			this->dataGridView8->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(64) {this->dataGridViewTextBoxColumn385, 
				this->dataGridViewTextBoxColumn386, this->dataGridViewTextBoxColumn387, this->dataGridViewTextBoxColumn388, this->dataGridViewTextBoxColumn389, 
				this->dataGridViewTextBoxColumn390, this->dataGridViewTextBoxColumn391, this->dataGridViewTextBoxColumn392, this->dataGridViewTextBoxColumn393, 
				this->dataGridViewTextBoxColumn394, this->dataGridViewTextBoxColumn395, this->dataGridViewTextBoxColumn396, this->dataGridViewTextBoxColumn397, 
				this->dataGridViewTextBoxColumn398, this->dataGridViewTextBoxColumn399, this->dataGridViewTextBoxColumn400, this->dataGridViewTextBoxColumn401, 
				this->dataGridViewTextBoxColumn402, this->dataGridViewTextBoxColumn403, this->dataGridViewTextBoxColumn404, this->dataGridViewTextBoxColumn405, 
				this->dataGridViewTextBoxColumn406, this->dataGridViewTextBoxColumn407, this->dataGridViewTextBoxColumn408, this->dataGridViewTextBoxColumn409, 
				this->dataGridViewTextBoxColumn410, this->dataGridViewTextBoxColumn411, this->dataGridViewTextBoxColumn412, this->dataGridViewTextBoxColumn413, 
				this->dataGridViewTextBoxColumn414, this->dataGridViewTextBoxColumn415, this->dataGridViewTextBoxColumn416, this->dataGridViewTextBoxColumn417, 
				this->dataGridViewTextBoxColumn418, this->dataGridViewTextBoxColumn419, this->dataGridViewTextBoxColumn420, this->dataGridViewTextBoxColumn421, 
				this->dataGridViewTextBoxColumn422, this->dataGridViewTextBoxColumn423, this->dataGridViewTextBoxColumn424, this->dataGridViewTextBoxColumn425, 
				this->dataGridViewTextBoxColumn426, this->dataGridViewTextBoxColumn427, this->dataGridViewTextBoxColumn428, this->dataGridViewTextBoxColumn429, 
				this->dataGridViewTextBoxColumn430, this->dataGridViewTextBoxColumn431, this->dataGridViewTextBoxColumn432, this->dataGridViewTextBoxColumn433, 
				this->dataGridViewTextBoxColumn434, this->dataGridViewTextBoxColumn435, this->dataGridViewTextBoxColumn436, this->dataGridViewTextBoxColumn437, 
				this->dataGridViewTextBoxColumn438, this->dataGridViewTextBoxColumn439, this->dataGridViewTextBoxColumn440, this->dataGridViewTextBoxColumn441, 
				this->dataGridViewTextBoxColumn442, this->dataGridViewTextBoxColumn443, this->dataGridViewTextBoxColumn444, this->dataGridViewTextBoxColumn445, 
				this->dataGridViewTextBoxColumn446, this->dataGridViewTextBoxColumn447, this->dataGridViewTextBoxColumn448});
			this->dataGridView8->Location = System::Drawing::Point(36, 15);
			this->dataGridView8->Margin = System::Windows::Forms::Padding(2);
			this->dataGridView8->MultiSelect = false;
			this->dataGridView8->Name = L"dataGridView8";
			this->dataGridView8->ReadOnly = true;
			this->dataGridView8->RowHeadersVisible = false;
			this->dataGridView8->RowHeadersWidth = 15;
			dataGridViewCellStyle16->BackColor = System::Drawing::Color::White;
			this->dataGridView8->RowsDefaultCellStyle = dataGridViewCellStyle16;
			this->dataGridView8->RowTemplate->Height = 10;
			this->dataGridView8->Size = System::Drawing::Size(656, 338);
			this->dataGridView8->TabIndex = 32;
			this->dataGridView8->CellMouseClick += gcnew System::Windows::Forms::DataGridViewCellMouseEventHandler(this, &Form1::dataGridView8_CellMouseClick);
			this->dataGridView8->SelectionChanged += gcnew System::EventHandler(this, &Form1::dataGridView8_SelectionChanged);
			// 
			// dataGridViewTextBoxColumn385
			// 
			this->dataGridViewTextBoxColumn385->HeaderText = L"Column1";
			this->dataGridViewTextBoxColumn385->Name = L"dataGridViewTextBoxColumn385";
			this->dataGridViewTextBoxColumn385->ReadOnly = true;
			this->dataGridViewTextBoxColumn385->Width = 10;
			// 
			// dataGridViewTextBoxColumn386
			// 
			this->dataGridViewTextBoxColumn386->HeaderText = L"Column2";
			this->dataGridViewTextBoxColumn386->Name = L"dataGridViewTextBoxColumn386";
			this->dataGridViewTextBoxColumn386->ReadOnly = true;
			this->dataGridViewTextBoxColumn386->Width = 10;
			// 
			// dataGridViewTextBoxColumn387
			// 
			this->dataGridViewTextBoxColumn387->HeaderText = L"Column3";
			this->dataGridViewTextBoxColumn387->Name = L"dataGridViewTextBoxColumn387";
			this->dataGridViewTextBoxColumn387->ReadOnly = true;
			this->dataGridViewTextBoxColumn387->Width = 10;
			// 
			// dataGridViewTextBoxColumn388
			// 
			this->dataGridViewTextBoxColumn388->HeaderText = L"Column4";
			this->dataGridViewTextBoxColumn388->Name = L"dataGridViewTextBoxColumn388";
			this->dataGridViewTextBoxColumn388->ReadOnly = true;
			this->dataGridViewTextBoxColumn388->Width = 10;
			// 
			// dataGridViewTextBoxColumn389
			// 
			this->dataGridViewTextBoxColumn389->HeaderText = L"Column5";
			this->dataGridViewTextBoxColumn389->Name = L"dataGridViewTextBoxColumn389";
			this->dataGridViewTextBoxColumn389->ReadOnly = true;
			this->dataGridViewTextBoxColumn389->Width = 10;
			// 
			// dataGridViewTextBoxColumn390
			// 
			this->dataGridViewTextBoxColumn390->HeaderText = L"Column6";
			this->dataGridViewTextBoxColumn390->Name = L"dataGridViewTextBoxColumn390";
			this->dataGridViewTextBoxColumn390->ReadOnly = true;
			this->dataGridViewTextBoxColumn390->Width = 10;
			// 
			// dataGridViewTextBoxColumn391
			// 
			this->dataGridViewTextBoxColumn391->HeaderText = L"Column7";
			this->dataGridViewTextBoxColumn391->Name = L"dataGridViewTextBoxColumn391";
			this->dataGridViewTextBoxColumn391->ReadOnly = true;
			this->dataGridViewTextBoxColumn391->Width = 10;
			// 
			// dataGridViewTextBoxColumn392
			// 
			this->dataGridViewTextBoxColumn392->HeaderText = L"Column8";
			this->dataGridViewTextBoxColumn392->Name = L"dataGridViewTextBoxColumn392";
			this->dataGridViewTextBoxColumn392->ReadOnly = true;
			this->dataGridViewTextBoxColumn392->Width = 10;
			// 
			// dataGridViewTextBoxColumn393
			// 
			this->dataGridViewTextBoxColumn393->HeaderText = L"Column9";
			this->dataGridViewTextBoxColumn393->Name = L"dataGridViewTextBoxColumn393";
			this->dataGridViewTextBoxColumn393->ReadOnly = true;
			this->dataGridViewTextBoxColumn393->Width = 10;
			// 
			// dataGridViewTextBoxColumn394
			// 
			this->dataGridViewTextBoxColumn394->HeaderText = L"Column10";
			this->dataGridViewTextBoxColumn394->Name = L"dataGridViewTextBoxColumn394";
			this->dataGridViewTextBoxColumn394->ReadOnly = true;
			this->dataGridViewTextBoxColumn394->Width = 10;
			// 
			// dataGridViewTextBoxColumn395
			// 
			this->dataGridViewTextBoxColumn395->HeaderText = L"Column11";
			this->dataGridViewTextBoxColumn395->Name = L"dataGridViewTextBoxColumn395";
			this->dataGridViewTextBoxColumn395->ReadOnly = true;
			this->dataGridViewTextBoxColumn395->Width = 10;
			// 
			// dataGridViewTextBoxColumn396
			// 
			this->dataGridViewTextBoxColumn396->HeaderText = L"Column12";
			this->dataGridViewTextBoxColumn396->Name = L"dataGridViewTextBoxColumn396";
			this->dataGridViewTextBoxColumn396->ReadOnly = true;
			this->dataGridViewTextBoxColumn396->Width = 10;
			// 
			// dataGridViewTextBoxColumn397
			// 
			this->dataGridViewTextBoxColumn397->HeaderText = L"Column13";
			this->dataGridViewTextBoxColumn397->Name = L"dataGridViewTextBoxColumn397";
			this->dataGridViewTextBoxColumn397->ReadOnly = true;
			this->dataGridViewTextBoxColumn397->Width = 10;
			// 
			// dataGridViewTextBoxColumn398
			// 
			this->dataGridViewTextBoxColumn398->HeaderText = L"Column14";
			this->dataGridViewTextBoxColumn398->Name = L"dataGridViewTextBoxColumn398";
			this->dataGridViewTextBoxColumn398->ReadOnly = true;
			this->dataGridViewTextBoxColumn398->Width = 10;
			// 
			// dataGridViewTextBoxColumn399
			// 
			this->dataGridViewTextBoxColumn399->HeaderText = L"Column15";
			this->dataGridViewTextBoxColumn399->Name = L"dataGridViewTextBoxColumn399";
			this->dataGridViewTextBoxColumn399->ReadOnly = true;
			this->dataGridViewTextBoxColumn399->Width = 10;
			// 
			// dataGridViewTextBoxColumn400
			// 
			this->dataGridViewTextBoxColumn400->HeaderText = L"Column16";
			this->dataGridViewTextBoxColumn400->Name = L"dataGridViewTextBoxColumn400";
			this->dataGridViewTextBoxColumn400->ReadOnly = true;
			this->dataGridViewTextBoxColumn400->Width = 10;
			// 
			// dataGridViewTextBoxColumn401
			// 
			this->dataGridViewTextBoxColumn401->HeaderText = L"Column17";
			this->dataGridViewTextBoxColumn401->Name = L"dataGridViewTextBoxColumn401";
			this->dataGridViewTextBoxColumn401->ReadOnly = true;
			this->dataGridViewTextBoxColumn401->Width = 10;
			// 
			// dataGridViewTextBoxColumn402
			// 
			this->dataGridViewTextBoxColumn402->HeaderText = L"Column18";
			this->dataGridViewTextBoxColumn402->Name = L"dataGridViewTextBoxColumn402";
			this->dataGridViewTextBoxColumn402->ReadOnly = true;
			this->dataGridViewTextBoxColumn402->Width = 10;
			// 
			// dataGridViewTextBoxColumn403
			// 
			this->dataGridViewTextBoxColumn403->HeaderText = L"Column19";
			this->dataGridViewTextBoxColumn403->Name = L"dataGridViewTextBoxColumn403";
			this->dataGridViewTextBoxColumn403->ReadOnly = true;
			this->dataGridViewTextBoxColumn403->Width = 10;
			// 
			// dataGridViewTextBoxColumn404
			// 
			this->dataGridViewTextBoxColumn404->HeaderText = L"Column20";
			this->dataGridViewTextBoxColumn404->Name = L"dataGridViewTextBoxColumn404";
			this->dataGridViewTextBoxColumn404->ReadOnly = true;
			this->dataGridViewTextBoxColumn404->Width = 10;
			// 
			// dataGridViewTextBoxColumn405
			// 
			this->dataGridViewTextBoxColumn405->HeaderText = L"Column21";
			this->dataGridViewTextBoxColumn405->Name = L"dataGridViewTextBoxColumn405";
			this->dataGridViewTextBoxColumn405->ReadOnly = true;
			this->dataGridViewTextBoxColumn405->Width = 10;
			// 
			// dataGridViewTextBoxColumn406
			// 
			this->dataGridViewTextBoxColumn406->HeaderText = L"Column22";
			this->dataGridViewTextBoxColumn406->Name = L"dataGridViewTextBoxColumn406";
			this->dataGridViewTextBoxColumn406->ReadOnly = true;
			this->dataGridViewTextBoxColumn406->Width = 10;
			// 
			// dataGridViewTextBoxColumn407
			// 
			this->dataGridViewTextBoxColumn407->HeaderText = L"Column23";
			this->dataGridViewTextBoxColumn407->Name = L"dataGridViewTextBoxColumn407";
			this->dataGridViewTextBoxColumn407->ReadOnly = true;
			this->dataGridViewTextBoxColumn407->Width = 10;
			// 
			// dataGridViewTextBoxColumn408
			// 
			this->dataGridViewTextBoxColumn408->HeaderText = L"Column24";
			this->dataGridViewTextBoxColumn408->Name = L"dataGridViewTextBoxColumn408";
			this->dataGridViewTextBoxColumn408->ReadOnly = true;
			this->dataGridViewTextBoxColumn408->Width = 10;
			// 
			// dataGridViewTextBoxColumn409
			// 
			this->dataGridViewTextBoxColumn409->HeaderText = L"Column25";
			this->dataGridViewTextBoxColumn409->Name = L"dataGridViewTextBoxColumn409";
			this->dataGridViewTextBoxColumn409->ReadOnly = true;
			this->dataGridViewTextBoxColumn409->Width = 10;
			// 
			// dataGridViewTextBoxColumn410
			// 
			this->dataGridViewTextBoxColumn410->HeaderText = L"Column26";
			this->dataGridViewTextBoxColumn410->Name = L"dataGridViewTextBoxColumn410";
			this->dataGridViewTextBoxColumn410->ReadOnly = true;
			this->dataGridViewTextBoxColumn410->Width = 10;
			// 
			// dataGridViewTextBoxColumn411
			// 
			this->dataGridViewTextBoxColumn411->HeaderText = L"Column27";
			this->dataGridViewTextBoxColumn411->Name = L"dataGridViewTextBoxColumn411";
			this->dataGridViewTextBoxColumn411->ReadOnly = true;
			this->dataGridViewTextBoxColumn411->Width = 10;
			// 
			// dataGridViewTextBoxColumn412
			// 
			this->dataGridViewTextBoxColumn412->HeaderText = L"Column28";
			this->dataGridViewTextBoxColumn412->Name = L"dataGridViewTextBoxColumn412";
			this->dataGridViewTextBoxColumn412->ReadOnly = true;
			this->dataGridViewTextBoxColumn412->Width = 10;
			// 
			// dataGridViewTextBoxColumn413
			// 
			this->dataGridViewTextBoxColumn413->HeaderText = L"Column29";
			this->dataGridViewTextBoxColumn413->Name = L"dataGridViewTextBoxColumn413";
			this->dataGridViewTextBoxColumn413->ReadOnly = true;
			this->dataGridViewTextBoxColumn413->Width = 10;
			// 
			// dataGridViewTextBoxColumn414
			// 
			this->dataGridViewTextBoxColumn414->HeaderText = L"Column30";
			this->dataGridViewTextBoxColumn414->Name = L"dataGridViewTextBoxColumn414";
			this->dataGridViewTextBoxColumn414->ReadOnly = true;
			this->dataGridViewTextBoxColumn414->Width = 10;
			// 
			// dataGridViewTextBoxColumn415
			// 
			this->dataGridViewTextBoxColumn415->HeaderText = L"Column31";
			this->dataGridViewTextBoxColumn415->Name = L"dataGridViewTextBoxColumn415";
			this->dataGridViewTextBoxColumn415->ReadOnly = true;
			this->dataGridViewTextBoxColumn415->Width = 10;
			// 
			// dataGridViewTextBoxColumn416
			// 
			this->dataGridViewTextBoxColumn416->HeaderText = L"Column32";
			this->dataGridViewTextBoxColumn416->Name = L"dataGridViewTextBoxColumn416";
			this->dataGridViewTextBoxColumn416->ReadOnly = true;
			this->dataGridViewTextBoxColumn416->Width = 10;
			// 
			// dataGridViewTextBoxColumn417
			// 
			this->dataGridViewTextBoxColumn417->HeaderText = L"Column33";
			this->dataGridViewTextBoxColumn417->Name = L"dataGridViewTextBoxColumn417";
			this->dataGridViewTextBoxColumn417->ReadOnly = true;
			this->dataGridViewTextBoxColumn417->Width = 10;
			// 
			// dataGridViewTextBoxColumn418
			// 
			this->dataGridViewTextBoxColumn418->HeaderText = L"Column34";
			this->dataGridViewTextBoxColumn418->Name = L"dataGridViewTextBoxColumn418";
			this->dataGridViewTextBoxColumn418->ReadOnly = true;
			this->dataGridViewTextBoxColumn418->Width = 10;
			// 
			// dataGridViewTextBoxColumn419
			// 
			this->dataGridViewTextBoxColumn419->HeaderText = L"Column35";
			this->dataGridViewTextBoxColumn419->Name = L"dataGridViewTextBoxColumn419";
			this->dataGridViewTextBoxColumn419->ReadOnly = true;
			this->dataGridViewTextBoxColumn419->Width = 10;
			// 
			// dataGridViewTextBoxColumn420
			// 
			this->dataGridViewTextBoxColumn420->HeaderText = L"Column36";
			this->dataGridViewTextBoxColumn420->Name = L"dataGridViewTextBoxColumn420";
			this->dataGridViewTextBoxColumn420->ReadOnly = true;
			this->dataGridViewTextBoxColumn420->Width = 10;
			// 
			// dataGridViewTextBoxColumn421
			// 
			this->dataGridViewTextBoxColumn421->HeaderText = L"Column37";
			this->dataGridViewTextBoxColumn421->Name = L"dataGridViewTextBoxColumn421";
			this->dataGridViewTextBoxColumn421->ReadOnly = true;
			this->dataGridViewTextBoxColumn421->Width = 10;
			// 
			// dataGridViewTextBoxColumn422
			// 
			this->dataGridViewTextBoxColumn422->HeaderText = L"Column38";
			this->dataGridViewTextBoxColumn422->Name = L"dataGridViewTextBoxColumn422";
			this->dataGridViewTextBoxColumn422->ReadOnly = true;
			this->dataGridViewTextBoxColumn422->Width = 10;
			// 
			// dataGridViewTextBoxColumn423
			// 
			this->dataGridViewTextBoxColumn423->HeaderText = L"Column39";
			this->dataGridViewTextBoxColumn423->Name = L"dataGridViewTextBoxColumn423";
			this->dataGridViewTextBoxColumn423->ReadOnly = true;
			this->dataGridViewTextBoxColumn423->Width = 10;
			// 
			// dataGridViewTextBoxColumn424
			// 
			this->dataGridViewTextBoxColumn424->HeaderText = L"Column40";
			this->dataGridViewTextBoxColumn424->Name = L"dataGridViewTextBoxColumn424";
			this->dataGridViewTextBoxColumn424->ReadOnly = true;
			this->dataGridViewTextBoxColumn424->Width = 10;
			// 
			// dataGridViewTextBoxColumn425
			// 
			this->dataGridViewTextBoxColumn425->HeaderText = L"Column41";
			this->dataGridViewTextBoxColumn425->Name = L"dataGridViewTextBoxColumn425";
			this->dataGridViewTextBoxColumn425->ReadOnly = true;
			this->dataGridViewTextBoxColumn425->Width = 10;
			// 
			// dataGridViewTextBoxColumn426
			// 
			this->dataGridViewTextBoxColumn426->HeaderText = L"Column42";
			this->dataGridViewTextBoxColumn426->Name = L"dataGridViewTextBoxColumn426";
			this->dataGridViewTextBoxColumn426->ReadOnly = true;
			this->dataGridViewTextBoxColumn426->Width = 10;
			// 
			// dataGridViewTextBoxColumn427
			// 
			this->dataGridViewTextBoxColumn427->HeaderText = L"Column43";
			this->dataGridViewTextBoxColumn427->Name = L"dataGridViewTextBoxColumn427";
			this->dataGridViewTextBoxColumn427->ReadOnly = true;
			this->dataGridViewTextBoxColumn427->Width = 10;
			// 
			// dataGridViewTextBoxColumn428
			// 
			this->dataGridViewTextBoxColumn428->HeaderText = L"Column44";
			this->dataGridViewTextBoxColumn428->Name = L"dataGridViewTextBoxColumn428";
			this->dataGridViewTextBoxColumn428->ReadOnly = true;
			this->dataGridViewTextBoxColumn428->Width = 10;
			// 
			// dataGridViewTextBoxColumn429
			// 
			this->dataGridViewTextBoxColumn429->HeaderText = L"Column45";
			this->dataGridViewTextBoxColumn429->Name = L"dataGridViewTextBoxColumn429";
			this->dataGridViewTextBoxColumn429->ReadOnly = true;
			this->dataGridViewTextBoxColumn429->Width = 10;
			// 
			// dataGridViewTextBoxColumn430
			// 
			this->dataGridViewTextBoxColumn430->HeaderText = L"Column46";
			this->dataGridViewTextBoxColumn430->Name = L"dataGridViewTextBoxColumn430";
			this->dataGridViewTextBoxColumn430->ReadOnly = true;
			this->dataGridViewTextBoxColumn430->Width = 10;
			// 
			// dataGridViewTextBoxColumn431
			// 
			this->dataGridViewTextBoxColumn431->HeaderText = L"Column47";
			this->dataGridViewTextBoxColumn431->Name = L"dataGridViewTextBoxColumn431";
			this->dataGridViewTextBoxColumn431->ReadOnly = true;
			this->dataGridViewTextBoxColumn431->Width = 10;
			// 
			// dataGridViewTextBoxColumn432
			// 
			this->dataGridViewTextBoxColumn432->HeaderText = L"Column48";
			this->dataGridViewTextBoxColumn432->Name = L"dataGridViewTextBoxColumn432";
			this->dataGridViewTextBoxColumn432->ReadOnly = true;
			this->dataGridViewTextBoxColumn432->Width = 10;
			// 
			// dataGridViewTextBoxColumn433
			// 
			this->dataGridViewTextBoxColumn433->HeaderText = L"Column49";
			this->dataGridViewTextBoxColumn433->Name = L"dataGridViewTextBoxColumn433";
			this->dataGridViewTextBoxColumn433->ReadOnly = true;
			this->dataGridViewTextBoxColumn433->Width = 10;
			// 
			// dataGridViewTextBoxColumn434
			// 
			this->dataGridViewTextBoxColumn434->HeaderText = L"Column50";
			this->dataGridViewTextBoxColumn434->Name = L"dataGridViewTextBoxColumn434";
			this->dataGridViewTextBoxColumn434->ReadOnly = true;
			this->dataGridViewTextBoxColumn434->Width = 10;
			// 
			// dataGridViewTextBoxColumn435
			// 
			this->dataGridViewTextBoxColumn435->HeaderText = L"Column51";
			this->dataGridViewTextBoxColumn435->Name = L"dataGridViewTextBoxColumn435";
			this->dataGridViewTextBoxColumn435->ReadOnly = true;
			this->dataGridViewTextBoxColumn435->Width = 10;
			// 
			// dataGridViewTextBoxColumn436
			// 
			this->dataGridViewTextBoxColumn436->HeaderText = L"Column52";
			this->dataGridViewTextBoxColumn436->Name = L"dataGridViewTextBoxColumn436";
			this->dataGridViewTextBoxColumn436->ReadOnly = true;
			this->dataGridViewTextBoxColumn436->Width = 10;
			// 
			// dataGridViewTextBoxColumn437
			// 
			this->dataGridViewTextBoxColumn437->HeaderText = L"Column53";
			this->dataGridViewTextBoxColumn437->Name = L"dataGridViewTextBoxColumn437";
			this->dataGridViewTextBoxColumn437->ReadOnly = true;
			this->dataGridViewTextBoxColumn437->Width = 10;
			// 
			// dataGridViewTextBoxColumn438
			// 
			this->dataGridViewTextBoxColumn438->HeaderText = L"Column54";
			this->dataGridViewTextBoxColumn438->Name = L"dataGridViewTextBoxColumn438";
			this->dataGridViewTextBoxColumn438->ReadOnly = true;
			this->dataGridViewTextBoxColumn438->Width = 10;
			// 
			// dataGridViewTextBoxColumn439
			// 
			this->dataGridViewTextBoxColumn439->HeaderText = L"Column55";
			this->dataGridViewTextBoxColumn439->Name = L"dataGridViewTextBoxColumn439";
			this->dataGridViewTextBoxColumn439->ReadOnly = true;
			this->dataGridViewTextBoxColumn439->Width = 10;
			// 
			// dataGridViewTextBoxColumn440
			// 
			this->dataGridViewTextBoxColumn440->HeaderText = L"Column56";
			this->dataGridViewTextBoxColumn440->Name = L"dataGridViewTextBoxColumn440";
			this->dataGridViewTextBoxColumn440->ReadOnly = true;
			this->dataGridViewTextBoxColumn440->Width = 10;
			// 
			// dataGridViewTextBoxColumn441
			// 
			this->dataGridViewTextBoxColumn441->HeaderText = L"Column57";
			this->dataGridViewTextBoxColumn441->Name = L"dataGridViewTextBoxColumn441";
			this->dataGridViewTextBoxColumn441->ReadOnly = true;
			this->dataGridViewTextBoxColumn441->Width = 10;
			// 
			// dataGridViewTextBoxColumn442
			// 
			this->dataGridViewTextBoxColumn442->HeaderText = L"Column58";
			this->dataGridViewTextBoxColumn442->Name = L"dataGridViewTextBoxColumn442";
			this->dataGridViewTextBoxColumn442->ReadOnly = true;
			this->dataGridViewTextBoxColumn442->Width = 10;
			// 
			// dataGridViewTextBoxColumn443
			// 
			this->dataGridViewTextBoxColumn443->HeaderText = L"Column59";
			this->dataGridViewTextBoxColumn443->Name = L"dataGridViewTextBoxColumn443";
			this->dataGridViewTextBoxColumn443->ReadOnly = true;
			this->dataGridViewTextBoxColumn443->Width = 10;
			// 
			// dataGridViewTextBoxColumn444
			// 
			this->dataGridViewTextBoxColumn444->HeaderText = L"Column60";
			this->dataGridViewTextBoxColumn444->Name = L"dataGridViewTextBoxColumn444";
			this->dataGridViewTextBoxColumn444->ReadOnly = true;
			this->dataGridViewTextBoxColumn444->Width = 10;
			// 
			// dataGridViewTextBoxColumn445
			// 
			this->dataGridViewTextBoxColumn445->HeaderText = L"Column61";
			this->dataGridViewTextBoxColumn445->Name = L"dataGridViewTextBoxColumn445";
			this->dataGridViewTextBoxColumn445->ReadOnly = true;
			this->dataGridViewTextBoxColumn445->Width = 10;
			// 
			// dataGridViewTextBoxColumn446
			// 
			this->dataGridViewTextBoxColumn446->HeaderText = L"Column62";
			this->dataGridViewTextBoxColumn446->Name = L"dataGridViewTextBoxColumn446";
			this->dataGridViewTextBoxColumn446->ReadOnly = true;
			this->dataGridViewTextBoxColumn446->Width = 10;
			// 
			// dataGridViewTextBoxColumn447
			// 
			this->dataGridViewTextBoxColumn447->HeaderText = L"Column63";
			this->dataGridViewTextBoxColumn447->Name = L"dataGridViewTextBoxColumn447";
			this->dataGridViewTextBoxColumn447->ReadOnly = true;
			this->dataGridViewTextBoxColumn447->Width = 10;
			// 
			// dataGridViewTextBoxColumn448
			// 
			this->dataGridViewTextBoxColumn448->HeaderText = L"Column64";
			this->dataGridViewTextBoxColumn448->Name = L"dataGridViewTextBoxColumn448";
			this->dataGridViewTextBoxColumn448->ReadOnly = true;
			this->dataGridViewTextBoxColumn448->Width = 10;
			// 
			// progressBar1
			// 
			this->progressBar1->Location = System::Drawing::Point(93, 677);
			this->progressBar1->Name = L"progressBar1";
			this->progressBar1->Size = System::Drawing::Size(165, 23);
			this->progressBar1->Style = System::Windows::Forms::ProgressBarStyle::Continuous;
			this->progressBar1->TabIndex = 67;
			// 
			// label81
			// 
			this->label81->AutoSize = true;
			this->label81->Location = System::Drawing::Point(12, 812);
			this->label81->Name = L"label81";
			this->label81->Size = System::Drawing::Size(83, 13);
			this->label81->TabIndex = 44;
			this->label81->Text = L"Textures extract";
			// 
			// richTextBox1
			// 
			this->richTextBox1->Location = System::Drawing::Point(12, 828);
			this->richTextBox1->Name = L"richTextBox1";
			this->richTextBox1->Size = System::Drawing::Size(230, 100);
			this->richTextBox1->TabIndex = 43;
			this->richTextBox1->Text = L"";
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Location = System::Drawing::Point(6, 24);
			this->label1->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(49, 13);
			this->label1->TabIndex = 24;
			this->label1->Text = L"voxelN =";
			// 
			// label3
			// 
			this->label3->AutoSize = true;
			this->label3->Location = System::Drawing::Point(52, 24);
			this->label3->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label3->Name = L"label3";
			this->label3->Size = System::Drawing::Size(35, 13);
			this->label3->TabIndex = 26;
			this->label3->Text = L"label3";
			// 
			// label4
			// 
			this->label4->AutoSize = true;
			this->label4->Location = System::Drawing::Point(5, 68);
			this->label4->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label4->Name = L"label4";
			this->label4->Size = System::Drawing::Size(87, 13);
			this->label4->TabIndex = 27;
			this->label4->Text = L"Voxels with data:";
			// 
			// button2
			// 
			this->button2->Enabled = false;
			this->button2->Location = System::Drawing::Point(8, 353);
			this->button2->Margin = System::Windows::Forms::Padding(2);
			this->button2->Name = L"button2";
			this->button2->Size = System::Drawing::Size(74, 37);
			this->button2->TabIndex = 28;
			this->button2->Text = L"Extract data to TXT";
			this->button2->UseVisualStyleBackColor = true;
			this->button2->Click += gcnew System::EventHandler(this, &Form1::button2_Click);
			// 
			// saveFileDialog1
			// 
			this->saveFileDialog1->DefaultExt = L"txt";
			this->saveFileDialog1->Filter = L"Текстовые файлы|*.txt";
			this->saveFileDialog1->RestoreDirectory = true;
			this->saveFileDialog1->Title = L"Save as txt File";
			// 
			// dataGridView9
			// 
			this->dataGridView9->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView9->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(4) {this->Column67, 
				this->Column65, this->Column66, this->Column69});
			this->dataGridView9->Location = System::Drawing::Point(814, 33);
			this->dataGridView9->Name = L"dataGridView9";
			this->dataGridView9->RowHeadersVisible = false;
			this->dataGridView9->Size = System::Drawing::Size(616, 679);
			this->dataGridView9->TabIndex = 44;
			this->dataGridView9->CellEndEdit += gcnew System::Windows::Forms::DataGridViewCellEventHandler(this, &Form1::dataGridView9_CellEndEdit);
			// 
			// Column67
			// 
			this->Column67->HeaderText = L"N";
			this->Column67->Name = L"Column67";
			this->Column67->Width = 25;
			// 
			// Column65
			// 
			this->Column65->HeaderText = L"Name";
			this->Column65->Name = L"Column65";
			this->Column65->Width = 240;
			// 
			// Column66
			// 
			dataGridViewCellStyle17->Format = L"N0";
			dataGridViewCellStyle17->NullValue = nullptr;
			this->Column66->DefaultCellStyle = dataGridViewCellStyle17;
			this->Column66->HeaderText = L"Value";
			this->Column66->Name = L"Column66";
			this->Column66->Width = 220;
			// 
			// Column69
			// 
			this->Column69->HeaderText = L"Mirror/Rotation";
			this->Column69->Name = L"Column69";
			// 
			// button3
			// 
			this->button3->Location = System::Drawing::Point(8, 214);
			this->button3->Name = L"button3";
			this->button3->Size = System::Drawing::Size(74, 49);
			this->button3->TabIndex = 45;
			this->button3->Text = L"Extract lvl textures to *.cel";
			this->button3->UseVisualStyleBackColor = true;
			this->button3->Click += gcnew System::EventHandler(this, &Form1::button3_Click);
			// 
			// openFileDialog2
			// 
			this->openFileDialog2->FileName = L"openFileDialog2";
			// 
			// label80
			// 
			this->label80->AutoSize = true;
			this->label80->Location = System::Drawing::Point(9, 277);
			this->label80->Name = L"label80";
			this->label80->Size = System::Drawing::Size(10, 13);
			this->label80->TabIndex = 46;
			this->label80->Text = L"-";
			// 
			// label82
			// 
			this->label82->AutoSize = true;
			this->label82->Location = System::Drawing::Point(9, 298);
			this->label82->Name = L"label82";
			this->label82->Size = System::Drawing::Size(10, 13);
			this->label82->TabIndex = 47;
			this->label82->Text = L"-";
			// 
			// button5
			// 
			this->button5->Enabled = false;
			this->button5->ForeColor = System::Drawing::SystemColors::ControlText;
			this->button5->Location = System::Drawing::Point(8, 400);
			this->button5->Name = L"button5";
			this->button5->Size = System::Drawing::Size(74, 31);
			this->button5->TabIndex = 55;
			this->button5->Text = L"Save level";
			this->button5->UseVisualStyleBackColor = true;
			this->button5->Click += gcnew System::EventHandler(this, &Form1::button5_Click_1);
			// 
			// button7
			// 
			this->button7->Enabled = false;
			this->button7->Location = System::Drawing::Point(8, 485);
			this->button7->Name = L"button7";
			this->button7->Size = System::Drawing::Size(74, 35);
			this->button7->TabIndex = 56;
			this->button7->Text = L"Save to *.obj file";
			this->button7->UseVisualStyleBackColor = true;
			this->button7->Click += gcnew System::EventHandler(this, &Form1::button7_Click);
			// 
			// saveFileDialog3
			// 
			this->saveFileDialog3->DefaultExt = L"obj";
			this->saveFileDialog3->Filter = L"\"Wavefront OBJ|*.obj|All files|*.*\"";
			this->saveFileDialog3->RestoreDirectory = true;
			// 
			// textBox42
			// 
			this->textBox42->Location = System::Drawing::Point(8, 725);
			this->textBox42->Name = L"textBox42";
			this->textBox42->Size = System::Drawing::Size(133, 20);
			this->textBox42->TabIndex = 57;
			this->textBox42->Text = L"0.001";
			// 
			// label141
			// 
			this->label141->AutoSize = true;
			this->label141->Location = System::Drawing::Point(6, 708);
			this->label141->Name = L"label141";
			this->label141->Size = System::Drawing::Size(163, 13);
			this->label141->TabIndex = 58;
			this->label141->Text = L"Voxel gap for OBJ export (0-0.49)";
			// 
			// richTextBox2
			// 
			this->richTextBox2->Location = System::Drawing::Point(271, 741);
			this->richTextBox2->Name = L"richTextBox2";
			this->richTextBox2->ScrollBars = System::Windows::Forms::RichTextBoxScrollBars::Vertical;
			this->richTextBox2->Size = System::Drawing::Size(282, 68);
			this->richTextBox2->TabIndex = 59;
			this->richTextBox2->Text = L"";
			// 
			// checkBox1
			// 
			this->checkBox1->AutoSize = true;
			this->checkBox1->Location = System::Drawing::Point(146, 729);
			this->checkBox1->Name = L"checkBox1";
			this->checkBox1->Size = System::Drawing::Size(122, 17);
			this->checkBox1->TabIndex = 60;
			this->checkBox1->Text = L"Include blank cubes";
			this->checkBox1->UseVisualStyleBackColor = true;
			// 
			// label157
			// 
			this->label157->AutoSize = true;
			this->label157->Location = System::Drawing::Point(97, 614);
			this->label157->Margin = System::Windows::Forms::Padding(2, 0, 2, 0);
			this->label157->Name = L"label157";
			this->label157->Size = System::Drawing::Size(74, 13);
			this->label157->TabIndex = 61;
			this->label157->Text = L"DataFilePath=";
			// 
			// richTextBox3
			// 
			this->richTextBox3->Location = System::Drawing::Point(271, 828);
			this->richTextBox3->Name = L"richTextBox3";
			this->richTextBox3->ScrollBars = System::Windows::Forms::RichTextBoxScrollBars::Vertical;
			this->richTextBox3->Size = System::Drawing::Size(282, 68);
			this->richTextBox3->TabIndex = 62;
			this->richTextBox3->Text = L"";
			// 
			// label158
			// 
			this->label158->AutoSize = true;
			this->label158->Location = System::Drawing::Point(-2, 139);
			this->label158->Name = L"label158";
			this->label158->Size = System::Drawing::Size(68, 13);
			this->label158->TabIndex = 68;
			this->label158->Text = L"Total specs=";
			// 
			// button22
			// 
			this->button22->Enabled = false;
			this->button22->Location = System::Drawing::Point(8, 442);
			this->button22->Name = L"button22";
			this->button22->Size = System::Drawing::Size(74, 31);
			this->button22->TabIndex = 69;
			this->button22->Text = L"Save *data";
			this->button22->UseVisualStyleBackColor = true;
			this->button22->Click += gcnew System::EventHandler(this, &Form1::button22_Click);
			// 
			// timer1
			// 
			this->timer1->Interval = 500;
			this->timer1->Tick += gcnew System::EventHandler(this, &Form1::timer1_Tick);
			// 
			// timer2
			// 
			this->timer2->Tick += gcnew System::EventHandler(this, &Form1::timer2_Tick);
			// 
			// richTextBox4
			// 
			this->richTextBox4->Location = System::Drawing::Point(271, 652);
			this->richTextBox4->Name = L"richTextBox4";
			this->richTextBox4->Size = System::Drawing::Size(282, 68);
			this->richTextBox4->TabIndex = 70;
			this->richTextBox4->Text = L"";
			// 
			// dataGridView18
			// 
			this->dataGridView18->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView18->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(4) {this->dataGridViewTextBoxColumn961, 
				this->dataGridViewTextBoxColumn962, this->dataGridViewTextBoxColumn963, this->Column70});
			this->dataGridView18->Location = System::Drawing::Point(559, 647);
			this->dataGridView18->Name = L"dataGridView18";
			this->dataGridView18->RowHeadersVisible = false;
			this->dataGridView18->Size = System::Drawing::Size(249, 249);
			this->dataGridView18->TabIndex = 71;
			// 
			// label159
			// 
			this->label159->AutoSize = true;
			this->label159->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label159->Location = System::Drawing::Point(814, 11);
			this->label159->Name = L"label159";
			this->label159->Size = System::Drawing::Size(74, 13);
			this->label159->TabIndex = 72;
			this->label159->Text = L"Cube\'s data";
			// 
			// label160
			// 
			this->label160->AutoSize = true;
			this->label160->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label160->Location = System::Drawing::Point(559, 630);
			this->label160->Name = L"label160";
			this->label160->Size = System::Drawing::Size(60, 13);
			this->label160->TabIndex = 73;
			this->label160->Text = L"Teleports";
			// 
			// dataGridView19
			// 
			this->dataGridView19->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView19->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(4) {this->dataGridViewTextBoxColumn964, 
				this->Column68, this->dataGridViewTextBoxColumn965, this->dataGridViewTextBoxColumn966});
			this->dataGridView19->Location = System::Drawing::Point(817, 741);
			this->dataGridView19->Name = L"dataGridView19";
			this->dataGridView19->RowHeadersVisible = false;
			this->dataGridView19->Size = System::Drawing::Size(512, 155);
			this->dataGridView19->TabIndex = 74;
			// 
			// dataGridViewTextBoxColumn964
			// 
			this->dataGridViewTextBoxColumn964->HeaderText = L"Start vertex";
			this->dataGridViewTextBoxColumn964->Name = L"dataGridViewTextBoxColumn964";
			this->dataGridViewTextBoxColumn964->Width = 70;
			// 
			// Column68
			// 
			this->Column68->HeaderText = L"Connection to vertexes";
			this->Column68->Name = L"Column68";
			this->Column68->Width = 200;
			// 
			// dataGridViewTextBoxColumn965
			// 
			this->dataGridViewTextBoxColumn965->HeaderText = L"Start voxel";
			this->dataGridViewTextBoxColumn965->Name = L"dataGridViewTextBoxColumn965";
			// 
			// dataGridViewTextBoxColumn966
			// 
			this->dataGridViewTextBoxColumn966->AutoSizeMode = System::Windows::Forms::DataGridViewAutoSizeColumnMode::Fill;
			dataGridViewCellStyle19->Format = L"N0";
			dataGridViewCellStyle19->NullValue = nullptr;
			this->dataGridViewTextBoxColumn966->DefaultCellStyle = dataGridViewCellStyle19;
			this->dataGridViewTextBoxColumn966->HeaderText = L"Reserved";
			this->dataGridViewTextBoxColumn966->Name = L"dataGridViewTextBoxColumn966";
			// 
			// label161
			// 
			this->label161->AutoSize = true;
			this->label161->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label161->Location = System::Drawing::Point(814, 725);
			this->label161->Name = L"label161";
			this->label161->Size = System::Drawing::Size(152, 13);
			this->label161->TabIndex = 75;
			this->label161->Text = L"Level 11a teleports graph";
			// 
			// button23
			// 
			this->button23->Enabled = false;
			this->button23->Location = System::Drawing::Point(8, 533);
			this->button23->Name = L"button23";
			this->button23->Size = System::Drawing::Size(74, 48);
			this->button23->TabIndex = 76;
			this->button23->Text = L"Extended save to *.obj file Part 1";
			this->button23->UseVisualStyleBackColor = true;
			this->button23->Click += gcnew System::EventHandler(this, &Form1::button23_Click);
			// 
			// comboBox1
			// 
			this->comboBox1->FormattingEnabled = true;
			this->comboBox1->Items->AddRange(gcnew cli::array< System::Object^  >(3) {L"Male Dwarf Fighter", L"Female Elf Mage", L"Male Half-Elf Fighter/Mage"});
			this->comboBox1->Location = System::Drawing::Point(640, 3);
			this->comboBox1->Name = L"comboBox1";
			this->comboBox1->Size = System::Drawing::Size(152, 21);
			this->comboBox1->TabIndex = 77;
			// 
			// saveFileDialog5
			// 
			this->saveFileDialog5->Filter = L"Wavefront obj files|*.obj";
			// 
			// button32
			// 
			this->button32->Enabled = false;
			this->button32->Location = System::Drawing::Point(8, 592);
			this->button32->Name = L"button32";
			this->button32->Size = System::Drawing::Size(74, 48);
			this->button32->TabIndex = 78;
			this->button32->Text = L"Extended save to *.obj file Part 2";
			this->button32->UseVisualStyleBackColor = true;
			this->button32->Click += gcnew System::EventHandler(this, &Form1::button32_Click);
			// 
			// timer3
			// 
			this->timer3->Tick += gcnew System::EventHandler(this, &Form1::timer3_Tick);
			// 
			// label170
			// 
			this->label170->AutoSize = true;
			this->label170->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(204)));
			this->label170->Location = System::Drawing::Point(524, 6);
			this->label170->Name = L"label170";
			this->label170->Size = System::Drawing::Size(102, 13);
			this->label170->TabIndex = 79;
			this->label170->Text = L"Select Character";
			// 
			// textBox52
			// 
			this->textBox52->Location = System::Drawing::Point(9, 763);
			this->textBox52->Name = L"textBox52";
			this->textBox52->Size = System::Drawing::Size(48, 20);
			this->textBox52->TabIndex = 80;
			this->textBox52->Text = L"40";
			// 
			// label171
			// 
			this->label171->AutoSize = true;
			this->label171->Location = System::Drawing::Point(59, 768);
			this->label171->Name = L"label171";
			this->label171->Size = System::Drawing::Size(190, 13);
			this->label171->TabIndex = 81;
			this->label171->Text = L"Object size for export (% of cube\'s size)";
			// 
			// label172
			// 
			this->label172->AutoSize = true;
			this->label172->Location = System::Drawing::Point(59, 794);
			this->label172->Name = L"label172";
			this->label172->Size = System::Drawing::Size(181, 13);
			this->label172->TabIndex = 83;
			this->label172->Text = L"Distance from the wall for torches (%)";
			// 
			// textBox53
			// 
			this->textBox53->Location = System::Drawing::Point(9, 789);
			this->textBox53->Name = L"textBox53";
			this->textBox53->Size = System::Drawing::Size(48, 20);
			this->textBox53->TabIndex = 82;
			this->textBox53->Text = L"10";
			// 
			// button33
			// 
			this->button33->Enabled = false;
			this->button33->Location = System::Drawing::Point(8, 652);
			this->button33->Name = L"button33";
			this->button33->Size = System::Drawing::Size(74, 48);
			this->button33->TabIndex = 84;
			this->button33->Text = L"Extended save to *.obj file Part 3";
			this->button33->UseVisualStyleBackColor = true;
			this->button33->Click += gcnew System::EventHandler(this, &Form1::button33_Click);
			// 
			// progressBar2
			// 
			this->progressBar2->Location = System::Drawing::Point(93, 645);
			this->progressBar2->Name = L"progressBar2";
			this->progressBar2->Size = System::Drawing::Size(165, 23);
			this->progressBar2->Style = System::Windows::Forms::ProgressBarStyle::Continuous;
			this->progressBar2->TabIndex = 85;
			// 
			// dataGridViewTextBoxColumn961
			// 
			this->dataGridViewTextBoxColumn961->HeaderText = L"From Voxel N";
			this->dataGridViewTextBoxColumn961->Name = L"dataGridViewTextBoxColumn961";
			this->dataGridViewTextBoxColumn961->Width = 55;
			// 
			// dataGridViewTextBoxColumn962
			// 
			this->dataGridViewTextBoxColumn962->HeaderText = L"From";
			this->dataGridViewTextBoxColumn962->Name = L"dataGridViewTextBoxColumn962";
			this->dataGridViewTextBoxColumn962->Width = 63;
			// 
			// dataGridViewTextBoxColumn963
			// 
			dataGridViewCellStyle18->Format = L"N0";
			dataGridViewCellStyle18->NullValue = nullptr;
			this->dataGridViewTextBoxColumn963->DefaultCellStyle = dataGridViewCellStyle18;
			this->dataGridViewTextBoxColumn963->HeaderText = L"To";
			this->dataGridViewTextBoxColumn963->Name = L"dataGridViewTextBoxColumn963";
			this->dataGridViewTextBoxColumn963->Width = 63;
			// 
			// Column70
			// 
			this->Column70->HeaderText = L"To Voxel N";
			this->Column70->Name = L"Column70";
			this->Column70->Width = 60;
			// 
			// Form1
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(1442, 934);
			this->Controls->Add(this->progressBar2);
			this->Controls->Add(this->button33);
			this->Controls->Add(this->label172);
			this->Controls->Add(this->textBox53);
			this->Controls->Add(this->label171);
			this->Controls->Add(this->textBox52);
			this->Controls->Add(this->label170);
			this->Controls->Add(this->button32);
			this->Controls->Add(this->comboBox1);
			this->Controls->Add(this->button23);
			this->Controls->Add(this->label161);
			this->Controls->Add(this->dataGridView19);
			this->Controls->Add(this->label160);
			this->Controls->Add(this->label159);
			this->Controls->Add(this->dataGridView18);
			this->Controls->Add(this->richTextBox4);
			this->Controls->Add(this->button22);
			this->Controls->Add(this->label158);
			this->Controls->Add(this->progressBar1);
			this->Controls->Add(this->richTextBox3);
			this->Controls->Add(this->label157);
			this->Controls->Add(this->checkBox1);
			this->Controls->Add(this->richTextBox2);
			this->Controls->Add(this->label141);
			this->Controls->Add(this->textBox42);
			this->Controls->Add(this->button7);
			this->Controls->Add(this->button5);
			this->Controls->Add(this->label82);
			this->Controls->Add(this->label80);
			this->Controls->Add(this->button3);
			this->Controls->Add(this->dataGridView9);
			this->Controls->Add(this->button2);
			this->Controls->Add(this->label4);
			this->Controls->Add(this->label3);
			this->Controls->Add(this->label1);
			this->Controls->Add(this->tabControl1);
			this->Controls->Add(this->label12);
			this->Controls->Add(this->richTextBox1);
			this->Controls->Add(this->label81);
			this->Controls->Add(this->label11);
			this->Controls->Add(this->label9);
			this->Controls->Add(this->Load_level);
			this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::FixedDialog;
			this->Icon = (cli::safe_cast<System::Drawing::Icon^  >(resources->GetObject(L"$this.Icon")));
			this->Margin = System::Windows::Forms::Padding(2);
			this->MaximizeBox = false;
			this->Name = L"Form1";
			this->StartPosition = System::Windows::Forms::FormStartPosition::CenterScreen;
			this->Text = L"Deathkeep 3DO level editor v1.3 (Vas.1987)";
			this->Activated += gcnew System::EventHandler(this, &Form1::Form1_Activated);
			this->FormClosing += gcnew System::Windows::Forms::FormClosingEventHandler(this, &Form1::Form1_FormClosing);
			this->Load += gcnew System::EventHandler(this, &Form1::Form1_Load);
			this->tabControl1->ResumeLayout(false);
			this->tabPage1->ResumeLayout(false);
			this->tabPage1->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView10))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView1))->EndInit();
			this->tabPage2->ResumeLayout(false);
			this->tabPage2->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView11))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView2))->EndInit();
			this->tabPage3->ResumeLayout(false);
			this->tabPage3->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView12))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView3))->EndInit();
			this->tabPage4->ResumeLayout(false);
			this->tabPage4->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView13))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView4))->EndInit();
			this->tabPage5->ResumeLayout(false);
			this->tabPage5->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView14))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView5))->EndInit();
			this->tabPage6->ResumeLayout(false);
			this->tabPage6->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView15))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView6))->EndInit();
			this->tabPage7->ResumeLayout(false);
			this->tabPage7->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView16))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView7))->EndInit();
			this->tabPage8->ResumeLayout(false);
			this->tabPage8->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView17))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView8))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView9))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView18))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->dataGridView19))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
//	Drawing::Graphics^ g;


// Load level button
private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e) {
notloaded = true;
bool celarrready = false;
//Reset specsArray and all datagrids
//delete[] specsArray;
//delete[] teleportArray;
richTextBox3->Clear();
richTextBox2->Clear();
richTextBox4->Clear();
richTextBox1->Clear();
dataGridView18->RowCount = 1;
dataGridView19->RowCount = 1;
//dataGridView18->RowCount = 0;
button22->Enabled = 0;
button24->Enabled = 0; // Cube edit confirm
button25->Enabled = 0;// Cube edit confirm
button26->Enabled = 0;// Cube edit confirm
button27->Enabled = 0;// Cube edit confirm
button28->Enabled = 0;// Cube edit confirm
button29->Enabled = 0;// Cube edit confirm
button30->Enabled = 0;// Cube edit confirm
button31->Enabled = 0;// Cube edit confirm
// Clear datagridview9
for (int i=0; i<dataGridView9->RowCount; i++) {
		dataGridView9->Rows[i]->Cells[2]->Value = "";
	}

dataGridView1->RowCount = 32;
dataGridView2->RowCount = 32;
dataGridView3->RowCount = 32;
dataGridView4->RowCount = 32;
dataGridView5->RowCount = 32;
dataGridView6->RowCount = 32;
dataGridView7->RowCount = 32;
dataGridView8->RowCount = 32;

int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 

int rows = 32;
int columns = 8;
int floors = 64;
int levelN = 111; // Just random #
String ^ LevelName;
String ^ LevelName2;

int voxelsCount = rows * columns * floors;

label9->Text = "FilePath = ";
label157->Text = "DataFilePath = ";

pin_ptr<const wchar_t> dir = PtrToStringChars(openFileDialog1->FileName); 
const wchar_t *dir1 = dir;                     // <-- Unnecessary, but to be completely verbose
//	openFileDialog1->InitialDirectory = dir1 + "\\levels";;
	openFileDialog1->RestoreDirectory = true;

	      if ( openFileDialog1->ShowDialog() == System::Windows::Forms::DialogResult::OK )
      {
         // do your stuff
		  numofEntries = 0; // Reset
		  //int::Parse(str); // string to int

/// Read numofEntries global variable. 
#if 1;
ifstream dfile;
pin_ptr<const wchar_t> dir2 = PtrToStringChars(openFileDialog1->FileName + "data"); 
const wchar_t *dir3 = dir2; 
dfile.open(dir3, ios::binary|ios::in);

    dfile.seekg (0, dfile.end);
    int datalength11 = dfile.tellg();

startagain:
    dfile.seekg (0, dfile.beg);
	// Do all stuff here. File opened for reading cube's specs.
int buf22;
unsigned int buf21;
unsigned int n2=0;
unsigned int pos3002, b5size2 = 0;
unsigned int count2 = 0;
unsigned int count3 = 0;
bool eightbytes2 = false;
unsigned char b2size2 = 0;
//unsigned int numofEntries, block3Offset = 0;

	// Reading first 4 bytes. It's a number of CCBs I must skip to read data blocks.
	dfile.read((char *)&buf21,sizeof(buf21));
	buf21 = Swap4Bytes(buf21);
	numofEntries = buf21;

///////////////*************///////////////****************/////////////////***************
///////////////*************///////////////****************/////////////////***************
#if 1;
if (!celarrready) {
	unsigned short int celN = 0;
	unsigned short int celsize = 0; // current cel size
	short int collis1, collis2 = 0;
	short int buff222 = 0;
	unsigned char celid = 0;
	unsigned int arraysize = 256; // 256 - Block 1 size.
	// Create cels array
count3 += 4;
celsArray = new cels[arraysize];////// CREATING CELS ARRAY.
	for (int i=0; i<arraysize; i++) {
	// Null all array
		celsArray[i].id = 0;
		celsArray[i].bytes8 = false;
	}


for (int i=0; i<numofEntries; i++) {

	dfile.seekg (count3, dfile.beg);
		richTextBox1->AppendText("celN = " + celN + "\n");
		// Read ID
		dfile.read((char *)&buf21,sizeof(buf21));
			count3 += 4;
		buf21 = Swap4Bytes(buf21);
		celid = buf21;
			celsArray[celid].id = (buf21);
			// Store also all variations with additional FLIP bits.

			richTextBox1->AppendText("ID = " + celsArray[celid].id + "\n");
		dfile.read((char *)&buf21,sizeof(buf21));
			count3 += 4;
			buf21 = Swap4Bytes(buf21);
				celsize = buf21;
				richTextBox1->AppendText("celsize = " + celsize + "\n");

				// Seek for CCB header or collision 8 bytes (bytes8 == true if collision found)
					dfile.read((char *)&buf21,sizeof(buf21)); 
							//count3 += 4;
							if (buf21 == 0x20424343) {
								richTextBox1->AppendText("CCB found = " + buf21 + "\n");
								// Step forward for the next CCB
								count3 += celsize;
								goto nextccb;

							} else {
								richTextBox1->AppendText("Collision found\n");
								celsArray[celid].bytes8 = true;

								// Step back and read collision
								dfile.seekg (count3, dfile.beg); // Set to the collision start and read collision bits.

									dfile.read((char *)&buf21,sizeof(buf21)); // Read first 32 bits
										richTextBox1->AppendText("4 bytes part 1 = " + buf21 + "\n");

//									celsArray[celid].bit0 = bool(buf21);
									celsArray[celid].bit0 = (buf21 & 0x1);
										richTextBox1->AppendText("bit0 = " + celsArray[celid].bit0 + "\n");
									celsArray[celid].bit1 = (bool((1 << 1) & buf21));
										richTextBox1->AppendText("bit1 = " + celsArray[celid].bit1 + "\n");
									celsArray[celid].bit2 = (bool((1 << 2) & buf21));
										richTextBox1->AppendText("bit2 = " + celsArray[celid].bit2 + "\n");
									celsArray[celid].bit3 = (bool((1 << 3) & buf21));
										richTextBox1->AppendText("bit3 = " + celsArray[celid].bit3 + "\n");

									celsArray[celid].bit4 = (bool((1 << 4) & buf21));
										richTextBox1->AppendText("bit4 = " + celsArray[celid].bit4 + "\n");
									celsArray[celid].bit5 = (bool((1 << 5) & buf21));
										richTextBox1->AppendText("bit5 = " + celsArray[celid].bit5 + "\n");
									celsArray[celid].bit6 = (bool((1 << 6) & buf21));
										richTextBox1->AppendText("bit6 = " + celsArray[celid].bit6 + "\n");
									celsArray[celid].bit7 = (bool((1 << 7) & buf21));
										richTextBox1->AppendText("bit7 = " + celsArray[celid].bit7 + "\n");

									celsArray[celid].bit8 = (bool((1 << 8) & buf21));
										richTextBox1->AppendText("bit8 = " + celsArray[celid].bit8 + "\n");
									celsArray[celid].bit9 = (bool((1 << 9) & buf21));
										richTextBox1->AppendText("bit9 = " + celsArray[celid].bit9 + "\n");
									celsArray[celid].bit10 = (bool((1 << 10) & buf21));
										richTextBox1->AppendText("bit10 = " + celsArray[celid].bit10 + "\n");
									celsArray[celid].bit11 = (bool((1 << 11) & buf21));
										richTextBox1->AppendText("bit11 = " + celsArray[celid].bit11 + "\n");

									celsArray[celid].bit12 = (bool((1 << 12) & buf21));
										richTextBox1->AppendText("bit12 = " + celsArray[celid].bit12 + "\n");
									celsArray[celid].bit13 = (bool((1 << 13) & buf21));
										richTextBox1->AppendText("bit13 = " + celsArray[celid].bit13 + "\n");
									celsArray[celid].bit14 = (bool((1 << 14) & buf21));
										richTextBox1->AppendText("bit14 = " + celsArray[celid].bit14 + "\n");
									celsArray[celid].bit15 = (bool((1 << 15) & buf21));
										richTextBox1->AppendText("bit15 = " + celsArray[celid].bit15 + "\n");

									celsArray[celid].bit16 = (bool((1 << 16) & buf21));
										richTextBox1->AppendText("bit16 = " + celsArray[celid].bit16 + "\n");
									celsArray[celid].bit17 = (bool((1 << 17) & buf21));
										richTextBox1->AppendText("bit17 = " + celsArray[celid].bit17 + "\n");
									celsArray[celid].bit18 = (bool((1 << 18) & buf21));
										richTextBox1->AppendText("bit18 = " + celsArray[celid].bit18 + "\n");
									celsArray[celid].bit19 = (bool((1 << 19) & buf21));
										richTextBox1->AppendText("bit19 = " + celsArray[celid].bit19 + "\n");

									celsArray[celid].bit20 = (bool((1 << 20) & buf21));
										richTextBox1->AppendText("bit20 = " + celsArray[celid].bit20 + "\n");
									celsArray[celid].bit21 = (bool((1 << 21) & buf21));
										richTextBox1->AppendText("bit21 = " + celsArray[celid].bit21 + "\n");
									celsArray[celid].bit22 = (bool((1 << 22) & buf21));
										richTextBox1->AppendText("bit22 = " + celsArray[celid].bit22 + "\n");
									celsArray[celid].bit23 = (bool((1 << 23) & buf21));
										richTextBox1->AppendText("bit23 = " + celsArray[celid].bit23 + "\n");

									celsArray[celid].bit24 = (bool((1 << 24) & buf21));
										richTextBox1->AppendText("bit24 = " + celsArray[celid].bit24 + "\n");
									celsArray[celid].bit25 = (bool((1 << 25) & buf21));
										richTextBox1->AppendText("bit25 = " + celsArray[celid].bit25 + "\n");
									celsArray[celid].bit26 = (bool((1 << 26) & buf21));
										richTextBox1->AppendText("bit26 = " + celsArray[celid].bit26 + "\n");
									celsArray[celid].bit27 = (bool((1 << 27) & buf21));
										richTextBox1->AppendText("bit27 = " + celsArray[celid].bit27 + "\n");

									celsArray[celid].bit28 = (bool((1 << 28) & buf21));
										richTextBox1->AppendText("bit28 = " + celsArray[celid].bit28 + "\n");
									celsArray[celid].bit29 = (bool((1 << 29) & buf21));
										richTextBox1->AppendText("bit29 = " + celsArray[celid].bit29 + "\n");
									celsArray[celid].bit30 = (bool((1 << 30) & buf21));
										richTextBox1->AppendText("bit30 = " + celsArray[celid].bit30 + "\n");
									celsArray[celid].bit31 = (bool((1 << 31) & buf21));
										richTextBox1->AppendText("bit31 = " + celsArray[celid].bit31 + "\n");

										// For debug:
								#if 0;
										for (int i=0; i<arraysize; i++) {
											// Display all celsArray	
											richTextBox1->AppendText("i = " + i + "\n");
											richTextBox1->AppendText("ID = " + celsArray[i].id + "\n");
											richTextBox1->AppendText("bytes8 = " + celsArray[i].bytes8 + "\n");
											richTextBox1->AppendText("\n");
											}
								#endif;
//////////////// Next 32 bits

									dfile.read((char *)&buf21,sizeof(buf21));// Read second 32 bits
										richTextBox1->AppendText("4 bytes part 2 = " + buf21 + "\n");

//									celsArray[celid].bit32 = bool(buf21);
									celsArray[celid].bit32 = (buf21 & 0x1);
										richTextBox1->AppendText("bit32 = " + celsArray[celid].bit32 + "\n");
									celsArray[celid].bit33 = (bool((1 << 1) & buf21));
										richTextBox1->AppendText("bit33 = " + celsArray[celid].bit33 + "\n");
									celsArray[celid].bit34 = (bool((1 << 2) & buf21));
										richTextBox1->AppendText("bit34 = " + celsArray[celid].bit34 + "\n");
									celsArray[celid].bit35 = (bool((1 << 3) & buf21));
										richTextBox1->AppendText("bit35 = " + celsArray[celid].bit35 + "\n");

									celsArray[celid].bit36 = (bool((1 << 4) & buf21));
										richTextBox1->AppendText("bit36 = " + celsArray[celid].bit36 + "\n");
									celsArray[celid].bit37 = (bool((1 << 5) & buf21));
										richTextBox1->AppendText("bit37 = " + celsArray[celid].bit37 + "\n");
									celsArray[celid].bit38 = (bool((1 << 6) & buf21));
										richTextBox1->AppendText("bit38 = " + celsArray[celid].bit38 + "\n");
									celsArray[celid].bit39 = (bool((1 << 7) & buf21));
										richTextBox1->AppendText("bit39 = " + celsArray[celid].bit39 + "\n");

									celsArray[celid].bit40 = (bool((1 << 8) & buf21));
										richTextBox1->AppendText("bit40 = " + celsArray[celid].bit40 + "\n");
									celsArray[celid].bit41 = (bool((1 << 9) & buf21));
										richTextBox1->AppendText("bit41 = " + celsArray[celid].bit41 + "\n");
									celsArray[celid].bit42 = (bool((1 << 10) & buf21));
										richTextBox1->AppendText("bit42 = " + celsArray[celid].bit42 + "\n");
									celsArray[celid].bit43 = (bool((1 << 11) & buf21));
										richTextBox1->AppendText("bit43 = " + celsArray[celid].bit43 + "\n");

									celsArray[celid].bit44 = (bool((1 << 12) & buf21));
										richTextBox1->AppendText("bit44 = " + celsArray[celid].bit44 + "\n");
									celsArray[celid].bit45 = (bool((1 << 13) & buf21));
										richTextBox1->AppendText("bit45 = " + celsArray[celid].bit45 + "\n");
									celsArray[celid].bit46 = (bool((1 << 14) & buf21));
										richTextBox1->AppendText("bit46 = " + celsArray[celid].bit46 + "\n");
									celsArray[celid].bit47 = (bool((1 << 15) & buf21));
										richTextBox1->AppendText("bit47 = " + celsArray[celid].bit47 + "\n");

									celsArray[celid].bit48 = (bool((1 << 16) & buf21));
										richTextBox1->AppendText("bit48 = " + celsArray[celid].bit48 + "\n");
									celsArray[celid].bit49 = (bool((1 << 17) & buf21));
										richTextBox1->AppendText("bit49 = " + celsArray[celid].bit49 + "\n");
									celsArray[celid].bit50 = (bool((1 << 18) & buf21));
										richTextBox1->AppendText("bit50 = " + celsArray[celid].bit50 + "\n");
									celsArray[celid].bit51 = (bool((1 << 19) & buf21));
										richTextBox1->AppendText("bit51 = " + celsArray[celid].bit51 + "\n");

									celsArray[celid].bit52 = (bool((1 << 20) & buf21));
										richTextBox1->AppendText("bit52 = " + celsArray[celid].bit52 + "\n");
									celsArray[celid].bit53 = (bool((1 << 21) & buf21));
										richTextBox1->AppendText("bit53 = " + celsArray[celid].bit53 + "\n");
									celsArray[celid].bit54 = (bool((1 << 22) & buf21));
										richTextBox1->AppendText("bit54 = " + celsArray[celid].bit54 + "\n");
									celsArray[celid].bit55 = (bool((1 << 23) & buf21));
										richTextBox1->AppendText("bit55 = " + celsArray[celid].bit55 + "\n");

									celsArray[celid].bit56 = (bool((1 << 24) & buf21));
										richTextBox1->AppendText("bit56 = " + celsArray[celid].bit56 + "\n");
									celsArray[celid].bit57 = (bool((1 << 25) & buf21));
										richTextBox1->AppendText("bit57 = " + celsArray[celid].bit57 + "\n");
									celsArray[celid].bit58 = (bool((1 << 26) & buf21));
										richTextBox1->AppendText("bit58 = " + celsArray[celid].bit58 + "\n");
									celsArray[celid].bit59 = (bool((1 << 27) & buf21));
										richTextBox1->AppendText("bit59 = " + celsArray[celid].bit59 + "\n");

									celsArray[celid].bit60 = (bool((1 << 28) & buf21));
										richTextBox1->AppendText("bit60 = " + celsArray[celid].bit60 + "\n");
									celsArray[celid].bit61 = (bool((1 << 29) & buf21));
										richTextBox1->AppendText("bit61 = " + celsArray[celid].bit61 + "\n");
									celsArray[celid].bit62 = (bool((1 << 30) & buf21));
										richTextBox1->AppendText("bit62 = " + celsArray[celid].bit62 + "\n");
									celsArray[celid].bit63 = (bool((1 << 31) & buf21));
										richTextBox1->AppendText("bit63 = " + celsArray[celid].bit63 + "\n");

								count3 += 8;
								count3 += celsize;
								goto nextccb;
							}
nextccb:
			celN++; // next cel
			richTextBox1->AppendText("\n");
		}


	celarrready = true;
	goto startagain;
}
#endif;
///////////////*************///////////////****************/////////////////***************
///////////////*************///////////////****************/////////////////***************

//	richTextBox4->AppendText("CCBs before CubeDataSpecs = " + buf + "\n");
	buf21 = Swap4Bytes(buf21);
	count2 +=4;

for (int i=0; i < datalength11; i++)	{
		dfile.read((char *)&buf21, sizeof(buf21));
		count2 +=4;
			if (buf21 == 0x20424343) {
			n2++;
//			richTextBox4->AppendText("n = " + n + "\n");
			if (n2 == numofEntries) {
			// It's the last CCB before my 5 blocks. Save it and close tmpfile1.
//			richTextBox4->AppendText("count = " + count + "\n");

						dfile.seekg (count2-8, dfile.beg);
						count2 -=8;
						dfile.read((char *)&buf22,sizeof(buf22));
						count2 +=4;
							buf22 = Swap4Bytes(buf22);
			//******************************************************
							// IF size not found (8 bytes before located) Seek size
							if (buf22 > 0xFFFFF) {
								eightbytes2 = true;
								// Step back for 12 bytes
								dfile.seekg (count2-12, dfile.beg);
								dfile.read((char *)&buf22,sizeof(buf22));
								buf22 = Swap4Bytes(buf22);
								count2 -=8;
								}
//						richTextBox4->AppendText("Last CCB position = " + count + "\n");
//						richTextBox4->AppendText("Last CCB size = " + buf2 + "\n");
							if (eightbytes2) {
//								infile.seekg (count+buf2+8, infile.beg);
								count2 += 8;
//								richTextBox4->AppendText("8 bytes\n");
								} else 
								{
//								infile.seekg (count+buf2, infile.beg);
								count2;
								}
			//******************************************************
//						richTextBox4->AppendText("buf2 = " + buf2 + "\n");

						// Save last CCB to tmp1 file
//						buf2 = Swap4Bytes(buf2);
						dfile.seekg (count2+4, dfile.beg); // Jump to pos just after CCB label
						for (int j=0; j<(buf22/4)-1; j++) {
//							richTextBox4->AppendText("j = " + j + "\n");
							dfile.read((char *)&buf21,sizeof(buf21));
	//						count += 4;
///							infile.read((char *)&buf2,sizeof(buf2));
							}
						goto complete;
				}
			}
	}
complete:
/////////////*****************************************//////////////////////////////////

/////////////*****************//////***********************////////////////////////////
#if 1;
unsigned char bufer100 = 0;

// Read block 1 to store backgrounds data (for vt rotations in the future)
// !=0 means I need to rotate texture. Store all indexes in array
for (int i=0; i<0x100; i++) {
	dfile.read((char *)&bufer100, sizeof(bufer100));
	backgroundsArray[i] = bufer100;
}
for (int i=0; i<0x100; i++) {
	dfile.read((char *)&bufer100, sizeof(bufer100)); // For torches
	torchesArray[i] = bufer100;
}
// Skip the rest 0x100 bytes of block 1.
for (int i=0; i<0x100; i++) {
	dfile.read((char *)&bufer100, sizeof(bufer100)); // Just skip 0x100 bytes.
}
#endif;
/////////////*****************//////***********************////////////////////////////
						// Skip block 1.
						pos3002 = count2 + buf22;
						dfile.seekg (count2 + buf22 + 0x300, dfile.beg);
						count2 = count2 + buf22 + 0x300;

						// Skip block 2.
						// Read 1 byte (block 2 size)
						dfile.read((char *)&b2size2,sizeof(b2size2));
						count2 += b2size2;
						block2Size = b2size2;
//							richTextBox4->AppendText("b2size2 = " + b2size2 + "\n");
							// Read all block 2 to array for future use.
								#if 1;
									unsigned char torch;
										for (int i=0; i<b2size2-1; i++) {
											dfile.read((char *)&torch, sizeof(torch));
											torchesblock2[i] = torch;
//											richTextBox4->AppendText("torch = " + torchesblock2[i] + "\n");
										}
								#endif;
//						richTextBox4->AppendText("b2size = " + b2size + "\n");

						dfile.seekg (count2, dfile.beg);
						// Reading N of entries of Block 3 (cube's specs itself)
						dfile.read((char *)&buf22,sizeof(buf22));
						count2 += 4;
						buf22 = Swap4Bytes(buf22);
//						richTextBox4->AppendText("Block 3 entries = " + buf2 + "\n");
						numofEntries = buf22;
						specsArray = new cubespecs[numofEntries];////// CREATE CUBES ARRAY!
						label158->Text = "Total specs=" + numofEntries.ToString();

						// Skip block 3
						count2 = count2 + numofEntries*16 + 8;

						dfile.seekg (count2, dfile.beg);
#if 1;
		// Seek teleports data (block 5)
		unsigned int buf777, b5size;
		unsigned char tt, tele = 0;
			// Skip 0x6C block size and block 4 itself.
						count2 += 0x70;
						// Read block 5 (teleports and elevators)
						dfile.seekg (count2, dfile.beg);
						// Read block 5 size
						dfile.read((char *)&buf777,sizeof(buf777));
						count2 += 4;
						buf777 = Swap4Bytes(buf777);
						b5size = buf777;
						richTextBox4->AppendText("Block 5 (teleports) size = " + b5size + "\n");
							if (b5size == 4) {
								dataGridView18->Rows[0]->Cells[0]->Value = "No teleports";
								dataGridView18->Rows[0]->Cells[1]->Value = "or elevators";
								dataGridView18->Rows[0]->Cells[2]->Value = "found";
								} else {

						dfile.seekg (count2, dfile.beg);
						richTextBox4->AppendText("Pos in datafile = " + count2 + "\n");
									// Now at the block 5 data start. Read and fill dataGridView18.
						dfile.read((char *)&tt,sizeof(tt));	// Reading teleports quantity.
						teleportArray = new teleport[tt]; // New teleport array
						richTextBox4->AppendText("Teleports = " + tt + "\n");
						int line, j=0;
#if 0;
							for (int i=0; i<tt; i++) {
								dataGridView18->Rows->Add();
								dataGridView18->Rows[i+line]->Cells[0]->Value = i;
								// Fill all teleports data in dataGridView
								dfile.read((char *)&tele,sizeof(char));	// Reading X.
									teleportArray[i].fromX = tele;
								dfile.read((char *)&tele,sizeof(char));	// Reading Y.
									teleportArray[i].fromY = tele;
								dfile.read((char *)&tele,sizeof(char));	// Reading Z.
									teleportArray[i].fromZ = tele;
								dfile.read((char *)&tele,sizeof(char));	// Reading N of exits.
									teleportArray[i].NofExits = tele;
				richTextBox4->AppendText("N of exits for teleport " + i + " = " + teleportArray[i].NofExits + "\n");
			//						j = tele;
							
			dataGridView18->Rows[i+line]->Cells[1]->Value = teleportArray[i].fromX + ", " + teleportArray[i].fromY + ", " + teleportArray[i].fromZ;
#if 0;							
							// Fill exits:
							for (j=0; j<teleportArray[i].NofExits; j++) { //////////////// FIX all struct teleportArray

								dfile.read((char *)&tele,sizeof(char));	// Reading toX.
									teleportArray[j].toX = tele;
								dfile.read((char *)&tele,sizeof(char));	// Reading toY.
									teleportArray[j].toY = tele;
								dfile.read((char *)&tele,sizeof(char));	// Reading toZ.
									teleportArray[j].toZ = tele;
						dataGridView18->Rows[i+j]->Cells[2]->Value = teleportArray[j].toX + ", " + teleportArray[j].toY + ", " + teleportArray[j].toZ;
						dataGridView18->Rows->Add();
								}
#endif;	
							if (teleportArray[i].NofExits > 1) {
								line = i+j-1;
							} else {
								line = i;
							}
							}
#endif;	
						}
#endif;
//		dataGridView18->Rows[0]->Cells[0]->Value = 1;
//		dataGridView18->Rows[0]->Cells[1]->Value = 2;
//		dataGridView18->Rows[0]->Cells[2]->Value = 3;
//		dataGridView18->Rows->Add();

dfile.close();
#endif;
//try {
///////////////////////////////////	levelN = int::Parse(openFileDialog1->SafeFileName);
//	throw (levelN);
//	}
//	catch (const std::exception&) { /* */ }

LevelName = "ERROR WHILE LOADING THE LEVEL OR INCORRECT FILENAME";

LevelName2 = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
FileNameString = context.marshal_as<std::string>(LevelName2);
//std::string FileNameString = context.marshal_as<std::string>(LevelName2);

	if (FileNameString == "0") {
		LevelName = "Storehouse (Bonus level)";
		}
	if (FileNameString == "1") {
		LevelName = "Ice Cavern";
		}
	if (FileNameString == "2") {
		LevelName = "Cold Cavern";
		}
	if (FileNameString == "3") {
		LevelName = "Burial Chamber";
		}
	if (FileNameString == "4") {
		LevelName = "Antechamber";
		}
	if (FileNameString == "5") {
		LevelName = "Temple Chamber";
		}
	if (FileNameString == "6") {
		LevelName = "Alchemy Keep";
		}
	if (FileNameString == "7") {
		LevelName = "Alchemy Tower";
		}
	if (FileNameString == "8") {
		LevelName = "Physical Keep";
		}
	if (FileNameString == "9") {
		LevelName = "Physical Tower";
		}
	if (FileNameString == "10") {
		LevelName = "Astral Keep";
		}
	if (FileNameString == "11") {
		LevelName = "Astral Tower";
		}
	if (FileNameString == "11a") {
		LevelName = "Astral Tower Sublevel 1";
		}
	if (FileNameString == "11b") {
		LevelName = "Astral Tower Sublevel 2";
		}
	if (FileNameString == "11c") {
		LevelName = "Astral Tower Sublevel 3";
		}
	if (FileNameString == "11d") {
		LevelName = "Astral Tower Sublevel 4";
		}
	if (FileNameString == "11e") {
		LevelName = "Astral Tower Sublevel 5";
		}
	if (FileNameString == "12") {
		LevelName = "Temple of the Altarstone";
		}
	if (FileNameString == "13") {
		LevelName = "Main Artery";
		}
	if (FileNameString == "14") {
		LevelName = "Right Artery";
		}
	if (FileNameString == "15") {
		LevelName = "Left Artery";
		}
	if (FileNameString == "16") {
		LevelName = "Right Ventricle";
		}
	if (FileNameString == "17") {
		LevelName = "Right Vein";
		}
	if (FileNameString == "18") {
		LevelName = "Left Vein";
		}
	if (FileNameString == "19") {
		LevelName = "Left Ventricle";
		}
	if (FileNameString == "20") {
		LevelName = "Right Vein 2";
		}
	if (FileNameString == "21") {
		LevelName = "Left Vein 2";
		}
	if (FileNameString == "22") {
		LevelName = "Antechamber";
		}
	if (FileNameString == "23") {
		LevelName = "Final Battle";
		}

#if 0;
		  switch (levelN) {
			case 0:
				LevelName = "Bonus level";
				break;
			case 1:
				LevelName = "Ice Cavern";
				break;
			case 2:
				LevelName = "Cold Cavern";
				break;
			case 3:
				LevelName = "Burial Chamber";
				break;
			case 4:
				LevelName = "Antechamber";
				break;
			case 5:
				LevelName = "Temple Chamber";
				break;
			case 6:
				LevelName = "Alchemy Keep";
				break;
			case 7:
				LevelName = "Alchemy Tower";
				break;
			case 8:
				LevelName = "Physical Keep";
				break;
			case 9:
				LevelName = "Physical Tower";
				break;
			case 10:
				LevelName = "Astral Keep";
				break;
			case 11:
				LevelName = "Astral Tower";
				break;
			case 12:
				LevelName = "Temple of the Altarstone";
				break;
			case 13:
				LevelName = "Main Artery";
				break;
			case 14:
				LevelName = "Right Artery";
				break;
			case 15:
				LevelName = "Left Artery";
				break;
			case 16:
				LevelName = "Right Ventricle";
				break;
			case 17:
				LevelName = "Right Vein";
				break;
			case 18:
				LevelName = "Left Vein";
				break;
			case 19:
				LevelName = "Left Ventricle";
				break;
			case 20:
				LevelName = "Right Vein 2";
				break;
			case 21:
				LevelName = "Left Vein 2";
				break;
			case 22:
				LevelName = "Necromancer's Antechamber";
				break;
			case 23:
				LevelName = "Final Battle";
				break;
			}

#endif;

//		Form1:Text = "Deathkeep 3DO level editor v0.1 (Vas.1987)   " + openFileDialog1->FileName + " (" + LevelName + ")";
		Form1:Text = "Deathkeep 3DO level editor v1.3 (Vas.1987)     " + LevelName2 + " - (" + LevelName + ")";
//		  label9->Text = openFileDialog1->SafeFileName;
		  label9->Text = "FilePath = " + openFileDialog1->FileName;
//		  label10->Text = voxelsCount.ToString();
		  
//		  String^ path = openFileDialog1->FileName->ToCharArray(); 
 //String^ path = openFileDialog1->FileName->ToCharArray(0,3);
//		  string file = Path.GetFileName(openFileDialog1.FileName);


long long buffer;
ifstream infile;

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(openFileDialog1->FileName); 
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
//infile.open("c:\\11a", ios::binary|ios::out);
//infile.open("c:\\0", ios::binary|ios::out);
infile.open(path, ios::binary|ios::in);

///voxel *voxelArray = new voxel[16384];
//struct voxel voxelArray[16384];
//long voxelArray[16384] = {0};
int voxCount = 0; // All voxels
int voxWithData = 0; // Voxels only with data

currentVoxel = 0;
currRow = 0;
currCol = 0; 
currFloor = 0;


    infile.seekg (0, infile.end);
    int length = infile.tellg();
    infile.seekg (0, infile.beg);
//	char* buffer = new char [length];


///while(infile.read((char *)&buffer,sizeof(buffer)))
////////////////////while(infile.read((char *)&buffer,sizeof(buffer)))
voxCount = 0;
String ^coords = "";
string stdstring;

for (int d=0; d<64; d++) 
	{
//	currCol = d;

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {
			infile.read((char *)&buffer,sizeof(buffer));
//			voxCount++;
			voxelArray[voxCount].x = d;
			voxelArray[voxCount].y = k;
			voxelArray[voxCount].z = s;
			voxelArray[voxCount].value1 = buffer;
				coords = d+","+k+","+s;
				stdstring = msclr::interop::marshal_as<std::string>(coords);
				voxelArray[voxCount].coords = stdstring;

//			infile.read((char *)&buffer,sizeof(buffer));
//			voxelArray[voxCount].value2 = buffer;
			

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

///richTextBox1->AppendText(voxelArray[voxCount].value1.ToString()+"\n");
//dataGridView1->Rows[currRow]->Cells[currCol]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
//		label18->Text = currentVoxel.ToString();
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
//		label19->Text = currentVoxel.ToString();
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
//		label21->Text = currentVoxel.ToString();
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
//		label23->Text = currentVoxel.ToString();
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
//		label25->Text = currentVoxel.ToString();
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
//		label27->Text = currentVoxel.ToString();
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
//		label29->Text = currentVoxel.ToString();
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
//		label31->Text = currentVoxel.ToString();
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			
				/// FOR HEX:
				System::String^ systemString;
				char buffer2 [20];
				_i64toa (voxelArray[voxCount].value1, buffer2, 16);
				systemString = msclr::interop::marshal_as<System::String^>(buffer2);
				//label11->Text = systemString;
	
			if (buffer != 0xff00000000000000) 
				{
					voxWithData++;
					label11->Text = voxWithData.ToString();
				};

			voxCount++;
		}
}
}



label3->Text = voxCount.ToString();
#if 0;
int hexvalue = DecToHex(voxelArray[6144].value1);
label2->Text = hexvalue.ToString();
hexvalue = DecToHex(voxelArray[6144].value2);
label4->Text = hexvalue.ToString();
#endif;

#if 0;
int val = 6146;
_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
//label6->Text = systemString;
textBox1->Text = systemString;

/// FOR HEX:
char buffer2 [20];
//char *buffer2 [33];
_i64toa (voxelArray[val].value1, buffer2, 16);
//itoa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox2->Text = systemString;

label2->Text = voxelArray[val].value1.ToString();
//label4->Text = voxelArray[6146].value2.ToString();
#endif;

infile.close();
button2->Enabled = 1;
button5->Enabled = 1;
button7->Enabled = 1;
button4->Enabled = 1;
button6->Enabled = 1;
button23->Enabled = 1;
button32->Enabled = 1;
button33->Enabled = 1;
///***********************************************delete []voxelArray;
// Load all cube specs to array. There are 16384 cubes maximum
richTextBox2->Clear();
// Now open *data file for reading cube's specs. 
String ^ dataFilePath = openFileDialog1->FileName + "data";
richTextBox3->AppendText("DataFilePath = = " + dataFilePath + "\n");
//label157->Text = "DataFilePath = " + dataFilePath;

ifstream datafile;
pin_ptr<const wchar_t> convertedValue11 = PtrToStringChars(dataFilePath); 
const wchar_t *datapath = convertedValue11;                     // <-- Unnecessary, but to be completely verbose
datafile.open(datapath, ios::binary|ios::in);

    datafile.seekg (0, datafile.end);
    int datalength = datafile.tellg();
    datafile.seekg (0, datafile.beg);
	// Do all stuff here. File opened for reading cube's specs.
int buf, buf2;
unsigned int n=0;
unsigned int count = 0;
bool eightbytes = false;
unsigned char b2size, entryexit, cubespecstemp = 0;
//unsigned byte cubespecstemp;
//unsigned int numofEntries, block3Offset = 0;
unsigned int block3Offset = 0;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 1;
// Blank all array data
	for (int g=0; g<numofEntries; g++) {
		specsArray[g].textureW = 0;
		specsArray[g].textureS = 0;
		specsArray[g].textureE = 0;
		specsArray[g].textureN = 0;
		specsArray[g].textureNWfromN = 0;
		specsArray[g].textureNEfromN = 0;
		specsArray[g].textureNWfromS = 0;
		specsArray[g].textureNEfromS = 0;
		specsArray[g].textureFloor = 0;
		specsArray[g].textureCeiling = 0;
		specsArray[g].unknown1 = 0;
		specsArray[g].telep_rest_elev = 0;
		specsArray[g].unknown3 = 0;
		specsArray[g].unknown4 = 0;
		specsArray[g].unknown5 = 0;
		specsArray[g].unknown6 = 0;
							}
	// Reading first 4 bytes. It's a number of CCBs I must skip to read data blocks.
	datafile.read((char *)&buf,sizeof(buf));
	buf = Swap4Bytes(buf);
	richTextBox2->AppendText("CCBs before CubeDataSpecs = " + buf + "\n");
//	dataGridView9->Rows[7]->Cells[2]->Value = "0x" + Swap4Bytes(buf).ToString();
unsigned int count111 = 0;
bool onesearch = false;

	for (int i=0; i<datalength; i++) {
prefixfound:
		datafile.read((char *)&buf2,sizeof(buf2));
		count +=4; 
				if (buf2 == 0x20424343) {
					///**************///////////////*****************////////////////******************//////////////////***************////////
					#if 1;
					if (onesearch == false) {
						int buf3 = 0;
						char buf222 = 0;
					// Trying to seek default texture. Search for Prefix before textureID.
						// 1) Step back for 8 bytes.
									datafile.seekg (count-4, datafile.beg);
									count111 = count-4;
									datafile.read((char *)&buf3,sizeof(buf3));
									count111 += 4;
									buf3 = Swap4Bytes(buf3);
						// 2) Check for 8 bytes. If true, step back 16 bytes. If false, step back 8 bytes
									if (buf3 >= 0xFFFFF) {
										datafile.seekg (count111-16, datafile.beg);
										count111 -= 16;
									} else {
										datafile.seekg (count111-8, datafile.beg);
										count111 -= 8;
										}
						// 3) Read 3 byte byte by byte for Prefix.
									datafile.read((char *)&buf222,1);
									datafile.read((char *)&buf222,1);
									datafile.read((char *)&buf222,1);
									count111 += 3;
						// 4) If Prefix == 0x10, read 1 more byte for ID and store defaultTextureID.
									if (buf222 == 0x10) {
										datafile.read((char *)&buf222,1);
										count111++;
										defaultTextureID = buf222;
										onesearch = true;
											richTextBox2->AppendText("defaultTextureID = " + defaultTextureID + "\n");
											datafile.seekg (count-4, datafile.beg);
											goto prefixfound;
										}
									datafile.read((char *)&buf222,1);// Skip ID
									count111++;
						// 5) Read while 0x20424343 is reached (for consistency).
								for (int i2=0; i2<(datalength-count111*4); i2++) {
									datafile.read((char *)&buf3,sizeof(buf3));
									count111 += 4;
										if	(buf3 == 0x20424343) {
											//count = count111;
											goto prefixfound2;
										}
								}
//prefixfound2:
//						richTextBox2->AppendText("next =>\n");
//**// For debug						richTextBox2->AppendText("COUNT = " + count + "\n");
					}
prefixfound2:
					///**************///////////////*****************////////////////******************//////////////////***************////////
					//
					#endif;
					n++;
//**// For debug						richTextBox2->AppendText("n = " + n + "\n");
					if (n == buf) {
						if (onesearch==true) {
							count -= 8;
							datafile.seekg (count-4, datafile.beg);
						} else {
							datafile.seekg (count-4, datafile.beg);
							}
						datafile.read((char *)&buf2,sizeof(buf2));
						//count -=4;
							buf2 = Swap4Bytes(buf2);
							// IF size not found (8 bytes before located) Seek size
							if (buf2 > 0xFFFFF) {
								eightbytes = true;
								// Step back for 12 bytes
								datafile.seekg (count-12, datafile.beg);
								datafile.read((char *)&buf2,sizeof(buf2));
								buf2 = Swap4Bytes(buf2);
								count -=8;
								}
						richTextBox2->AppendText("Last CCB position = " + count + "\n");
						richTextBox2->AppendText("Last CCB size = " + buf2 + "\n");
						// Jump over this CCB 
							if (eightbytes) {
								datafile.seekg (count+buf2+8, datafile.beg);
								count = count + buf2 + 8;
								richTextBox2->AppendText("8 bytes passed \n");
								} else 
								{
								datafile.seekg (count+buf2, datafile.beg);
								count += buf2;
								}

						// Skip block 1.
						datafile.seekg (count+0x300, datafile.beg);
						count += 0x300;

						// Skip block 2.
						// Read 1 byte (block 2 size)
						datafile.read((char *)&b2size,sizeof(b2size));
						count += b2size;
						richTextBox2->AppendText("b2size = " + b2size + "\n");

						datafile.seekg (count, datafile.beg);
						// Reading N of entries of Block 3 (cube's specs itself)
						datafile.read((char *)&buf2,sizeof(buf2));
						count += 4;
						buf2 = Swap4Bytes(buf2);
						richTextBox2->AppendText("Block 3 entries = " + buf2 + "\n");
						numofEntries = buf2; // NUMBER OF CUBES!
						block3Offset = count;

#if 1;
						// Read all specs to array and add to the datagrid??????????????
						richTextBox2->AppendText("EntryN textureW textureS textureE textureN textureNWfromN textureNEfromN textureNWfromS textureNEfromS textureFloor textureCeiling unknown1 telep_rest_elev unknown3 unknown4 unknown5 unknown6\n");
						datafile.seekg (count, datafile.beg);
					for (int j=0; j<numofEntries; j++) {
						progressBar1->Maximum = numofEntries;// Display the progress
						progressBar1->Increment(1);
						progressBar1->Update();
						this->Update();
						if (progressBar1->Value == progressBar1->Maximum) {
							progressBar1->Value = 0;
							}

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureW = cubespecstemp;
							specsArray[j].mirroredW = (bool((1 << 6)  &  cubespecstemp));
						richTextBox2->AppendText(j + " ");
						richTextBox2->AppendText(specsArray[j].textureW + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureS = cubespecstemp;
							specsArray[j].mirroredS = (bool((1 << 6)  &  cubespecstemp));
						richTextBox2->AppendText(specsArray[j].textureS + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureE = cubespecstemp;
							specsArray[j].mirroredE = (bool((1 << 6)  &  cubespecstemp));
						richTextBox2->AppendText(specsArray[j].textureE + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureN = cubespecstemp;
							specsArray[j].mirroredN = (bool((1 << 6)  &  cubespecstemp));
						richTextBox2->AppendText(specsArray[j].textureN + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureNWfromN = cubespecstemp;
							specsArray[j].mirroredNWfromN = (bool((1 << 6)  &  cubespecstemp));
						richTextBox2->AppendText(specsArray[j].textureNWfromN + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureNEfromN = cubespecstemp;
							specsArray[j].mirroredNEfromN = (bool((1 << 6)  &  cubespecstemp));
						richTextBox2->AppendText(specsArray[j].textureNEfromN + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureNWfromS = cubespecstemp;
							specsArray[j].mirroredNWfromS = (bool((1 << 6)  &  cubespecstemp));
						richTextBox2->AppendText(specsArray[j].textureNWfromS + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureNEfromS = cubespecstemp;
							specsArray[j].mirroredNEfromS = (bool((1 << 6)  &  cubespecstemp));
						richTextBox2->AppendText(specsArray[j].textureNEfromS + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureFloor = cubespecstemp;
							specsArray[j].textureFloorOrient = cubespecstemp;
							specsArray[j].textureFloorOrient = specsArray[j].textureFloorOrient >> 6;
						richTextBox2->AppendText(specsArray[j].textureFloor + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].textureCeiling = cubespecstemp;
							specsArray[j].textureCeilingOrient = cubespecstemp;
							specsArray[j].textureCeilingOrient = specsArray[j].textureCeilingOrient >> 6;
						richTextBox2->AppendText(specsArray[j].textureCeiling + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].unknown1 = cubespecstemp;
						richTextBox2->AppendText(specsArray[j].unknown1 + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].telep_rest_elev = cubespecstemp;
						richTextBox2->AppendText(specsArray[j].telep_rest_elev + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].unknown3 = cubespecstemp;
						richTextBox2->AppendText(specsArray[j].unknown3 + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].unknown4 = cubespecstemp;
						richTextBox2->AppendText(specsArray[j].unknown4 + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].unknown5 = cubespecstemp;
						richTextBox2->AppendText(specsArray[j].unknown5 + " ");

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						specsArray[j].unknown6 = cubespecstemp;
						richTextBox2->AppendText(specsArray[j].unknown6 + " ");
						richTextBox2->AppendText("\n");	
						}

#endif;
						// Move to the end of block 3 to read entry and exit coordinates
							datafile.seekg (block3Offset + numofEntries*16, datafile.beg);
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelEntryX = entryexit;
								richTextBox2->AppendText("Entry X = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelEntryY = entryexit;
								richTextBox2->AppendText("Entry Y = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelEntryZ = entryexit;
								richTextBox2->AppendText("Entry Z = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelEntryRotation = entryexit;
								richTextBox2->AppendText("Entry Rotation = " + entryexit + "\n");
								
							
							// Read level exit coords.
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelExitX = entryexit;
								richTextBox2->AppendText("Exit X = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelExitY = entryexit;
								richTextBox2->AppendText("Exit Y = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelExitZ = entryexit;
								richTextBox2->AppendText("Exit Z = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelEntryRotation = entryexit;
								richTextBox2->AppendText("Entry Rotation = " + entryexit + "\n");
								
					}
			} 
		}// End of reading specs
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
datafile.close();
notloaded = false;
button24->Enabled = 1;// Cube edit confirm
button24->Enabled = 1;// Cube edit confirm
button25->Enabled = 1;// Cube edit confirm
button26->Enabled = 1;// Cube edit confirm
button27->Enabled = 1;// Cube edit confirm
button28->Enabled = 1;// Cube edit confirm
button29->Enabled = 1;// Cube edit confirm
button30->Enabled = 1;// Cube edit confirm
button31->Enabled = 1;// Cube edit confirm
#endif;
      }


			 }



// Form 1 create
private: System::Void Form1_Load(System::Object^  sender, System::EventArgs^  e) {
timer1->Enabled = 0;
timer2->Enabled = 0;
comboBox1->SelectedIndex = 0;
//dataGridView9->RowCount = 32;
dataGridView10->RowCount = 1;
dataGridView11->RowCount = 1;
dataGridView12->RowCount = 1;
dataGridView13->RowCount = 1;
dataGridView14->RowCount = 1;
dataGridView15->RowCount = 1;
dataGridView16->RowCount = 1;
dataGridView17->RowCount = 1;

dataGridView9->Rows->Add();
dataGridView9->Rows[0]->Cells[1]->Value = "Level file. Byte 7. Item or enemy type";
dataGridView9->Rows->Add();
dataGridView9->Rows[1]->Cells[1]->Value = "Level file. Byte 5. Item specs";
dataGridView9->Rows->Add();
dataGridView9->Rows[2]->Cells[1]->Value = "Level file. Byte 1. Bit #1. Door";
dataGridView9->Rows->Add();
dataGridView9->Rows[3]->Cells[1]->Value = "Level file. Byte 1. Bit #3. Door Locked?";
dataGridView9->Rows->Add();
dataGridView9->Rows[4]->Cells[1]->Value = "Level file. Byte 1. Brightness and Flickering";
dataGridView9->Rows->Add();
dataGridView9->Rows[5]->Cells[1]->Value = "Level file. Byte 0. Stairs, Ramps, Teleports and Elevators";
dataGridView9->Rows->Add();
dataGridView9->Rows[6]->Cells[1]->Value = "Level file. Bytes 2, 3 (Bits #4-8). CubeN in *data file";
dataGridView9->Rows->Add();
dataGridView9->Rows[7]->Cells[1]->Value = "Byte 1. Texture West";
dataGridView9->Rows->Add();
dataGridView9->Rows[8]->Cells[1]->Value = "Byte 2. Texture South";
dataGridView9->Rows->Add();
dataGridView9->Rows[9]->Cells[1]->Value = "Byte 3. Texture East";
dataGridView9->Rows->Add();
dataGridView9->Rows[10]->Cells[1]->Value = "Byte 4. Texture North";
dataGridView9->Rows->Add();
dataGridView9->Rows[11]->Cells[1]->Value = "Byte 5. Texture NW-SE. Non-transp from N";
dataGridView9->Rows->Add();
dataGridView9->Rows[12]->Cells[1]->Value = "Byte 6. Texture NE-SW. Non-transp from S";
dataGridView9->Rows->Add();
dataGridView9->Rows[13]->Cells[1]->Value = "Byte 7. Texture NW-SE. Non-transp from S";
dataGridView9->Rows->Add();
dataGridView9->Rows[14]->Cells[1]->Value = "Byte 8. Texture NE-SW. Non-transp from N";
dataGridView9->Rows->Add();
dataGridView9->Rows[15]->Cells[1]->Value = "Byte 9. Floor";
dataGridView9->Rows->Add();
dataGridView9->Rows[16]->Cells[1]->Value = "Byte 10. Ceiling";
dataGridView9->Rows->Add();
dataGridView9->Rows[17]->Cells[1]->Value = "Byte 11. reserved";
dataGridView9->Rows->Add();
dataGridView9->Rows[18]->Cells[1]->Value = "Byte 12. Friction, Resting, Damage, Stairs rise texture";
dataGridView9->Rows->Add();
dataGridView9->Rows[19]->Cells[1]->Value = "Byte 13. reserved";
dataGridView9->Rows->Add();
dataGridView9->Rows[20]->Cells[1]->Value = "Byte 14. reserved";
dataGridView9->Rows->Add();
dataGridView9->Rows[21]->Cells[1]->Value = "Byte 15. Additional cube's collisions";
dataGridView9->Rows->Add();
dataGridView9->Rows[22]->Cells[1]->Value = "Byte 16. Cube's collisions";
dataGridView9->Rows->Add();
dataGridView9->Rows[23]->Cells[1]->Value = "Level Entry Coordinate X";
dataGridView9->Rows->Add();
dataGridView9->Rows[24]->Cells[1]->Value = "Level Entry Coordinate Y";
dataGridView9->Rows->Add();
dataGridView9->Rows[25]->Cells[1]->Value = "Level Entry Coordinate Z";
dataGridView9->Rows->Add();
dataGridView9->Rows[26]->Cells[1]->Value = "Level Entry Orientation";
dataGridView9->Rows->Add();
dataGridView9->Rows[27]->Cells[1]->Value = "Level Exit Coordinate X";
dataGridView9->Rows->Add();
dataGridView9->Rows[28]->Cells[1]->Value = "Level Exit Coordinate Y";
dataGridView9->Rows->Add();
dataGridView9->Rows[29]->Cells[1]->Value = "Level Exit Coordinate Z";

for (int i=0; i<dataGridView9->RowCount; i++) {
		dataGridView9->Rows[i]->Cells[0]->Value = i+1;
	}
		 }



//private: System::Void tabPage1_Click(System::Object^  sender, System::EventArgs^  e) {
//		 }

// Read all data from *data file
void readValuesFromVoxel (unsigned int floorN, _ULonglong voxeldata, unsigned char itemType, unsigned char itemSpecs, unsigned char brightness, unsigned char stairsAndRamps, unsigned short int cubeNinDataFile, int x, int y) {
int val = 32*8*x+y*8+floorN; // 0- Floor#	
_ULonglong temp = voxelArray[val].value1;
std::bitset<64> bs(temp);

//richTextBox3->AppendText("FloorN = " + floorN + "\n");
//richTextBox3->AppendText("voxeldata = " + voxeldata + "\n");
//richTextBox3->AppendText("itemType = " + itemType + "\n");				// For debug only
//richTextBox3->AppendText("itemSpecs = " + itemSpecs + "\n");
//richTextBox3->AppendText("brightness = " + brightness + "\n");
//richTextBox3->AppendText("stairsAndRamps = " + stairsAndRamps + "\n");
//richTextBox3->AppendText("cubeNinDataFile = " + cubeNinDataFile + "\n");

//Throw known bits or bytes to the dataGrid9
//richTextBox3->Clear();

std::string stdString2 = bs.to_string();
System::String^ systemString2 = msclr::interop::marshal_as<System::String^>(stdString2);
unsigned char wallsBevels1, wallsBevels2 = 0;
//unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
//unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
//wallsBevels2 = ValueSelector(voxelArray[val].value1, 3);	// Walls and Bevels. Byte 2
//dataGridView9->Rows[4]->Cells[2]->Value = flickeringLight.ToString();

///**//dataGridView9->Rows[6]->Cells[2]->Value = wallsBevels1.ToString();

wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;
///**//dataGridView9->Rows[7]->Cells[2]->Value = wallsBevels2.ToString();

//unsigned char c3[5] = {wallsBevels1,wallsBevels2};
char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cube's N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

//readValuesFromVoxel(0, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data

label12->Text = "CubeSpecs = " + cubeNinDataFile.ToString();
textBox44->Text = systemString111;
textBox45->Text = systemString111;
textBox46->Text = systemString111;
textBox47->Text = systemString111;
textBox48->Text = systemString111;
textBox49->Text = systemString111;
textBox50->Text = systemString111;
textBox51->Text = systemString111;

// Now open *data file for reading cube's specs. 
String ^ dataFilePath = openFileDialog1->FileName + "data";
label157->Text = "DataFilePath = " + dataFilePath;

ifstream datafile;
pin_ptr<const wchar_t> convertedValue = PtrToStringChars(dataFilePath); 
const wchar_t *datapath = convertedValue;                     // <-- Unnecessary, but to be completely verbose
datafile.open(datapath, ios::binary|ios::in);

    datafile.seekg (0, datafile.end);
    int datalength = datafile.tellg();
    datafile.seekg (0, datafile.beg);
	// Do all stuff here. File opened for reading cube's specs.
int buf, buf2;
unsigned int n=0;
unsigned int count = 0;
bool eightbytes = false;
unsigned char b2size, cubespecstemp, entryexit = 0;
unsigned int numofEntries, block3Offset = 0;


	// Reading first 4 bytes. It's a number of CCBs I must skip to read data blocks.
	datafile.read((char *)&buf,sizeof(buf));
	buf = Swap4Bytes(buf);
	richTextBox3->AppendText("CCBs before CubeDataSpecs = " + buf + "\n");
//	dataGridView9->Rows[7]->Cells[2]->Value = "0x" + Swap4Bytes(buf).ToString();
	for (int i=0; i<datalength; i++) {
		datafile.read((char *)&buf2,sizeof(buf2));
		count +=4; 
				if (buf2 == 0x20424343) {
					n++;
					if (n == buf) {
						datafile.seekg (count-4, datafile.beg);
						datafile.read((char *)&buf2,sizeof(buf2));
						//count -=4;
							buf2 = Swap4Bytes(buf2);
							// IF size not found (8 bytes before located) Seek size
							if (buf2 > 0xFFFFF) {
								eightbytes = true;
								// Step back for 12 bytes
								datafile.seekg (count-12, datafile.beg);
								datafile.read((char *)&buf2,sizeof(buf2));
								buf2 = Swap4Bytes(buf2);
								count -=8;
								}
						richTextBox3->AppendText("Last CCB position = " + count + "\n");
						richTextBox3->AppendText("Last CCB size = " + buf2 + "\n");
						// Jump over this CCB 
							if (eightbytes) {
								datafile.seekg (count+buf2+8, datafile.beg);
								count = count + buf2 + 8;
								richTextBox3->AppendText("8 bytes passed \n");
								} else 
								{
								datafile.seekg (count+buf2, datafile.beg);
								count += buf2;
								}

						// Skip block 1.
						datafile.seekg (count+0x300, datafile.beg);
						count += 0x300;

						// Skip block 2.
						// Read 1 byte (block 2 size)
						datafile.read((char *)&b2size,sizeof(b2size));
						count += b2size;
						richTextBox3->AppendText("b2size = " + b2size + "\n");

						datafile.seekg (count, datafile.beg);
						// Reading N of entries of Block 3 (cube's specs itself)
						datafile.read((char *)&buf2,sizeof(buf2));
						count += 4;
						buf2 = Swap4Bytes(buf2);
						richTextBox3->AppendText("Block 3 entries = " + buf2 + "\n");
						numofEntries = buf2;
						block3Offset = count;
						
			///**// Read all cube specs and fill array
#if 1;
//				specsArray = new cubespecs[numofEntries];
				char spec=0;
				for (int f=0; f<numofEntries; f++) {
					datafile.read((char *)&spec,sizeof(spec)); // Byte 1
					specsArray[f].textureW = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 2
					specsArray[f].textureS = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 3
					specsArray[f].textureE = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 4
					specsArray[f].textureN = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 5
					specsArray[f].textureNWfromN = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 6
					specsArray[f].textureNEfromN = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 7
					specsArray[f].textureNWfromS = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 8
					specsArray[f].textureNEfromS = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 9
					specsArray[f].textureFloor = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 10
					specsArray[f].textureCeiling = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 11
					specsArray[f].unknown1 = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 12
					specsArray[f].telep_rest_elev = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 13
					specsArray[f].unknown3 = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 14
					specsArray[f].unknown4 = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 15
					specsArray[f].unknown5 = spec;
					datafile.read((char *)&spec,sizeof(spec)); // Byte 16
					specsArray[f].unknown6 = spec;
					}

#endif;
				// Back to the block 3 start.
			///**//

						// Jump to cube's data specs
						datafile.seekg (count + 16*cubeNinDataFile, datafile.beg);
						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureW = cubespecstemp;
						specs[0].mirroredW = (bool((1 << 6)  &  cubespecstemp));

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureS = cubespecstemp;
						specs[0].mirroredS = (bool((1 << 6)  &  cubespecstemp));

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureE = cubespecstemp;
						specs[0].mirroredE = (bool((1 << 6)  &  cubespecstemp));

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureN = cubespecstemp;
						specs[0].mirroredN = (bool((1 << 6)  &  cubespecstemp));

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureNWfromN = cubespecstemp;
						specs[0].mirroredNWfromN = (bool((1 << 6)  &  cubespecstemp));

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureNEfromS = cubespecstemp;
						specs[0].mirroredNEfromS = (bool((1 << 6)  &  cubespecstemp));

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureNWfromS = cubespecstemp;
						specs[0].mirroredNWfromS = (bool((1 << 6)  &  cubespecstemp));

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureNEfromN = cubespecstemp;
						specs[0].mirroredNEfromN = (bool((1 << 6)  &  cubespecstemp));

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureFloor = cubespecstemp;
						//specs[0].textureFloorOrienttmp1 = (bool((1 << 6)  &  cubespecstemp));
						//specs[0].textureFloorOrienttmp2 = (bool((1 << 7)  &  cubespecstemp));
						//specs[0].textureFloorOrient &= 0xC0;
						specs[0].textureFloorOrient = cubespecstemp;
						specs[0].textureFloorOrient = specs[0].textureFloorOrient >> 6;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureCeiling = cubespecstemp;
						//specs[0].textureCeilingOrienttmp1 = (bool((1 << 6)  &  cubespecstemp));
						//specs[0].textureCeilingOrienttmp2 = (bool((1 << 7)  &  cubespecstemp));
						specs[0].textureCeilingOrient = cubespecstemp;
//						specs[0].textureCeilingOrient &= 0xC0;
						specs[0].textureCeilingOrient = specs[0].textureCeilingOrient >> 6;
						
						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].unknown1 = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].telep_rest_elev = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].unknown3 = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].unknown4 = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].unknown5 = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].unknown6 = cubespecstemp;

						// Fill dataGridview9 with cube's data specs
						if (specs[0].textureW != 0) { // Texture West present
							char buf[5];
							unsigned int n = 0;
							n = sprintf(buf, "%#x", specs[0].textureW);
//							dataGridView9->Rows[7]->Cells[2]->Value = n;
							dataGridView9->Rows[7]->Cells[2]->Value = specs[0].textureW;
							dataGridView9->Rows[7]->Cells[3]->Value = specs[0].mirroredW;
//							Bitmap bmp = gcnew Bitmap(dataFilePath);
//							dataGridView1->Rows[7]->Cells[2]->Value = bmp;
						} else {
							dataGridView9->Rows[7]->Cells[2]->Value = "";
							dataGridView9->Rows[7]->Cells[3]->Value = "";
						}

						if (specs[0].textureS != 0) { // Texture South present
							dataGridView9->Rows[8]->Cells[2]->Value = specs[0].textureS;
							dataGridView9->Rows[8]->Cells[3]->Value = specs[0].mirroredS;
						} else {
							dataGridView9->Rows[8]->Cells[2]->Value = "";
							dataGridView9->Rows[8]->Cells[3]->Value = "";
						}

						if (specs[0].textureE != 0) { // Texture East present
							dataGridView9->Rows[9]->Cells[2]->Value = specs[0].textureE;
							dataGridView9->Rows[9]->Cells[3]->Value = specs[0].mirroredE;
						} else {
							dataGridView9->Rows[9]->Cells[2]->Value = "";
							dataGridView9->Rows[9]->Cells[3]->Value = "";
						}

						if (specs[0].textureN != 0) { // Texture North present
							dataGridView9->Rows[10]->Cells[2]->Value = specs[0].textureN;
							dataGridView9->Rows[10]->Cells[3]->Value = specs[0].mirroredN;
						} else {
							dataGridView9->Rows[10]->Cells[2]->Value = "";
							dataGridView9->Rows[10]->Cells[3]->Value = "";
						}

						if (specs[0].textureNWfromN != 0) { // Texture NWfromN present
							dataGridView9->Rows[11]->Cells[2]->Value = specs[0].textureNWfromN;
							dataGridView9->Rows[11]->Cells[3]->Value = specs[0].mirroredNWfromN;
						} else {
							dataGridView9->Rows[11]->Cells[2]->Value = "";
							dataGridView9->Rows[11]->Cells[3]->Value = "";
						}

						if (specs[0].textureNEfromS != 0) { // Texture NEfromS present
							dataGridView9->Rows[12]->Cells[2]->Value = specs[0].textureNEfromS;
							dataGridView9->Rows[12]->Cells[3]->Value = specs[0].mirroredNEfromS;
						} else {
							dataGridView9->Rows[12]->Cells[2]->Value = "";
							dataGridView9->Rows[12]->Cells[3]->Value = "";
						}

						if (specs[0].textureNWfromS != 0) { // Texture NWfromS present
							dataGridView9->Rows[13]->Cells[2]->Value = specs[0].textureNWfromS;
							dataGridView9->Rows[13]->Cells[3]->Value = specs[0].mirroredNWfromS;
						} else {
							dataGridView9->Rows[13]->Cells[2]->Value = "";
							dataGridView9->Rows[13]->Cells[3]->Value = "";
						}

						if (specs[0].textureNEfromN != 0) { // Texture NEfromN present
							dataGridView9->Rows[14]->Cells[2]->Value = specs[0].textureNEfromN;
							dataGridView9->Rows[14]->Cells[3]->Value = specs[0].mirroredNEfromN;
						} else {
							dataGridView9->Rows[14]->Cells[2]->Value = "";
							dataGridView9->Rows[14]->Cells[3]->Value = "";
						}
						
						if (specs[0].textureFloor != 0) { // Texture Floor present
							dataGridView9->Rows[15]->Cells[2]->Value = specs[0].textureFloor;
							dataGridView9->Rows[15]->Cells[3]->Value = specs[0].textureFloorOrient;
						} else {
							dataGridView9->Rows[15]->Cells[2]->Value = "";
							dataGridView9->Rows[15]->Cells[3]->Value = "";
						}

						if (specs[0].textureCeiling != 0) { // Texture Ceiling present
							dataGridView9->Rows[16]->Cells[2]->Value = specs[0].textureCeiling;
							dataGridView9->Rows[16]->Cells[3]->Value = specs[0].textureCeilingOrient;
						} else {
							dataGridView9->Rows[16]->Cells[2]->Value = "";
							dataGridView9->Rows[16]->Cells[3]->Value = "";
						}

						if (specs[0].unknown1 != 0) { // 
								dataGridView9->Rows[17]->Cells[2]->Value = specs[0].unknown1;
						} else {
							dataGridView9->Rows[17]->Cells[2]->Value = "";
						}

						switch(specs[0].telep_rest_elev) {
							case 0x20: 
							dataGridView9->Rows[18]->Cells[1]->Value = "Byte 12. Resting zone";
							dataGridView9->Rows[18]->Cells[2]->Value = specs[0].telep_rest_elev;
							goto next;
//							break;

							case 0x40: 
							dataGridView9->Rows[18]->Cells[1]->Value = "Byte 12. Damage";
							dataGridView9->Rows[18]->Cells[2]->Value = specs[0].telep_rest_elev;
							goto next;

							case 0x128: 
							dataGridView9->Rows[18]->Cells[1]->Value = "Byte 12. Low friction";
							dataGridView9->Rows[18]->Cells[2]->Value = specs[0].telep_rest_elev;
							goto next;
//							break;
							default :
							dataGridView9->Rows[18]->Cells[1]->Value = "Byte 12. Friction, Resting, Damage, Stairs rise texture";
							if (specs[0].telep_rest_elev == 0) {
								dataGridView9->Rows[18]->Cells[2]->Value = "";
								} else {
								dataGridView9->Rows[18]->Cells[2]->Value = specs[0].telep_rest_elev;
							}
						}
								//Reading friction, resting and damage bits
								bool lowFriction = (bool((1 << 7)  &  specs[0].telep_rest_elev));	// Low friction
								bool damage = (bool((1 << 6)  &  specs[0].telep_rest_elev));	// Floor damage
								bool restingZone = (bool((1 << 5)  &  specs[0].telep_rest_elev));	// Resting zone

								if (lowFriction == true) {
								dataGridView9->Rows[18]->Cells[1]->Value = "Byte 12. Low friction = true";
									}
								if (damage == true) {
								dataGridView9->Rows[18]->Cells[1]->Value = "Byte 12. Floor damage = true";
									}
								if (restingZone == true) {
								dataGridView9->Rows[18]->Cells[1]->Value = "Byte 12. Resting zone = true";
									}
///						if (specs[0].telep_rest_elev != 0) {
///							if (specs[0].telep_rest_elev == 0x20) { // Teleport, elevator, rest zone?
///								dataGridView9->Rows[20]->Cells[2]->Value = "Resting zone. N = " + specs[0].telep_rest_elev;
///						} 
///							if (specs[0].telep_rest_elev == 0x40) { // Teleport, elevator, rest zone?
///								dataGridView9->Rows[20]->Cells[2]->Value = "Damage?????. N = " + specs[0].telep_rest_elev;
///						}	else {
///							dataGridView9->Rows[20]->Cells[2]->Value = "N/A";
///						}
//						if (specs[0].telep_rest_elev == 0x40) { // Teleport, elevator, rest zone?
//								dataGridView9->Rows[20]->Cells[2]->Value = "Damage?????. N = " + specs[0].telep_rest_elev;
//						} else {
//							dataGridView9->Rows[20]->Cells[2]->Value = "N/A";
//						}
///						}

next:
						if (specs[0].unknown3 != 0) { // 
								dataGridView9->Rows[19]->Cells[2]->Value = specs[0].unknown3;
						} else {
							dataGridView9->Rows[19]->Cells[2]->Value = "";
						}

						if (specs[0].unknown4 != 0) { // 
								dataGridView9->Rows[20]->Cells[2]->Value = specs[0].unknown4;
						} else {
							dataGridView9->Rows[20]->Cells[2]->Value = "";
						}

						if (specs[0].unknown5 != 0) { // 
								dataGridView9->Rows[21]->Cells[2]->Value = specs[0].unknown5;
						} else {
							dataGridView9->Rows[21]->Cells[2]->Value = "";
						}

						if (specs[0].unknown6 != 0) { //
								dataGridView9->Rows[22]->Cells[2]->Value = specs[0].unknown6;
						} else {
							dataGridView9->Rows[22]->Cells[2]->Value = "";
						}


							// Move to the end of block 3 to read entry and exit coordinates
							datafile.seekg (block3Offset + numofEntries*16, datafile.beg);
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelEntryX = entryexit;
								entryX = levelEntryX;
//								richTextBox3->AppendText("Entry X = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelEntryY = entryexit;
								entryY = levelEntryY;
//								richTextBox3->AppendText("Entry Y = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelEntryZ = entryexit;
								entryZ = levelEntryZ;
//								richTextBox3->AppendText("Entry Z = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelEntryRotation = entryexit;
								entryRotation = levelEntryRotation;
//								richTextBox3->AppendText("Entry Rotation = " + entryexit + "\n");
								// Drop coords to dataGridview9
								dataGridView9->Rows[23]->Cells[2]->Value = levelEntryX;
								dataGridView9->Rows[24]->Cells[2]->Value = levelEntryY;
								dataGridView9->Rows[25]->Cells[2]->Value = levelEntryZ;
								dataGridView9->Rows[26]->Cells[2]->Value = levelEntryRotation;
							
							// Read level exit coords.
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelExitX = entryexit;
								exitX = levelExitX;
//								richTextBox3->AppendText("Exit X = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelExitY = entryexit;
								exitY = levelExitY;
//								richTextBox3->AppendText("Exit Y = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
								levelExitZ = entryexit;
								exitZ = levelExitZ;
//								richTextBox3->AppendText("Exit Z = " + entryexit + "\n");
							datafile.read((char *)&entryexit,sizeof(entryexit));
//								levelEntryRotation = entryexit;
//								richTextBox3->AppendText("Entry Rotation = " + entryexit + "\n");
								// Drop coords to dataGridview9
								dataGridView9->Rows[27]->Cells[2]->Value = levelExitX;
								dataGridView9->Rows[28]->Cells[2]->Value = levelExitY;
								dataGridView9->Rows[29]->Cells[2]->Value = levelExitZ;
							// Add 8 bytes to counter 
								count += 8;
					}
			} 
		}// End of reading specs

//		}
datafile.close();

// Search for default texture (for stairs sides)//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**
//defaultTexID;
//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**
unsigned int n1 = 0;
unsigned int unsbuf = 0;
unsigned int count1 = 0;
unsigned int size1 = 0;
unsigned char tem = 0;

richTextBox1->Clear();

if (!notloaded) {
datafile.open(datapath, ios::binary|ios::in);
datafile.seekg (0, datafile.beg);

#if 1;
	// Reading first 4 bytes. It's a number of CCBs I must parse.
	datafile.read((char *)&buf,sizeof(buf));
	buf = Swap4Bytes(buf);// Texture quantity
	count1 +=4; 


do {
next2:
	datafile.read((char *)&buf2,sizeof(buf2));
	count1 +=4; 
		if (buf2 == 0x20424343) {
			n1++;
			// Step back to check prefix
			datafile.seekg (count1-12, datafile.beg);
				count1 -= 12;

			datafile.read((char *)&unsbuf,sizeof(unsbuf)); //Read and check 8 bytes
			buf2 = Swap4Bytes(unsbuf);
			count1 += 4;
#if 1;				
						// If ID and prefix not found
				if (unsbuf > 0xFFFFF) { // 8 bytes found.
				// Step back more 12 bytes
					datafile.seekg (count1-12, datafile.beg);
					count1 -= 12;

					datafile.read((char *)&tem,sizeof(tem));
					datafile.read((char *)&tem,sizeof(tem));
					datafile.read((char *)&tem,sizeof(tem));
					count1 += 3;
				if (tem==0) { // without prefix. Seek next CCB
					datafile.read((char *)&tem,sizeof(tem));
						count1 += 1;
						datafile.read((char *)&buf2,sizeof(buf2));
						count1 += 4;
						buf2 = Swap4Bytes(buf2);
						size1 = buf2;
						count1 = count1 + size1;
						datafile.seekg (count1, datafile.beg);
					goto next2;
					} else {
					datafile.read((char *)&tem,sizeof(tem));
					defaultTexID = tem;
					richTextBox1->AppendText("defaultTexID before 8 bytes = " + defaultTexID + "\n");
					count1 += 1;
					break;
					}

				} else {
					datafile.seekg (count1-4, datafile.beg);
					count1 -= 4;
					}
#endif;
			datafile.read((char *)&tem,sizeof(tem));
			datafile.read((char *)&tem,sizeof(tem));
			datafile.read((char *)&tem,sizeof(tem));
				count1 += 3;
			if (tem==0) { // without prefix. Seek next CCB
				datafile.read((char *)&tem,sizeof(tem));
				
					count1 += 1;
					datafile.read((char *)&buf2,sizeof(buf2));
					count1 += 4;
					buf2 = Swap4Bytes(buf2);
					size1 = buf2;
					count1 = count1 + size1;
					datafile.seekg (count1, datafile.beg);
					goto next2;
				} else {

				datafile.read((char *)&tem,sizeof(tem));
				defaultTexID = tem;
				richTextBox1->AppendText("defaultTexID = " + defaultTexID + "\n");
					count1 += 1;
				break;
				}

		} else goto next2;
//next3:
} while (n1 == buf);


		#if 0;
	for (int i=0; i<datalength; i++) {
		datafile.read((char *)&buf2,sizeof(buf2));
		count1 +=4; 
				if (buf2 == 0x20424343) {
					n1++;
					if (n1 == buf) {
						datafile.seekg (count1-4, datafile.beg);
						datafile.read((char *)&buf2,sizeof(buf2));
							buf2 = Swap4Bytes(buf2);
							// IF size not found (8 bytes before located) Seek size
							if (buf2 > 0xFFFFF) {
								eightbytes = true;
								// Step back for 12 bytes
								datafile.seekg (count1-12, datafile.beg);
								datafile.read((char *)&buf2,sizeof(buf2));
								buf2 = Swap4Bytes(buf2);
								count1 -=8;
								}
						richTextBox3->AppendText("Last CCB position = " + count1 + "\n");
						richTextBox3->AppendText("Last CCB size = " + buf2 + "\n");
						// Jump over this CCB 
							if (eightbytes) {
								datafile.seekg (count1+buf2+8, datafile.beg);
								count1 = count1 + buf2 + 8;
								richTextBox3->AppendText("8 bytes passed \n");
								} else 
								{
								datafile.seekg (count1+buf2, datafile.beg);
								count1 += buf2;
								}
					}
			} 
		}// End of reading specs
		#endif;
#endif;
datafile.close();
}
//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**

_i64toa (itemType, buffer3, 16);
systemString2 = msclr::interop::marshal_as<System::String^>(buffer3);
//dataGridView9->Rows[0]->Cells[2]->Value = systemString2;

switch(itemType) {
////ENEMY TYPE 1////
	case 0: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. North direction. N = 0x" + systemString2;
	break;

	case 0x1: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. North-East direction. N = 0x" + systemString2;
	break;

	case 0x2: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. East direction. N = 0x" + systemString2;
	break;

	case 0x3: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. South-East direction. N = 0x" + systemString2;
	break;

	case 0x4: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. South direction. N = 0x" + systemString2;
	break;

	case 0x5: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. South-West direction. N = 0x" + systemString2;
	break;

	case 0x6: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. West direction. N = 0x" + systemString2;
	break;

	case 0x7: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. North-West direction. N = 0x" + systemString2;
	break;
////ENEMY TYPE 1////
	case 0x8: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type????? N = 0x" + systemString2;
	break;

	case 0x9: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type????? N = 0x" + systemString2;
	break;

	case 0xA: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Not used by the game. Present only in 3rd level. No item appeared. N = " + systemString2;
	break;

	case 0xB: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type????? N = 0x" + systemString2;
	break;

	case 0xC: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type????? N = 0x" + systemString2;
	break;

	case 0xD: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type????? N = 0x" + systemString2;
	break;

	case 0xE: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type????? N = 0x" + systemString2;
	break;

	case 0xF: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type????? N = 0x" + systemString2;
	break;
////ENEMY TYPE 2////
	case 0x10: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type. North direction. N = 0x" + systemString2;
	break;

	case 0x11: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type. North-East direction. N = 0x" + systemString2;
	break;

	case 0x12: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type. East direction. N = 0x" + systemString2;
	break;

	case 0x13: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type. South-East direction. N = 0x" + systemString2;
	break;

	case 0x14: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type. South direction. N = 0x" + systemString2;
	break;

	case 0x15: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type. South-West direction. N = 0x" + systemString2;
	break;

	case 0x16: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type. West direction. N = 0x" + systemString2;
	break;

	case 0x17: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type. North-West direction. N = 0x" + systemString2;
	break;
////ENEMY TYPE 2////
	case 0x18: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type????? N = 0x" + systemString2;
	break;

	case 0x19: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type????? N = 0x" + systemString2;
	break;

	case 0x1A: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type????? N = 0x" + systemString2;
	break;

	case 0x1B: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type????? N = 0x" + systemString2;
	break;

	case 0x1C: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type????? N = 0x" + systemString2;
	break;

	case 0x1D: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type????? N = 0x" + systemString2;
	break;

	case 0x1E: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type????? N = 0x" + systemString2;
	break;

	case 0x1F: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 2nd type????? N = 0x" + systemString2;
	break;
///ENEMY TYPE 3/////
	case 0x20: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type. North direction. N = 0x" + systemString2;
	break;

	case 0x21: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type. North-East direction. N = 0x" + systemString2;
	break;

	case 0x22: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type. East direction. N = 0x" + systemString2;
	break;

	case 0x23: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type. South-East direction. N = 0x" + systemString2;
	break;

	case 0x24: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type. South direction. N = 0x" + systemString2;
	break;

	case 0x25: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type. South-West direction. N = 0x" + systemString2;
	break;

	case 0x26: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type. West direction. N = 0x" + systemString2;
	break;

	case 0x27: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type. North-West direction. N = 0x" + systemString2;
	break;
///ENEMY TYPE 3/////
	case 0x28: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type????? N = 0x" + systemString2;
	break;

	case 0x29: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type????? N = 0x" + systemString2;
	break;

	case 0x2A: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type????? N = 0x" + systemString2;
	break;

	case 0x2B: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type????? N = 0x" + systemString2;
	break;

	case 0x2C: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type????? N = 0x" + systemString2;
	break;

	case 0x2D: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type????? N = 0x" + systemString2;
	break;

	case 0x2E: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type????? N = 0x" + systemString2;
	break;

	case 0x2F: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 3rd type????? N = 0x" + systemString2;
	break;
////DECOR TYPE 1////
	case 0x30: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 1. North direction. N = 0x" + systemString2;
	break;

	case 0x31: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 1. North-East direction. N = 0x" + systemString2;
	break;

	case 0x32: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 1. East direction. N = 0x" + systemString2;
	break;

	case 0x33: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 1. South-East direction. N = 0x" + systemString2;
	break;

	case 0x34: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 1. South direction. N = 0x" + systemString2;
	break;

	case 0x35: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 1. South-West direction. N = 0x" + systemString2;
	break;

	case 0x36: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 1. West direction. N = 0x" + systemString2;
	break;

	case 0x37: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 1. North-West direction. N = 0x" + systemString2;
	break;
////DECOR TYPE 2////
	case 0x38: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 2. North direction. N = 0x" + systemString2;
	break;

	case 0x39: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 2. North-East direction. N = 0x" + systemString2;
	break;

	case 0x3A: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 2. East direction. N = 0x" + systemString2;
	break;

	case 0x3B: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 2. South-East direction. N = 0x" + systemString2;
	break;

	case 0x3C: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 2. South direction. N = 0x" + systemString2;
	break;

	case 0x3D: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 2. South-West direction. N = 0x" + systemString2;
	break;

	case 0x3E: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 2. West direction. N = 0x" + systemString2;
	break;

	case 0x3F: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 2. North-West direction. N = 0x" + systemString2;
	break;

////DECOR TYPE 3////
	case 0x40: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 3. North direction. N = 0x" + systemString2;
	break;

	case 0x41: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 3. North-East direction. N = 0x" + systemString2;
	break;

	case 0x42: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 3. East direction. N = 0x" + systemString2;
	break;

	case 0x43: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 3. South-East direction. N = 0x" + systemString2;
	break;

	case 0x44: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 3. South direction. N = 0x" + systemString2;
	break;

	case 0x45: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 3. South-West direction. N = 0x" + systemString2;
	break;

	case 0x46: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 3. West direction. N = 0x" + systemString2;
	break;

	case 0x47: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 3. North-West direction. N = 0x" + systemString2;
	break;
////DECOR TYPE 4////
	case 0x48: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 4. North direction. N = 0x" + systemString2;
	break;

	case 0x49: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 4. North-East direction. N = 0x" + systemString2;
	break;

	case 0x4A: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 4. East direction. N = 0x" + systemString2;
	break;

	case 0x4B: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 4. South-East direction. N = 0x" + systemString2;
	break;

	case 0x4C: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 4. South direction. N = 0x" + systemString2;
	break;

	case 0x4D: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 4. South-West direction. N = 0x" + systemString2;
	break;

	case 0x4E: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 4. West direction. N = 0x" + systemString2;
	break;

	case 0x4F: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Decor. Type 4. North-West direction. N = 0x" + systemString2;
	break;
////////
#if 1; // Items
	case 0x50: // Food
	dataGridView9->Rows[0]->Cells[2]->Value = "Food. N = 0x" + systemString2;
	break;

	case 0x51: // Not used by the game
	dataGridView9->Rows[0]->Cells[2]->Value = "Not used by the game. N = 0x" + systemString2;
	break;

	case 0x52: // Dwarven Key, Tower Key, Fortress Key
	dataGridView9->Rows[0]->Cells[2]->Value = "Dwarven Key, Tower Key, Fortress Key. N = 0x" + systemString2;
	break;

	case 0x53: // Ancestral artifact RED
	dataGridView9->Rows[0]->Cells[2]->Value = "Ancestral artifact RED. N = 0x" + systemString2;
	break;

	case 0x54: // Ancestral artifact GREEN
	dataGridView9->Rows[0]->Cells[2]->Value = "Ancestral artifact GREEN. N = 0x" + systemString2;
	break;

	case 0x55: // Ancestral artifact BLUE
	dataGridView9->Rows[0]->Cells[2]->Value = "Ancestral artifact BLUE. N = 0x" + systemString2;
	break;

	case 0x56: // Rations
	dataGridView9->Rows[0]->Cells[2]->Value = "Rations. N = 0x" + systemString2;
	break;

	case 0x57: // Healing potion
	dataGridView9->Rows[0]->Cells[2]->Value = "Healing potion. N = 0x" + systemString2;
	break;

	case 0x58: // Potion of speed
	dataGridView9->Rows[0]->Cells[2]->Value = "Potion of speed. N = 0x" + systemString2;
	break;

	case 0x59: // Scroll of Acid protection
	dataGridView9->Rows[0]->Cells[2]->Value = "Scroll of Acid protection. N = 0x" + systemString2;
	break;

	case 0x5A: // Rock
	dataGridView9->Rows[0]->Cells[2]->Value = "Rock. N = 0x" + systemString2;
	break;

	case 0x5B: // Dart
	dataGridView9->Rows[0]->Cells[2]->Value = "Dart. N = 0x" + systemString2;
	break;

	case 0x5C: // Scrying Glass
	dataGridView9->Rows[0]->Cells[2]->Value = "Scrying Glass. N = 0x" + systemString2;
	break;

	case 0x5D: // Orb of Lighting
	dataGridView9->Rows[0]->Cells[2]->Value = "Orb of Lighting. N = 0x" + systemString2;
	break;

	case 0x5E: // Wand of Fear
	dataGridView9->Rows[0]->Cells[2]->Value = "Wand of Fear. N = 0x" + systemString2;
	break;

	case 0x5F: // Winged Boots
	dataGridView9->Rows[0]->Cells[2]->Value = "Winged Boots. N = 0x" + systemString2;
	break;

	case 0x60: // Helm
	dataGridView9->Rows[0]->Cells[2]->Value = "Helm. N = 0x" + systemString2;
	break;

	case 0x61: // Bracers
	dataGridView9->Rows[0]->Cells[2]->Value = "Bracers. N = 0x" + systemString2;
	break;

	case 0x62: // Ring of Flying
	dataGridView9->Rows[0]->Cells[2]->Value = "Ring of Flying. N = 0x" + systemString2;
	break;

	case 0x63: // Ring of Protection
	dataGridView9->Rows[0]->Cells[2]->Value = "Ring of Protection. N = 0x" + systemString2;
	break;

	case 0x64: // Amulet of magic resistance (round)
	dataGridView9->Rows[0]->Cells[2]->Value = "Amulet of magic resistance (round). N = 0x" + systemString2;
	break;

	case 0x65: // Amulet of imminent return (knife type)
	dataGridView9->Rows[0]->Cells[2]->Value = "Amulet of imminent return (knife type). N = 0x" + systemString2;
	break;

	case 0x66: // Dagger
	dataGridView9->Rows[0]->Cells[2]->Value = "Dagger. N = 0x" + systemString2;
	break;

	case 0x67: // Long Sword
	dataGridView9->Rows[0]->Cells[2]->Value = "Long Sword. N = 0x" + systemString2;
	break;

	case 0x68: // Longbow
	dataGridView9->Rows[0]->Cells[2]->Value = "Longbow. N = 0x" + systemString2;
	break;

	case 0x69: // Spellbook
	dataGridView9->Rows[0]->Cells[2]->Value = "Spellbook. N = 0x" + systemString2;
	break;

	case 0x6A: // Cloak
	dataGridView9->Rows[0]->Cells[2]->Value = "Cloak. N = 0x" + systemString2;
	break;

	case 0x6B: // Chain Mail
	dataGridView9->Rows[0]->Cells[2]->Value = "Chain Mail. N = 0x" + systemString2;
	break;

	case 0x6C: // Scroll Spell
	dataGridView9->Rows[0]->Cells[2]->Value = "Scroll Spell. N = 0x" + systemString2;
	break;

	case 0x6D: // Defender Sword
	dataGridView9->Rows[0]->Cells[2]->Value = "Defender Sword. N = 0x" + systemString2;
	break;

	case 0x6E: // Vorpal Sword
	dataGridView9->Rows[0]->Cells[2]->Value = "Vorpal Sword. N = 0x" + systemString2;
	break;

	case 0x6F: // Battle Axe
	dataGridView9->Rows[0]->Cells[2]->Value = "Battle Axe. N = 0x" + systemString2;
	break;

	case 0x70: // Hammer
	dataGridView9->Rows[0]->Cells[2]->Value = "Hammer. N = 0x" + systemString2;
	break;

	case 0x71: // Staff
	dataGridView9->Rows[0]->Cells[2]->Value = "Staff. N = 0x" + systemString2;
	break;

	case 0x72: // Sling
	dataGridView9->Rows[0]->Cells[2]->Value = "Sling. N = 0x" + systemString2;
	break;

	case 0x73: // Arrow
	dataGridView9->Rows[0]->Cells[2]->Value = "Arrow. N = 0x" + systemString2;
	break;

	case 0x74: // Gauntlets
	dataGridView9->Rows[0]->Cells[2]->Value = "Gauntlets. N = 0x" + systemString2;
	break;

	case 0x75: // Shield
	dataGridView9->Rows[0]->Cells[2]->Value = "Shield. N = 0x" + systemString2;
	break;

	case 0x76: // Flame Tongue
	dataGridView9->Rows[0]->Cells[2]->Value = "Flame Tongue. N = 0x" + systemString2;
	break;

	case 0x77: // Crossbow
	dataGridView9->Rows[0]->Cells[2]->Value = "Crossbow. N = 0x" + systemString2;
	break;

	case 0x78: // Not used by the game
	dataGridView9->Rows[0]->Cells[2]->Value = "Not used by the game. N = 0x" + systemString2;
	break;

	case 0x79: // Not used by the game
	dataGridView9->Rows[0]->Cells[2]->Value = "Not used by the game. N = 0x" + systemString2;
	break;

	case 0x7A: // Amulet of Power
	dataGridView9->Rows[0]->Cells[2]->Value = "Amulet of Power. N = 0x" + systemString2;
	break;

	case 0x7B: // Book of Spell Doubling
	dataGridView9->Rows[0]->Cells[2]->Value = "Book of Spell Doubling. N = 0x" + systemString2;
	break;

	case 0x7C: // Extra Healing potion
	dataGridView9->Rows[0]->Cells[2]->Value = "Extra Healing potion. N = 0x" + systemString2;
	break;

	case 0x7D: // Poison
	dataGridView9->Rows[0]->Cells[2]->Value = "Poison. N = 0x" + systemString2;
	break;

	case 0x7E: // Potion of Cure Poison
	dataGridView9->Rows[0]->Cells[2]->Value = "Potion of Cure Poison. N = 0x" + systemString2;
	break;

	case 0x7F: // Water
	dataGridView9->Rows[0]->Cells[2]->Value = "Water. N = 0x" + systemString2;
	break;

	case 0x80: // Potion of Invulnerability
	dataGridView9->Rows[0]->Cells[2]->Value = "Potion of Invulnerability. N = 0x" + systemString2;
	break;

	case 0x81: // Scroll of Hurling
	dataGridView9->Rows[0]->Cells[2]->Value = "Scroll of Hurling. N = 0x" + systemString2;
	break;

	case 0x82: // Potion of Flying
	dataGridView9->Rows[0]->Cells[2]->Value = "Potion of Flying. N = 0x" + systemString2;
	break;

	case 0x83: // Potion of Heroism
	dataGridView9->Rows[0]->Cells[2]->Value = "Potion of Heroism. N = 0x" + systemString2;
	break;

	case 0x84: // Potion of Super-Heroism
	dataGridView9->Rows[0]->Cells[2]->Value = "Potion of Super-Heroism. N = 0x" + systemString2;
	break;

	case 0x85: // Potion of Invisibility
	dataGridView9->Rows[0]->Cells[2]->Value = "Potion of Invisibility. N = 0x" + systemString2;
	break;

	case 0x86: // Potion of Hill Giant Strength
	dataGridView9->Rows[0]->Cells[2]->Value = "Potion of Hill Giant Strength. N = 0x" + systemString2;
	break;

	case 0x87: // Potion of Storm Giant Strength
	dataGridView9->Rows[0]->Cells[2]->Value = "Potion of Storm Giant Strength. N = 0x" + systemString2;
	break;

	case 0x88: // Lightining Staff
	dataGridView9->Rows[0]->Cells[2]->Value = "Lightining Staff. N = 0x" + systemString2;
	break;

	case 0x89: // Staff of Striking
	dataGridView9->Rows[0]->Cells[2]->Value = "Staff of Striking. N = 0x" + systemString2;
	break;

	case 0x8A: // Ring of Invisibility
	dataGridView9->Rows[0]->Cells[2]->Value = "Ring of Invisibility. N = 0x" + systemString2;
	break;

	case 0x8B: // Ring of Regeneration
	dataGridView9->Rows[0]->Cells[2]->Value = "Ring of Regeneration. N = 0x" + systemString2;
	break;

	case 0x8C: // Ring of Sustenance
	dataGridView9->Rows[0]->Cells[2]->Value = "Ring of Sustenance. N = 0x" + systemString2;
	break;

	case 0x8D: // Ring of Weakness
	dataGridView9->Rows[0]->Cells[2]->Value = "Ring of Weakness. N = 0x" + systemString2;
	break;

	case 0x8E: // Ring of Wisardry
	dataGridView9->Rows[0]->Cells[2]->Value = "Ring of Wisardry. N = 0x" + systemString2;
	break;

	case 0x8F: // Not used by the game
	dataGridView9->Rows[0]->Cells[2]->Value = "Not used by the game. N = 0x" + systemString2;
	break;

	case 0x90: // Plate Mail 
	dataGridView9->Rows[0]->Cells[2]->Value = "Plate Mail. N = 0x" + systemString2;
	break;

	case 0x91: // Ring Mail
	dataGridView9->Rows[0]->Cells[2]->Value = "Ring Mail. N = 0x" + systemString2;
	break;

	case 0x92: // Scale Mail
	dataGridView9->Rows[0]->Cells[2]->Value = "Scale Mail. N = 0x" + systemString2;
	break;

	case 0x93: // Two-Handed Sword
	dataGridView9->Rows[0]->Cells[2]->Value = "Two-Handed Sword. N = 0x" + systemString2;
	break;

	case 0x94: // Axe of Hurling
	dataGridView9->Rows[0]->Cells[2]->Value = "Axe of Hurling. N = 0x" + systemString2;
	break;

	case 0x95: // Dwarven Lord's Deathstriker
	dataGridView9->Rows[0]->Cells[2]->Value = "Dwarven Lord's Deathstriker. N = 0x" + systemString2;
	break;

	case 0x96: // Storm Hammer
	dataGridView9->Rows[0]->Cells[2]->Value = "Storm Hammer. N = 0x" + systemString2;
	break;

	case 0x97: // Dwarven Thrower II
	dataGridView9->Rows[0]->Cells[2]->Value = "Dwarven Thrower II. N = 0x" + systemString2;
	break;

	case 0x98: // Dagger of return 
	dataGridView9->Rows[0]->Cells[2]->Value = "Dagger of return . N = 0x" + systemString2;
	break;

	case 0x99: // Chill Blade
	dataGridView9->Rows[0]->Cells[2]->Value = "Chill Blade. N = 0x" + systemString2;
	break;

	case 0x9A: // Vampire Fang
	dataGridView9->Rows[0]->Cells[2]->Value = "Vampire Fang. N = 0x" + systemString2;
	break;

	case 0x9B: // Luck Blade
	dataGridView9->Rows[0]->Cells[2]->Value = "Luck Blade. N = 0x" + systemString2;
	break;

	case 0x9C: // Crossbow of Accuracy
	dataGridView9->Rows[0]->Cells[2]->Value = "Crossbow of Accuracy. N = 0x" + systemString2;
	break;

	case 0x9D: // Crossbow of Doubling
	dataGridView9->Rows[0]->Cells[2]->Value = "Crossbow of Doubling. N = 0x" + systemString2;
	break;

	case 0x9E: // Bow of Neverending Arrows
	dataGridView9->Rows[0]->Cells[2]->Value = "Bow of Neverending Arrows. N = 0x" + systemString2;
	break;

	case 0x9F: // Firebow
	dataGridView9->Rows[0]->Cells[2]->Value = "Firebow. N = 0x" + systemString2;
	break;

	case 0xA0: // Dart of Homing
	dataGridView9->Rows[0]->Cells[2]->Value = "Dart of Homing. N = 0x" + systemString2;
	break;

	case 0xA1: // Bracers of Archery
	dataGridView9->Rows[0]->Cells[2]->Value = "Bracers of Archery. N = 0x" + systemString2;
	break;

	case 0xA2: // Bracers of Defense
	dataGridView9->Rows[0]->Cells[2]->Value = "Bracers of Defense. N = 0x" + systemString2;
	break;

	case 0xA3: // Sling of Seeking
	dataGridView9->Rows[0]->Cells[2]->Value = "Sling of Seeking. N = 0x" + systemString2;
	break;

	case 0xA4: // Fire Slinger
	dataGridView9->Rows[0]->Cells[2]->Value = "Fire Slinger. N = 0x" + systemString2;
	break;

	case 0xA5: // Fire Sling of Doubling
	dataGridView9->Rows[0]->Cells[2]->Value = "Fire Sling of Doubling. N = 0x" + systemString2;
	break;

	case 0xA6: // Gauntlets of Dexterity
	dataGridView9->Rows[0]->Cells[2]->Value = "Gauntlets of Dexterity. N = 0x" + systemString2;
	break;

	case 0xA7: // Gauntlets of Ogre Power
	dataGridView9->Rows[0]->Cells[2]->Value = "Gauntlets of Ogre Power. N = 0x" + systemString2;
	break;

	case 0xA8: // Scroll of Electricity protection
	dataGridView9->Rows[0]->Cells[2]->Value = "Scroll of Electricity protection. N = 0x" + systemString2;
	break;

	case 0xA9: // Scroll of Cold protection
	dataGridView9->Rows[0]->Cells[2]->Value = "Scroll of Cold protection. N = 0x" + systemString2;
	break;

	case 0xAA: // Scroll of Fire protection
	dataGridView9->Rows[0]->Cells[2]->Value = "Scroll of Fire protection. N = 0x" + systemString2;
	break;

	case 0xAB: // Scroll of Gas protection
	dataGridView9->Rows[0]->Cells[2]->Value = "Scroll of Gas protection. N = 0x" + systemString2;
	break;

	case 0xAC: // Scroll of Magic protection
	dataGridView9->Rows[0]->Cells[2]->Value = "Scroll of Magic protection. N = 0x" + systemString2;
	break;

	case 0xAD: // Scroll of Poison protection
	dataGridView9->Rows[0]->Cells[2]->Value = "Scroll of Poison protection. N = 0x" + systemString2;
	break;

	case 0xAE: // Boots of Ice Walking
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Ice Walking. N = 0x" + systemString2;
	break;

	case 0xAF: // Boots of Ooze Walking
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Ooze Walking. N = 0x" + systemString2;
	break;

	case 0xB0: // Boots of Lava Walking
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Lava Walking. N = 0x" + systemString2;
	break;

	case 0xB1: // Boots of Goop Walking
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Goop Walking. N = 0x" + systemString2;
	break;

	case 0xB2: // Boots of Acid Walking
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Acid Walking. N = 0x" + systemString2;
	break;

	case 0xB3: // Boots of Ether Walking
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Ether Walking. N = 0x" + systemString2;
	break;

	case 0xB4: // Boots of Artery Walking
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Artery Walking. N = 0x" + systemString2;
	break;

	case 0xB5: // Boots of Vein Walking
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Vein Walking. N = 0x" + systemString2;
	break;

	case 0xB6: // Boots of Dirt Walking
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Dirt Walking. N = 0x" + systemString2;
	break;

	case 0xB7: // Not used by the game
	dataGridView9->Rows[0]->Cells[2]->Value = "Not used by the game. N = 0x" + systemString2;
	break;

	case 0xB8: // Boots of Leaping
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Leaping. N = 0x" + systemString2;
	break;

	case 0xB9: // Boots of Door Bashing
	dataGridView9->Rows[0]->Cells[2]->Value = "Boots of Door Bashing. N = 0x" + systemString2;
	break;

	case 0xBA: // Not used by the game
	dataGridView9->Rows[0]->Cells[2]->Value = "Not used by the game. N = 0x" + systemString2;
	break;

	case 0xBB: // Wand of Fire
	dataGridView9->Rows[0]->Cells[2]->Value = "Wand of Fire. N = 0x" + systemString2;
	break;

	case 0xBC: // Wand of Frost
	dataGridView9->Rows[0]->Cells[2]->Value = "Wand of Frost. N = 0x" + systemString2;
	break;

	case 0xBD: // Wand of Lightning
	dataGridView9->Rows[0]->Cells[2]->Value = "Wand of Lightning. N = 0x" + systemString2;
	break;

	case 0xBE: // Wand of Magic Missiles
	dataGridView9->Rows[0]->Cells[2]->Value = "Wand of Magic Missiles. N = 0x" + systemString2;
	break;

	case 0xBF: // Wand of Paralysis
	dataGridView9->Rows[0]->Cells[2]->Value = "Wand of Paralysis. N = 0x" + systemString2;
	break;

	case 0xC0: // Orb of Fire Storms
	dataGridView9->Rows[0]->Cells[2]->Value = "Orb of Fire Storms. N = 0x" + systemString2;
	break;

	case 0xC1: // Orb of True Seeing
	dataGridView9->Rows[0]->Cells[2]->Value = "Orb of True Seeing. N = 0x" + systemString2;
	break;

	case 0xC2: // Orb of Magic Missiles
	dataGridView9->Rows[0]->Cells[2]->Value = "Orb of Magic Missiles. N = 0x" + systemString2;
	break;

	case 0xC3: // Orb of Flame Strikes
	dataGridView9->Rows[0]->Cells[2]->Value = "Orb of Flame Strikes. N = 0x" + systemString2;
	break;

///////////////////////////////////////////////////////////////////
	case 0xE4: // Standart teleport
	dataGridView9->Rows[0]->Cells[2]->Value = "Teleport (0x" + systemString2 + "). Set 0th byte to 0x80";
	break;

	case 0xE5: // Trigger for the door.
	dataGridView9->Rows[0]->Cells[2]->Value = "Trigger for the door. N = 0x" + systemString2;
	break;
		
	case 0xE6: // Elevator related
	dataGridView9->Rows[0]->Cells[2]->Value = "Elevator related UP? Type? N = 0x" + systemString2;
	break;

	case 0xE7: // This cube points on cubes around elevators
	dataGridView9->Rows[0]->Cells[2]->Value = "Points on cubes around elevators. Use blocks 4, 5. N = 0x" + systemString2;
	break;
		
	case 0xE8: // Wall fireball trigger
	dataGridView9->Rows[0]->Cells[2]->Value = "Wall fireball trigger. N = 0x" + systemString2;
	break;

	case 0xE9: // Floor flame trigger.
	dataGridView9->Rows[0]->Cells[2]->Value = "Floor flame trigger. N = 0x" + systemString2;
	break;
		
	case 0xEA: // Ceiling fireball trigger. Wait an attack from above
	dataGridView9->Rows[0]->Cells[2]->Value = "Ceiling fireball trigger. N = 0x" + systemString2;
	break;

	case 0xEB: // Wall fireball trigger
	dataGridView9->Rows[0]->Cells[2]->Value = "Wall fireball trigger (blue). N = 0x" + systemString2;
	break;
		
	case 0xEC: // Switch off the light (reduces brightness)
	dataGridView9->Rows[0]->Cells[2]->Value = "Switch off the light (reduces brightness). N = 0x" + systemString2;
	break;

	case 0xEF: // This cube activates Monsters
	dataGridView9->Rows[0]->Cells[2]->Value = "Activates Monsters. N = 0x" + systemString2;
	break;

	case 0xF8: // Flickering light tunes ON
	dataGridView9->Rows[0]->Cells[2]->Value = "Flickering light tunes ON. N = 0x" + systemString2;
	break;

	case 0xF9: // Elevator DOWN
	dataGridView9->Rows[0]->Cells[2]->Value = "Elevator DOWN. N = 0x" + systemString2;
	break;

	case 0xFA: // Elevator UP
	dataGridView9->Rows[0]->Cells[2]->Value = "Elevator UP. N = 0x" + systemString2;
	break;

	case 0xFB: // Elevator DOWN
	dataGridView9->Rows[0]->Cells[2]->Value = "Elevator DOWN. N = 0x" + systemString2;
	break;
#endif; // items
////////


	default : 
	dataGridView9->Rows[0]->Cells[2]->Value = "N/A or not recognized. N = 0x" + systemString2;
	}



switch(brightness) {

	case 0xF0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Flickering Light";
		break;

	case 0xE0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 1";
		break;

	case 0xC0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 2";
		break;

	case 0xA0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 3";
		break;

	case 0x80: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 4";
		break;

	case 0x60: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 5";
		break;

	case 0x40: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 6";
		break;

	case 0x20: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 7";
		break;

	case 0xD0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 8";
		break;

	case 0xB0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 9";
		break;

	case 0x90: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 10";
		break;

	case 0x70: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 11";
		break;

	case 0x50: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 12";
		break;

	case 0x30: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 13";
		break;

	case 0x10: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 14";
		break;

	case 0xFA: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Flickering Light";
		break;

	default : 
	dataGridView9->Rows[4]->Cells[2]->Value = "N/A";
}


if ((brightness>=0xE0)&&(brightness<0xF0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 1";
	}

if ((brightness>=0xC0)&&(brightness<0xD0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 2";
	}

if ((brightness>=0xA0)&&(brightness<0xB0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 3";
	}

if ((brightness>=0x80)&&(brightness<0x90)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 4";
	}

if ((brightness>=0x60)&&(brightness<0x70)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 5";
	}

if ((brightness>=0x40)&&(brightness<0x50)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 6";
	}

if ((brightness>=0x20)&&(brightness<0x30)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 7";
	}

if ((brightness>=0xD0)&&(brightness<0xE0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 8";
	}

if ((brightness>=0xB0)&&(brightness<0xC0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 9";
	}

if ((brightness>=0x90)&&(brightness<0xA0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 10";
	}

if ((brightness>=0x70)&&(brightness<0x80)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 11";
	}

if ((brightness>=0x50)&&(brightness<0x60)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 12";
	}

if ((brightness>=0x30)&&(brightness<0x40)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 13";
	}

if ((brightness>=0x10)&&(brightness<0x20)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 14";
	}

if ((brightness>=0xF0)&&(brightness<=0xFF)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Flickering Light";
	}

//_i64toa (itemType, buffer3, 16);
//systemString2 = msclr::interop::marshal_as<System::String^>(buffer3);
//dataGridView9->Rows[0]->Cells[2]->Value = systemString2;

_i64toa (itemSpecs, buffer4, 16);
systemString2 = msclr::interop::marshal_as<System::String^>(buffer4);
dataGridView9->Rows[1]->Cells[2]->Value = systemString2;



bool doorPresent = (bool((1 << 9)  &  voxelArray[val].value1));	// Door exists
dataGridView9->Rows[2]->Cells[2]->Value = doorPresent.ToString();	// Door exists

bool doorLocked = (bool((1 << 11)  &  voxelArray[val].value1));		// Door is closed
dataGridView9->Rows[3]->Cells[2]->Value = doorLocked.ToString();	// Door is closed


//Stairs, Steps, Ramps, Elevators, Teleports, Fireballs and another game logic
switch(stairsAndRamps) {
	case 0x1: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs South Low";
		break;
	case 0x2: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs North Low";
		break;
	case 0x3: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs West Low";
		break;
	case 0x4: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs East Low";
		break;
	case 0x5: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs South Upper";
		break;
	case 0x6: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs North Upper";
		break;
	case 0x7: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs West Upper";
		break;
	case 0x8: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs East Upper";
		break;
	case 0x9: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Columns in cube's corners";
		break;
	case 0xA: 
		dataGridView9->Rows[5]->Cells[2]->Value = "2 steps pyramid. Pedestal";
		break;
	case 0xB: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Double square column in the center";
		break;
	case 0xC: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Big square column in the center";
		break;
//////////////////// 0xD, 0xE ////////////////


	case 0xF: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 16. Default texture on the walls. Without top texture";
		break;

	case 0x10: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Elevator path definer. Must be set in addition with other bytes (byte0, byte7, block 4)";
		break;

	case 0x11: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 1";
		break;
	case 0x12: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 2";
		break;
	case 0x13: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 3";
		break;
	case 0x14: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 4";
		break;
	case 0x15: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 5";
		break;
	case 0x16: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 6";
		break;
	case 0x17: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 7";
		break;
	case 0x18: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 8";
		break;
	case 0x19: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 9";
		break;
	case 0x1a: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10";
		break;
	case 0x1b: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11";
		break;
	case 0x1c: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 12";
		break;
	case 0x1d: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 13";
		break;
	case 0x1e: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 14";
		break;
	case 0x1f: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 15";
		break;
//////////////////// 0x20 /////////////////////////////

		break;
	case 0x21: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 1. Without vert. textures";
		break;
	case 0x22: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 2. Without vert. textures";
		break;
	case 0x23: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 3. Without vert. textures";
		break;
	case 0x24: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 4. Without vert. textures";
		break;
	case 0x25: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 5. Without vert. textures";
		break;
	case 0x26: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 6. Without vert. textures";
		break;
	case 0x27: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 7. Without vert. textures";
		break;
	case 0x28: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 8. Without vert. textures";
		break;
	case 0x29: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 9. Without vert. textures. Friction low";
		break;
	case 0x2a: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10. Without vert. textures. Friction low";
		break;
	case 0x2b: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11. Without vert. textures. Friction low";
		break;
	case 0x2c: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 12. Without vert. textures. Friction low";
		break;
	case 0x2d: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 13. Without vert. textures. Friction low";
		break;
	case 0x2e: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 14. Without vert. textures. Friction low";
		break;
	case 0x2f: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 15. Without vert. textures. Friction low";
		break;

	case 0x30: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 0. Jump up 1 floor";
		break;
	case 0x31: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 1. Without vert. textures. Jump up 1 floor";
		break;
	case 0x32: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 2. Without vert. textures. Jump up 1 floor";
		break;
	case 0x33: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 3. Without vert. textures. Jump up 1 floor";
		break;
	case 0x34: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 4. Without vert. textures. Jump up 1 floor";
		break;
	case 0x35: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 5. Without vert. textures. Jump up 1 floor";
		break;
	case 0x36: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 6. Without vert. textures. Jump up 1 floor";
		break;
	case 0x37: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 7. Without vert. textures. Jump up 1 floor";
		break;
	case 0x38: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 8. Without vert. textures. Jump up 1 floor";
		break;
	case 0x39: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 9. Without vert. textures. Jump up 1 floor";
		break;
	case 0x3A: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10. Without vert. textures. Jump up 1 floor";
		break;
	case 0x3B: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11. Without vert. textures. Jump up 1 floor";
		break;
	case 0x3C: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 12. Without vert. textures. Jump up 1 floor";
		break;
	case 0x3D: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 13. Without vert. textures. Jump up 1 floor";
		break;
	case 0x3E: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 14. Without vert. textures. Jump up 1 floor";
		break;
	case 0x3F: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 15. Without vert. textures. Jump up 1 floor";
		break;


	case 0x40: //**//
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 0. Jump up 2 floors";
		break;
	case 0x41: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 1. Without vert. textures. Jump up 2 floors";
		break;
	case 0x42: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 2. Without vert. textures. Jump up 2 floors";
		break;
	case 0x43: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 3. Without vert. textures. Jump up 2 floors";
		break;
	case 0x44: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 4. Without vert. textures. Jump up 2 floors";
		break;
	case 0x45: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 5. Without vert. textures. Jump up 2 floors";
		break;
	case 0x46: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 6. Without vert. textures. Jump up 2 floors";
		break;
	case 0x47: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 7. Without vert. textures. Jump up 2 floors";
		break;
	case 0x48: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 8. Without vert. textures. Jump up 2 floors";
		break;
	case 0x49: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 9. Without vert. textures. Jump up 2 floors";
		break;
	case 0x4A: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10. Without vert. textures. Jump up 2 floors";
		break;
	case 0x4B: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11. Without vert. textures. Jump up 2 floors";
		break;
	case 0x4C: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 12. Without vert. textures. Jump up 2 floors";
		break;
	case 0x4D: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 13. Without vert. textures. Jump up 2 floors";
		break;
	case 0x4E: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 14. Without vert. textures. Jump up 2 floors";
		break;
	case 0x4F: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 15. Without vert. textures. Jump up 2 floors";
		break;

	case 0x50: //**//
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 0. Jump up 3 floors";
		break;
	case 0x51: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 1. Without vert. textures. Jump up 3 floors";
		break;
	case 0x52: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 2. Without vert. textures. Jump up 3 floors";
		break;
	case 0x53: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 3. Without vert. textures. Jump up 3 floors";
		break;
	case 0x54: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 4. Without vert. textures. Jump up 3 floors";
		break;
	case 0x55: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 5. Without vert. textures. Jump up 3 floors";
		break;
	case 0x56: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 6. Without vert. textures. Jump up 3 floors";
		break;
	case 0x57: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 7. Without vert. textures. Jump up 3 floors";
		break;
	case 0x58: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 8. Without vert. textures. Jump up 3 floors";
		break;
	case 0x59: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 9. Without vert. textures. Jump up 3 floors";
		break;
	case 0x5A: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10. Without vert. textures. Jump up 3 floors";
		break;
	case 0x5B: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11. Without vert. textures. Jump up 3 floors";
		break;
	case 0x5C: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 12. Without vert. textures. Jump up 3 floors";
		break;
	case 0x5D: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 13. Without vert. textures. Jump up 3 floors";
		break;
	case 0x5E: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 14. Without vert. textures. Jump up 3 floors";
		break;
	case 0x5F: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 15. Without vert. textures. Jump up 3 floors";
		break;


	case 0x60: //**//
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 0. Jump up 4 floors";
		break;
	case 0x61: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 1. Without vert. textures. Jump up 4 floors";
		break;
	case 0x62: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 2. Without vert. textures. Jump up 4 floors";
		break;
	case 0x63: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 3. Without vert. textures. Jump up 4 floors";
		break;
	case 0x64: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 4. Without vert. textures. Jump up 4 floors";
		break;
	case 0x65: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 5. Without vert. textures. Jump up 4 floors";
		break;
	case 0x66: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 6. Without vert. textures. Jump up 4 floors";
		break;
	case 0x67: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 7. Without vert. textures. Jump up 4 floors";
		break;
	case 0x68: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 8. Without vert. textures. Jump up 4 floors";
		break;
	case 0x69: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 9. Without vert. textures. Jump up 4 floors";
		break;
	case 0x6A: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10. Without vert. textures. Jump up 4 floors";
		break;
	case 0x6B: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11. Without vert. textures. Jump up 4 floors";
		break;
	case 0x6C: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 12. Without vert. textures. Jump up 4 floors";
		break;
	case 0x6D: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 13. Without vert. textures. Jump up 4 floors";
		break;
	case 0x6E: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 14. Without vert. textures. Jump up 4 floors";
		break;
	case 0x6F: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 15. Without vert. textures. Jump up 4 floors";
		break;


	case 0x70: //**//
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 0. Jump up 5 floors";
		break;
	case 0x71: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 1. Without vert. textures. Jump up 5 floors";
		break;
	case 0x72: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 2. Without vert. textures. Jump up 5 floors";
		break;
	case 0x73: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 3. Without vert. textures. Jump up 5 floors";
		break;
	case 0x74: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 4. Without vert. textures. Jump up 5 floors";
		break;
	case 0x75: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 5. Without vert. textures. Jump up 5 floors";
		break;
	case 0x76: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 6. Without vert. textures. Jump up 5 floors";
		break;
	case 0x77: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 7. Without vert. textures. Jump up 5 floors";
		break;
	case 0x78: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 8. Without vert. textures. Jump up 5 floors";
		break;
	case 0x79: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 9. Without vert. textures. Jump up 5 floors";
		break;
	case 0x7A: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10. Without vert. textures. Jump up 5 floors";
		break;
	case 0x7B: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11. Without vert. textures. Jump up 5 floors";
		break;
	case 0x7C: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 12. Without vert. textures. Jump up 5 floors";
		break;
	case 0x7D: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 13. Without vert. textures. Jump up 5 floors";
		break;
	case 0x7E: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 14. Without vert. textures. Jump up 5 floors";
		break;
	case 0x7F: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 15. Without vert. textures. Jump up 5 floors";
		break;

	case 0x80: ////**//
		dataGridView9->Rows[5]->Cells[2]->Value = "Teleport. N=0x80. Set 7th byte to 0xE4 and use blocks 4, 5";
		break;
	case 0x81: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Trigger for the door. N=0x81. Set 7th byte to 0xE5 and use blocks 4, 5";
		break;
	case 0x82: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Elevator related DOWN. N=0x82. Set 7th byte to 0xE6, set zero byte on the path to 0x10 and use blocks 4, 5";
		break;
	case 0x83: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Points on cubes around elevators. N=0x83. Set 7th byte to 0xE7 and use blocks 4, 5";
		break;
	case 0x84: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Wall fireball trigger N=0x84. Set 7th byte to 0xE8 and use blocks 4, 5";
		break;
	case 0x85: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Floor flame trigger. N=0x85. Set 7th byte to 0xE9 and use blocks 4, 5";
		break;
	case 0x86: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ceiling fireball trigger. N=0x86. Set 7th byte to 0xEA and use blocks 4, 5";
		break;
	case 0x87: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Wall fireball trigger (blue). N=0x87. Set 7th byte to 0xEB and use blocks 4, 5";
		break;
	case 0x88: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Switch off the light (reduces brightness). N=0x88. Set 7th byte to 0xEC and use blocks 4, 5";
		break;
///////////////
	case 0x8b: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Activates Monsters. N=0x8B. Set 7th byte to 0xEF and use blocks 4, 5";
		break;
///////////////
	case 0x94: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Flickering light tunes ON. N=0x94. Set 7th byte to 0xF8 and use blocks 4, 5";
		break;
	case 0x95: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Elevator DOWN. N=0x95. Set 7th byte to 0xF9, set zero byte on the path to 0x10 and use blocks 4, 5";
		break;
	case 0x96: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Elevator UP. N=0x96. Set 7th byte to 0xFA, set zero byte on the path to 0x10 and use blocks 4, 5";
		break;
	case 0x97: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Elevator DOWN. N=0x97. Set 7th byte to 0xFB, set zero byte on the path to 0x10 and use blocks 4, 5";
		break;
//////////////////////////////
	case 0xF0: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp West. Low";
		break;
	case 0xF1: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp West. High";
		break;
	case 0xF2: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp East. Low";
		break;
	case 0xF3: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp East. High";
		break;
	case 0xF4: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp North. Low";
		break;
	case 0xF5: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp North. High";
		break;
	case 0xF6: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp South. Low";
		break;
	case 0xF7: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp South. High";
		break;

	default : 
	dataGridView9->Rows[5]->Cells[2]->Value = "";
}

}



// Click on the dataGrid1
private: System::Void dataGridView1_CellMouseClick(System::Object^  sender, System::Windows::Forms::DataGridViewCellMouseEventArgs^  e) {
	int x, y, x1, y1;
//dataGridView1->MultiSelect = false;
			x = dataGridView1->CurrentCell->ColumnIndex;
			y = dataGridView1->CurrentCell->RowIndex;

			label14->Text = x.ToString();
			label15->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox3->Text = x1.ToString();
			textBox4->Text = y1.ToString();

#if 1;
//int val = 6146;
// Calculate real position
//int val = x1 * y1;
int val = 32*8*x+y*8+0; // 0- Floor#
textBox5->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox1->Text = systemString;


/// FOR HEX:
char buffer2 [20];
//_i64toa ((voxelArray[val].value1<<32), buffer2, 16);
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox2->Text = systemString;


///// Copy this to other functions! //////START//////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
//wallsBevels2 = ValueSelector(voxelArray[val].value1, 3);	// Walls and Bevels. Byte 2
//dataGridView9->Rows[4]->Cells[2]->Value = flickeringLight.ToString();

///**//dataGridView9->Rows[6]->Cells[2]->Value = wallsBevels1.ToString();

wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;
///**//dataGridView9->Rows[7]->Cells[2]->Value = wallsBevels2.ToString();

//unsigned char c3[5] = {wallsBevels1,wallsBevels2};
char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

#if 0;
//Throw known bits or bytes to the dataGrid9
richTextBox3->Clear();

std::string stdString2 = bs.to_string();
System::String^ systemString2 = msclr::interop::marshal_as<System::String^>(stdString2);
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
//wallsBevels2 = ValueSelector(voxelArray[val].value1, 3);	// Walls and Bevels. Byte 2
//dataGridView9->Rows[4]->Cells[2]->Value = flickeringLight.ToString();

///**//dataGridView9->Rows[6]->Cells[2]->Value = wallsBevels1.ToString();

wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;
///**//dataGridView9->Rows[7]->Cells[2]->Value = wallsBevels2.ToString();

//unsigned char c3[5] = {wallsBevels1,wallsBevels2};
char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

//readValuesFromVoxel(0, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data

label12->Text = "CubeSpecs = " + cubeNinDataFile.ToString();

// Now open *data file for reading cube's specs. 
String ^ dataFilePath = openFileDialog1->FileName + "data";
label157->Text = "DataFilePath = " + dataFilePath;

ifstream datafile;
pin_ptr<const wchar_t> convertedValue = PtrToStringChars(dataFilePath); 
const wchar_t *datapath = convertedValue;                     // <-- Unnecessary, but to be completely verbose
datafile.open(datapath, ios::binary|ios::in);

    datafile.seekg (0, datafile.end);
    int datalength = datafile.tellg();
    datafile.seekg (0, datafile.beg);
	// Do all stuff here. File opened for reading cube's specs.
int buf, buf2;
unsigned int n=0;
unsigned int count = 0;
bool eightbytes = false;
unsigned char b2size, cubespecstemp = 0;


	// Reading first 4 bytes. It's a number of CCBs I must skip to read data blocks.
	datafile.read((char *)&buf,sizeof(buf));
	buf = Swap4Bytes(buf);
	richTextBox3->AppendText("CCBs before CubeDataSpecs = " + buf + "\n");
//	dataGridView9->Rows[7]->Cells[2]->Value = "0x" + Swap4Bytes(buf).ToString();
	for (int i=0; i<datalength; i++) {
		datafile.read((char *)&buf2,sizeof(buf2));
		count +=4; 
				if (buf2 == 0x20424343) {
					n++;
					if (n == buf) {
						datafile.seekg (count-4, datafile.beg);
						datafile.read((char *)&buf2,sizeof(buf2));
						//count -=4;
							buf2 = Swap4Bytes(buf2);
							// IF size not found (8 bytes before located) Seek size
							if (buf2 > 0xFFFFF) {
								eightbytes = true;
								// Step back for 12 bytes
								datafile.seekg (count-12, datafile.beg);
								datafile.read((char *)&buf2,sizeof(buf2));
								buf2 = Swap4Bytes(buf2);
								count -=8;
								}
						richTextBox3->AppendText("Last CCB position = " + count + "\n");
						richTextBox3->AppendText("Last CCB size = " + buf2 + "\n");
						// Jump over this CCB 
							if (eightbytes) {
								datafile.seekg (count+buf2+8, datafile.beg);
								count = count + buf2 + 8;
								richTextBox3->AppendText("8 bytes passed \n");
								} else 
								{
								datafile.seekg (count+buf2, datafile.beg);
								count += buf2;
								}

						// Skip block 1.
						datafile.seekg (count+0x300, datafile.beg);
						count += 0x300;

						// Skip block 2.
						// Read 1 byte (block 2 size)
						datafile.read((char *)&b2size,sizeof(b2size));
						count += b2size;
						richTextBox3->AppendText("b2size = " + b2size + "\n");

						datafile.seekg (count, datafile.beg);
						// Reading N of entries of Block 3 (cube's specs itself)
						datafile.read((char *)&buf2,sizeof(buf2));
						count += 4;
						buf2 = Swap4Bytes(buf2);
						richTextBox3->AppendText("Block 3 entries = " + buf2 + "\n");
						// Jump to cube's data specs
						datafile.seekg (count + 16*cubeNinDataFile, datafile.beg);
						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureW = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureS = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureE = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureN = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureNWfromN = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureNEfromN = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureNWfromS = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureNEfromS = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureFloor = cubespecstemp;

						datafile.read((char *)&cubespecstemp,sizeof(cubespecstemp));
						count++;
						specs[0].textureCeiling = cubespecstemp;

						// Fill dataGridview9 with cube's data specs
						if (specs[0].textureW != 0) { // Texture West present
							dataGridView9->Rows[7]->Cells[2]->Value = specs[0].textureW;
						} else {
							dataGridView9->Rows[7]->Cells[2]->Value = "N/A";
						}

						if (specs[0].textureS != 0) { // Texture South present
							dataGridView9->Rows[8]->Cells[2]->Value = specs[0].textureS;
						} else {
							dataGridView9->Rows[8]->Cells[2]->Value = "N/A";
						}

						if (specs[0].textureE != 0) { // Texture East present
							dataGridView9->Rows[9]->Cells[2]->Value = specs[0].textureE;
						} else {
							dataGridView9->Rows[9]->Cells[2]->Value = "N/A";
						}

						if (specs[0].textureN != 0) { // Texture North present
							dataGridView9->Rows[10]->Cells[2]->Value = specs[0].textureN;
						} else {
							dataGridView9->Rows[10]->Cells[2]->Value = "N/A";
						}

						if (specs[0].textureNWfromN != 0) { // Texture NWfromN present
							dataGridView9->Rows[11]->Cells[2]->Value = specs[0].textureNWfromN;
						} else {
							dataGridView9->Rows[11]->Cells[2]->Value = "N/A";
						}

						if (specs[0].textureNEfromN != 0) { // Texture NEfromN present
							dataGridView9->Rows[12]->Cells[2]->Value = specs[0].textureNEfromN;
						} else {
							dataGridView9->Rows[12]->Cells[2]->Value = "N/A";
						}

						if (specs[0].textureNWfromS != 0) { // Texture NWfromS present
							dataGridView9->Rows[13]->Cells[2]->Value = specs[0].textureNWfromS;
						} else {
							dataGridView9->Rows[13]->Cells[2]->Value = "N/A";
						}

						if (specs[0].textureNEfromS != 0) { // Texture NEfromS present
							dataGridView9->Rows[14]->Cells[2]->Value = specs[0].textureNEfromS;
						} else {
							dataGridView9->Rows[14]->Cells[2]->Value = "N/A";
						}
						
						if (specs[0].textureFloor != 0) { // Texture Floor present
							dataGridView9->Rows[15]->Cells[2]->Value = specs[0].textureFloor;
						} else {
							dataGridView9->Rows[15]->Cells[2]->Value = "N/A";
						}

						if (specs[0].textureCeiling != 0) { // Texture Ceiling present
							dataGridView9->Rows[16]->Cells[2]->Value = specs[0].textureCeiling;
						} else {
							dataGridView9->Rows[16]->Cells[2]->Value = "N/A";
						}

					}
			} 
		}

//		}
datafile.close();


_i64toa (itemType, buffer3, 16);
systemString2 = msclr::interop::marshal_as<System::String^>(buffer3);
//dataGridView9->Rows[0]->Cells[2]->Value = systemString2;

switch(itemType) {
	case 0: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. North direction. N = 0x" + systemString2;
	break;

	case 0x1: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. North-East direction. N = 0x" + systemString2;
	break;

	case 0x2: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. East direction. N = 0x" + systemString2;
	break;

	case 0x3: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. South-East direction. N = 0x" + systemString2;
	break;

	case 0x4: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. South direction. N = 0x" + systemString2;
	break;

	case 0x5: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. South-West direction. N = 0x" + systemString2;
	break;

	case 0x6: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. West direction. N = 0x" + systemString2;
	break;

	case 0x7: 
	dataGridView9->Rows[0]->Cells[2]->Value = "Monster, 1st type. North-West direction. N = 0x" + systemString2;
	break;
	

	default : 
	dataGridView9->Rows[0]->Cells[2]->Value = "N/A or not recognized. N = 0x" + systemString2;
	}


switch(brightness) {

	case 0xF0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Flickering Light";
		break;

	case 0xE0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 1";
		break;

	case 0xC0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 2";
		break;

	case 0xA0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 3";
		break;

	case 0x80: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 4";
		break;

	case 0x60: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 5";
		break;

	case 0x40: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 6";
		break;

	case 0x20: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 7";
		break;

	case 0xD0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 8";
		break;

	case 0xB0: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 9";
		break;

	case 0x90: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 10";
		break;

	case 0x70: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 11";
		break;

	case 0x50: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 12";
		break;

	case 0x30: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 13";
		break;

	case 0x10: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 14";
		break;

	case 0xFA: 
		dataGridView9->Rows[4]->Cells[2]->Value = "Flickering Light";
		break;

	default : 
	dataGridView9->Rows[4]->Cells[2]->Value = "N/A";
}


if ((brightness>=0xE0)&&(brightness<0xF0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 1";
	}

if ((brightness>=0xC0)&&(brightness<0xD0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 2";
	}

if ((brightness>=0xA0)&&(brightness<0xB0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 3";
	}

if ((brightness>=0x80)&&(brightness<0x90)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 4";
	}

if ((brightness>=0x60)&&(brightness<0x70)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 5";
	}

if ((brightness>=0x40)&&(brightness<0x50)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 6";
	}

if ((brightness>=0x20)&&(brightness<0x30)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 7";
	}

if ((brightness>=0xD0)&&(brightness<0xE0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 8";
	}

if ((brightness>=0xB0)&&(brightness<0xC0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 9";
	}

if ((brightness>=0x90)&&(brightness<0xA0)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 10";
	}

if ((brightness>=0x70)&&(brightness<0x80)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 11";
	}

if ((brightness>=0x50)&&(brightness<0x60)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 12";
	}

if ((brightness>=0x30)&&(brightness<0x40)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 13";
	}

if ((brightness>=0x10)&&(brightness<0x20)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Brightness 14";
	}

if ((brightness>=0xF0)&&(brightness<=0xFF)) {
	dataGridView9->Rows[4]->Cells[2]->Value = "Flickering Light";
	}

//_i64toa (itemType, buffer3, 16);
//systemString2 = msclr::interop::marshal_as<System::String^>(buffer3);
//dataGridView9->Rows[0]->Cells[2]->Value = systemString2;

_i64toa (itemSpecs, buffer4, 16);
systemString2 = msclr::interop::marshal_as<System::String^>(buffer4);
dataGridView9->Rows[1]->Cells[2]->Value = systemString2;



bool doorPresent = (bool((1 << 9)  &  voxelArray[val].value1));	// Door exists
dataGridView9->Rows[2]->Cells[2]->Value = doorPresent.ToString();	// Door exists

bool doorLocked = (bool((1 << 11)  &  voxelArray[val].value1));		// Door is closed
dataGridView9->Rows[3]->Cells[2]->Value = doorLocked.ToString();	// Door is closed


//Stairs and Ramps
switch(stairsAndRamps) {
	case 0x1: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs South Low";
		break;
	case 0x2: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs North Low";
		break;
	case 0x3: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs West Low";
		break;
	case 0x4: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs East Low";
		break;
	case 0x5: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs South Upper";
		break;
	case 0x6: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs North Upper";
		break;
	case 0x7: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs West Upper";
		break;
	case 0x8: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Stairs East Upper";
		break;

////////////////////0x9, 0xA, 0xB, 0xC, 0xD ////////////////


	case 0xF: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Without Top Texture";
		break;
//////////////////// 0x10 /////////////////////////////

	case 0x11: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 1";
		break;
	case 0x12: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 2";
		break;
	case 0x13: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 3";
		break;
	case 0x14: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 4";
		break;
	case 0x15: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 5";
		break;
	case 0x16: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 6";
		break;
	case 0x17: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 7";
		break;
	case 0x18: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 8";
		break;
	case 0x19: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 9";
		break;
	case 0x1a: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10";
		break;
	case 0x1b: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10";
		break;
	case 0x1c: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11";
		break;
	case 0x1d: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11";
		break;
	case 0x1e: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 12";
		break;
	case 0x1f: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 13";
		break;
//////////////////////////////0x20/////////////

	case 0x21: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 1. Without vert. textures";
		break;
	case 0x22: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 2. Without vert. textures";
		break;
	case 0x23: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 3. Without vert. textures";
		break;
	case 0x24: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 4. Without vert. textures";
		break;
	case 0x25: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 5. Without vert. textures";
		break;
	case 0x26: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 6. Without vert. textures";
		break;
	case 0x27: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 7. Without vert. textures";
		break;
	case 0x28: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 8. Without vert. textures";
		break;
	case 0x29: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 9. Without vert. textures. Friction low";
		break;
	case 0x2a: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 10. Without vert. textures. Friction low";
		break;
	case 0x2b: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 11. Without vert. textures. Friction low";
		break;
	case 0x2c: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 12. Without vert. textures. Friction low";
		break;
	case 0x2d: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 13. Without vert. textures. Friction low";
		break;
	case 0x2e: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 14. Without vert. textures. Friction low";
		break;
	case 0x2f: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height 15. Without vert. textures. Friction low";
		break;
	case 0x30: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height ???????. Invisible";
		break;
	case 0x31: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height ???????. +1 Visible height";
		break;
	case 0x32: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height ???????. +2 Visible height";
		break;
	case 0x33: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height ???????. +3 Visible height";
		break;
	case 0x34: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Step. Height ???????. +4 Visible height";
		break;
///////////////////////

//////////////////////
	case 0x80: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Game crashes";
		break;
	case 0x83: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Game crashes";
		break;
	case 0x84: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Game crashes";
		break;
	case 0x86: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Game crashes";
		break;
	case 0x87: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Game crashes";
		break;
//////////////////////////////
	case 0xF0: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp West. Low";
		break;
	case 0xF1: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp West. High";
		break;
	case 0xF2: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp East. Low";
		break;
	case 0xF3: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp East. High";
		break;
	case 0xF4: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp North. Low";
		break;
	case 0xF5: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp North. High";
		break;
	case 0xF6: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp South. Low";
		break;
	case 0xF7: 
		dataGridView9->Rows[5]->Cells[2]->Value = "Ramp South. High";
		break;

	default : 
	dataGridView9->Rows[5]->Cells[2]->Value = "N/A";
}

#endif;
readValuesFromVoxel(0, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
///// Copy this to other functions! /////END///////////

//readValuesFromVoxel(0, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
//label2->Text = voxelArray[val].value1.ToString();
//textBox2->Text = temp.ToString();

// For DEC
_i64toa (voxelArray[val].value1, buffer2, 10);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox41->Text = voxelArray[val].value1.ToString();
#endif;
//////			dataGridView1->CurrentCell->Style->BackColor = Color::FromArgb(0,0,0);
		 }




// Save all data to TXT file.
private: System::Void button2_Click(System::Object^  sender, System::EventArgs^  e) {
//		  label9->Text = openFileDialog1->SafeFileName;
 
saveFileDialog1->InitialDirectory = openFileDialog1->FileName;

if ( saveFileDialog1->ShowDialog() == System::Windows::Forms::DialogResult::OK )
	{


// Create txt file
#if 1;
int b7, b6, b5, b4, b3, b2, b1, b0;
ofstream f;
//f.open("VoxelData.txt", ios::out);
System::String^ managed = saveFileDialog1->FileName->ToString();
std::string filePath = msclr::interop::marshal_as<std::string>(managed);

f.open(filePath, ios::out);
f << "Voxel#" << '\t' << "X" << '\t' << "Z" << '\t' << "Y" << '\t' << "Byte #7" << '\t' << "Byte #6" << '\t' << "Byte #5" << '\t' << "Byte #4" << '\t' << "Byte #3" << '\t' << "Byte #2" << '\t' << "Byte #1" << '\t' << "Byte #0" << '\t' << endl;

int voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
		for (int s=0; s<8; s++) {
//			voxelArray[voxCount].x = d;
//			voxelArray[voxCount].y = k;
//			voxelArray[voxCount].z = s;
//			voxelArray[voxCount].value1 = buffer;
			b7 = ValueSelector(voxelArray[voxCount].value1, 7); // Item type
			b6 = ValueSelector(voxelArray[voxCount].value1, 6);	// 
			b5 = ValueSelector(voxelArray[voxCount].value1, 5);	// Item specifications
			b4 = ValueSelector(voxelArray[voxCount].value1, 4);	// 
			b3 = ValueSelector(voxelArray[voxCount].value1, 3);	// 
			b2 = ValueSelector(voxelArray[voxCount].value1, 2);	// 
			b1 = ValueSelector(voxelArray[voxCount].value1, 1);	// Light flicker inside the cube
			b0 = ValueSelector(voxelArray[voxCount].value1, 0);	// Stairs and Ramps in various directions

//			f << dec << voxCount << '\t' << d << '\t' << s << '\t' << k << '\t' << hex << voxelArray[voxCount].value1 << endl;
			f << dec << voxCount << '\t' << d << '\t' << s << '\t' << k << '\t' << hex << b7 << '\t' << b6 << '\t' << b5 << '\t' << b4 << '\t' << b3 << '\t' << b2 << '\t' << b1 << '\t' << b0 << '\t' << endl;
			voxCount++;
		}
}
}
f.close();
#endif;
	}

		 }


// Click on the dataGrid2
private: System::Void dataGridView2_CellMouseClick(System::Object^  sender, System::Windows::Forms::DataGridViewCellMouseEventArgs^  e) {
#if 1;
			 int x, y, x1, y1;
//dataGridView2->MultiSelect = false;

			x = dataGridView2->CurrentCell->ColumnIndex;
			y = dataGridView2->CurrentCell->RowIndex;

			label17->Text = x.ToString();
			label18->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox9->Text = x1.ToString();
			textBox8->Text = y1.ToString();

int val = 32*8*x+y*8+1; // 1- Floor#
textBox10->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox6->Text = systemString;

/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(1, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////


/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox7->Text = systemString;


#endif;

		 }

// Click on the dataGrid3
private: System::Void dataGridView3_CellMouseClick(System::Object^  sender, System::Windows::Forms::DataGridViewCellMouseEventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView3->MultiSelect = false;
			x = dataGridView3->CurrentCell->ColumnIndex;
			y = dataGridView3->CurrentCell->RowIndex;

			label36->Text = x.ToString();
			label35->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox12->Text = x1.ToString();
			textBox13->Text = y1.ToString();

int val = 32*8*x+y*8+2; // 2- Floor#
textBox11->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox15->Text = systemString;

/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(2, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////

/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox14->Text = systemString;
#endif;
		 }


// Click on the dataGrid4
private: System::Void dataGridView4_CellMouseClick(System::Object^  sender, System::Windows::Forms::DataGridViewCellMouseEventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView4->MultiSelect = false;
			x = dataGridView4->CurrentCell->ColumnIndex;
			y = dataGridView4->CurrentCell->RowIndex;

			label43->Text = x.ToString();
			label42->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox17->Text = x1.ToString();
			textBox18->Text = y1.ToString();

int val = 32*8*x+y*8+3; // 3- Floor#
textBox16->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox20->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(3, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox19->Text = systemString;
#endif;
		 }

// Click on the dataGrid5
private: System::Void dataGridView5_CellMouseClick(System::Object^  sender, System::Windows::Forms::DataGridViewCellMouseEventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView5->MultiSelect = false;
			x = dataGridView5->CurrentCell->ColumnIndex;
			y = dataGridView5->CurrentCell->RowIndex;

			label52->Text = x.ToString();
			label51->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox22->Text = x1.ToString();
			textBox23->Text = y1.ToString();

int val = 32*8*x+y*8+4; // 4- Floor#
textBox21->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox25->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(4, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox24->Text = systemString;
#endif;
		 }

// Click on the dataGrid6
private: System::Void dataGridView6_CellMouseClick(System::Object^  sender, System::Windows::Forms::DataGridViewCellMouseEventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView6->MultiSelect = false;
			x = dataGridView6->CurrentCell->ColumnIndex;
			y = dataGridView6->CurrentCell->RowIndex;

			label61->Text = x.ToString();
			label60->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox27->Text = x1.ToString();
			textBox28->Text = y1.ToString();

int val = 32*8*x+y*8+5; // 5- Floor#
textBox26->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox30->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(5, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox29->Text = systemString;
#endif;
		 }


// Click on the dataGrid7
private: System::Void dataGridView7_CellMouseClick(System::Object^  sender, System::Windows::Forms::DataGridViewCellMouseEventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView7->MultiSelect = false;
			x = dataGridView7->CurrentCell->ColumnIndex;
			y = dataGridView7->CurrentCell->RowIndex;

			label70->Text = x.ToString();
			label69->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox32->Text = x1.ToString();
			textBox33->Text = y1.ToString();

int val = 32*8*x+y*8+6; // 6- Floor#
textBox31->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox35->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(6, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox34->Text = systemString;
#endif;
		 }

// Click on the dataGrid8
private: System::Void dataGridView8_CellMouseClick(System::Object^  sender, System::Windows::Forms::DataGridViewCellMouseEventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView8->MultiSelect = false;
			x = dataGridView8->CurrentCell->ColumnIndex;
			y = dataGridView8->CurrentCell->RowIndex;

			label79->Text = x.ToString();
			label78->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox37->Text = x1.ToString();
			textBox38->Text = y1.ToString();

int val = 32*8*x+y*8+7; // 7- Floor#
textBox36->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox40->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(7, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox39->Text = systemString;
#endif;
		 }

// Change selection on the dataGrid1
private: System::Void dataGridView1_SelectionChanged(System::Object^  sender, System::EventArgs^  e) {
	int x, y, x1, y1;

//dataGridView1->MultiSelect = false;
			x = dataGridView1->CurrentCell->ColumnIndex;
			y = dataGridView1->CurrentCell->RowIndex;

			label14->Text = x.ToString();
			label15->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox3->Text = x1.ToString();
			textBox4->Text = y1.ToString();

#if 1;
//int val = 6146;
// Calculate real position
//int val = x1 * y1;
int val = 32*8*x+y*8+0; // 0- Floor#
textBox5->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox1->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(0, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox2->Text = systemString;

//label2->Text = voxelArray[val].value1.ToString();
//textBox2->Text = temp.ToString();


#if 0;
//Throw known bits or bytes to the dataGrid9
// PLACE COMPLETE CODE HERE FROM DATAGRID1 CLICK
#endif;


// For DEC
_i64toa (voxelArray[val].value1, buffer2, 10);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox41->Text = voxelArray[val].value1.ToString();
#endif;


		 }

// Change selection on the dataGrid2
private: System::Void dataGridView2_SelectionChanged(System::Object^  sender, System::EventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView2->MultiSelect = false;
			x = dataGridView2->CurrentCell->ColumnIndex;
			y = dataGridView2->CurrentCell->RowIndex;

			label17->Text = x.ToString();
			label18->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox9->Text = x1.ToString();
			textBox8->Text = y1.ToString();

int val = 32*8*x+y*8+1; // 1- Floor#
textBox10->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox6->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(1, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox7->Text = systemString;
#endif;

		 }


// Change selection on the dataGrid3
private: System::Void dataGridView3_SelectionChanged(System::Object^  sender, System::EventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView3->MultiSelect = false;
			x = dataGridView3->CurrentCell->ColumnIndex;
			y = dataGridView3->CurrentCell->RowIndex;

			label36->Text = x.ToString();
			label35->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox12->Text = x1.ToString();
			textBox13->Text = y1.ToString();

int val = 32*8*x+y*8+2; // 2- Floor#
textBox11->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox15->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(2, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox14->Text = systemString;
#endif;
		 }

// Change selection on the dataGrid4
private: System::Void dataGridView4_SelectionChanged(System::Object^  sender, System::EventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView4->MultiSelect = false;
			x = dataGridView4->CurrentCell->ColumnIndex;
			y = dataGridView4->CurrentCell->RowIndex;

			label43->Text = x.ToString();
			label42->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox17->Text = x1.ToString();
			textBox18->Text = y1.ToString();

int val = 32*8*x+y*8+3; // 3- Floor#
textBox16->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox20->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(3, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox19->Text = systemString;
#endif;
		 }

// Change selection on the dataGrid5
private: System::Void dataGridView5_SelectionChanged(System::Object^  sender, System::EventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView5->MultiSelect = false;
			x = dataGridView5->CurrentCell->ColumnIndex;
			y = dataGridView5->CurrentCell->RowIndex;

			label52->Text = x.ToString();
			label51->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox22->Text = x1.ToString();
			textBox23->Text = y1.ToString();

int val = 32*8*x+y*8+4; // 4- Floor#
textBox21->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox25->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(4, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox24->Text = systemString;
#endif;
		 }

// Change selection on the dataGrid6
private: System::Void dataGridView6_SelectionChanged(System::Object^  sender, System::EventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView6->MultiSelect = false;
			x = dataGridView6->CurrentCell->ColumnIndex;
			y = dataGridView6->CurrentCell->RowIndex;

			label61->Text = x.ToString();
			label60->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox27->Text = x1.ToString();
			textBox28->Text = y1.ToString();

int val = 32*8*x+y*8+5; // 5- Floor#
textBox26->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox30->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(5, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox29->Text = systemString;
#endif;
		 }


// Change selection on the dataGrid7
private: System::Void dataGridView7_SelectionChanged(System::Object^  sender, System::EventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView7->MultiSelect = false;
			x = dataGridView7->CurrentCell->ColumnIndex;
			y = dataGridView7->CurrentCell->RowIndex;

			label70->Text = x.ToString();
			label69->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox32->Text = x1.ToString();
			textBox33->Text = y1.ToString();

int val = 32*8*x+y*8+6; // 6- Floor#
textBox31->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox35->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(6, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox34->Text = systemString;
#endif;
		 }


// Change selection on the dataGrid8
private: System::Void dataGridView8_SelectionChanged(System::Object^  sender, System::EventArgs^  e) {
#if 1;
			 int x, y, x1, y1;

//dataGridView8->MultiSelect = false;
			x = dataGridView8->CurrentCell->ColumnIndex;
			y = dataGridView8->CurrentCell->RowIndex;

			label79->Text = x.ToString();
			label78->Text = y.ToString();
			
			x1 = x+1;
			y1 = y+1;

			textBox37->Text = x1.ToString();
			textBox38->Text = y1.ToString();

int val = 32*8*x+y*8+7; // 7- Floor#
textBox36->Text = val.ToString();

_ULonglong temp = voxelArray[val].value1;

std::bitset<64> bs(temp);

std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
textBox40->Text = systemString;
/////////////////****************///////////////////
unsigned char itemType, itemSpecs, brightness, stairsAndRamps, wallsBevels1, wallsBevels2 = 0;
///**///**unsigned short int cubeNinDataFile = 0;
char buffer3 [20];
char buffer4 [2];
richTextBox3->Clear();

itemType = ValueSelector(voxelArray[val].value1, 7); // Item type
itemSpecs = ValueSelector(voxelArray[val].value1, 5);	// Item specifications
brightness = ValueSelector(voxelArray[val].value1, 1);	// Light flicker inside the cube
stairsAndRamps = ValueSelector(voxelArray[val].value1, 0);	// Stairs and Ramps in various directions
wallsBevels1 = ValueSelector(voxelArray[val].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[val].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cubes N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);

readValuesFromVoxel(7, voxelArray[val].value1, itemType, itemSpecs, brightness, stairsAndRamps, cubeNinDataFile, x, y); //Read all data
/////////////////****************///////////////////
/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[val].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
textBox39->Text = systemString;
#endif;
}


// Extract textures to cel. Part 2
void ExtractCCBsANIMs(unsigned int pos, unsigned int pos2AnimBack, unsigned int pos2AnimObj, unsigned int pos2AnimEnemies, unsigned int pos2Objects, unsigned int AnimBack, unsigned int AnimEnemies, unsigned int AnimObj, unsigned int Objects) {
ifstream infile;
FILE *outfile;
unsigned char tmp;
unsigned int counter = 40; // 40 is just to starting point. No special matter.
bool notset = true;
unsigned int nofObjTypes, objType, headerSize, off2name, nameLength, sizeCCBANIM, tempSeek, tempbuf = 0;
unsigned int nofcels, bufccbanim, postmp = 0;
int buffer;
int filecounter = 0;
char bmpname[40], tmpbmp[40], dir[40], filename[40], animfiles[40], frameN[1];


pin_ptr<const wchar_t> convertedValue = PtrToStringChars(openFileDialog2->FileName); 
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
label82->Text = System::IO::Path::GetFileName(openFileDialog2->FileName);

		int check; 
		char* dirname = "Textures3DO"; 
		check = _mkdir(dirname);

infile.open(path, ios::binary|ios::in);	

	//////////////////////// ANIMBACK //////////////////////////////////
	if (pos2AnimBack != 0) {
#if 1;
unsigned int animcounter = 0;

		pos2AnimBack -= 8;
		pos = pos2AnimBack;
	richTextBox1->AppendText("ExtractCCBsANIMs pos2AnimBack = " + pos2AnimBack + "\n");
//	richTextBox1->AppendText("ExtractCCBsANIMs pos = " + pos + "\n");

infile.seekg (pos2AnimBack, infile.beg);

	infile.read((char *)&buffer,sizeof(buffer)); //Read 1
	infile.read((char *)&buffer,sizeof(buffer)); //Read header size
		pos += 8;
again:
	headerSize = Swap4Bytes(buffer);
	richTextBox1->AppendText("headerAnimSize = " + headerSize + "\n");
	pos=pos+headerSize;
	infile.seekg (pos, infile.beg); // Skip header to ANIM size

	infile.read((char *)&bufccbanim, sizeof(bufccbanim));
		pos += 4;
	sizeCCBANIM = Swap4Bytes(bufccbanim);
	richTextBox1->AppendText("AnimSize = " + sizeCCBANIM + "\n");
//	richTextBox1->AppendText("pos = " + pos + "\n");
	// Read and save ANIM
//////////////////////////////////////////////////
#if 1;
	#if 1;
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;

	// if its CCB
	if (buffer == 0x20424343) {			// CCB
		richTextBox1->AppendText("CCB found!\n"); 
		filecounter++;
		// Generate filename and make a file
		// Save whole CCB there.

		itoa(animcounter, bmpname, 10);
		System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
		std::string vsSt= "";
		for(int i = 0; i < fname->Length; i++)
		vsSt += (char) fname [i];
		const char * stt = vsSt.c_str();

		strcpy(tmpbmp, "\Textures3DO\\");
		strcat(tmpbmp, stt);

		strcat(tmpbmp, "\\AnimBack\\");
		// Create folder here!
		dirname = tmpbmp; 
		check = _mkdir(dirname);

		strcat(tmpbmp, "\\");
		strcat(tmpbmp, bmpname);
		strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
//		strcat(tmpbmp, bmpname);
			strcat(tmpbmp, "0");// Constant name
		outfile = fopen(tmpbmp, "wb");
		// Save CCB
		fwrite(&buffer, 4, 1, outfile);

		for (int j=0; j<sizeCCBANIM/4-1; j++) {
			infile.read((char *)&buffer,sizeof(buffer));
			pos += 4;
			fwrite(&buffer, 4, 1, outfile);
		}
		pos += 8; // For level 23
		fclose(outfile);

	} else if (buffer == 0x4D494E41) { // ANIM
//		richTextBox1->AppendText("ANIM found!\n");
		filecounter++;
		// Read ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animHeadersize = Swap4Bytes(buffer);
		richTextBox1->AppendText("animHeadersize = " + animChunk[0].animHeadersize + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].version = Swap4Bytes(buffer);
//		richTextBox1->AppendText("version = " + animChunk[0].version + "\n");
		
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animType = Swap4Bytes(buffer);
			if (animChunk[0].animType==0) {
//				richTextBox1->AppendText("ANIM_MULTI_CCB\n");
			} else if (animChunk[0].animType==1) {
//				richTextBox1->AppendText("ANIM_SINGLE_CCB\n");
			}

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numFrames = Swap4Bytes(buffer);
		richTextBox1->AppendText("numFrames = " + animChunk[0].numFrames + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].frameRate = Swap4Bytes(buffer);
		richTextBox1->AppendText("frameRate = " + animChunk[0].frameRate + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].startFrame = Swap4Bytes(buffer);
//		richTextBox1->AppendText("startFrame = " + animChunk[0].startFrame + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numLoops = Swap4Bytes(buffer);
//		richTextBox1->AppendText("numLoops = " + animChunk[0].numLoops + "\n");

		// Skip the rest of the ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 16;
//		richTextBox1->AppendText("pos after ANIM header = " + pos + "\n");
			// Read CCB and all PDAT frames based on CCB header.
			// Save all frames to named folder. If the name is blank, name folder as ANIM type(?)

			// Read and save to buffer/structure CCB header here!
				infile.read((char *)&buffer, sizeof(buffer));
				pos += 4;
//			richTextBox1->AppendText("CCB = " + buffer + "\n"); // For debug

			// Create ANIM folder and create animChunk[0].numFrames files in it.
			// Generate folder's name
			System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
			std::string vsSt= "";
			for(int i = 0; i < fname->Length; i++)
			vsSt += (char) fname [i];
			const char * stt = vsSt.c_str();
			//richTextBox1->AppendText("fname->Length = " + fname->Length + "\n");
			strcpy(tmpbmp, "\Textures3DO\\");
			strcat(tmpbmp, stt);

			strcat(tmpbmp, "\\AnimBack\\");

			itoa(animcounter, bmpname, 10);
			// Create folder for Object here!
			dirname = tmpbmp; 
			check = _mkdir(dirname);

//				strcat(tmpbmp, "\\");
				strcat(tmpbmp, bmpname);
				strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
// Read and store CCB header for future use.
				//**//**//
	unsigned int pdatsize, sizebeforeCCB, count = 0;
	do {
		infile.read((char *)&buffer, sizeof(buffer));
		count++;
	} while (buffer!=0x54414450);

	sizebeforeCCB = count;
	int *header = new int[sizebeforeCCB];
					//**//**//
	infile.seekg (pos, infile.beg);
	header[0] = 0x20424343;
		for (int d=1; d<sizebeforeCCB; d++) {
			infile.read((char *)&buffer, sizeof(buffer));
			pos += 4;
			header[d] = buffer;
		}
#if 0;
	int ccbheader[43];	
			ccbheader[0] = 0x20424343;
				for (int d=1; d<43; d++) {
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						ccbheader[d] = buffer;
					} 
#endif;
			for (int i=0; i<animChunk[0].numFrames; i++) { // TURN THIS ON
//			for (int i=0; i<1; i++) {
				char a[40];
				// Generate unique name based on frame N.
				sprintf(frameN, "%d", i);
					for (int f=0; f<40; f++){
						a[f] = tmpbmp[f];
						}
				strcat(a, frameN);
				outfile = fopen(a, "wb");

						//Write CCB header
					for (int d=0; d<sizebeforeCCB; d++) {
						fwrite(&header[d], 4, 1, outfile);
						} 
#if 0;
					for (int d=0; d<43; d++) {
						fwrite(&ccbheader[d], 4, 1, outfile);
						} 
#endif;	
				// Save PDAT 
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						pdatsize = Swap4Bytes(buffer);
//					richTextBox1->AppendText("pdatsize = " + pdatsize + "\n");

					for (int f=0; f<(pdatsize/4-2); f++) {
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						}

				fclose(outfile);
					for (int f=0; f<40; f++){ // Blank array
						a[f] = 0;
						}
				}
	// Read ahead and check if it's enemy.
	do {
		infile.read((char *)&buffer, sizeof(buffer));
			pos += 4;
		} while (buffer == 0);

//		infile.read((char *)&buffer, sizeof(buffer));
//			pos += 4;
		infile.read((char *)&buffer, sizeof(buffer));
			pos += 4;
			buffer = Swap4Bytes(buffer);
			if (buffer <= 0x30) {
				animcounter++;
				buffer = Swap4Bytes(buffer);
				goto again;
				}
#endif;
	} else {
		richTextBox1->AppendText("NO CCB or ANIM found\n");
//		break;
		}
// Blank all char arrays
	for (int i=0; i< sizeof(tmpbmp); i++) {
				tmpbmp[i] = 0;
				bmpname[i] = 0;
				dir[i] = 0;
				filename[i] = 0;
				animfiles[i] = 0;
			}
#endif;


	// pos after this block must be equal to pos2AnimEnemies start.
	pos -= 8;
	infile.seekg (pos, infile.beg);
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;
	AnimEnemies = Swap4Bytes(buffer);
	pos2AnimEnemies = pos;
#endif;
	}
///////////////////
		//////////////////////// ANIMENEMIES //////////////////////////////////
	if (pos2AnimEnemies != 0) {
richTextBox1->AppendText("POSEnemies = " + pos2AnimEnemies + "\n");
richTextBox1->AppendText("AnimEnemies = " + AnimEnemies + "\n");
#if 1;
unsigned int animcounter = 0;

pos = pos2AnimEnemies;
infile.seekg (pos, infile.beg);

// Repeat AnimEnemies times 
for (int i=0; i<AnimEnemies; i++) {
//	infile.read((char *)&buffer,sizeof(buffer)); //Read quantity
again1:
	infile.read((char *)&buffer,sizeof(buffer)); //Read header size
		pos += 4;
	headerSize = Swap4Bytes(buffer);
		if (headerSize<=0x30) {// It's additional animation for the enemy
			// Jump over
			pos=pos+headerSize;
			infile.seekg (pos, infile.beg);
			infile.read((char *)&buffer,sizeof(buffer)); // Read Anim size
				pos += 4;
				sizeCCBANIM = Swap4Bytes(buffer);
				pos=pos+sizeCCBANIM;
				infile.seekg (pos, infile.beg);
				// It's the beginning of the next Anim.
				goto again1;
			}
	richTextBox1->AppendText("headerAnimSize = " + headerSize + "\n");
	pos=pos+headerSize;
	infile.seekg (pos, infile.beg); // Skip header to ANIM size

	infile.read((char *)&bufccbanim, sizeof(bufccbanim));
		pos += 4;
	sizeCCBANIM = Swap4Bytes(bufccbanim);
	richTextBox1->AppendText("AnimSize = " + sizeCCBANIM + "\n");
//	richTextBox1->AppendText("pos = " + pos + "\n");
	// Read and save ANIM
//////////////////////////////////////////////////
#if 1;
	#if 1;
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;

	if (buffer == 0x4D494E41) { // ANIM
//		richTextBox1->AppendText("ANIM found!\n");
		filecounter++;
		// Read ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animHeadersize = Swap4Bytes(buffer);
		richTextBox1->AppendText("animHeadersize = " + animChunk[0].animHeadersize + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].version = Swap4Bytes(buffer);
//		richTextBox1->AppendText("version = " + animChunk[0].version + "\n");
		
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animType = Swap4Bytes(buffer);
			if (animChunk[0].animType==0) {
//				richTextBox1->AppendText("ANIM_MULTI_CCB\n");
			} else if (animChunk[0].animType==1) {
//				richTextBox1->AppendText("ANIM_SINGLE_CCB\n");
			}

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numFrames = Swap4Bytes(buffer);
		richTextBox1->AppendText("numFrames = " + animChunk[0].numFrames + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].frameRate = Swap4Bytes(buffer);
//		richTextBox1->AppendText("frameRate = " + animChunk[0].frameRate + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].startFrame = Swap4Bytes(buffer);
//		richTextBox1->AppendText("startFrame = " + animChunk[0].startFrame + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numLoops = Swap4Bytes(buffer);
//		richTextBox1->AppendText("numLoops = " + animChunk[0].numLoops + "\n");

		// Skip the rest of the ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 16;
//		richTextBox1->AppendText("pos after ANIM header = " + pos + "\n");
			// Read CCB and all PDAT frames based on CCB header.
			// Save all frames to named folder. If the name is blank, name folder as ANIM type(?)

			// Read and save to buffer/structure CCB header here!
				infile.read((char *)&buffer, sizeof(buffer));
				pos += 4;
//			richTextBox1->AppendText("CCB = " + buffer + "\n"); // For debug

			// Create ANIM folder and create animChunk[0].numFrames files in it.
			// Generate folder's name
			System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
			std::string vsSt= "";
			for(int i = 0; i < fname->Length; i++)
			vsSt += (char) fname [i];
			const char * stt = vsSt.c_str();
			//richTextBox1->AppendText("fname->Length = " + fname->Length + "\n");
			strcpy(tmpbmp, "\Textures3DO\\");
			strcat(tmpbmp, stt);

			strcat(tmpbmp, "\\AnimEnemies\\");

			itoa(animcounter, bmpname, 10);
			// Create folder for Object here!
			dirname = tmpbmp; 
			check = _mkdir(dirname);

//				strcat(tmpbmp, "\\");
				strcat(tmpbmp, bmpname);
				strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
// Read and store CCB header for future use.
				//**//**//
	unsigned int pdatsize, sizebeforeCCB, count = 0;
	do {
		infile.read((char *)&buffer, sizeof(buffer));
		count++;
	} while (buffer!=0x54414450);

	sizebeforeCCB = count;
	int *header = new int[sizebeforeCCB];
					//**//**//
	infile.seekg (pos, infile.beg);
	header[0] = 0x20424343;
		for (int d=1; d<sizebeforeCCB; d++) {
			infile.read((char *)&buffer, sizeof(buffer));
			pos += 4;
			header[d] = buffer;
		}
#if 0;
	int ccbheader[43];	
			ccbheader[0] = 0x20424343;
				for (int d=1; d<43; d++) {
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						ccbheader[d] = buffer;
					} 
#endif;
			for (int i=0; i<animChunk[0].numFrames; i++) { // TURN THIS ON
//			for (int i=0; i<1; i++) {
				char a[40];
				// Generate unique name based on frame N.
				sprintf(frameN, "%d", i);
					for (int f=0; f<40; f++){
						a[f] = tmpbmp[f];
						}
				strcat(a, frameN);
				outfile = fopen(a, "wb");

						//Write CCB header
					for (int d=0; d<sizebeforeCCB; d++) {
						fwrite(&header[d], 4, 1, outfile);
						} 
#if 0;
					for (int d=0; d<43; d++) {
						fwrite(&ccbheader[d], 4, 1, outfile);
						} 
#endif;	
				// Save PDAT 
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						pdatsize = Swap4Bytes(buffer);
//					richTextBox1->AppendText("pdatsize = " + pdatsize + "\n");

					for (int f=0; f<(pdatsize/4-2); f++) {
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						}

				fclose(outfile);
					for (int f=0; f<40; f++){ // Blank array
						a[f] = 0;
						}
				}
		animcounter++;
#endif;
	} else {
		richTextBox1->AppendText("NO ANIM found\n");
//		break;
		}
// Blank all char arrays
	for (int i=0; i< sizeof(tmpbmp); i++) {
				tmpbmp[i] = 0;
				bmpname[i] = 0;
				dir[i] = 0;
				filename[i] = 0;
				animfiles[i] = 0;
			}
}
#endif;
richTextBox1->AppendText("POSBEFORE ANIMOBJ = " + pos + "\n");
// Check if it's enemy's additional animation
check:
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;
	buffer = Swap4Bytes(buffer);
	if (buffer>4) { // It's additional animation for enemy
		// Jump over
			pos = pos + buffer;
			infile.seekg (pos, infile.beg);
			infile.read((char *)&buffer,sizeof(buffer)); // Read Anim size
				pos += 4;
				sizeCCBANIM = Swap4Bytes(buffer);
				pos = pos + sizeCCBANIM;
				infile.seekg (pos, infile.beg);
//				richTextBox1->AppendText("pos enemy's anim = " + pos + "\n");
				goto check;
		} else {
			AnimObj = buffer;
			pos2AnimObj = pos;	// pos after this block must be equal to pos2AnimObj
			richTextBox1->AppendText("POSANIMOBJ AFTER ENEMIES = " + pos + "\n");
		}
#endif;

	}

///////////////////
	//////////////////////// ANIMOBJ //////////////////////////////////
	if (pos2AnimObj != 0) {

richTextBox1->AppendText("POSANIMOBJ = " + pos2AnimObj + "\n");
richTextBox1->AppendText("AnimObj = " + AnimObj + "\n");
pos = pos2AnimObj;

richTextBox1->AppendText("pos ANIMOBJ = " + pos + "\n");
/************/////////////////***********************//////////////
#if 1;								//Turn this ON
infile.seekg (pos, infile.beg);

//		do {
//			infile.read((char *)&buffer, sizeof(buffer));
//			pos += 4;
//		} while (buffer == 0);

// Repeat AnimObj times 
for (int i=0; i<AnimObj; i++) { //Turn this ON
//for (int i=0; i<1; i++) {
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;
	buffer = Swap4Bytes(buffer);
	headerSize = buffer;

	richTextBox1->AppendText("headerSize = " + headerSize + "\n");

	pos = pos + headerSize;
	infile.seekg (pos, infile.beg); // Skip header Anim size

	infile.read((char *)&bufccbanim, sizeof(bufccbanim));
		pos += 4;
	sizeCCBANIM = Swap4Bytes(bufccbanim);
	richTextBox1->AppendText("sizeCCBANIM = " + sizeCCBANIM + "\n");
//	richTextBox1->AppendText("pos = " + pos + "\n");
	// Read and save CCB or ANIM

#if 1;
	#if 1;
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;
	if (buffer == 0x20424343) {			// CCB
		richTextBox1->AppendText("CCB found!\n"); 
		filecounter++;
		// Generate filename and make a file
		// Save whole CCB there.

		itoa(i, bmpname, 10);
		System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
		std::string vsSt= "";
		for(int i = 0; i < fname->Length; i++)
		vsSt += (char) fname [i];
		const char * stt = vsSt.c_str();

		strcpy(tmpbmp, "\Textures3DO\\");
		strcat(tmpbmp, stt);

		strcat(tmpbmp, "\\AnimObj\\");
		// Create folder here!
		dirname = tmpbmp; 
		check = _mkdir(dirname);

		strcat(tmpbmp, "\\");
		strcat(tmpbmp, bmpname);
		strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
//		strcat(tmpbmp, bmpname);
			strcat(tmpbmp, "0");// Constant name
		outfile = fopen(tmpbmp, "wb");
		// Save CCB
		fwrite(&buffer, 4, 1, outfile);

		for (int j=0; j<sizeCCBANIM/4-1; j++) {
			infile.read((char *)&buffer,sizeof(buffer));
			pos += 4;
			fwrite(&buffer, 4, 1, outfile);
		}
		fclose(outfile);

	} else if (buffer == 0x4D494E41) { // ANIM
//		richTextBox1->AppendText("ANIM found!\n");
		filecounter++;
		// Read ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animHeadersize = Swap4Bytes(buffer);
		richTextBox1->AppendText("animHeadersize = " + animChunk[0].animHeadersize + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].version = Swap4Bytes(buffer);
//		richTextBox1->AppendText("version = " + animChunk[0].version + "\n");
		
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animType = Swap4Bytes(buffer);
			if (animChunk[0].animType==0) {
//				richTextBox1->AppendText("ANIM_MULTI_CCB\n");
			} else if (animChunk[0].animType==1) {
//				richTextBox1->AppendText("ANIM_SINGLE_CCB\n");
			}

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numFrames = Swap4Bytes(buffer);
		richTextBox1->AppendText("numFrames = " + animChunk[0].numFrames + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].frameRate = Swap4Bytes(buffer);
//		richTextBox1->AppendText("frameRate = " + animChunk[0].frameRate + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].startFrame = Swap4Bytes(buffer);
//		richTextBox1->AppendText("startFrame = " + animChunk[0].startFrame + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numLoops = Swap4Bytes(buffer);
//		richTextBox1->AppendText("numLoops = " + animChunk[0].numLoops + "\n");

		// Skip the rest of the ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 16;
//		richTextBox1->AppendText("pos after ANIM header = " + pos + "\n");
			// Read CCB and all PDAT frames based on CCB header.
			// Save all frames to named folder. If the name is blank, name folder as ANIM type(?)

			// Read and save to buffer/structure CCB header here!
				infile.read((char *)&buffer, sizeof(buffer));
				pos += 4;
//			richTextBox1->AppendText("CCB = " + buffer + "\n"); // For debug

			// Create ANIM folder and create animChunk[0].numFrames files in it.
			// Generate folder's name
			System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
			std::string vsSt= "";
			for(int i = 0; i < fname->Length; i++)
			vsSt += (char) fname [i];
			const char * stt = vsSt.c_str();
			//richTextBox1->AppendText("fname->Length = " + fname->Length + "\n");
			strcpy(tmpbmp, "\Textures3DO\\");
			strcat(tmpbmp, stt);

			strcat(tmpbmp, "\\AnimObj\\");

			itoa(i, bmpname, 10);
			// Create folder here!
			dirname = tmpbmp; 
			check = _mkdir(dirname);

//				strcat(tmpbmp, "\\");
				strcat(tmpbmp, bmpname);
				strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
// Read and store CCB header for future use.
				//**//**//
	unsigned int pdatsize, sizebeforeCCB, count = 0;
	do {
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4; // new
		count++;
	} while (buffer!=0x54414450);

	sizebeforeCCB = count; // Before PDAT. CCB header + XTRA, etc...
	pos = pos - count * 4; // new
	int *header = new int[sizebeforeCCB];
	richTextBox1->AppendText("sizebeforePDAT = " + sizebeforeCCB + "\n");
					//**//**//
	infile.seekg (pos, infile.beg);
	header[0] = 0x20424343;
		for (int d=1; d<sizebeforeCCB; d++) {
			infile.read((char *)&buffer, sizeof(buffer));
			pos += 4;
			header[d] = buffer;
		}

			for (int i=0; i<animChunk[0].numFrames; i++) { // TURN THIS ON
//			for (int i=0; i<1; i++) {
				char a[40];
				// Generate unique name based on frame N.
				sprintf(frameN, "%d", i);
					for (int f=0; f<40; f++){
						a[f] = tmpbmp[f];
						}
				strcat(a, frameN);

				outfile = fopen(a, "wb");

						//Write CCB header
					for (int d=0; d<sizebeforeCCB; d++) {
						fwrite(&header[d], 4, 1, outfile);
						} 
			
				// Save PDAT 
						infile.read((char *)&buffer, sizeof(buffer));// PDAT
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						infile.read((char *)&buffer, sizeof(buffer));// PDAT size
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						pdatsize = Swap4Bytes(buffer);
					richTextBox1->AppendText("pdatsize = " + pdatsize + "\n");
						
					for (int f=0; f<((pdatsize/4)-2); f++) {
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						}

				fclose(outfile);
					for (int f=0; f<40; f++){ // Blank array
						a[f] = 0;
						}
				}
	#endif;
	} else {
		richTextBox1->AppendText("NO CCB or ANIM found\n");
		break;
		}

counter--;
notset = false;
// Blank all char arrays
	for (int i=0; i< sizeof(tmpbmp); i++) {
				tmpbmp[i] = 0;
				bmpname[i] = 0;
				dir[i] = 0;
				filename[i] = 0;
				animfiles[i] = 0;
			}
#endif;
	}
#endif;
/************/////////////////***********************//////////////
richTextBox1->AppendText("POS TO FIX = " + pos + "\n");
//	pos = infile.tellg();
	infile.seekg (pos, infile.beg);
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;
	Objects = Swap4Bytes(buffer);
	// pos after this block must be equal to pos2Objects
	pos2Objects = pos;
	richTextBox1->AppendText("POS BEFORE OBJ = " + pos2Objects + "\n");
	}
///////////////////

	//////////////////////// OBJECTS //////////////////////////////////
	if (pos2Objects != 0) {
	richTextBox1->AppendText("POSOBJ = " + pos2Objects + "\n"); // pos2Objects = objects quantity passed
#if 1;								//Turn this ON
infile.seekg (pos2Objects, infile.beg);
// Repeat Objects times 
for (int i=0; i<Objects; i++) { //Turn this ON
//for (int i=0; i<1; i++) {
	infile.read((char *)&tmp,sizeof(tmp)); //Read object's type
	objType = tmp;
	richTextBox1->AppendText("objType = " + objType + "\n");
	infile.read((char *)&tmp,sizeof(tmp)); // Skip 2 bytes
	infile.read((char *)&tmp,sizeof(tmp));
// Read obj header.
	infile.read((char *)&tmp,sizeof(tmp));

	headerSize = tmp;

	richTextBox1->AppendText("headerSize = " + headerSize + "\n");
	infile.read((char *)&tmp,sizeof(tmp)); // Read off2name
	off2name = tmp;

//	richTextBox1->AppendText("off2name = " + off2name + "\n");
		//pos=pos+4;
		//pos=pos+headerSize;
		//pos+=1;
		//pos=pos+off2name-1;
		pos=pos+4+off2name;
		//richTextBox1->AppendText("pos = " + pos + "\n");
	infile.seekg (pos, infile.beg); // Skip header to object name
		

// Length to read: headerSize - off2name.
nameLength = headerSize - off2name;
char* name = new char[nameLength];

for(int i=0; i<nameLength; i++) {
	infile.read((char *)&tmp, 1);
	pos += 1;
	name[i] = tmp;
//	if (tmp == 0) break;
	}

String^ strNew = gcnew String(name);
richTextBox1->AppendText("name = " + strNew + "\n");


	infile.read((char *)&bufccbanim, sizeof(bufccbanim));
		pos += 4;
	sizeCCBANIM = Swap4Bytes(bufccbanim);
	richTextBox1->AppendText("sizeCCBANIM = " + sizeCCBANIM + "\n");
//	richTextBox1->AppendText("pos = " + pos + "\n");
	// Read and save CCB or ANIM
//**//	pos = pos + sizeCCBANIM;
//**//	infile.seekg (pos, infile.beg); // Skip

//////////////////////////////////////////////////
#if 1;
	#if 1;
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;
	if (buffer == 0x20424343) {			// CCB
		richTextBox1->AppendText("CCB found!\n"); 
		filecounter++;
		// Generate filename and make a file
		// Save whole CCB there.

		itoa(objType, bmpname, 10);
		System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
		std::string vsSt= "";
		for(int i = 0; i < fname->Length; i++)
		vsSt += (char) fname [i];
		const char * stt = vsSt.c_str();

		strcpy(tmpbmp, "\Textures3DO\\");
		strcat(tmpbmp, stt);

		// Create folder for Object here!
		strcat(tmpbmp, "\\Objects\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
		strcat(tmpbmp, bmpname);
		strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
//		strcat(tmpbmp, bmpname);
			strcat(tmpbmp, "0");// Constant name
#if 0;
		dirname = tmpbmp; 
		check = _mkdir(dirname);

		strcat(tmpbmp, "\\");
		strcat(tmpbmp, bmpname);
		strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
		strcat(tmpbmp, bmpname);
#endif;

		outfile = fopen(tmpbmp, "wb");
		// Save CCB
		fwrite(&buffer, 4, 1, outfile);

		for (int j=0; j<sizeCCBANIM/4-1; j++) {
			infile.read((char *)&buffer,sizeof(buffer));
			pos += 4;
			fwrite(&buffer, 4, 1, outfile);
		}
		fclose(outfile);
//		pos = pos - 4 + sizeCCBANIM;
//		infile.seekg (pos, infile.beg); // Skip

	} else if (buffer == 0x4D494E41) { // ANIM
		richTextBox1->AppendText("ANIM found!\n");
		filecounter++;
		// Read ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animHeadersize = Swap4Bytes(buffer);
		richTextBox1->AppendText("animHeadersize = " + animChunk[0].animHeadersize + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].version = Swap4Bytes(buffer);
//		richTextBox1->AppendText("version = " + animChunk[0].version + "\n");
		
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animType = Swap4Bytes(buffer);
			if (animChunk[0].animType==0) {
//				richTextBox1->AppendText("ANIM_MULTI_CCB\n");
			} else if (animChunk[0].animType==1) {
//				richTextBox1->AppendText("ANIM_SINGLE_CCB\n");
			}

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numFrames = Swap4Bytes(buffer);
		richTextBox1->AppendText("numFrames = " + animChunk[0].numFrames + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].frameRate = Swap4Bytes(buffer);
//		richTextBox1->AppendText("frameRate = " + animChunk[0].frameRate + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].startFrame = Swap4Bytes(buffer);
//		richTextBox1->AppendText("startFrame = " + animChunk[0].startFrame + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numLoops = Swap4Bytes(buffer);
//		richTextBox1->AppendText("numLoops = " + animChunk[0].numLoops + "\n");

		// Skip the rest of the ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 16;
//		richTextBox1->AppendText("pos after ANIM header = " + pos + "\n");
			// Read CCB and all PDAT frames based on CCB header.
			// Save all frames to named folder. If the name is blank, name folder as ANIM type(?)

			// Read and save to buffer/structure CCB header here!
				infile.read((char *)&buffer, sizeof(buffer));
				pos += 4;
//			richTextBox1->AppendText("CCB = " + buffer + "\n"); // For debug

			// Create ANIM folder and create animChunk[0].numFrames files in it.
			// Generate folder's name
			System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
//		fname = fname->Replace(L' ', L'_');
			std::string vsSt= "";
			for(int i = 0; i < fname->Length; i++)
			vsSt += (char) fname [i];
			const char * stt = vsSt.c_str();
			//richTextBox1->AppendText("fname->Length = " + fname->Length + "\n");
			strcpy(tmpbmp, "\Textures3DO\\");
			strcat(tmpbmp, stt);
//			strcat(tmpbmp, "\\");

			itoa(objType, bmpname, 10);
			// Create folder for Object here!
		strcat(tmpbmp, "\\Objects\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
		strcat(tmpbmp, bmpname);
		strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
//		strcat(tmpbmp, bmpname);
#if 0;
			dirname = tmpbmp; 
//			check = _mkdir(dirname);

				strcat(tmpbmp, "\\");
				strcat(tmpbmp, bmpname);
				strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
#endif;
// Read and store CCB header for future use.
				//**//**//
	unsigned int pdatsize, sizebeforeCCB, count = 0;
	do {
		infile.read((char *)&buffer, sizeof(buffer));
		count++;
	} while (buffer!=0x54414450);

	sizebeforeCCB = count;
	int *header = new int[sizebeforeCCB];
					//**//**//
	infile.seekg (pos, infile.beg);
	header[0] = 0x20424343;
		for (int d=1; d<sizebeforeCCB; d++) {
			infile.read((char *)&buffer, sizeof(buffer));
			pos += 4;
			header[d] = buffer;
		}
#if 0;
	int ccbheader[43];	
			ccbheader[0] = 0x20424343;
				for (int d=1; d<43; d++) {
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						ccbheader[d] = buffer;
					} 
#endif;

			for (int i=0; i<animChunk[0].numFrames; i++) { // TURN THIS ON!!!
//			for (int i=0; i<1; i++) {
				char a[40];
				// Generate unique name based on frame N.
				sprintf(frameN, "%d", i);
///				itoa(i, animfiles, 10);
///				strcat(tmpbmp, frameN);
					for (int f=0; f<40; f++){
//						if (tmpbmp[f] != ' ') {
						a[f] = tmpbmp[f];
//							} else break;
						}
//				a = tmpbmp;
//				strcat(a, "_");
				strcat(a, frameN);

///				outfile = fopen(tmpbmp, "wb");
				outfile = fopen(a, "wb");

						//Write CCB header
					for (int d=0; d<sizebeforeCCB; d++) {
						fwrite(&header[d], 4, 1, outfile);
						} 
#if 0;
					for (int d=0; d<43; d++) {
						fwrite(&ccbheader[d], 4, 1, outfile);
						} 
#endif;					
				// Save PDAT 
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						pdatsize = Swap4Bytes(buffer);
//					richTextBox1->AppendText("pdatsize = " + pdatsize + "\n");

					for (int f=0; f<(pdatsize/4-2); f++) {
						infile.read((char *)&buffer, sizeof(buffer));
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						}

				fclose(outfile);
					for (int f=0; f<40; f++){ // Blank array
						a[f] = 0;
						}
				}


	#endif;
	} else {
		richTextBox1->AppendText("NO CCB or ANIM found\n");
		break;
		}

delete[]name;
counter--;
notset = false;
// Blank all char arrays
	for (int i=0; i< sizeof(tmpbmp); i++) {
				tmpbmp[i] = 0;
				bmpname[i] = 0;
				dir[i] = 0;
				filename[i] = 0;
				animfiles[i] = 0;
			}
#endif;
//////////////////////////////////////////////////
	}
#endif;
}
infile.close();


// Open DK Data (1,2,3 based on comboBox1) and extract all other objects textures.
FILE *datafile;
char datapath1[200], number[1], datapath2[200], datafolder[200], datapath3[200], datapath31[200];
unsigned int buf, filesize;
unsigned char buf1;


String ^ dataFilePath = openFileDialog2->FileName;
std::string dataFilePathStd = msclr::interop::marshal_as<std::string>(dataFilePath);

// Find substring data2 in dataFilePathStd string.
size_t positiondata = dataFilePathStd.find("data2");

//if (pos != std::string::npos) {
//       std::cout << "Found at pos = " << positiondata << "\n";
//}
//    else {
//        std::cout << "Not found\n";
//	}

unsigned int index, position = 0;
index = positiondata + 6;

//std::string dataFilePathStd1 = dataFilePathStd;
dataFilePathStd.resize (dataFilePathStd.size() - (dataFilePathStd.size()-index));

//String ^ dataFilePathCut;

strcpy(datapath1, "DK Data");
strcpy(datapath3, "DK_Data");
itoa(comboBox1->SelectedIndex+1, number, 10);
strcat(datapath1, number);
strcat(datapath3, number);
//strcat(datapath1, "\\");

for (int i=0; i< sizeof(datapath1); i++) {
	datafolder[i] = datapath1[i];
	}

for (int i=0; i< sizeof(datapath2); i++) {
	datapath2[i] = 0;
	}

for (int i=0; i< sizeof(datapath3); i++) {
//	datapath3[i] = 0;
	}

// Copying the contents of the string to char array
//strcpy(datapath3, "DK_Data");
//strcat(datapath3, datapath1);

strcpy(datapath2, dataFilePathStd.c_str());	
strcat(datapath2, datapath1);

strcpy(datapath31, dataFilePathStd.c_str());	
strcat(datapath31, datapath3);
/////////////////////////
			System::String^ fname1 = System::IO::Path::GetFileName(openFileDialog2->FileName);
		fname1 = fname1->Replace(L' ', L'_');
			std::string vsSt1= "";
			for(int i = 0; i < fname1->Length; i++)
			vsSt1 += (char) fname1[i];
			const char * stt1 = vsSt1.c_str();
			//richTextBox1->AppendText("fname->Length = " + fname->Length + "\n");
			strcpy(tmpbmp, "\Textures3DO\\");
			strcat(tmpbmp, stt1);
			strcat(tmpbmp, "\\");

			strcat(tmpbmp, datafolder);
			// Create DK Data 1 or 2 or 3 folder here!
//			check = _mkdir(tmpbmp);
//////////////////////////////
//eof()
datafile = fopen(datapath2, "rb");
fseek(datafile, 0, SEEK_END);
filesize = ftell(datafile);
fseek(datafile, 0, SEEK_SET);

// Seek and extract objects textures
for (int i=0; i<53; i++){
	fread(&buf, 4, 1, datafile);
	buf = Swap4Bytes(buf);
	position += 4;
	}

richTextBox4->Clear();
//richTextBox4->AppendText("buf = " + buf + "\n"); // For debug
position += buf;
fseek(datafile, position, SEEK_SET);
//richTextBox4->AppendText("position = " + position + "\n"); // For debug

for (int i=0; i<7; i++) {
	fread(&buf, 4, 1, datafile);
	buf = Swap4Bytes(buf);
	position += 4;
	position += buf;
	fseek(datafile, position, SEEK_SET);
//	richTextBox4->AppendText("position for blocks = " + position + "\n"); // For debug
	}

fread(&buf, 4, 1, datafile); // Skip unknown.
	position += 4;
do {
	fread(&buf, 4, 1, datafile); // Read ID
		position += 4;
	buf = Swap4Bytes(buf);
	if (buf > 0xFF) {
		// It's objects section
//		richTextBox4->AppendText("Object's buf = " + buf + "\n"); // For debug
		position -= 4;
		fseek(datafile, position, SEEK_SET); // Step back for objects loop
		// Exit loop
		goto objects;
		}
	fread(&buf, 4, 1, datafile); // Read size
	buf = Swap4Bytes(buf);
		position += 4;
		position += buf;
		fseek(datafile, position, SEEK_SET);
	} while (!feof(datafile));

objects:
//richTextBox4->AppendText("Object's pos = " + position + "\n"); // For debug

// Read and save all objects.
unsigned int startPos = position;
unsigned int howmany, headsize = 0;
// Count how many objects are in this file.
//arrReady:
howmany = 0;
do {
next:
//		dynArray[howmany].pos = position;
	fread(&buf1, 1, 1, datafile); // Read header size
		position ++;
	headsize = buf1;
	fread(&buf1, 1, 1, datafile); // Read referenced type
//		dynArray[howmany].reftype = buf1;
		if (buf1 > 0) { // Object has not texture. So, just step over headsize.
//					richTextBox4->AppendText("Object ref type = " + buf1 + "\n"); // For debug
				fread(&buf1, 1, 1, datafile); // Skip 1 byte
				fread(&buf1, 1, 1, datafile); // Read object type
					richTextBox4->AppendText("Object type without tex = " + buf1 + "\n"); // For debug
//						dynArray[howmany].type = buf1;
				position += 3;
				howmany++;
				position += headsize; // Size to step over
				fseek(datafile, position, SEEK_SET);
				if (position == filesize) break;
				goto next;
			}
	fread(&buf1, 1, 1, datafile); // Skip 1 byte
	fread(&buf1, 1, 1, datafile); // Read object type
			richTextBox4->AppendText("Object type = " + buf1 + "\n"); // For debug
//			dynArray[howmany].type = buf1;
		position += 3;
		position += headsize; // Size to step over
	fseek(datafile, position, SEEK_SET);
	// Read object size
	fread(&buf, 4, 1, datafile);
		position += 4;
	buf = Swap4Bytes(buf);
		position += buf; // Object's size to step over
	fseek(datafile, position, SEEK_SET);
		howmany++;

	} while (position<filesize);
//	} while (!feof(datafile));
richTextBox4->AppendText("howmany objects in DK Data file? " + howmany + "\n"); // For debug


fseek(datafile, startPos, SEEK_SET); // Set to the objects start.
// Create dynamic array for all.
DKDataObj *dynArray = new DKDataObj[howmany];
//richTextBox4->AppendText("howmany objects " + howmany + "\n"); // For debug
position = startPos;
// Fill struct with object type, pos, textureN.
// Blank dynArray.

for (int i=0; i< sizeof(dynArray); i++) {
	dynArray[i].pos = 0;
	dynArray[i].type = 0;
	dynArray[i].reftype = 0;
	dynArray[i].headsize = 0;
	}


#if 1;
unsigned int count = 0;
do {
next1:
		dynArray[count].pos = position;
	fread(&buf1, 1, 1, datafile); // Read header size
		position ++;
	headsize = buf1;
		dynArray[count].headsize = headsize;
	fread(&buf1, 1, 1, datafile); // Read referenced type
		dynArray[count].reftype = buf1;
		if (buf1 > 0) { // Object has not texture. So, just step over headsize.
					richTextBox4->AppendText("Object ref type = " + buf1 + "\n"); // For debug
				fread(&buf1, 1, 1, datafile); // Skip 1 byte
				fread(&buf1, 1, 1, datafile); // Read object type
					richTextBox4->AppendText("Object type without tex = " + buf1 + "\n"); // For debug
						dynArray[count].type = buf1;
				position += 3;
//				howmany++;
				position += headsize; // Size to step over
				fseek(datafile, position, SEEK_SET);
					count++;
				if (position == filesize) break;
				goto next1;
			}
	fread(&buf1, 1, 1, datafile); // Skip 1 byte
	fread(&buf1, 1, 1, datafile); // Read object type
			richTextBox4->AppendText("Object type = " + buf1 + "\n"); // For debug
			dynArray[count].type = buf1;
		position += 3;
		position += headsize; // Size to step over
	fseek(datafile, position, SEEK_SET);
	// Read object size
	fread(&buf, 4, 1, datafile);
		position += 4;
	buf = Swap4Bytes(buf);
		position += buf; // Object's size to step over
	fseek(datafile, position, SEEK_SET);
//		howmany++;
	count++;
//richTextBox2->AppendText("Object " + count + "\n"); // For debug
//richTextBox2->AppendText("Object type = " + dynArray[count].type + "\n"); // For debug
//richTextBox2->AppendText("Object reftype = " + dynArray[count].reftype + "\n"); // For debug
//richTextBox2->AppendText("Object pos = " + dynArray[count].pos + "\n"); // For debug
//richTextBox2->AppendText("Object headsize = " + dynArray[count].headsize + "\n\n"); // For debug
	} while (position<filesize);

fclose(datafile);

// Extract all ANIMs and CCBs from file.
int size = 0;

for (int i=0; i<howmany; i++) {

richTextBox2->AppendText("Object " + i + "\n"); // For debug
richTextBox2->AppendText("Object type = " + dynArray[i].type + "\n"); // For debug
richTextBox2->AppendText("Object reftype = " + dynArray[i].reftype + "\n"); // For debug
richTextBox2->AppendText("Object pos = " + dynArray[i].pos + "\n"); // For debug
richTextBox2->AppendText("Object headsize = " + dynArray[i].headsize + "\n\n"); // For debug

#if 1;
	if (dynArray[i].reftype != 0) {
		// If referenced type !=0, use pos from referenced object, type from current object.
			// Seek referenced object pos.
			
			for (int j=0; j<howmany; j++) {
//				unsigned char k = dynArray[i].reftype;
				if (dynArray[j].type == dynArray[i].reftype) {
					// Referenced object found!
					dynArray[i].pos = dynArray[j].pos; // Take pos from here
//					ExtractCCBorANIMonly(dynArray[i].pos, dynArray[i].type, tmpbmp, datapath2);
					break;
//					richTextBox3->AppendText("Object type = " + dynArray[i].type + "\n"); // For debug
//					richTextBox3->AppendText("Object reftype = " + dynArray[i].reftype + "\n"); // For debug
					}
				}
			
			ExtractCCBorANIMonly(dynArray[i].pos, dynArray[i].type, tmpbmp, datapath2);

		} else {
			ExtractCCBorANIMonly(dynArray[i].pos, dynArray[i].type, tmpbmp, datapath2);

			// Set to ANIM or beginning +header
//			position += 4;
//			position += dynArray[i].headsize;
//			fseek(datafile, position, SEEK_SET);
//			fread(&buf, 4, 1, datafile);
//			size = Swap4Bytes(buf);
//			fread(&buf, 4, 1, datafile); // ANIM or CCB?
//			position += 4;
//				if (buf == 0x20424343) {
//					//ExtractCCB(dynArray[i].pos, 0, dynArray[i].headsize, size);
//				}
//				if (buf == 0x4D494E41) {
//					// ExtractANIM(dynArray[i].pos, 0, dynArray[i].headsize, size);
//				}
		}
#endif; 	
}

delete[] dynArray;
#endif;
//fclose(datafile);
}



// Extract CCB or ANIM only! (Objects in DK Data files also)
void ExtractCCBorANIMonly(unsigned int pos, unsigned char type, char path[40], char datapath[200]) {
FILE *datafile, *outfile;
char* dirname;
char number[2];
unsigned int filesize, sizeCCBANIM, bufccbanim, headerSize, objType = 0;
char bmpname[40], tmpbmp[40];
int buffer = 0;
unsigned char tmp = 0;
int check;
char frameN[1];

richTextBox3->AppendText("Object type = " + type + "\n"); // For debug
richTextBox3->AppendText("Object pos = " + pos + "\n"); // For debug
datafile = fopen(datapath, "rb");
fseek(datafile, 0, SEEK_END);
filesize = ftell(datafile);
fseek(datafile, pos, SEEK_SET);


	fread(&tmp, 1, 1, datafile); // Read obj header.
		headerSize = tmp;
	fread(&tmp, 1, 1, datafile); // Skip 2 bytes
	fread(&tmp, 1, 1, datafile);
	fread(&tmp, 1, 1, datafile);//Read object's type
		objType = type;
		richTextBox1->AppendText("objType = " + objType + "\n");

//	richTextBox3->AppendText("headerSize = " + headerSize + "\n");
pos = pos + 4 + headerSize;
fseek(datafile, pos, SEEK_SET);

fread(&bufccbanim, 4, 1, datafile);
		pos += 4;

	sizeCCBANIM = Swap4Bytes(bufccbanim);
//	richTextBox3->AppendText("sizeCCBANIM = " + sizeCCBANIM + "\n");
#if 1;
	fread(&buffer, 4, 1, datafile);
	pos += 4;
	if (buffer == 0x20424343) {			// CCB
		richTextBox3->AppendText("CCB found!\n"); 
		// Generate filename and make a file
		// Save whole CCB there.

		itoa(objType, bmpname, 10);
		System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
		fname = fname->Replace(L' ', L'_');
		std::string vsSt= "";
		for(int i = 0; i < fname->Length; i++)
		vsSt += (char) fname [i];
		const char * stt = vsSt.c_str();

		strcpy(tmpbmp, "\Textures3DO\\");
		strcat(tmpbmp, stt);
		_mkdir(tmpbmp);// Create DK Data* folder

		// Create folder for Object here!
		strcat(tmpbmp, "\\Objects\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
		strcat(tmpbmp, bmpname);
		strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
//		strcat(tmpbmp, bmpname);
			strcat(tmpbmp, "0");// Constant name
		outfile = fopen(tmpbmp, "wb");
		// Save CCB
		fwrite(&buffer, 4, 1, outfile);

		for (int j=0; j<sizeCCBANIM/4-1; j++) {
			fread(&buffer, 4, 1, datafile);
			pos += 4;
			fwrite(&buffer, 4, 1, outfile);
		}
		fclose(outfile);
//		pos = pos - 4 + sizeCCBANIM;
//		infile.seekg (pos, infile.beg); // Skip

	} else if (buffer == 0x4D494E41) { // ANIM
		richTextBox3->AppendText("ANIM found!\n");
		// Read ANIM header
			fread(&buffer, 4, 1, datafile);
		pos += 4;
		animChunk[0].animHeadersize = Swap4Bytes(buffer);
//		richTextBox1->AppendText("animHeadersize = " + animChunk[0].animHeadersize + "\n");

			fread(&buffer, 4, 1, datafile);
		pos += 4;
		animChunk[0].version = Swap4Bytes(buffer);
//		richTextBox1->AppendText("version = " + animChunk[0].version + "\n");
		
			fread(&buffer, 4, 1, datafile);
		pos += 4;
		animChunk[0].animType = Swap4Bytes(buffer);
			if (animChunk[0].animType==0) {
//				richTextBox1->AppendText("ANIM_MULTI_CCB\n");
			} else if (animChunk[0].animType==1) {
//				richTextBox1->AppendText("ANIM_SINGLE_CCB\n");
			}

			fread(&buffer, 4, 1, datafile);
		pos += 4;
		animChunk[0].numFrames = Swap4Bytes(buffer);
//		richTextBox1->AppendText("numFrames = " + animChunk[0].numFrames + "\n");

			fread(&buffer, 4, 1, datafile);
		pos += 4;
		animChunk[0].frameRate = Swap4Bytes(buffer);
//		richTextBox1->AppendText("frameRate = " + animChunk[0].frameRate + "\n");

			fread(&buffer, 4, 1, datafile);
		pos += 4;
		animChunk[0].startFrame = Swap4Bytes(buffer);
//		richTextBox1->AppendText("startFrame = " + animChunk[0].startFrame + "\n");

			fread(&buffer, 4, 1, datafile);
		pos += 4;
		animChunk[0].numLoops = Swap4Bytes(buffer);
//		richTextBox1->AppendText("numLoops = " + animChunk[0].numLoops + "\n");

		// Skip the rest of the ANIM header
			fread(&buffer, 4, 1, datafile);
			fread(&buffer, 4, 1, datafile);
			fread(&buffer, 4, 1, datafile);
			fread(&buffer, 4, 1, datafile);
		pos += 16;
//		richTextBox1->AppendText("pos after ANIM header = " + pos + "\n");
			// Read CCB and all PDAT frames based on CCB header.
			// Save all frames to named folder.

			// Read and save to buffer/structure CCB header here!
			fread(&buffer, 4, 1, datafile);
				pos += 4;
//			richTextBox1->AppendText("CCB = " + buffer + "\n"); // For debug

			// Create ANIM folder and create animChunk[0].numFrames files in it.
			// Generate folder's name
			System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
		fname = fname->Replace(L' ', L'_');
			std::string vsSt= "";
			for(int i = 0; i < fname->Length; i++)
			vsSt += (char) fname [i];
			const char * stt = vsSt.c_str();
			//richTextBox1->AppendText("fname->Length = " + fname->Length + "\n");
			strcpy(tmpbmp, "\Textures3DO\\");
			strcat(tmpbmp, stt);
//			strcat(tmpbmp, "\\");

			itoa(objType, bmpname, 10);
			// Create folder for Object here!
		strcat(tmpbmp, "\\Objects\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
		strcat(tmpbmp, bmpname);
		strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
//		strcat(tmpbmp, bmpname);
#if 0;
			dirname = tmpbmp; 
//			check = _mkdir(dirname);

				strcat(tmpbmp, "\\");
				strcat(tmpbmp, bmpname);
				strcat(tmpbmp, "\\");
				dirname = tmpbmp; 
				check = _mkdir(dirname);
#endif;
// Read and store CCB header for future use.
				//**//**//
	unsigned int pdatsize, sizebeforeCCB, count = 0;
	do {
			fread(&buffer, 4, 1, datafile);
		count++;
	} while (buffer!=0x54414450);

	sizebeforeCCB = count;
	int *header = new int[sizebeforeCCB];
					//**//**//
fseek(datafile, pos, SEEK_SET);
	header[0] = 0x20424343;
		for (int d=1; d<sizebeforeCCB; d++) {
			fread(&buffer, 4, 1, datafile);
			pos += 4;
			header[d] = buffer;
		}
			for (int i=0; i<animChunk[0].numFrames; i++) { 
				char a[40];
				// Generate unique name based on frame N.
				sprintf(frameN, "%d", i);
///				itoa(i, animfiles, 10);
///				strcat(tmpbmp, frameN);
					for (int f=0; f<40; f++){
//						if (tmpbmp[f] != ' ') {
						a[f] = tmpbmp[f];
//							} else break;
						}
//				a = tmpbmp;
//				strcat(a, "_");
				strcat(a, frameN);

///				outfile = fopen(tmpbmp, "wb");
				outfile = fopen(a, "wb");

						//Write CCB header
					for (int d=0; d<sizebeforeCCB; d++) {
						fwrite(&header[d], 4, 1, outfile);
						} 
				
				// Save PDAT 
					fread(&buffer, 4, 1, datafile);
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
					fread(&buffer, 4, 1, datafile);
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						pdatsize = Swap4Bytes(buffer);
//					richTextBox1->AppendText("pdatsize = " + pdatsize + "\n");

					for (int f=0; f<(pdatsize/4-2); f++) {
						fread(&buffer, 4, 1, datafile);
						pos += 4;
						fwrite(&buffer, 4, 1, outfile);
						}

				fclose(outfile);
					for (int f=0; f<40; f++){ // Blank array
						a[f] = 0;
						}
				}
	} else {
		richTextBox3->AppendText("NO CCB or ANIM found\n");
		}

// Blank all char arrays
	for (int i=0; i< sizeof(tmpbmp); i++) {
				tmpbmp[i] = 0;
				bmpname[i] = 0;
			}
#endif;
fclose(datafile);
timer3->Enabled = 0;
button3->ForeColor = System::Drawing::Color::Green;
}


// Extract textures to cel. Part 1
private: System::Void button3_Click(System::Object^  sender, System::EventArgs^  e) {
int temp;
unsigned char typ, prefix;
int i=0;
char bmpname[40], tmpbmp[40], dir[40], filename[40], animfiles[40];
wchar_t path3[50];
FILE *ccbFile;
FILE* famFile;
ifstream infile;
ifstream outfile;
int buffer;
int filecounter, bytes8=0;
int pos = 0;
unsigned int type, size, nofcels, block3Offset, b5size = 0;
unsigned char tmp;
bool checkonce = true;

richTextBox3->Clear();
richTextBox2->Clear();
richTextBox4->Clear();
richTextBox1->Clear();

		int check; 
		char* dirname = "Textures3DO"; 
		check = _mkdir(dirname);

	openFileDialog2->RestoreDirectory = true;

	      if ( openFileDialog2->ShowDialog() == System::Windows::Forms::DialogResult::OK )
      {

///////////////////////////***********************************************//////////////////////////
#if 1; // Turn on for new file saving logic.
pin_ptr<const wchar_t> convertedValue = PtrToStringChars(openFileDialog2->FileName); 
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
label82->Text = System::IO::Path::GetFileName(openFileDialog2->FileName);

infile.open(path, ios::binary|ios::in);

    infile.seekg (0, infile.end);
   int length = infile.tellg();
    infile.seekg (0, infile.beg);

richTextBox1->Clear();

// NEW LOGIC.
///*//while(infile.read((char *)&buffer,sizeof(buffer)))	{

// Read N of cels to skip to get cube's data.
	infile.read((char *)&buffer,sizeof(buffer));
	pos += 4;
		nofcels = Swap4Bytes(buffer);
///	infile.read((char *)&buffer,sizeof(buffer));// Search type of the first cel
	infile.read((char *)&typ,sizeof(typ));// Search type of the first cel
	infile.read((char *)&typ,sizeof(typ));// Search type of the first cel
	infile.read((char *)&prefix,sizeof(prefix));// Search type of the first cel
	infile.read((char *)&typ,sizeof(typ));// Search type of the first cel
	pos += 4;
///		type = Swap4Bytes(buffer);
	infile.read((char *)&buffer,sizeof(buffer));// Read cel size
	pos += 4;
		size = Swap4Bytes(buffer);

	infile.seekg (pos-8, infile.beg); // Step back for loop start
	pos -= 8;

// Making loop nofcels times.
	for (int i=0; i<nofcels; i++) { // TURN THIS ON!
//	for (int i=0; i<3; i++) {
//		checkonce = true;
///		infile.read((char *)&buffer,sizeof(buffer));// Search type of the cel
		infile.read((char *)&typ,sizeof(typ));// Search type of the first cel
		infile.read((char *)&typ,sizeof(typ));// Search type of the first cel
		infile.read((char *)&prefix,sizeof(prefix));// Search type of the first cel
		infile.read((char *)&typ,sizeof(typ));// Search type of the first cel
			pos += 4;
///		type = Swap4Bytes(buffer);
		infile.read((char *)&buffer,sizeof(buffer));// Read cel size
			pos += 4;
		size = Swap4Bytes(buffer);
		filecounter++;
		/////////////
				if (type>0xFFFF) {
					infile.seekg (pos-8, infile.beg); // Step back 8 bytes.
						pos-=8;
					// Read type and size again
///						infile.read((char *)&buffer,sizeof(buffer));
						infile.read((char *)&typ,sizeof(typ));// Search type of the first cel
						infile.read((char *)&typ,sizeof(typ));// Search type of the first cel
						infile.read((char *)&prefix,sizeof(prefix));// Search type of the first cel
						infile.read((char *)&typ,sizeof(typ));// Search type of the first cel
						pos+=4;
///						type = Swap4Bytes(buffer); 
//							richTextBox1->AppendText("type=" + type.ToString()+"\n");
						infile.read((char *)&buffer,sizeof(buffer));
						size = Swap4Bytes(buffer);
//							richTextBox1->AppendText("size=" + size.ToString()+"\n");
						pos+=4;
						// Skip 4 bytes (for now). FIX OR ADD(?)
//						infile.seekg (pos+4, infile.beg); 
				} 
		/////////////

		// Generate filename for this cel
///		itoa(type, bmpname, 10);
		itoa(typ, bmpname, 10);

		System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
		std::string vsSt= "";
		for(int i = 0; i < fname->Length; i++)
		vsSt += (char) fname [i];
		const char * stt = vsSt.c_str();

		strcpy(tmpbmp, "\Textures3DO\\");
		strcat(tmpbmp, stt);

		// Create folder for textures here!
		dirname = tmpbmp; 
		check = _mkdir(dirname);

//		strcat(tmpbmp, "\\Tex");
		strcat(tmpbmp, "\\");
		strcat(tmpbmp, bmpname);
		ccbFile = fopen(tmpbmp, "wb");
		// Save CCB
///		richTextBox1->AppendText("CCB pos=" + pos.ToString()+"\n"); //Debug
			if (i<nofcels) {
					checkonce = true; // Set to true only if current cel is not last cel
				} 
		for (int j=0; j<size/4; j++) {
			infile.read((char *)&buffer,sizeof(buffer));
			pos += 4;
				if ((buffer != 0x20424343)&&(checkonce)) { // NOT CCB header
///*					richTextBox1->AppendText("buffer=" + buffer.ToString()+"\n");
//						infile.seekg (pos+8, infile.beg);// Step forward for 8 bytes
						infile.read((char *)&buffer,sizeof(buffer));
						infile.read((char *)&buffer,sizeof(buffer));
//						size += 2;
//						bytes8++;
						pos += 8;
//						j += 1;
					}
			fwrite(&buffer, 4, 1, ccbFile);
			checkonce = false;
			}
//		richTextBox1->AppendText("pos=" + pos.ToString()+"\n");
		fclose(ccbFile);
		//checkonce = true;
		}
// Skip all 5 blocks data
						// Skip block 1.
//						pos300 = count + buf2;
//						infile.seekg (count + buf2 + 0x300, infile.beg);
//						count = count + buf2 + 0x300;
					infile.seekg (pos + bytes8*8 + 0x300, infile.beg);
						pos += 0x300; 
//						pos = pos + 0x300 + bytes8*8; 
						// Skip block 2.
						// Read 1 byte (block 2 size)
						infile.read((char *)&tmp,sizeof(tmp));
						pos += tmp;
						richTextBox1->AppendText("b2size = " + tmp + "\n");

						infile.seekg (pos, infile.beg);
						// Reading N of entries of Block 3 (cube's specs itself)
						infile.read((char *)&buffer,sizeof(buffer));
						pos += 4;
						buffer = Swap4Bytes(buffer);
						richTextBox1->AppendText("Block 3 entries = " + buffer + "\n");
						numofEntries = buffer;
						block3Offset = pos;

						// Skip all specs data
						infile.seekg (pos + 16*numofEntries, infile.beg);
						pos = pos + 16*numofEntries;
						richTextBox1->AppendText("Pos after block3 data = " + pos + "\n");

						// Skip entry and exit level data
						pos += 8;

						// Skip 0x6C block size and block 4 itself.
						pos += 0x70;

						// Skip block 5 (teleports and elevators)
						infile.seekg (pos, infile.beg);
						// Read block 5 size
						infile.read((char *)&buffer,sizeof(buffer));
						pos += 4;
						buffer = Swap4Bytes(buffer);
						b5size = buffer;
						richTextBox1->AppendText("Block 5 size = " + buffer + "\n");
						if (buffer == 4) {	// Skip XXX bytes (TEST AND FIX!!!!) if block 5 is null
//							pos += 0x14;
						} else { // Skip all block 5
							pos += buffer;
							}
						richTextBox1->AppendText("Pos after ALL blocks data = " + pos + "\n");
						// Set to the reading start.
						infile.seekg (pos, infile.beg);


// Objects and enemies section. ///////////////////////////////////////////////////////////
						//////////////////////////////////////////////////////////////////
// Save cels and all ANIM frames.
// Read 4 bytes. If == 0, read next 4 bytes.
unsigned int nofObjTypes, objType, headerSize, off2name, nameLength, sizeCCBANIM, tempSeek, tempbuf = 0;
unsigned int pos2AnimBack, pos2AnimObj, pos2AnimEnemies, pos2Objects, bufccbanim, postmp = 0;
//unsigned int bufccbanim, postmp = 0;
unsigned int counter = 40; // 40 is just to starting point. No special matter.
bool notset = true;
unsigned char tmp, tmp1;
buffer==0;
//char name[40];

// Loop while not EOF starts here! 

//**//**//do { // Do this for each group of CCBs or ANIMs

do {
	infile.read((char *)&buffer,sizeof(buffer));
	pos += 4;
	} while (buffer==0);
/// New New logic starts here. ****////////////////////////////*************************//////////
unsigned int AnimBack, AnimEnemies, AnimObj, Objects = 0;
String ^ LevelName;
#if 0;
LevelName = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
    std::string FileNameString = context.marshal_as<std::string>(LevelName);

	if (LevelName == "0") {
		richTextBox1->AppendText("Level " + LevelName + " loaded\n");
		AnimBack = 0;
		AnimEnemies = 0;
		AnimObj = 0;
		Objects = 3;
	}
#endif;
pos2AnimObj = 0; // Just for now...
pos2AnimBack = 0; // Just for now...
pos2AnimEnemies = 0; // Just for now...
// Check if next data is: AnimBack or AnimEnemies or AnimObj or Objects
// Read quantity. If == 1, check if it's AnimBack or AnimEnemies or AnimObj or Objects
	buffer = Swap4Bytes(buffer);
//	richTextBox1->AppendText("Quantity " + buffer + "\n");

beginning:
	if (tempSeek!=0) {
//		richTextBox1->AppendText("pos after tempSeek = " + pos + "\n");
		}

if (buffer == 1) { 
	richTextBox1->AppendText("buffer = " + buffer + " \n");
// Read 1 byte. If !=0, it's Object! So, read only objects loop.
	infile.read((char *)&tmp,sizeof(tmp));
	pos++;
	if (tmp != 0) {	// IT'S OBJECT! Reading objects. Or AnimBack or AnimObj above (tempSeek!=0)
			if (tempSeek!=0) {
			#if 1;// FIX!!!!!!!!!!!!
				richTextBox1->AppendText("That was AnimBack or AnimObj before this!\n");
				pos2AnimBack = tempSeek;
				//pos2AnimObj = tempSeek;
				goto readandsaveAnimBack;
			#endif;
				}
		Objects = buffer; // Objects count.
		pos2Objects = pos-1;
		richTextBox1->AppendText("Object found\n");

		goto readandsaveObjects;
		} else {

// If tmp == 0, read header size. 
			infile.read((char *)&tmp,sizeof(tmp));
			infile.read((char *)&tmp,sizeof(tmp));
			infile.read((char *)&tmp,sizeof(tmp));
			pos += 3;

	/// If >0x30, it's AnimEnemies! So, read AnimEnemies and then AnimObj and Objects loop.
	///	If <0x30, it's possible AnimBack or AnimObj.
		if (tmp>0x30) {  // IT'S ENEMY! Read AnimEnemies and then AnimObj and Objects loop.
						//	Or AnimBack above (tempSeek!=0)
						if (tempSeek!=0) {
							#if 1;
								richTextBox1->AppendText("That was AnimBack before this!\n");
								pos2AnimBack = tempSeek;
								goto readandsaveAnimBack;
							#endif;
							}

				richTextBox1->AppendText("Enemy found\n");
				AnimEnemies = buffer;
				pos2AnimEnemies = pos;

				goto readandsaveAnimEnemies;
				} else { // Check for AnimBack or AnimObj here 
						// Seek differencies between AnimBack and AnimObj here.
							tempSeek = pos; // Return here!
							richTextBox1->AppendText("tempSeek =" + tempSeek + "\n");
							infile.seekg (pos+tmp, infile.beg);
							pos = pos + tmp;
							// Read size ANIM or CCB size.
							infile.read((char *)&tempbuf,sizeof(tempbuf));
							pos += 4;
							tempbuf = Swap4Bytes(tempbuf);
							infile.seekg (pos+tempbuf, infile.beg);// Step over this entry.
							pos = pos + tempbuf;

									do {
									infile.read((char *)&tempbuf,sizeof(tempbuf));
									pos += 4;
									} while (tempbuf==0);

							// Read quantity, read header size. Check if it's quantity or size
//							infile.read((char *)&tempbuf,sizeof(tempbuf));
//							pos += 4;
								tempbuf = Swap4Bytes(tempbuf);
								if (tempbuf>5) { // It's size and definetly ANIMOBJ on tempSeek offset.
									// Because of it's size instead of quantity.
									AnimObj = buffer;
									pos2AnimObj = tempSeek;
									richTextBox1->AppendText("AnimObj found\n");

									goto readandsaveAnimObj;

									} //else {
								// It's quantity 
								if ((tempbuf>1)&&(tempbuf<5)) { // It's next type of entries (Enemies or AnimObj or Objects).
									// Read ahead one more entry. CHECK FOR ENTRY TYPE!!! FIX!!!!
									// Reading header size
									infile.read((char *)&tmp,sizeof(tmp));
										if (tmp!=0) {
											Objects = buffer; // Objects count.
											pos2Objects = tempSeek;
											richTextBox1->AppendText("Object found\n");

											goto readandsaveObjects;
										}
									infile.read((char *)&tmp,sizeof(tmp));
									infile.read((char *)&tmp,sizeof(tmp));
									infile.read((char *)&tmp,sizeof(tmp));
									//infile.read((char *)&tempbuf,sizeof(tempbuf));
									//tempbuf = Swap4Bytes(tempbuf);
									pos += 4;
									//pos += tempbuf;
											if (tmp>0x30) {// IT'S ENEMY! So, previous entry was AnimBack!
												richTextBox1->AppendText("Enemy found. Previous - AnimBack\n");
												AnimBack = buffer; 
												pos2AnimBack = tempSeek;

												goto readandsaveAnimBack;
											} 
										 
									pos += tmp;
									infile.seekg (pos, infile.beg);
									infile.read((char *)&tempbuf,sizeof(tempbuf));// Reading ANIM or CCB size
									pos += 4;
									tempbuf = Swap4Bytes(tempbuf);
									pos += tempbuf; //
									infile.seekg (pos, infile.beg); // Step over ANIM or CCB entry. 
									richTextBox1->AppendText("pos after 2 entries =" + pos + "\n");

									infile.read((char *)&tempbuf,sizeof(tempbuf));// Reading ahead and check if it's size or quantity
									pos += 4;
									tempbuf = Swap4Bytes(tempbuf);
										if (tempbuf>5) { // It's header size and the same type of entry. ANIMOBJ! FIX!!!!
											AnimObj = buffer;
											pos2AnimObj = tempSeek;
											richTextBox1->AppendText("AnimObj found\n");

											goto readandsaveAnimObj;
										}

										if ((tempbuf>1)&&(tempbuf<5)) {// It's quantity for the next type
											buffer = tempbuf;
											goto beginning;
											}

										if (tempbuf==1) { // It's next type of entry. Check it's type
											buffer = tempbuf;
											goto beginning;										
											}
									//buffer = tempbuf;
									//goto beginning;
									}

								if (tempbuf==1) {//It's next type of entries (AnimBack, AnimEnemies, AnimObj or Objects).
									// Read ahead one more entry. CHECK FOR ENTRY TYPE!!! FIX!!!!
									// Reading header size
									infile.read((char *)&tmp,sizeof(tmp));
										if (tmp!=0) {
											Objects = buffer; // Objects count. 
											pos2Objects = tempSeek;
											richTextBox1->AppendText("Object found\n");

											goto readandsaveObjects;
										}
									infile.read((char *)&tmp,sizeof(tmp));
									infile.read((char *)&tmp,sizeof(tmp));
									infile.read((char *)&tmp,sizeof(tmp));
									//infile.read((char *)&tempbuf,sizeof(tempbuf));
									//tempbuf = Swap4Bytes(tempbuf);
										if (tmp>0x30) {// IT'S ENEMY! So, previous entry was AnimBack!
												richTextBox1->AppendText("Enemy found. Previous - AnimBack\n");
												AnimBack = buffer; 
												pos2AnimBack = tempSeek;

												goto readandsaveAnimBack;
											} 
									pos += 4;
									//pos += tempbuf;
									pos += tmp;
									infile.seekg (pos, infile.beg);
									infile.read((char *)&tempbuf,sizeof(tempbuf));// Reading ANIM or CCB size
									pos += 4;
									tempbuf = Swap4Bytes(tempbuf);
									pos += tempbuf; //
									infile.seekg (pos, infile.beg); // Step over ANIM or CCB entry. 
									richTextBox1->AppendText("pos after 2 entries =" + pos + "\n");

									infile.read((char *)&tempbuf,sizeof(tempbuf));// Reading ahead and check if it's size or quantity
									pos += 4;
									tempbuf = Swap4Bytes(tempbuf);
										if (tempbuf>5) { // It's header size and the same type of entry. ANIMOBJ! FIX!!!!
											AnimObj = buffer;
											pos2AnimObj = tempSeek;
											richTextBox1->AppendText("AnimObj found\n");

											goto readandsaveAnimObj;
										}

										if (tempbuf>1) {// It's quantity for the next type
											buffer = tempbuf;
											goto beginning;										
											}

										if (tempbuf==1) { // It's next type of entry. Check it's type
											buffer = tempbuf;
											goto beginning;										
											}


									//buffer = tempbuf;
									//goto beginning;
									}
									// Check if it's an Enemy or AnimObj or an Object.
									// Step forward seeking AnimEnemies (header size > 0x30). 
									// If not found, it's AnimObj. So, read AnimObj and Objects loop.
									// Otherwise it's AnimBack. So, read AnimBack, AnimEnemies, AnimObj and Objects loop.
//									goto exit; 

				}
		}

	}

if ((buffer == 2)||(buffer == 3)) {// If == 2 or 3, check if it's AnimEnemies or AnimObj or Objects
//	richTextBox1->AppendText("buffer = " + buffer + " \n");
	// Read 1 byte. If !=0, it's Object! So, read only objects loop.
	infile.read((char *)&tmp,sizeof(tmp)); 
	pos++;
	if (tmp != 0) {	// IT'S OBJECT! Reading objects.
		if (tempSeek!=0) {
			#if 1;// FIX!
				richTextBox1->AppendText("That was AnimBack or AnimObj before this!\n");
				pos2AnimBack = tempSeek;
				AnimBack = buffer;
				//pos2AnimObj = tempSeek;
				goto readandsaveAnimBack;
			#endif;
				}
		Objects = buffer; // Objects count.
		pos2Objects = pos-1;
		richTextBox1->AppendText("Object found\n");

		goto readandsaveObjects;
	} else {

// If tmp == 0, read header size. 
			infile.read((char *)&tmp,sizeof(tmp));
			infile.read((char *)&tmp,sizeof(tmp));
			infile.read((char *)&tmp,sizeof(tmp));
			pos += 3;

	/// If >0x30, it's AnimEnemies! So, read AnimEnemies and then AnimObj and Objects loop.
	///	If <0x30, it's AnimObj. So, read AnimObj and Objects loop.
		if (tmp>0x30) {  // IT'S ENEMY! Read AnimEnemies and then AnimObj and Objects loop.
				if (tempSeek!=0) {
					#if 1;
						richTextBox1->AppendText("That was AnimBack before this!\n");
						pos2AnimBack = tempSeek;
						AnimBack = buffer;
						goto readandsaveAnimBack;
					#endif;
					}
				richTextBox1->AppendText("Enemy found\n");
				AnimEnemies = buffer;
				pos2AnimEnemies = pos;

				goto readandsaveAnimEnemies;
				} else { // It's AnimObj here. So, read AnimObj and Objects loop.
							if (tempSeek!=0) {
							#if 1;
								richTextBox1->AppendText("That was AnimBack before this!\n");
								pos2AnimBack = tempSeek;
								AnimBack = buffer;
								goto readandsaveAnimBack;
							#endif;
							}
					richTextBox1->AppendText("AnimObj found\n");
					AnimObj = buffer;
					pos2AnimObj = pos; 
						
					goto readandsaveAnimObj;
				}
		}
	}


// If == 4, check if it's AnimObj or Objects
if (buffer == 4) {
//	richTextBox1->AppendText("buffer = " + buffer + " \n");
	// Read 1 byte. If !=0, it's Object! So, read only objects loop.
	infile.read((char *)&tmp,sizeof(tmp));
	pos++;
	if (tmp != 0) {	// IT'S OBJECT! Reading objects.
		if (tempSeek!=0) {
			#if 1;// FIX!
				richTextBox1->AppendText("That was AnimBack or AnimObj before this!\n");
				pos2AnimBack = tempSeek;
				AnimBack = buffer;
				//pos2AnimObj = tempSeek;
				goto readandsaveAnimBack;
			#endif;
				}
		Objects = buffer; // Objects count.
		pos2Objects = pos-1;
		richTextBox1->AppendText("Object found\n");

		goto readandsaveObjects;
		} else {
				if (tempSeek!=0) {
				#if 1;
				richTextBox1->AppendText("That was AnimBack before this!\n");
				pos2AnimBack = tempSeek;
				AnimBack = buffer;
				goto readandsaveAnimBack;
				#endif;
					}
			richTextBox1->AppendText("AnimObj found\n");
			AnimObj = buffer;
			pos2AnimObj = pos-1; 
		// If ==0, it's AnimObj! So read AnimObj and Objects loop.
		goto readandsaveAnimObj;
		}

	}

// AnimBack has no name in short int range, always ==1 quantity for each AnimBack
// AnimEnemies has big header and name.
// AnimObj comes only after AnimEnemies.
// Objects has type !=0.

// 1) Read and save AnimBack
readandsaveAnimBack:
pos -= 4;
pos2AnimEnemies = 0;
pos2AnimObj = 0;
pos2Objects = 0;
AnimEnemies = 0;
AnimObj = 0;
Objects = 0;
goto func;

infile.seekg (pos2AnimBack-4, infile.beg); // Set to beginning.
// Repeat AnimBack times 
for (int i=0; i<AnimBack; i++) {

	}
//pos2AnimEnemies = ;



// 2) Read and save AnimEnemies
readandsaveAnimEnemies:
infile.seekg (pos2AnimEnemies-4, infile.beg);
pos -= 4;
pos2AnimEnemies -= 4;
pos2AnimBack = 0; 
pos2AnimObj = 0;
pos2Objects = 0;
AnimBack = 0;
AnimObj = 0;
Objects = 0;
goto func;

// Repeat AnimEnemies times 
for (int i=0; i<AnimEnemies; i++) {

	}
//pos2AnimObj = ;



// 3) Read and save AnimObj
readandsaveAnimObj:
pos -= 4;
pos2AnimBack = 0; 
pos2AnimEnemies = 0;
pos2Objects = 0;
AnimBack = 0;
AnimEnemies = 0;
Objects = 0;
//pos2AnimObj += 4; 
goto func;

infile.seekg (pos2AnimObj-4, infile.beg);
// Repeat AnimObj times 
for (int i=0; i<AnimObj; i++) {

	}
//pos2Objects = ;



// 4) Read and save Objects
readandsaveObjects:
pos--;
pos2AnimObj = 0;
pos2AnimBack = 0; 
pos2AnimEnemies = 0;
AnimBack = 0;
AnimObj = 0;
AnimEnemies = 0;
goto func;

#if 0;
pos--;
//postmp = pos;
infile.seekg (pos2Objects, infile.beg);
// Repeat Objects times 
//for (int i=0; i<Objects; i++) { //Turn this ON!!!
for (int i=0; i<1; i++) {
	infile.read((char *)&tmp,sizeof(tmp)); //Read object's type
	objType = tmp;
	richTextBox1->AppendText("objType = " + objType + "\n");
	infile.read((char *)&tmp,sizeof(tmp)); // Skip 2 bytes
	infile.read((char *)&tmp,sizeof(tmp));
// Read obj header.
	infile.read((char *)&tmp,sizeof(tmp));

	headerSize = tmp;

	richTextBox1->AppendText("headerSize = " + headerSize + "\n");
	infile.read((char *)&tmp,sizeof(tmp)); // Read off2name
	off2name = tmp;

	richTextBox1->AppendText("off2name = " + off2name + "\n");
		//pos=pos+4;
		//pos=pos+headerSize;
		//pos+=1;
		//pos=pos+off2name-1;
		pos=pos+4+off2name;
		//richTextBox1->AppendText("pos = " + pos + "\n");
	infile.seekg (pos, infile.beg); // Skip header to object name
		

// Length to read: headerSize - off2name.
nameLength = headerSize - off2name;
char* name = new char[nameLength];

for(int i=0; i<nameLength; i++) {
	infile.read((char *)&tmp, 1);
	pos += 1;
	name[i] = tmp;
//	if (tmp == 0) break;
	}

String^ strNew = gcnew String(name);
richTextBox1->AppendText("name = " + strNew + "\n");


	infile.read((char *)&bufccbanim, sizeof(bufccbanim));
		pos += 4;
	sizeCCBANIM = Swap4Bytes(bufccbanim);
	richTextBox1->AppendText("sizeCCBANIM = " + sizeCCBANIM + "\n");
//	richTextBox1->AppendText("pos = " + pos + "\n");
	// Read and save CCB or ANIM
/////////////////************************/////////////////////////************************//////////////////
/////////////////************************/////////////////////////************************//////////////////
#if 0;
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;
	if (buffer == 0x20424343) {			// CCB
		richTextBox1->AppendText("CCB found!\n"); // MAKE!!!!!!!!!!!!!!!!!!!!!!!!!!
		filecounter++;

	} else if (buffer == 0x4D494E41) { // ANIM
		richTextBox1->AppendText("ANIM found!\n");
		filecounter++;
		// Read ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animHeadersize = Swap4Bytes(buffer);
		richTextBox1->AppendText("animHeadersize = " + animChunk[0].animHeadersize + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].version = Swap4Bytes(buffer);
		richTextBox1->AppendText("version = " + animChunk[0].version + "\n");
		
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animType = Swap4Bytes(buffer);
			if (animChunk[0].animType==0) {
				richTextBox1->AppendText("ANIM_MULTI_CCB\n");
			} else if (animChunk[0].animType==1) {
				richTextBox1->AppendText("ANIM_SINGLE_CCB\n");
			}

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numFrames = Swap4Bytes(buffer);
		richTextBox1->AppendText("numFrames = " + animChunk[0].numFrames + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].frameRate = Swap4Bytes(buffer);
		richTextBox1->AppendText("frameRate = " + animChunk[0].frameRate + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].startFrame = Swap4Bytes(buffer);
		richTextBox1->AppendText("startFrame = " + animChunk[0].startFrame + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numLoops = Swap4Bytes(buffer);
		richTextBox1->AppendText("numLoops = " + animChunk[0].numLoops + "\n");

		// Skip the rest of the ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 16;
		richTextBox1->AppendText("pos after ANIM header = " + pos + "\n");
			// Read CCB and all PDAT frames based on CCB header.
			// Save all frames to named folder. If the name is blank, name folder as ANIM type(?)

			// Read and save to buffer/structure CCB header here!///////////// MAKE!!!!!!!!!!!!!!!!!!!!
				infile.read((char *)&buffer, sizeof(buffer));
				pos += 4;
			richTextBox1->AppendText("CCB = " + buffer + "\n"); // For debug

			// Create ANIM folder and create animChunk[0].numFrames files in it.
			// Generate folder's name
//*********************************
#if 1;

		// Blank tmpbmp array.
		for (int i=0; i< sizeof(tmpbmp); i++) {
				tmpbmp[i] = 0;
			}
		
		System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
		std::string vsSt= "";
		for(int i = 0; i < fname->Length; i++)
		vsSt += (char) fname [i];
		const char * stt = vsSt.c_str();

		strcpy(tmpbmp, "\Textures3DO\\");
		strcat(tmpbmp, stt);

		strcat(tmpbmp, "\\");

		if (name[0]!=0) {
			strcat(tmpbmp, name); // Generate name based on object's header OR???? MAKE!!!!!!
		} else {
			itoa(nofcels+1, bmpname, 10); //FIX!!!!!!! USE the line below after making loop j
//			itoa(nofcels+1+j, bmpname, 10);
			strcat(tmpbmp, bmpname);
//			strcat(tmpbmp, "\\");
			}

		String^ strNew2 = gcnew String(tmpbmp);
		richTextBox1->AppendText(strNew2+ "\n"); // For debug
		// Create folder for ANIM textures here!
		dirname = tmpbmp; 
		check = _mkdir(dirname);

		for (int i=0; i<animChunk[0].numFrames; i++) {
			#if 1;/////////// FIX! Too long string in result. 12th level
				itoa(i, animfiles, 10);
				strcat(tmpbmp, "\\");
				strcat(tmpbmp, animfiles);
				String^ strNew3 = gcnew String(tmpbmp);
				richTextBox1->AppendText(strNew3 + "\n"); // For debug
			#endif;
				// Cut string to place all files to 1 folder! // MAKE!!!!!!!!!!!!!!!!!!!!!
//					ccbFile = fopen(tmpbmp, "wb");
//					fclose(ccbFile);
			}

#endif;
///******************************

	} else {
		richTextBox1->AppendText("NO CCB or ANIM found\n");
		}

delete[]name;
counter--;
notset = false;
// Blank all char arrays
	for (int i=0; i< sizeof(tmpbmp); i++) {
				tmpbmp[i] = 0;
				bmpname[i] = 0;
				dir[i] = 0;
				filename[i] = 0;
				animfiles[i] = 0;
			}
#endif;
/////////////////************************/////////////////////////************************//////////////////
/////////////////************************/////////////////////////************************//////////////////

}
#endif;

// pos2AnimBack, pos2AnimObj, pos2AnimEnemies, pos2Objects - Offsets to corrpesponding header sizes.
richTextBox1->AppendText("===============\n");
richTextBox1->AppendText("pos2AnimBack = "+ pos2AnimBack +"\n");
//richTextBox1->AppendText("AnimBack = "+ AnimBack +"\n");
richTextBox1->AppendText("pos2AnimEnemies = "+ pos2AnimEnemies +"\n");
//richTextBox1->AppendText("AnimEnemies = "+ AnimEnemies +"\n");
richTextBox1->AppendText("pos2AnimObj = "+ pos2AnimObj +"\n");
//richTextBox1->AppendText("AnimObj = "+ AnimObj +"\n");
richTextBox1->AppendText("pos2Objects = "+ pos2Objects +"\n");
//richTextBox1->AppendText("Objects = "+ Objects +"\n");


#if 0;///
nofObjTypes = Swap4Bytes(buffer); // Read objects loop nofObjTypes times
if (notset) {
	counter = nofObjTypes;
	}
///for (int j=0; j<nofObjTypes; j++) {
richTextBox1->AppendText("nofObjTypes = " + nofObjTypes + "\n");
// Read obj type.
	infile.read((char *)&tmp, 1);
	pos += 1;
objType = tmp;
richTextBox1->AppendText("objType = " + objType + "\n");

	infile.read((char *)&tmp, 1); // Skip 2 bytes
	infile.read((char *)&tmp, 1); 
	pos += 2;
// Read obj header.
	infile.read((char *)&tmp, 1);
	pos += 1;
headerSize = tmp;
richTextBox1->AppendText("headerSize = " + headerSize + "\n");

	infile.read((char *)&tmp, 1); // Read off2name
	off2name = tmp;
	pos += 1;
richTextBox1->AppendText("off2name = " + off2name + "\n");

infile.seekg (pos+off2name-1, infile.beg); // Skip header to object name
pos = pos+off2name-1;
// Length to read: headerSize - off2name.
nameLength = headerSize - off2name;//////////////////// FIX!!!!!!!! If it's CCB without name or something
char* name = new char[nameLength];

for(int i=0; i<nameLength; i++) {
	infile.read((char *)&tmp, 1);
	pos += 1;
	name[i] = tmp;
//	if (tmp == 0) break;
	}

String^ strNew = gcnew String(name);
richTextBox1->AppendText("name = " + strNew + "\n");

	infile.read((char *)&buffer, sizeof(buffer)); // Read CCB or ANIM size
	pos += 4;
	sizeCCBANIM = Swap4Bytes(buffer);
	richTextBox1->AppendText("sizeCCBANIM = " + sizeCCBANIM + "\n");

	// Seek CCB or ANIM
	infile.read((char *)&buffer, sizeof(buffer));
	pos += 4;
	if (buffer == 0x20424343) {			// CCB
		richTextBox1->AppendText("CCB found!\n"); // MAKE!!!!!!!!!!!!!!!!!!!!!!!!!!
		filecounter++;

	} else if (buffer == 0x4D494E41) { // ANIM
		richTextBox1->AppendText("ANIM found!\n");
		filecounter++;
		// Read ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animHeadersize = Swap4Bytes(buffer);
		richTextBox1->AppendText("animHeadersize = " + animChunk[0].animHeadersize + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].version = Swap4Bytes(buffer);
		richTextBox1->AppendText("version = " + animChunk[0].version + "\n");
		
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].animType = Swap4Bytes(buffer);
			if (animChunk[0].animType==0) {
				richTextBox1->AppendText("ANIM_MULTI_CCB\n");
			} else if (animChunk[0].animType==1) {
				richTextBox1->AppendText("ANIM_SINGLE_CCB\n");
			}

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numFrames = Swap4Bytes(buffer);
		richTextBox1->AppendText("numFrames = " + animChunk[0].numFrames + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].frameRate = Swap4Bytes(buffer);
		richTextBox1->AppendText("frameRate = " + animChunk[0].frameRate + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].startFrame = Swap4Bytes(buffer);
		richTextBox1->AppendText("startFrame = " + animChunk[0].startFrame + "\n");

		infile.read((char *)&buffer, sizeof(buffer));
		pos += 4;
		animChunk[0].numLoops = Swap4Bytes(buffer);
		richTextBox1->AppendText("numLoops = " + animChunk[0].numLoops + "\n");

		// Skip the rest of the ANIM header
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		infile.read((char *)&buffer, sizeof(buffer));
		pos += 16;
		richTextBox1->AppendText("pos after ANIM header = " + pos + "\n");
			// Read CCB and all PDAT frames based on CCB header.
			// Save all frames to named folder. If the name is blank, name folder as ANIM type(?)

			// Read and save to buffer/structure CCB header here!///////////// MAKE!!!!!!!!!!!!!!!!!!!!
				infile.read((char *)&buffer, sizeof(buffer));
				pos += 4;
			richTextBox1->AppendText("CCB = " + buffer + "\n"); // For debug

			// Create ANIM folder and create animChunk[0].numFrames files in it.
			// Generate folder's name
//*********************************
#if 1;

		// Blank tmpbmp array.
		for (int i=0; i< sizeof(tmpbmp); i++) {
				tmpbmp[i] = 0;
			}
		
		System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
		std::string vsSt= "";
		for(int i = 0; i < fname->Length; i++)
		vsSt += (char) fname [i];
		const char * stt = vsSt.c_str();

		strcpy(tmpbmp, "\Textures3DO\\");
		strcat(tmpbmp, stt);

		strcat(tmpbmp, "\\");

		if (name[0]!=0) {
			strcat(tmpbmp, name); // Generate name based on object's header OR???? MAKE!!!!!!
		} else {
			itoa(nofcels+1, bmpname, 10); //FIX!!!!!!! USE the line below after making loop j
//			itoa(nofcels+1+j, bmpname, 10);
			strcat(tmpbmp, bmpname);
//			strcat(tmpbmp, "\\");
			}

		String^ strNew2 = gcnew String(tmpbmp);
		richTextBox1->AppendText(strNew2+ "\n"); // For debug
		// Create folder for ANIM textures here!
		dirname = tmpbmp; 
		check = _mkdir(dirname);

		for (int i=0; i<animChunk[0].numFrames; i++) {
			#if 1;/////////// FIX! Too long string in result. 12th level
				itoa(i, animfiles, 10);
				strcat(tmpbmp, "\\");
				strcat(tmpbmp, animfiles);
				String^ strNew3 = gcnew String(tmpbmp);
				richTextBox1->AppendText(strNew3 + "\n"); // For debug
			#endif;
				// Cut string to place all files to 1 folder! // MAKE!!!!!!!!!!!!!!!!!!!!!
//					ccbFile = fopen(tmpbmp, "wb");
//					fclose(ccbFile);
			}

#endif;
///******************************

	} else {
		richTextBox1->AppendText("NO CCB or ANIM found\n");
		}

delete[]name;
counter--;
notset = false;
// Blank all char arrays
	for (int i=0; i< sizeof(tmpbmp); i++) {
				tmpbmp[i] = 0;
				bmpname[i] = 0;
				dir[i] = 0;
				filename[i] = 0;
				animfiles[i] = 0;
			}
#endif; //// ANIM READER 

//**//**//} while (counter > 0); // End of reading nofObjTypes loop.


// Now reading next object nofObjTypes ....



///*//}
func:
infile.close();
ExtractCCBsANIMs(pos, pos2AnimBack, pos2AnimObj, pos2AnimEnemies, pos2Objects, AnimBack, AnimEnemies, AnimObj, Objects);

#endif;
///////////////////////////***********************************************//////////////////////////

#if 1; // Turn this on for previous save logic. Saving all textures for BuildLogicLines()
//		  label9->Text = openFileDialog2->FileName;

pin_ptr<const wchar_t> convertedValue123 = PtrToStringChars(openFileDialog2->FileName); 
const wchar_t *path123 = convertedValue123;                     // <-- Unnecessary, but to be completely verbose

if ((System::IO::Path::GetFileName(openFileDialog2->FileName) == "DK Data1")||(System::IO::Path::GetFileName(openFileDialog2->FileName) == "DK Data2")||(System::IO::Path::GetFileName(openFileDialog2->FileName) == "DK Data3")) {
//label82->Text = openFileDialog2->FileName;
//String^ fileName = openFileDialog2->FileName;
//String^ result;
//result = Path::GetFileName( fileName );
//label82->Text = std::filesystem::path2("/foo/bar.txt").filename();
label82->Text = System::IO::Path::GetFileName(openFileDialog2->FileName);

infile.open(path, ios::binary|ios::in);


	infile.seekg (0, infile.end);
	int length123 = infile.tellg();
	infile.seekg (0, infile.beg);

richTextBox1->Clear();

while(infile.read((char *)&buffer,sizeof(buffer)))
////////////////////while(infile.read((char *)&buffer,sizeof(buffer)))
//for (int d=0; d<64; d++) 
	{

	infile.read((char *)&buffer,sizeof(buffer));
	pos += 4;
label:
	if (buffer == 0x20424343) {
		filecounter++;
		richTextBox1->AppendText(pos.ToString()+"\n");
		// CCB found, so read all data below while next CCB is reached. Save all data in separate file.
		// Generate filename
		//label80->Text = buffer.ToString(); //For test
		label80->Text = filecounter.ToString(); //For test

		itoa(filecounter, bmpname, 10);
//		strcpy(tmpbmp, "\Textures3DO\\Tex");
//		strcat(dirname, "\Textures3DO");
		strcpy(dir, dirname);
#if 0;
		setlocale(LC_ALL,"RUS");
//		SetConsoleCP(1251);
//		SetConsoleOutputCP(1251);
		System::String^ path3 = openFileDialog2->FileName;
//		std::wstring string vsSt(L "");
		std::string vsSt= "";
		for(int i = 0; i < path3 ->Length; i++)
		vsSt += (char) path3 [i];
		const char * stt = vsSt.c_str();

		strcat(dir, stt);
		strcpy(tmpbmp, dir);
		strcpy(tmpbmp, "\\Tex");
#endif;
#if 1;
System::String^ fname = System::IO::Path::GetFileName(openFileDialog2->FileName);
fname = fname->Replace(L' ', L'_');

		std::string vsSt= "";
		for(int i = 0; i < fname->Length; i++)
		vsSt += (char) fname [i];
		const char * stt = vsSt.c_str();

strcpy(tmpbmp, "\Textures3DO\\");
strcat(tmpbmp, stt);

// Create folder for textures here!
		dirname = tmpbmp; 
		check = _mkdir(dirname);

strcat(tmpbmp, "\\Tex");
#endif;

///*//		strcpy(tmpbmp, "\Textures3DO\\Tex");
//		pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars("\Textures3DO\\Tex"); 
//		const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
		strcat(tmpbmp, bmpname);
			ccbFile = fopen(tmpbmp, "wb");
//				buffer = 0x20424343;
				fwrite(&buffer, 4, 1, ccbFile);
					for (int j=0; j<200000; j++) {
						if (infile.read((char *)&buffer,sizeof(buffer))) {
						pos += 4;
						//fread(&buffer, 4, 1, famFile);
							if (buffer == 0x20424343) {
//								filecounter++;
							fclose(ccbFile); // close separate file
								goto label;
						// Save data
						}
						fwrite(&buffer, 4, 1, ccbFile);
						}
				}
			fclose(ccbFile); // close separate file
			goto label;
		}

	}


#if 0;
famFile = fopen(buffer, "rb");
fseek(famFile, 0, SEEK_SET);


while (!feof(famFile)) {

	fread(&temp, 4, 1, famFile);
label:
		if (temp == 0x20424343) {
			// CCB found, so read all data below while next CCB is reached. Save all data in separate file.
				// Generate filename
				itoa(i, bmpname, 10);
				strcpy(tmpbmp, "\Textures3DO\\Tex");
				strcat(tmpbmp, bmpname);
				// Open file for writing
				ccbFile = fopen(tmpbmp, "wb");
				temp = 0x20424343;
				fwrite(&temp, 4, 1, ccbFile);
					for (int j=0; j<118715; j++) {
						fread(&temp, 4, 1, famFile);
							if (temp == 0x20424343) {
								i++;
							fclose(ccbFile); // close separate file
								goto label;
						// Save data
						}
						fwrite(&temp, 4, 1, ccbFile);
				}
					fclose(ccbFile); // close separate file
					goto label;
		}
}
fclose(famFile);
#endif;
//Extract3DOTextures(path);
//ExtractTest();
infile.close();
}
#endif;
	 }
		 }


// Select Floor# page
private: System::Void tabControl1_SelectedIndexChanged(System::Object^  sender, System::EventArgs^  e) {
dataGridView10->Rows[0]->Cells[0]->Selected = false;
dataGridView10->Rows[0]->Cells[32]->Selected = true;
dataGridView10->Rows[0]->Cells[33]->Selected = true;
dataGridView10->Rows[0]->Cells[34]->Selected = true;
dataGridView10->Rows[0]->Cells[35]->Selected = true;

dataGridView10->Rows[0]->Cells[44]->Selected = true;
dataGridView10->Rows[0]->Cells[45]->Selected = true;
dataGridView10->Rows[0]->Cells[46]->Selected = true;
dataGridView10->Rows[0]->Cells[47]->Selected = true;


dataGridView11->Rows[0]->Cells[0]->Selected = false;
dataGridView11->Rows[0]->Cells[32]->Selected = true;
dataGridView11->Rows[0]->Cells[33]->Selected = true;
dataGridView11->Rows[0]->Cells[34]->Selected = true;
dataGridView11->Rows[0]->Cells[35]->Selected = true;

dataGridView11->Rows[0]->Cells[44]->Selected = true;
dataGridView11->Rows[0]->Cells[45]->Selected = true;
dataGridView11->Rows[0]->Cells[46]->Selected = true;
dataGridView11->Rows[0]->Cells[47]->Selected = true;
checkBox2->Checked = false;
checkBox3->Checked = false;
checkBox4->Checked = false;
checkBox5->Checked = false;
checkBox6->Checked = false;
checkBox7->Checked = false;
checkBox8->Checked = false;
checkBox9->Checked = false;

checkBox10->Checked = false;
checkBox11->Checked = false;
checkBox12->Checked = false;
checkBox13->Checked = false;
checkBox14->Checked = false;
checkBox15->Checked = false;
checkBox16->Checked = false;
checkBox17->Checked = false;
		 }


private: System::Void Form1_FormClosing(System::Object^  sender, System::Windows::Forms::FormClosingEventArgs^  e) {
			delete[] voxelArray;
		 }

// Edit cube's value (HEX) Floor 0
private: System::Void button4_Click(System::Object^  sender, System::EventArgs^  e) {

#if 1;
//if (textBox5->Text == '') 
//{
//	break;
//		 }
timer2->Enabled = 1;
// Pos in file:
int i = int::Parse(textBox5->Text); // string to int

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox2->Text);
std:string str = "0x";

str.append(str2);

String^ MyString = gcnew String(str.c_str());
label139->Text = MyString;

unsigned long long j = stoull(str, 0, 16); // hex string to int
//System::String^ str = i.ToString(); // int to string
//label139->Text = j.ToString();

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView1->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView1->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView1->CurrentCell->RowIndex;
int column = dataGridView1->CurrentCell->ColumnIndex;

		dataGridView1->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }




// NO USE!
private: System::Void button5_Click(System::Object^  sender, System::EventArgs^  e) {

// Save to file.
#if 0;
fstream outfile;
	      if ( saveFileDialog2->ShowDialog() == System::Windows::Forms::DialogResult::OK )
      {

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(saveFileDialog2->FileName); 
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::binary|ios::out);

// save all array data
for (int i=0; i<16384; i++) {
		outfile.write((char *)&voxelArray[i].value1,sizeof(voxelArray[i].value1));
	}
outfile.close();

		  }
#endif;
 }



// Save level to file.
private: System::Void button5_Click_1(System::Object^  sender, System::EventArgs^  e) {

#if 1;
fstream outfile;

	      if ( saveFileDialog2->ShowDialog() == System::Windows::Forms::DialogResult::OK )
      {

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(saveFileDialog2->FileName); 
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::binary|ios::out);

// save all array data
for (int i=0; i<16384; i++) {

		outfile.write((char *)&voxelArray[i].value1,sizeof(voxelArray[i].value1));

	}
outfile.close();
timer2->Enabled = 0;
button5->ForeColor = System::Drawing::Color::Green;
		  }
#endif;
		 }




// Edit cubes value (bits) Floor 0
private: System::Void button6_Click(System::Object^  sender, System::EventArgs^  e) {
#if 1;
timer2->Enabled = 1;
// Pos in file:
int i = int::Parse(textBox5->Text); // string to int

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox1->Text);
//std:string str = "0x";
//str.append(str2);
String^ MyString = gcnew String(str2.c_str());
label140->Text = MyString;

unsigned long long j = stoull(str2, 0, 2); // binary string to unsigned long long

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView1->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView1->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView1->CurrentCell->RowIndex;
int column = dataGridView1->CurrentCell->ColumnIndex;

		dataGridView1->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;

		 }


// Save to OBJ
private: System::Void button7_Click(System::Object^  sender, System::EventArgs^  e) {
#if 1;
fstream outfile;
fstream mtlfile;

	      if ( saveFileDialog3->ShowDialog() == System::Windows::Forms::DialogResult::OK )
      {

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(saveFileDialog3->FileName); 
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);


pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog3->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog3->FileName) + ".mtl"); 
const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
mtlfile.open(path1, ios::out);

std::string str;
std::string str2;
std::string str3;
std::string currN;
std::string vertstr;

// save all data
#if 0;
for (unsigned long long i=0; i<16384; i++) {
	
///		outfile.write((char *)&voxelArray[i].value1,sizeof(voxelArray[i].value1));
// write cube data: vertex, polygon, normals
currN = std::to_string( i );
//str = "# cube N" + currN + "\n";
//outfile.write((char *)&str,14);

str = "# cube N";
str3 = "\n";

outfile << str;
outfile << currN;
outfile << str3;

// Write vertex data:
// There are 8 vertexes for one cube

//for (int j=0; j<8; j++) {
unsigned long long floor = 0;
unsigned long long  x = 0;
unsigned long long  y = 0;

unsigned long long ind = (x*32+y)*8+floor;

	vertstr = "v " + std::to_string(ind) + " " + std::to_string(ind) + " "  + std::to_string(ind) + "\n";
		outfile << vertstr;

	//	}
	}
#endif;







//float gap = strtof(textBox42->Text);
//int i = int::Parse(textBox5->Text);
float gap = float::Parse(textBox42->Text);
//float gap = 0.1;
int voxCount = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned long long voxelarr[16384];

// Fill temp array
//	for (int p=0; p<16384; p++) {
//		 voxelarr[p] = 0;
//		}

// Fill temp array
	for (int p=0; p<16384; p++) {
		 voxelarr[p] = voxelArray[p].value1;
		}

#if 0;
int c, count;

// New array size
size_t size = sizeof(voxelarr) / sizeof(voxelarr[0]); 
sort(voxelarr, voxelarr + size);
count = distance(voxelarr, unique(voxelarr, voxelarr + size)); // unique values quantity.

  for (size_t f = 0; f < size; ++f) { // Show sorted list
//   cout << dec << arrObjTex[f] << ' ';
//  }
//cout << endl << "Unique object numbers = " << count << endl;
	std::bitset<64> bs(voxelArray[voxCount].value1);
	std::string stdString = bs.to_string();
	System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
	char buffer2 [20];
	_i64toa (voxelArray[voxCount].value1, buffer2, 16);
	systemString = msclr::interop::marshal_as<System::String^>(buffer2);
	richTextBox2->AppendText(systemString+"\n");
	richTextBox2->AppendText(count.ToString()+"\n");
	  }
#endif;



#if 0;
unsigned long long temp1 = 0;
bool duplicateFound = false;
bool original = false;
int h = 0;



for (h = 0; h < 16384; h++) {

//	if !duplicateFound {
		temp1 = voxelArray[h].value1;

label:
//	original = true;
	voxelarr[h] = temp1;
	richTextBox2->AppendText(voxelarr[h].ToString()+"\n");
//	if (duplicateFound == false) {
//			voxelarr[h] = temp1;
//			richTextBox2->AppendText(voxelarr[h].ToString()+"\n");
//			}	
//duplicateFound = false;
	}
#endif;



////////////////////////
for (int d=0; d<64; d++) 
	{
currRow = d;
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {
		currFloor = s;

_ULonglong temp = voxelArray[voxCount].value1;


#if 0;
	if 	(temp != 0xff00000000000000) {///////////////////// 

std::bitset<64> bs(temp);
std::string stdString = bs.to_string();
System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
//textBox1->Text = systemString;
//richTextBox1->AppendText(systemString+"\n");

/// FOR HEX:
char buffer2 [20];
_i64toa (voxelArray[voxCount].value1, buffer2, 16);
systemString = msclr::interop::marshal_as<System::String^>(buffer2);
richTextBox2->AppendText(systemString+"\n");
		}
#endif;

#if 0;
	// Sort voxelArray data. Unique values only!
	std::bitset<64> bs(temp);
	std::string stdString = bs.to_string();
	System::String^ systemString = msclr::interop::marshal_as<System::String^>(stdString);
	char buffer2 [20];
	_i64toa (voxelArray[voxCount].value1, buffer2, 16);
	systemString = msclr::interop::marshal_as<System::String^>(buffer2);
	if((voxCount==0)||(voxelArray[voxCount].value1>voxelArray[voxCount-1].value1) && (voxCount=(16384-1)||(voxelArray[voxCount].value1)<voxelArray[voxCount+1].value1)) {
		richTextBox2->AppendText(systemString+"\n");
		}
#endif;


if 	((temp == 0xff00000000000000)&& (checkBox1->CheckState == CheckState::Unchecked)) {	/////////////////////That may be not correct. Cube may be inside large hall. FIX!
				goto blankvoxel;
				}

		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
			outfile << vertstr;
		// v1
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
		outfile << vertstr;
		// v2
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
		outfile << vertstr;
		// v3
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
		outfile << vertstr;
		// v4
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
		outfile << vertstr;

		// v5
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
		// v6
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
		// v7
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
		// v8
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;

		// lines
#if 1;
		vertstr = "l " + patch::to_string(countLines+1) + " " + patch::to_string(countLines+2) + " "  + patch::to_string(countLines+3) + " " + patch::to_string(countLines+4) + " " + patch::to_string(countLines+1) + "\n";
		outfile << vertstr;
		vertstr = "l " + patch::to_string(countLines+5) + " " + patch::to_string(countLines+6) + " "  + patch::to_string(countLines+7) + " " + patch::to_string(countLines+8) + " " + patch::to_string(countLines+5) + "\n";
		outfile << vertstr;
		vertstr = "l " + patch::to_string(countLines+1) + " " + patch::to_string(countLines+5) + "\n";
		outfile << vertstr;
		vertstr = "l " + patch::to_string(countLines+2) + " " + patch::to_string(countLines+6) + "\n";
		outfile << vertstr;
		vertstr = "l " + patch::to_string(countLines+3) + " " + patch::to_string(countLines+7) + "\n";
		outfile << vertstr;
		vertstr = "l " + patch::to_string(countLines+4) + " " + patch::to_string(countLines+8) + "\n";
		outfile << vertstr;
#endif;
		// polygons
#if 1;
		vertstr = "vn 0.000 -1.000 -0.000  \n";
		outfile << vertstr;
		vertstr = "vn 0.000 1.000 -0.000  \n";
		outfile << vertstr;
		vertstr = "vn 0.000 0.000 1.000  \n";
		outfile << vertstr;
		vertstr = "vn 1.000 0.000 -0.000  \n";
		outfile << vertstr;
		vertstr = "vn 0.000 0.000 -1.000  \n";
		outfile << vertstr;
		vertstr = "vn -1.000 0.000 -0.000  \n";
		outfile << vertstr;

#if 1; // color
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

//float a = (voxelArray[voxCount].value1 >> 60);
//float b = (voxelArray[voxCount].value1 >> 63);
//float c = (voxelArray[voxCount].value1 << 32);
unsigned short int buff[3];

buff[0] = (voxelArray[voxCount].value1 >> 56) & 0xFF;
buff[1] = (voxelArray[voxCount].value1 >> 24) & 0xFF;
buff[2] = (voxelArray[voxCount].value1 >> 16) & 0xFF;
//buff[2] = (voxelArray[voxCount].value1 & 0xFFFF);

float colorRed = (float)buff[0]/2000;
float colorGreen = (float)buff[1]/1000;
float colorBlue = (float)buff[2]/10;

richTextBox2->AppendText("CubeN =" +voxCount.ToString()+"\n");
richTextBox2->AppendText("red =" +buff[0].ToString()+"\n");
richTextBox2->AppendText("green =" +buff[1].ToString()+"\n");
richTextBox2->AppendText("blue =" +buff[2].ToString()+"\n\n");


	if (temp == 0xff00000000000000)	{
		vertstr = "usemtl blankvoxel\n";
		outfile << vertstr;
		} else
	{
		vertstr = "usemtl " + patch::to_string(temp) + "\n";
		outfile << vertstr;
	}
#endif;

		vertstr = "f " + patch::to_string(countLines+1) + "//1 " + patch::to_string(countLines+2) + "//1 "  + patch::to_string(countLines+3) + "//1 " + patch::to_string(countLines+4) + "//1\n";
		outfile << vertstr;
		vertstr = "f " + patch::to_string(countLines+1) + "//2 " + patch::to_string(countLines+2) + "//2 "  + patch::to_string(countLines+6) + "//2 " + patch::to_string(countLines+5) + "//2\n";
		outfile << vertstr;
		vertstr = "f " + patch::to_string(countLines+2) + "//3 " + patch::to_string(countLines+3) + "//3 "  + patch::to_string(countLines+7) + "//3 " + patch::to_string(countLines+6) + "//3\n";
		outfile << vertstr;
		vertstr = "f " + patch::to_string(countLines+1) + "//4 " + patch::to_string(countLines+5) + "//4 "  + patch::to_string(countLines+8) + "//4 " + patch::to_string(countLines+4) + "//4\n";
		outfile << vertstr;
		vertstr = "f " + patch::to_string(countLines+3) + "//5 " + patch::to_string(countLines+4) + "//5 "  + patch::to_string(countLines+8) + "//5 " + patch::to_string(countLines+7) + "//5\n";
		outfile << vertstr;
		vertstr = "f " + patch::to_string(countLines+5) + "//6 " + patch::to_string(countLines+6) + "//6 "  + patch::to_string(countLines+7) + "//6 " + patch::to_string(countLines+8) + "//6\n";
		outfile << vertstr;
#endif;

		vertstr = "newmtl " + patch::to_string(voxelArray[voxCount].value1) + "\n";
			mtlfile << vertstr;
		vertstr = "Kd " + patch::to_string(colorRed) + " " + patch::to_string(colorGreen) + " " + patch::to_string(colorBlue) + "\n";
			mtlfile << vertstr;


			countLines += 8;
			blankvoxel:
			voxCount++;
		}
}
}


// Write materials to mtlfile
// for each unique material:
		vertstr = "newmtl blankvoxel\n"; // always present
			mtlfile << vertstr;
		vertstr = "Kd 0.1 0.1 0.1\n"; //Diffuse
			mtlfile << vertstr;
		vertstr = "d 0.001\n"; // Transparency
			mtlfile << vertstr;

//int[] array = { 1, 2, 3, 4, 5, 6, 7, 8, 3, 4, 5, 3 };
//var basilio = voxelArray.GroupBy((x) => x).Where((x) => x.Count() == 1).Select((x) => x.Key);
//           foreach (int s in basilio)
//               Console.WriteLine(s);


//		vertstr = "newmtl " + patch::to_string(voxelArray[123].value1) + "\n";
//			mtlfile << vertstr;
//		vertstr = "Kd " + patch::to_string(voxelArray[123].value1 >> 65) + " " + patch::to_string(voxelArray[123].value1 >> 64) + " " + patch::to_string(voxelArray[123].value1 >> 63) + "\n";
//			mtlfile << vertstr;

outfile.close();
mtlfile.close();
		  }
#endif;

		 }



// Edit cubes value (bits) Floor 1
private: System::Void button8_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
// Pos in file:
int i = int::Parse(textBox10->Text); // string to int (Var)

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox6->Text); // (Binary string)
//std:string str = "0x";
//str.append(str2);
String^ MyString = gcnew String(str2.c_str());
label142->Text = MyString;

unsigned long long j = stoull(str2, 0, 2); // binary string to unsigned long long

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView2->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView2->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView2->CurrentCell->RowIndex;
int column = dataGridView2->CurrentCell->ColumnIndex;

		dataGridView2->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }



// Edit cubes value (bits) Floor 2
private: System::Void button10_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
// Pos in file:
int i = int::Parse(textBox11->Text); // string to int (Var)

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox15->Text); // (Binary string)
//std:string str = "0x";
//str.append(str2);
String^ MyString = gcnew String(str2.c_str());
label144->Text = MyString;

unsigned long long j = stoull(str2, 0, 2); // binary string to unsigned long long

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView3->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView3->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView3->CurrentCell->RowIndex;
int column = dataGridView3->CurrentCell->ColumnIndex;

		dataGridView3->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }



// Edit cubes value (bits) Floor 3
private: System::Void button12_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
// Pos in file:
int i = int::Parse(textBox16->Text); // string to int (Var)

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox20->Text); // (Binary string)
//std:string str = "0x";
//str.append(str2);
String^ MyString = gcnew String(str2.c_str());
label146->Text = MyString;

unsigned long long j = stoull(str2, 0, 2); // binary string to unsigned long long

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView4->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView4->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView4->CurrentCell->RowIndex;
int column = dataGridView4->CurrentCell->ColumnIndex;

		dataGridView4->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;

		 }



// Edit cubes value (bits) Floor 4
private: System::Void button14_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
// Pos in file:
int i = int::Parse(textBox21->Text); // string to int (Var)

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox25->Text); // (Binary string)
//std:string str = "0x";
//str.append(str2);
String^ MyString = gcnew String(str2.c_str());
label148->Text = MyString;

unsigned long long j = stoull(str2, 0, 2); // binary string to unsigned long long

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView5->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView5->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView5->CurrentCell->RowIndex;
int column = dataGridView5->CurrentCell->ColumnIndex;

		dataGridView5->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;			 
		 }



// Edit cubes value (bits) Floor 5
private: System::Void button16_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
// Pos in file:
int i = int::Parse(textBox26->Text); // string to int (Var)

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox30->Text); // (Binary string)
//std:string str = "0x";
//str.append(str2);
String^ MyString = gcnew String(str2.c_str());
label150->Text = MyString;

unsigned long long j = stoull(str2, 0, 2); // binary string to unsigned long long

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView6->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView6->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView6->CurrentCell->RowIndex;
int column = dataGridView6->CurrentCell->ColumnIndex;

		dataGridView6->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }



// Edit cubes value (bits) Floor 6
private: System::Void button18_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
// Pos in file:
int i = int::Parse(textBox31->Text); // string to int (Var)

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox35->Text); // (Binary string)
//std:string str = "0x";
//str.append(str2);
String^ MyString = gcnew String(str2.c_str());
label152->Text = MyString;

unsigned long long j = stoull(str2, 0, 2); // binary string to unsigned long long

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView7->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView7->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView7->CurrentCell->RowIndex;
int column = dataGridView7->CurrentCell->ColumnIndex;

		dataGridView7->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }



// Edit cubes value (bits) Floor 7
private: System::Void button20_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
// Pos in file:
int i = int::Parse(textBox36->Text); // string to int (Var)

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox40->Text); // (Binary string)
//std:string str = "0x";
//str.append(str2);
String^ MyString = gcnew String(str2.c_str());
label154->Text = MyString;

unsigned long long j = stoull(str2, 0, 2); // binary string to unsigned long long

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView8->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView8->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView8->CurrentCell->RowIndex;
int column = dataGridView8->CurrentCell->ColumnIndex;

		dataGridView8->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }




// Edit cube's value (HEX) Floor 1
private: System::Void button9_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
//if (textBox5->Text == '') 
//{
//	break;
//		 }

// Pos in file:
int i = int::Parse(textBox10->Text); // string to int

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox7->Text);
std:string str = "0x";

str.append(str2);

String^ MyString = gcnew String(str.c_str());
label143->Text = MyString;

unsigned long long j = stoull(str, 0, 16); // hex string to int
//System::String^ str = i.ToString(); // int to string
//label139->Text = j.ToString();

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView2->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView2->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView2->CurrentCell->RowIndex;
int column = dataGridView2->CurrentCell->ColumnIndex;

		dataGridView2->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;

		 }



// Edit cube's value (HEX) Floor 2
private: System::Void button11_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
//if (textBox5->Text == '') 
//{
//	break;
//		 }

// Pos in file:
int i = int::Parse(textBox11->Text); // string to int

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox14->Text);
std:string str = "0x";

str.append(str2);

String^ MyString = gcnew String(str.c_str());
label145->Text = MyString;

unsigned long long j = stoull(str, 0, 16); // hex string to int
//System::String^ str = i.ToString(); // int to string
//label139->Text = j.ToString();

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView3->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView3->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView3->CurrentCell->RowIndex;
int column = dataGridView3->CurrentCell->ColumnIndex;

		dataGridView3->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }




// Edit cube's value (HEX) Floor 3
private: System::Void button13_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
//if (textBox5->Text == '') 
//{
//	break;
//		 }

// Pos in file:
int i = int::Parse(textBox16->Text); // string to int

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox19->Text);
std:string str = "0x";

str.append(str2);

String^ MyString = gcnew String(str.c_str());
label147->Text = MyString;

unsigned long long j = stoull(str, 0, 16); // hex string to int
//System::String^ str = i.ToString(); // int to string
//label139->Text = j.ToString();

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView4->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView4->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView4->CurrentCell->RowIndex;
int column = dataGridView4->CurrentCell->ColumnIndex;

		dataGridView4->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }




// Edit cube's value (HEX) Floor 4
private: System::Void button15_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
//if (textBox5->Text == '') 
//{
//	break;
//		 }

// Pos in file:
int i = int::Parse(textBox21->Text); // string to int

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox24->Text);
std:string str = "0x";

str.append(str2);

String^ MyString = gcnew String(str.c_str());
label149->Text = MyString;

unsigned long long j = stoull(str, 0, 16); // hex string to int
//System::String^ str = i.ToString(); // int to string
//label139->Text = j.ToString();

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView5->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView5->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView5->CurrentCell->RowIndex;
int column = dataGridView5->CurrentCell->ColumnIndex;

		dataGridView5->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }





// Edit cube's value (HEX) Floor 5
private: System::Void button17_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
//if (textBox5->Text == '') 
//{
//	break;
//		 }

// Pos in file:
int i = int::Parse(textBox26->Text); // string to int

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox29->Text);
std:string str = "0x";

str.append(str2);

String^ MyString = gcnew String(str.c_str());
label151->Text = MyString;

unsigned long long j = stoull(str, 0, 16); // hex string to int
//System::String^ str = i.ToString(); // int to string
//label139->Text = j.ToString();

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView6->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView6->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView6->CurrentCell->RowIndex;
int column = dataGridView6->CurrentCell->ColumnIndex;

		dataGridView6->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }




// Edit cube's value (HEX) Floor 6
private: System::Void button19_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
//if (textBox5->Text == '') 
//{
//	break;
//		 }

// Pos in file:
int i = int::Parse(textBox31->Text); // string to int

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox34->Text);
std:string str = "0x";

str.append(str2);

String^ MyString = gcnew String(str.c_str());
label153->Text = MyString;

unsigned long long j = stoull(str, 0, 16); // hex string to int
//System::String^ str = i.ToString(); // int to string
//label139->Text = j.ToString();

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView7->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView7->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView7->CurrentCell->RowIndex;
int column = dataGridView7->CurrentCell->ColumnIndex;

		dataGridView7->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }




// Edit cube's value (HEX) Floor 7
private: System::Void button21_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
#if 1;
//if (textBox5->Text == '') 
//{
//	break;
//		 }

// Pos in file:
int i = int::Parse(textBox36->Text); // string to int

std::string str2 = "";
str2 = msclr::interop::marshal_as<std::string>(textBox39->Text);
std:string str = "0x";

str.append(str2);

String^ MyString = gcnew String(str.c_str());
label155->Text = MyString;

unsigned long long j = stoull(str, 0, 16); // hex string to int
//System::String^ str = i.ToString(); // int to string
//label139->Text = j.ToString();

	voxelArray[i].value1 = j;
	voxelArray[i].x = dataGridView8->CurrentCell->ColumnIndex;
	voxelArray[i].y = dataGridView8->CurrentCell->RowIndex;
	voxelArray[i].z = 0;

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView8->CurrentCell->RowIndex;
int column = dataGridView8->CurrentCell->ColumnIndex;

		dataGridView8->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[row]->Cells[column]->Value = voxelArray[i].value1;
#endif;
		 }

//Update ProgressBar1, 2
private: System::Void Form1_Activated(System::Object^  sender, System::EventArgs^  e) {
			 progressBar1->Update();
			 progressBar2->Update();
		 }


		 
// Leaving the cell after editing
private: System::Void dataGridView9_CellEndEdit(System::Object^  sender, System::Windows::Forms::DataGridViewCellEventArgs^  e) {
//test++;
//label158->Text = test.ToString();
//label158->Text = cubeNinDataFile.ToString();
//System::String^ b1 = (System::String^)this->dataGridView9->Rows[7]->Cells[2]->Value;
#if 0;
System::String^ b2 = (System::String^)this->dataGridView9->Rows[8]->Cells[2]->Value;
System::String^ b3 = (System::String^)this->dataGridView9->Rows[9]->Cells[2]->Value;
System::String^ b4 = (System::String^)this->dataGridView9->Rows[10]->Cells[2]->Value;
System::String^ b5 = (System::String^)this->dataGridView9->Rows[11]->Cells[2]->Value;
System::String^ b6 = (System::String^)this->dataGridView9->Rows[12]->Cells[2]->Value;
System::String^ b7 = (System::String^)this->dataGridView9->Rows[13]->Cells[2]->Value;
System::String^ b8 = (System::String^)this->dataGridView9->Rows[14]->Cells[2]->Value;
System::String^ b9 = (System::String^)this->dataGridView9->Rows[15]->Cells[2]->Value;
System::String^ b10 = (System::String^)this->dataGridView9->Rows[16]->Cells[2]->Value;
System::String^ b11 = (System::String^)this->dataGridView9->Rows[17]->Cells[2]->Value;
System::String^ b12 = (System::String^)this->dataGridView9->Rows[18]->Cells[2]->Value;
System::String^ b13 = (System::String^)this->dataGridView9->Rows[19]->Cells[2]->Value;
System::String^ b14 = (System::String^)this->dataGridView9->Rows[20]->Cells[2]->Value;
System::String^ b15 = (System::String^)this->dataGridView9->Rows[21]->Cells[2]->Value;
System::String^ b16 = (System::String^)this->dataGridView9->Rows[22]->Cells[2]->Value;
#endif;

#if 0;
System::String^ bEntry = (System::String^)this->dataGridView9->Rows[23]->Cells[2]->Value;
System::String^ bExit = (System::String^)this->dataGridView9->Rows[24]->Cells[2]->Value;
#endif;

// Collect all data from datagridview9 and edit arrays.


//	specsArray[cubeNinDataFile].textureW = Convert::ToInt16(b1);
//int i = int::Parse(textBox5->Text); // string to int

// TAKING BYTE 1
if (dataGridView9->Rows[7]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[7]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b1 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureW = b1;
	this->dataGridView9->Rows[7]->Cells[2]->Value = specsArray[cubeNinDataFile].textureW.ToString();
	dataGridView9->Rows[7]->Cells[1]->Value = "Byte 1. Texture West.*";
	}

// TAKING BYTE 2
if (dataGridView9->Rows[8]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[8]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b2 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureS = b2;
	this->dataGridView9->Rows[8]->Cells[2]->Value = specsArray[cubeNinDataFile].textureS.ToString();
	dataGridView9->Rows[8]->Cells[1]->Value = "Byte 2. Texture South.*";
	}

// TAKING BYTE 3
if (dataGridView9->Rows[9]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[9]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b3 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureE = b3;
	this->dataGridView9->Rows[9]->Cells[2]->Value = specsArray[cubeNinDataFile].textureE.ToString();
	dataGridView9->Rows[9]->Cells[1]->Value = "Byte 3. Texture East.*";
	}

// TAKING BYTE 4
if (dataGridView9->Rows[10]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[10]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b4 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureN = b4;
	this->dataGridView9->Rows[10]->Cells[2]->Value = specsArray[cubeNinDataFile].textureN.ToString();
	dataGridView9->Rows[10]->Cells[1]->Value = "Byte 4. Texture North.*";
	}

// TAKING BYTE 5
if (dataGridView9->Rows[11]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[11]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b5 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureNWfromN = b5;
	this->dataGridView9->Rows[11]->Cells[2]->Value = specsArray[cubeNinDataFile].textureNWfromN.ToString();
	dataGridView9->Rows[11]->Cells[1]->Value = "Byte 5. Texture NW-SE. Non-transp from N.*";
	}

// TAKING BYTE 6
if (dataGridView9->Rows[12]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[12]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b6 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureNEfromN = b6;
	this->dataGridView9->Rows[12]->Cells[2]->Value = specsArray[cubeNinDataFile].textureNEfromN.ToString();
	dataGridView9->Rows[12]->Cells[1]->Value = "Byte 6. Texture NE-SW. Non-transp from S.*";
	}

// TAKING BYTE 7
if (dataGridView9->Rows[13]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[13]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b7 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureNWfromS = b7;
	this->dataGridView9->Rows[13]->Cells[2]->Value = specsArray[cubeNinDataFile].textureNWfromS.ToString();
	dataGridView9->Rows[13]->Cells[1]->Value = "Byte 7. Texture NW-SE. Non-transp from S.*";
	}

// TAKING BYTE 8
if (dataGridView9->Rows[14]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[14]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b8 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureNEfromS = b8;
	this->dataGridView9->Rows[14]->Cells[2]->Value = specsArray[cubeNinDataFile].textureNEfromS.ToString();
	dataGridView9->Rows[14]->Cells[1]->Value = "Byte 8. Texture NE-SW. Non-transp from N.*";
	}

// TAKING BYTE 9
if (dataGridView9->Rows[15]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[15]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b9 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureFloor = b9;
	this->dataGridView9->Rows[15]->Cells[2]->Value = specsArray[cubeNinDataFile].textureFloor.ToString();
	dataGridView9->Rows[15]->Cells[1]->Value = "Byte 9. Floor.*";
	}

// TAKING BYTE 10
if (dataGridView9->Rows[16]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[16]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b10 = int::Parse(MyString);
	specsArray[cubeNinDataFile].textureCeiling = b10;
	this->dataGridView9->Rows[16]->Cells[2]->Value = specsArray[cubeNinDataFile].textureCeiling.ToString();
	dataGridView9->Rows[16]->Cells[1]->Value = "Byte 10. Ceiling.*";
	}

// TAKING BYTE 11
if (dataGridView9->Rows[17]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[17]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b11 = int::Parse(MyString);
	specsArray[cubeNinDataFile].unknown1 = b11;
//		label158->Text = b11.ToString();
	this->dataGridView9->Rows[17]->Cells[2]->Value = specsArray[cubeNinDataFile].unknown1.ToString();
	dataGridView9->Rows[17]->Cells[1]->Value = "Byte 11. reserved.*";
	}

// TAKING BYTE 12
if (dataGridView9->Rows[18]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[18]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b12 = int::Parse(MyString);
	specsArray[cubeNinDataFile].telep_rest_elev = b12;
	this->dataGridView9->Rows[18]->Cells[2]->Value = specsArray[cubeNinDataFile].telep_rest_elev.ToString();
	dataGridView9->Rows[18]->Cells[1]->Value = "Byte 12. Low Friction, Resting, Damage, Stairs rise texture*";
	}

// TAKING BYTE 13
if (dataGridView9->Rows[19]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[19]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b13 = int::Parse(MyString);
	specsArray[cubeNinDataFile].unknown3 = b13;
	this->dataGridView9->Rows[19]->Cells[2]->Value = specsArray[cubeNinDataFile].unknown3.ToString();
	dataGridView9->Rows[19]->Cells[1]->Value = "Byte 13. reserved.*";
	}

// TAKING BYTE 14
if (dataGridView9->Rows[20]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[20]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b14 = int::Parse(MyString);
	specsArray[cubeNinDataFile].unknown4 = b14;
	this->dataGridView9->Rows[20]->Cells[2]->Value = specsArray[cubeNinDataFile].unknown4.ToString();
	dataGridView9->Rows[20]->Cells[1]->Value = "Byte 14. reserved.*";
	}

// TAKING BYTE 15
if (dataGridView9->Rows[21]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[21]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b15 = int::Parse(MyString);
	specsArray[cubeNinDataFile].unknown5 = b15;
	this->dataGridView9->Rows[21]->Cells[2]->Value = specsArray[cubeNinDataFile].unknown5.ToString();
	dataGridView9->Rows[21]->Cells[1]->Value = "Byte 15. Additional cube's collisions.*";
	}

// TAKING BYTE 16
if (dataGridView9->Rows[22]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[22]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char b16 = int::Parse(MyString);
	specsArray[cubeNinDataFile].unknown6 = b16;
	this->dataGridView9->Rows[22]->Cells[2]->Value = specsArray[cubeNinDataFile].unknown6.ToString();
	dataGridView9->Rows[22]->Cells[1]->Value = "Byte 16. Cube's collisions*";
	}


// Take new level entry and exit
// TAKING level entry X
if (dataGridView9->Rows[23]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[23]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char tmp111 = int::Parse(MyString);
	entryX = tmp111;
	this->dataGridView9->Rows[23]->Cells[2]->Value = entryX.ToString();
	dataGridView9->Rows[23]->Cells[1]->Value = "Level Entry Coordinate X*";
	}

// TAKING level entry Y
if (dataGridView9->Rows[24]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[24]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char tmp111 = int::Parse(MyString);
	entryY = tmp111;
	this->dataGridView9->Rows[24]->Cells[2]->Value = entryY.ToString();
	dataGridView9->Rows[24]->Cells[1]->Value = "Level Entry Coordinate Y*";
	}

// TAKING level entry Z
if (dataGridView9->Rows[25]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[25]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char tmp111 = int::Parse(MyString);
	entryZ = tmp111;
	this->dataGridView9->Rows[25]->Cells[2]->Value = entryZ.ToString();
	dataGridView9->Rows[25]->Cells[1]->Value = "Level Entry Coordinate Z*";
	}

// TAKING level entry Orientation
if (dataGridView9->Rows[26]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[26]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char tmp111 = int::Parse(MyString);
	entryRotation = tmp111;
	this->dataGridView9->Rows[26]->Cells[2]->Value = entryRotation.ToString();
	dataGridView9->Rows[26]->Cells[1]->Value = "Level Entry Orientation*";
	}

// TAKING level exit X
if (dataGridView9->Rows[27]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[27]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char tmp111 = int::Parse(MyString);
	exitX = tmp111;
	this->dataGridView9->Rows[27]->Cells[2]->Value = exitX.ToString();
	dataGridView9->Rows[27]->Cells[1]->Value = "Level Exit Coordinate X*";
	}

// TAKING level exit Y
if (dataGridView9->Rows[28]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[28]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char tmp111 = int::Parse(MyString);
	exitY = tmp111;
	this->dataGridView9->Rows[28]->Cells[2]->Value = exitY.ToString();
	dataGridView9->Rows[28]->Cells[1]->Value = "Level Exit Coordinate Y*";
	}

// TAKING level exit Z
if (dataGridView9->Rows[29]->Cells[2]->Value != "") {
	std::string str = "";
	str = msclr::interop::marshal_as<std::string>(Convert::ToInt16(dataGridView9->Rows[29]->Cells[2]->Value).ToString());
	String^ MyString = gcnew String(str.c_str());
	//label158->Text = MyString;
	unsigned char tmp111 = int::Parse(MyString);
	exitZ = tmp111;
	this->dataGridView9->Rows[29]->Cells[2]->Value = exitZ.ToString();
	dataGridView9->Rows[29]->Cells[1]->Value = "Level Exit Coordinate Z*";
	}

// Make save *data file button enabled.
button22->Enabled = 1;
timer1->Enabled = 1;
}


// Save *data file
private: System::Void button22_Click(System::Object^  sender, System::EventArgs^  e) {
richTextBox4->Clear();

if ( saveFileDialog2->ShowDialog() == System::Windows::Forms::DialogResult::OK )
      {
fstream infile, outfile, tmpfile1, tmpfile2, tmpfile3;

// Open data file and save all data except specsArray to the tmp file.
pin_ptr<const wchar_t> convertedValue = PtrToStringChars(saveFileDialog2->FileName); 
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(saveFileDialog2->FileName + "tmp1"); 
const wchar_t *tmp1path = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
pin_ptr<const wchar_t> convertedValue2 = PtrToStringChars(saveFileDialog2->FileName + "tmp2"); 
const wchar_t *tmp2path = convertedValue2;                     // <-- Unnecessary, but to be completely verbose
pin_ptr<const wchar_t> convertedValue3 = PtrToStringChars(saveFileDialog2->FileName + "_result"); 
const wchar_t *pathtmp = convertedValue3;                     // <-- Unnecessary, but to be completely verbose
pin_ptr<const wchar_t> convertedValue4 = PtrToStringChars(saveFileDialog2->FileName + "_5blocks"); 
const wchar_t *tmp3path = convertedValue4;                     // <-- Unnecessary, but to be completely verbose
//outfile.open(path, ios::binary|ios::out);
/////////////*****************************************//////////////////////////////////
//richTextBox4->AppendText("tmp1Path = " + tmp1path + "\n");

infile.open(path, ios::binary|ios::in);
tmpfile1.open(tmp1path, ios::binary|ios::out);

    infile.seekg (0, infile.end);
    int datalength = infile.tellg();
    infile.seekg (0, infile.beg);
	// Do all stuff here. File opened for reading cube's specs.
int buf, buf2;
unsigned int n=0;
unsigned int pos300, b5size = 0;
unsigned int count = 0;
bool eightbytes = false;
unsigned char b2size, cubespecstemp, entryexit = 0;
unsigned int numofEntries, block3Offset = 0;


	// Reading first 4 bytes. It's a number of CCBs I must skip to read data blocks.
	infile.read((char *)&buf,sizeof(buf));
	buf = Swap4Bytes(buf);
	numofEntries = buf;
	richTextBox4->AppendText("CCBs before CubeDataSpecs = " + buf + "\n");
	buf = Swap4Bytes(buf);
	tmpfile1.write((char *)&buf, sizeof(buf)); // Write first 4 bytes
	count +=4;

for (int i=0; i < datalength; i++)	{
		infile.read((char *)&buf, sizeof(buf));
		tmpfile1.write((char *)&buf, sizeof(buf));
		count +=4;
			if (buf == 0x20424343) {
			n++;
//			richTextBox4->AppendText("n = " + n + "\n");
			if (n == numofEntries) {
			// It's the last CCB before my 5 blocks. Save it and close tmpfile1.
			richTextBox4->AppendText("count = " + count + "\n");

						infile.seekg (count-8, infile.beg);
						count -=8;
						infile.read((char *)&buf2,sizeof(buf2));
						count +=4;
							buf2 = Swap4Bytes(buf2);
			//******************************************************
							// IF size not found (8 bytes before located) Seek size
							if (buf2 > 0xFFFFF) {
								eightbytes = true;
								// Step back for 12 bytes
								infile.seekg (count-12, infile.beg);
								infile.read((char *)&buf2,sizeof(buf2));
								buf2 = Swap4Bytes(buf2);
								count -=8;
								}
						richTextBox4->AppendText("Last CCB position = " + count + "\n");
						richTextBox4->AppendText("Last CCB size = " + buf2 + "\n");
							if (eightbytes) {
//								infile.seekg (count+buf2+8, infile.beg);
								count += 8;
								richTextBox4->AppendText("8 bytes\n");
								} else 
								{
//								infile.seekg (count+buf2, infile.beg);
								count;
								}
			//******************************************************
						richTextBox4->AppendText("buf2 = " + buf2 + "\n");

						// Save last CCB to tmp1 file
//						buf2 = Swap4Bytes(buf2);
						infile.seekg (count+4, infile.beg); // Jump to pos just after CCB label
						for (int j=0; j<(buf2/4)-1; j++) {
//							richTextBox4->AppendText("j = " + j + "\n");
							infile.read((char *)&buf,sizeof(buf));
							tmpfile1.write((char *)&buf, sizeof(buf));
	//						count += 4;
///							infile.read((char *)&buf2,sizeof(buf2));
							}
						goto complete;
				}
			}
//		break;
	}
complete:
tmpfile1.close();
/////////////*****************************************//////////////////////////////////
// Get to the second part after geometry and elevators and animation data and write second
// part to the tmp2 file.
tmpfile2.open(tmp2path, ios::binary|ios::out);
						// Skip block 1.
						pos300 = count + buf2;
						infile.seekg (count + buf2 + 0x300, infile.beg);
						count = count + buf2 + 0x300;

						// Skip block 2.
						// Read 1 byte (block 2 size)
						infile.read((char *)&b2size,sizeof(b2size));
						count += b2size;
						richTextBox4->AppendText("b2size = " + b2size + "\n");

						infile.seekg (count, infile.beg);
						// Reading N of entries of Block 3 (cube's specs itself)
						infile.read((char *)&buf2,sizeof(buf2));
						count += 4;
						buf2 = Swap4Bytes(buf2);
						richTextBox4->AppendText("Block 3 entries = " + buf2 + "\n");
						numofEntries = buf2;
						block3Offset = count;

						// Skip all specs data
						infile.seekg (count + 16*numofEntries, infile.beg);
						count = count + 16*numofEntries;
						richTextBox4->AppendText("Count after block3 data = " + count + "\n");

						// Skip entry and exit level data
						count += 8;

						// Skip 0x6C block size and block 4 itself.
						count += 0x70;

						// Skip block 5 (teleports and elevators)
						infile.seekg (count, infile.beg);
						// Read block 5 size
						infile.read((char *)&buf,sizeof(buf));
						count += 4;
						buf = Swap4Bytes(buf);
						b5size = buf;
						richTextBox4->AppendText("Block 5 size = " + buf + "\n");
						if (buf == 4) {	// Skip XXX bytes (TEST AND FIX!!!!) if block 5 is null
							count += 0x14;
						} else { // Skip all block 5
							count += buf;
							}
						richTextBox4->AppendText("Count after ALL blocks data = " + count + "\n");
						// Set to the reading start.
						infile.seekg (count, infile.beg);


// Read infile and write the rest of the data to tmp2file.
char buf3;
infile.read((char *)&buf3,sizeof(buf3));

while (!infile.eof())  {
tmpfile2.write((char *)&buf3, sizeof(buf3));
infile.read((char *)&buf3,sizeof(buf3)); 
}

tmpfile2.close();
infile.close(); // Close infile for future overwrite.

//***// Read and save 5 blocks to tmp3 file.
infile.open(path, ios::binary|ios::in);
tmpfile3.open(tmp3path, ios::binary|ios::out);

    infile.seekg (0, infile.end);
    int infilelength = infile.tellg();
    infile.seekg (0, infile.beg);

richTextBox4->AppendText("pos300 = " + pos300 + "\n");
infile.seekg (pos300, infile.beg); // Set to block 1 start
for (int f=0; f<0x300/4; f++) {
		infile.read((char *)&buf,sizeof(buf)); 
		tmpfile3.write((char *)&buf,sizeof(buf)); // Save block 1 as is.
		}


// Read and save block 2 (Animation)
infile.read((char *)&b2size,sizeof(char)); 
tmpfile3.write((char *)&b2size,sizeof(char)); // Save block 2 size.

for (int d=0; d<b2size-1; d++) {
	infile.read((char *)&buf,sizeof(char)); 
	tmpfile3.write((char *)&buf,sizeof(char)); // Save block 2 as is.
	}

// Save block 3. (Cube's specs)
buf = numofEntries;
buf = Swap4Bytes(buf);
tmpfile3.write((char *)&buf,sizeof(buf)); // Save number of entries.
char tmp;

for (int s=0; s<numofEntries; s++) {
	tmp = specsArray[s].textureW;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 1.
	tmp = specsArray[s].textureS;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 2.
	tmp = specsArray[s].textureE;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 3.
	tmp = specsArray[s].textureN;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 4.
	tmp = specsArray[s].textureNWfromN;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 5.
	tmp = specsArray[s].textureNEfromN;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 6.
	tmp = specsArray[s].textureNWfromS;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 7.
	tmp = specsArray[s].textureNEfromS;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 8.
	tmp = specsArray[s].textureFloor;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 9.
	tmp = specsArray[s].textureCeiling;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 10.
	tmp = specsArray[s].unknown1;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 11.
	tmp = specsArray[s].telep_rest_elev;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 12.
	tmp = specsArray[s].unknown3;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 13.
	tmp = specsArray[s].unknown4;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 14.
	tmp = specsArray[s].unknown5;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 15.
	tmp = specsArray[s].unknown6;
	tmpfile3.write((char *)&tmp,sizeof(char)); // Save byte 16.
	} 

// Read and save entry, exit and blocks 4-5
tmp = entryX;
tmpfile3.write((char *)&tmp,sizeof(char)); // levelEntryX;
tmp = entryY;
tmpfile3.write((char *)&tmp,sizeof(char)); // levelEntryY;
tmp = entryZ;
tmpfile3.write((char *)&tmp,sizeof(char)); // levelEntryZ;
tmp = entryRotation;
tmpfile3.write((char *)&tmp,sizeof(char)); // levelEntryRotation;

tmp = exitX;
tmpfile3.write((char *)&tmp,sizeof(char)); // levelExitX;
tmp = exitY;
tmpfile3.write((char *)&tmp,sizeof(char)); // levelExitY;
tmp = exitZ;
tmpfile3.write((char *)&tmp,sizeof(char)); // levelExitZ;
tmp = 0;
tmpfile3.write((char *)&tmp,sizeof(char)); // levelExitRotation???;

// Write 0x6C block
infile.seekg (pos300 + 0x300 + b2size + 4 + numofEntries*16 + 8 + 4, infile.beg); // Set to block 1 start
int buff;
buff = 0x6C;
buff = Swap4Bytes(buff);
tmpfile3.write((char *)&buff,sizeof(buff)); // 0x6C block size;

infile.read((char *)&buff,sizeof(buff));
for (int s=0; s<0x6C/4; s++) {					// Write 0x6C block itself
	tmpfile3.write((char *)&buff, sizeof(buff));
	infile.read((char *)&buff, sizeof(buff));
}

// Write block 5
int sizetest;
tmpfile3.write((char *)&buff, sizeof(buff)); // Block 5 size
sizetest = Swap4Bytes(buff);

	if (sizetest == 4) {
		for (int i=0; i<0x14/4; i++) {				/// TEST AND FIX!!!! 0x14!!!
		infile.read((char *)&buff, sizeof(buff));
		tmpfile3.write((char *)&buff, sizeof(buff)); 
		}
	} else {
		for (int i=0; i<b5size/4; i++) {
		infile.read((char *)&buff, sizeof(buff));
		tmpfile3.write((char *)&buff, sizeof(buff)); 
		}
	}


infile.close();
tmpfile3.close();
//***//
///////////*****************//////////////


// Save first part of the data to new file. Input file will be overwriten.
// Open tmp1file and write to new output file.
int buf4;
//outfile.open(pathtmp, ios::binary|ios::out);
outfile.open(path, ios::binary|ios::out);
tmpfile1.open(tmp1path, ios::binary|ios::in);

tmpfile1.read((char *)&buf4,sizeof(buf4)); 
while (!tmpfile1.eof())  {
	outfile.write((char *)&buf4, sizeof(buf4));
	tmpfile1.read((char *)&buf4, sizeof(buf4));
}

// Save specsArray and other blocks to new file from tmpfile3
char buf6;						// BLOCKS 1-5 //
tmpfile3.open(tmp3path, ios::binary|ios::in);
//outfile.write((char *)&buf, sizeof(buf));
tmpfile3.read((char *)&buf6,sizeof(buf6)); 
while (!tmpfile3.eof())  {
//	tmpfile2.read((char *)&buf5, sizeof(buf5));
	outfile.write((char *)&buf6, sizeof(buf6));
	tmpfile3.read((char *)&buf6, sizeof(buf6));
}


// Save the rest of data to new file
char buf5;
tmpfile2.open(tmp2path, ios::binary|ios::in);
tmpfile2.read((char *)&buf5,sizeof(buf5)); 
while (!tmpfile2.eof())  {
//	tmpfile2.read((char *)&buf5, sizeof(buf5));
	outfile.write((char *)&buf5, sizeof(buf5));
	tmpfile2.read((char *)&buf5, sizeof(buf5));
}



outfile.close();
tmpfile1.close();
tmpfile2.close();
tmpfile3.close();
timer1->Enabled = 0;
button22->ForeColor = System::Drawing::Color::Green;

// Delete all tmp files.
_wremove(tmp1path);
_wremove(tmp2path);
_wremove(tmp3path);
//delete[] specsArray;
//delete[] teleportArray;

   }
}




private: System::Void timer1_Tick(System::Object^  sender, System::EventArgs^  e) {
//button22->ForeColor = System::Drawing::Color::Green;
//Sleep(20);
button22->ForeColor = System::Drawing::Color::Red;
//Application->ProcessMessages();
		 }


private: System::Void timer2_Tick(System::Object^  sender, System::EventArgs^  e) {
button5->ForeColor = System::Drawing::Color::Red;
		 }

private: System::Void timer3_Tick(System::Object^  sender, System::EventArgs^  e) {
	button3->ForeColor = System::Drawing::Color::Red;
		 }



// Extended save to *.obj Main geometry
private: System::Void button23_Click(System::Object^  sender, System::EventArgs^  e) {
// USE specsArray[j].* and voxelArray[p].value1;
//unsigned int cubeN = 0;
unsigned int wallsBevels1, wallsBevels2;

float gap = float::Parse(textBox42->Text);
int voxCount = 0;
int skippedVoxels = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned int polyCount = 0;
unsigned int torchesVertexes = 0;
unsigned int currVertex = 0;
unsigned long long voxelarr[16384];
int tempFilename = 0;
string FileNameString222;
//String ^ LevelName2;
unsigned int levelN, lengthName = 0; 
String ^ name = "";
_ULonglong elevatorPath = 0;

//label9->Text = System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName);
//if ((levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName)))) {
//	MessageBox::Show("Please select proper level file.", "Warining. Extraction stop", MessageBoxButtons::OK, MessageBoxIcon::Exclamation);
//	return;
//	}
name = (System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
lengthName = name->Length;

if (lengthName > 2) {

	//levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
} else {
	levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
}

//levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));

//*****************************************/////////////////////////////////////
#if 0;
std::string str4 = "";
str4 = msclr::interop::marshal_as<std::string>(textBox44->Text);

// Measure str length
unsigned int l = str4.length();
unsigned int first, second = 0;

// Take chars from textBox44
if (l==3) {
	// Take 2 chars and then 1 char
	std::string char1and2 = "";
	std::string char3 = "";
	char1and2 = str4.substr(0,2);
	char3 = str4.substr(2,1);

	first = stoul(char1and2, 0, 16); // hex string to int
	second = stoul(char3, 0, 16); // hex string to int

// Combine all ints together.
cubeN = first*16ULL + second;
//label139->Text = cubeN.ToString();// For debug
	}


if (l<3) {
	// Take 1 char and then 1 char
	std::string char1 = "";
	std::string char2 = "";
	char1 = str4.substr(0,1);
	char2 = str4.substr(1,1);

	first = stoul(char1, 0, 16); // hex string to int
	second = stoul(char2, 0, 16); // hex string to int

cubeN = first*16ULL + second;
//label139->Text = cubeN.ToString();// For debug
	}
#endif;
//*****************************************/////////////////////////////////////


#if 1;
fstream outfile, mtlfile, tmpbinfile;

if (saveFileDialog5->ShowDialog() == System::Windows::Forms::DialogResult::OK)
      {
pin_ptr<const wchar_t> convertedValue = PtrToStringChars(saveFileDialog5->FileName); 
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);

pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + ".mtl"); 
const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
mtlfile.open(path1, ios::out);

//pin_ptr<const wchar_t> convertedValue2 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + ".bin"); 
//const wchar_t *path2 = convertedValue2;                     // <-- Unnecessary, but to be completely verbose
//tmpbinfile.open(path2, ios::binary|ios::out);

std::string str;
std::string str2;
std::string str3;
std::string currN;
std::string vertstr;

// Fill temp array
	for (int p=0; p<16384; p++) {
		 voxelarr[p] = voxelArray[p].value1;
		}

#if 1;
// Check if all textures are extracted to cel. (AnimBack, AnimEnemies, AnimObj, Objects)
String ^ path11 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimBack";
std::string stdString = msclr::interop::marshal_as<std::string>(path11); //String^ to std
const char *c = stdString.c_str();

String ^ path111 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimEnemies";
std::string stdString1 = msclr::interop::marshal_as<std::string>(path111); //String^ to std
const char *c1 = stdString1.c_str();

String ^ path1111 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimObj";
std::string stdString2 = msclr::interop::marshal_as<std::string>(path1111); //String^ to std
const char *c2 = stdString2.c_str();

String ^ path11111 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\Objects";
std::string stdString3 = msclr::interop::marshal_as<std::string>(path11111); //String^ to std
const char *c3 = stdString3.c_str();

//if ((access(c, 0) == -1)||(access(c1, 0) == -1)||(access(c2, 0) == -1)||(access(c3, 0) == -1)) {
if (access(c3, 0) == -1) {
	timer3->Enabled = 1;
		// Show Message
	MessageBox::Show("Please extract all textures first! Use 'Extract lvl texstures to *.cel' button and select *data file", "Warining. Extraction stop", MessageBoxButtons::OK, MessageBoxIcon::Exclamation);
//		MessageBox::Show("Please extract all textures first! Use red button.");
		return;
	}
#endif;

progressBar2->Maximum = 49152; // 16384*3 Main geometry, ramps, stairs

for (int d=0; d<64; d++) { // LOOP START
currRow = d;
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {
		currFloor = s;

progressBar2->Increment(1); // Add
progressBar2->Update();
this->Update();

_ULonglong temp = voxelArray[voxCount].value1;
_ULonglong temp123 = 0;
temp123 = ValueSelector(voxelArray[voxCount].value1, 0);

/////////////**************//////////////////////********** 
#if 1;
wallsBevels1 = ValueSelector(voxelArray[voxCount].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[voxCount].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cube's N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
//dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);
//label139->Text = cubeNinDataFile.ToString();// For debug
#endif;
/////////////**************//////////////////////**********
String ^ LevelName3;
LevelName3 = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
FileNameString222 = context.marshal_as<std::string>(LevelName3);



if 	((temp == 0xff00000000000000)&&(checkBox1->CheckState == CheckState::Unchecked)) {
				skippedVoxels++;
				goto blankvoxel;
				}

	vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
	// v1 high
	vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
	outfile << vertstr;
		currVertex++;
	// v2 high
	vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
	outfile << vertstr;
	// v3 high
	vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
	outfile << vertstr;
	// v4 high
	vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
	outfile << vertstr;
	
		// v5 low
	vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
	outfile << vertstr;
		// v6 low
	vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
	outfile << vertstr;
		// v7 low
	vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
	outfile << vertstr;
		// v8 low
	vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
	outfile << vertstr;




// WALLS
#if 1; // ALL POLYGONS
vertstr = "#CubeSpecsN = " + patch::to_string(cubeNinDataFile) + "\n";
outfile << vertstr;
//tmpbinfile.write((char *)&cubeNinDataFile, 1);

#if 1;
vertstr = "# Cube. textureW = " + patch::to_string((int)specsArray[cubeNinDataFile].textureW) + "\n";// Byte 1 
outfile << vertstr;
vertstr = "# Cube. mirroredW = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredW) + "\n";
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureW, sizeof(specsArray[cubeNinDataFile].textureW));
if (specsArray[cubeNinDataFile].textureW !=0) { // Draw WEST wall polygon
int tmpvalue3 = 0;
tmpvalue3 = (specsArray[cubeNinDataFile].textureW & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue3) + "\n";
			outfile << vertstr;
		#endif;

// Draw polygon. Must consider FLIP in vts and different rotaion for doors, anim backgrounds and sides for ramps.
//if backgroundsArray[tmpvalue3] !=0, I need to rotate texture.
if (backgroundsArray[tmpvalue3] !=0) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
	outfile << vertstr;
goto contW;
}

if ((levelN == 9)&&(tmpvalue3 == 37)) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
	outfile << vertstr;
goto contW;
}

if ((levelN == 9)&&(tmpvalue3 == 11)) {// New!
	goto exclusionsW;
//	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
//	outfile << vertstr;
//goto contW;
}

if ((levelN == 12)&&((tmpvalue3 >= 52)&&(tmpvalue3 <= 63)||(tmpvalue3 == 49))) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
	outfile << vertstr;
goto contW;
}

	if (celsArray[tmpvalue3].bytes8 == true) { // If collision found
		if (specsArray[cubeNinDataFile].mirroredW == true) {
				if ((levelN == 12)&&(tmpvalue3 == 14)) goto exclusionsW;
				if ((levelN == 7)&&(tmpvalue3 == 15)) goto exclusionsW;
//				if ((levelN == 9)&&(tmpvalue3 == 37)) goto exclusionsW;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
			outfile << vertstr;
			} else {
				if ((levelN == 12)&&(tmpvalue3 == 14)) goto exclusionsW;
				if ((levelN == 7)&&(tmpvalue3 == 15)) goto exclusionsW;
//				if ((levelN == 9)&&(tmpvalue3 == 37)) goto exclusionsW;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17\n\n";
			outfile << vertstr;
			}
		} else
		{
	exclusionsW:
		if (specsArray[cubeNinDataFile].mirroredW == true) {
			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17\n\n";
				outfile << vertstr;
			} else {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/20\n\n";
			outfile << vertstr;
			}
		}

contW:

		vertstr = "newmtl " + patch::to_string((int)tmpvalue3) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)tmpvalue3)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)tmpvalue3)+"d.png"+"\n";// New transparent texture
//			mtlfile << vertstr;
//		vertstr = "-mm 7 1\n";
//			mtlfile << vertstr;
//		vertstr = "illum 5\n"; // Brightness
//			mtlfile << vertstr;

} else { // Check for elevator path definer
	elevatorPath = ValueSelector(voxelArray[voxCount].value1, 0); //elevator path definer

	if (elevatorPath == 0x10) { // If path definer found, draw polygon
		richTextBox4->AppendText("elevatorPath cube W = " + voxCount + "\n");

			vertstr = "# ElevatorPath W\n";
				outfile << vertstr;

			vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
				outfile << vertstr;
			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17\n\n";
				outfile << vertstr;

			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;
		}
	}

#endif;



#if 1;
vertstr = "# Cube. textureS = " + patch::to_string((int)specsArray[cubeNinDataFile].textureS) + "\n";// Byte 2
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureS, sizeof(specsArray[cubeNinDataFile].textureS));
vertstr = "# Cube. mirroredS = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredS) + "\n";
outfile << vertstr;
if (specsArray[cubeNinDataFile].textureS !=0) { // Draw SOUTH wall polygon
int tmpvalue2 = 0;
tmpvalue2 = (specsArray[cubeNinDataFile].textureS & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue2) + "\n";
			outfile << vertstr;
		#endif;

// Draw polygon. Must consider FLIP in vts and different rotaion for doors, anim backgrounds and sides for ramps.
if (backgroundsArray[tmpvalue2] !=0) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
	outfile << vertstr;
goto contS;
}

if ((levelN == 9)&&(tmpvalue2 == 37)) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
	outfile << vertstr;
goto contS;
}

if ((levelN == 9)&&(tmpvalue2 == 11)) {// New
	goto exclusionsS;
//	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
//	outfile << vertstr;
//goto contS;
}

if ((levelN == 12)&&((tmpvalue2 >= 52)&&(tmpvalue2 <= 63)||(tmpvalue2 == 49))) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
	outfile << vertstr;
goto contS;
}

	if (celsArray[tmpvalue2].bytes8 == true) { // If collision found
		if (specsArray[cubeNinDataFile].mirroredS == true) {
				if ((levelN == 12)&&(tmpvalue2 == 14)) goto exclusionsS;
				if ((levelN == 7)&&(tmpvalue2 == 15)) goto exclusionsS;
//				if ((levelN == 9)&&(tmpvalue2 == 37)) goto exclusionsS;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
			outfile << vertstr;
			} else {
				if ((levelN == 12)&&(tmpvalue2 == 14)) goto exclusionsS;
				if ((levelN == 7)&&(tmpvalue2 == 15)) goto exclusionsS;
//				if ((levelN == 9)&&(tmpvalue2 == 37)) goto exclusionsS;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17\n\n";
			outfile << vertstr;
			}
		} else
		{
	exclusionsS:
		if (specsArray[cubeNinDataFile].mirroredS == true) {
			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17\n\n";
				outfile << vertstr;
			} else {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/20\n\n";
			outfile << vertstr;
			}
		}

contS:
		vertstr = "newmtl " + patch::to_string((int)tmpvalue2) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue2)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue2)+"d.png"+"\n";
//			mtlfile << vertstr;// New transparent texture

	} else { // Check for elevator path definer
	elevatorPath = ValueSelector(voxelArray[voxCount].value1, 0); //elevator path definer

	if (elevatorPath == 0x10) { // If path definer found, draw polygon
		richTextBox4->AppendText("elevatorPath cube S = " + voxCount + "\n");
		
			vertstr = "# ElevatorPath S\n";
				outfile << vertstr;

			vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
				outfile << vertstr;
			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17\n\n";
				outfile << vertstr;

			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;
		}
	}
#endif;



#if 1;
vertstr = "# Cube. textureE = " + patch::to_string((int)specsArray[cubeNinDataFile].textureE) + "\n";// Byte 3
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureE, sizeof(specsArray[cubeNinDataFile].textureE));
vertstr = "# Cube. mirroredE = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredE) + "\n";
outfile << vertstr;
if (specsArray[cubeNinDataFile].textureE !=0) { // Draw EAST wall polygon
int tmpvalue4 = 0;
tmpvalue4 = (specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue4) + "\n";
			outfile << vertstr;
		#endif;

	// Draw polygon. Must consider FLIP in vts and different rotaion for doors, anim backgrounds and sides for ramps.
if (backgroundsArray[tmpvalue4] !=0) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
	outfile << vertstr;
goto contE;
}

if ((levelN == 9)&&(tmpvalue4 == 37)) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
	outfile << vertstr;
goto contE;
}

if ((levelN == 9)&&(tmpvalue4 == 11)) {// New
	goto exclusionsE;
//	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
//	outfile << vertstr;
//goto contE;
}

if ((levelN == 12)&&((tmpvalue4 >= 52)&&(tmpvalue4 <= 63)||(tmpvalue4 == 49))) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
	outfile << vertstr;
goto contE;
}


	if (celsArray[tmpvalue4].bytes8 == true) { // If collision found
		if (specsArray[cubeNinDataFile].mirroredE == true) {
				if ((levelN == 12)&&(tmpvalue4 == 14)) goto exclusionsE;
				if ((levelN == 7)&&(tmpvalue4 == 15)) goto exclusionsE;
//				if ((levelN == 9)&&(tmpvalue4 == 37)) goto exclusionsE;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
			outfile << vertstr;
			} else {
				if ((levelN == 12)&&(tmpvalue4 == 14)) goto exclusionsE;
				if ((levelN == 7)&&(tmpvalue4 == 15)) goto exclusionsE;
//				if ((levelN == 9)&&(tmpvalue4 == 37)) goto exclusionsE;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17\n\n";
			outfile << vertstr;
			}
		} else
		{
	exclusionsE:
		if (specsArray[cubeNinDataFile].mirroredE == true) {
			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17\n\n";
				outfile << vertstr;
			} else {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/20\n\n";
			outfile << vertstr;
			}
		}

contE:
		vertstr = "newmtl " + patch::to_string((int)tmpvalue4) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue4)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue4)+"d.png"+"\n";
//			mtlfile << vertstr;// New transparent texture

	} else { // Check for elevator path definer
	elevatorPath = ValueSelector(voxelArray[voxCount].value1, 0); //elevator path definer

	if (elevatorPath == 0x10) { // If path definer found, draw polygon
		richTextBox4->AppendText("elevatorPath cube E = " + voxCount + "\n");

			vertstr = "# ElevatorPath E\n";
				outfile << vertstr;

			vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
				outfile << vertstr;
			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17\n\n";
				outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
		}
	}
#endif;



#if 1;
vertstr = "# Cube. textureN = " + patch::to_string((int)specsArray[cubeNinDataFile].textureN) + "\n";// Byte 4
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureN, sizeof(specsArray[cubeNinDataFile].textureN));
vertstr = "# Cube. mirroredN = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredN) + "\n";
outfile << vertstr;
if (specsArray[cubeNinDataFile].textureN !=0) { // Draw NORTH wall polygon
int tmpvalue5 = 0;
tmpvalue5 = (specsArray[cubeNinDataFile].textureN & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue5) + "\n";
			outfile << vertstr;
		#endif;

// Draw polygon. Must consider FLIP in vts and different rotaion for doors, anim backgrounds and sides for ramps.
if (backgroundsArray[tmpvalue5] !=0) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
	outfile << vertstr;
goto contN;
}

if ((levelN == 9)&&(tmpvalue5 == 37)) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
	outfile << vertstr;
goto contN;
}

if ((levelN == 9)&&(tmpvalue5 == 11)) {// New
	goto exclusionsN;
//	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
//	outfile << vertstr;
//goto exclusionsN;
}

if ((levelN == 12)&&((tmpvalue5 >= 52)&&(tmpvalue5 <= 63)||(tmpvalue5 == 49))) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
	outfile << vertstr;
goto contN;
}

	if (celsArray[tmpvalue5].bytes8 == true) { // If collision found
		if (specsArray[cubeNinDataFile].mirroredN == true) {
				if ((levelN == 12)&&(tmpvalue5 == 14)) goto exclusionsN;
				if ((levelN == 7)&&(tmpvalue5 == 15)) goto exclusionsN;
//				if ((levelN == 9)&&(tmpvalue5 == 37)) goto exclusionsN;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
			outfile << vertstr;
			} else {
				if ((levelN == 12)&&(tmpvalue5 == 14)) goto exclusionsN;
				if ((levelN == 7)&&(tmpvalue5 == 15)) goto exclusionsN;
//				if ((levelN == 9)&&(tmpvalue5 == 37)) goto exclusionsN;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17\n\n";
			outfile << vertstr;
			}
		} else
		{
	exclusionsN:
		if (specsArray[cubeNinDataFile].mirroredN == true) {
			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17\n\n";
				outfile << vertstr;
			} else {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/20\n\n";
			outfile << vertstr;
			}//
		}

contN:
		vertstr = "newmtl " + patch::to_string((int)tmpvalue5) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue5)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue5)+"d.png"+"\n";
//			mtlfile << vertstr;// New transparent texture

	} else { // Check for elevator path definer
	elevatorPath = ValueSelector(voxelArray[voxCount].value1, 0); //elevator path definer

	if (elevatorPath == 0x10) { // If path definer found, draw polygon
		richTextBox4->AppendText("elevatorPath cube N = " + voxCount + "\n");

			vertstr = "# ElevatorPath N\n";
				outfile << vertstr;

			vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
				outfile << vertstr;
			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17\n\n";
				outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
		}
	}
#endif;



#if 1;
vertstr = "# Cube. textureNWfromN = " + patch::to_string((int)specsArray[cubeNinDataFile].textureNWfromN) + "\n";// Byte 5
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureNWfromN, sizeof(specsArray[cubeNinDataFile].textureNWfromN));
vertstr = "# Cube. mirroredNWfromN = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredNWfromN) + "\n";
outfile << vertstr;
if (specsArray[cubeNinDataFile].textureNWfromN !=0) { // Draw NORTH-WEST non-transp from NORTH wall polygon
int tmpvalue6 = 0;
tmpvalue6 = (specsArray[cubeNinDataFile].textureNWfromN & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue6) + "\n";
			outfile << vertstr;
		#endif;
		// Draw polygon. Must consider FLIP in vts.
///**///**
if (backgroundsArray[tmpvalue6] !=0) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
	outfile << vertstr;
goto contNWfromN;
}

if ((levelN == 9)&&(tmpvalue6 == 37)) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
	outfile << vertstr;
goto contNWfromN;
}

if ((levelN == 9)&&(tmpvalue6 == 11)) {// New
	goto exclusionsNWfromN;
//	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
//	outfile << vertstr;
//goto exclusionsNWfromN;
}

if ((levelN == 12)&&((tmpvalue6 >= 52)&&(tmpvalue6 <= 63)||(tmpvalue6 == 49))) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
	outfile << vertstr;
goto contNWfromN;
}

	if (celsArray[tmpvalue6].bytes8 == true) { // If collision found
		if (specsArray[cubeNinDataFile].mirroredNWfromN == true) {
				if ((levelN == 12)&&(tmpvalue6 == 14)) goto exclusionsNWfromN;
				if ((levelN == 7)&&(tmpvalue6 == 15)) goto exclusionsNWfromN;
//				if ((levelN == 9)&&(tmpvalue6 == 37)) goto exclusionsNWfromN;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18\n\n";
			outfile << vertstr;
			} else {
				if ((levelN == 12)&&(tmpvalue6 == 14)) goto exclusionsNWfromN;
				if ((levelN == 7)&&(tmpvalue6 == 15)) goto exclusionsNWfromN;
//				if ((levelN == 9)&&(tmpvalue6 == 37)) goto exclusionsNWfromN;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17\n\n";
			outfile << vertstr;
			}
		} else
///**///**
	{///**///**
exclusionsNWfromN:///**///**
	if (specsArray[cubeNinDataFile].mirroredNWfromN == false) {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17\n\n";
			outfile << vertstr;	
	} else {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/20\n\n";
			outfile << vertstr;
		}

	}///**///**
contNWfromN:///**///**
		vertstr = "newmtl " + patch::to_string((int)tmpvalue6) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue6)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue6)+"d.png"+"\n";
//			mtlfile << vertstr;// New transparent texture
	}
#endif;



#if 1;
vertstr = "# Cube. textureNEfromS = " + patch::to_string((int)specsArray[cubeNinDataFile].textureNEfromS) + "\n";// Byte 6
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureNEfromS, sizeof(specsArray[cubeNinDataFile].textureNEfromS));
vertstr = "# Cube. mirroredNEfromS = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredNEfromS) + "\n";
outfile << vertstr;

if (specsArray[cubeNinDataFile].textureNEfromS !=0) { // Draw NORTH-EAST non-transp from SOUTH wall polygon
int tmpvalue7 = 0;
tmpvalue7 = (specsArray[cubeNinDataFile].textureNEfromS & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue7) + "\n";
			outfile << vertstr;
		#endif;

		// Draw polygon. Must consider FLIP in vts.
#if 1;
///**///**
if (backgroundsArray[tmpvalue7] !=0) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
	outfile << vertstr;
goto contNEfromS;
}

if ((levelN == 9)&&(tmpvalue7 == 37)) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
	outfile << vertstr;
goto contNEfromS;
}

if ((levelN == 9)&&(tmpvalue7 == 11)) {// New
	goto exclusionsNEfromS;
//	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
//	outfile << vertstr;
//goto contNEfromS;
}

if ((levelN == 12)&&((tmpvalue7 >= 52)&&(tmpvalue7 <= 63)||(tmpvalue7 == 49))) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
	outfile << vertstr;
goto contNEfromS;
}

	if (celsArray[tmpvalue7].bytes8 == true) { // If collision found
		if (specsArray[cubeNinDataFile].mirroredNEfromS == true) {
				if ((levelN == 12)&&(tmpvalue7 == 14)) goto exclusionsNEfromS;
				if ((levelN == 7)&&(tmpvalue7 == 15)) goto exclusionsNEfromS;
//				if ((levelN == 9)&&(tmpvalue7 == 37)) goto exclusionsNEfromS;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18\n\n";
			outfile << vertstr;
			} else {
				if ((levelN == 12)&&(tmpvalue7 == 14)) goto exclusionsNEfromS;
				if ((levelN == 7)&&(tmpvalue7 == 15)) goto exclusionsNEfromS;
//				if ((levelN == 9)&&(tmpvalue7 == 37)) goto exclusionsNEfromS;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17\n\n";
			outfile << vertstr;
			}
		} else
///**///**
#endif;
	{///**///**
exclusionsNEfromS:///**///**

	if (specsArray[cubeNinDataFile].mirroredNEfromS == false) {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17\n\n";
			outfile << vertstr;	
	} else {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/20\n\n";
			outfile << vertstr;
		}
	}///**///**
contNEfromS:///**///**
		vertstr = "newmtl " + patch::to_string((int)tmpvalue7) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue7)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue7)+"d.png"+"\n";
//			mtlfile << vertstr;// New transparent texture
	}
#endif;



#if 1;
vertstr = "# Cube. textureNWfromS = " + patch::to_string((int)specsArray[cubeNinDataFile].textureNWfromS) + "\n";// Byte 7
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureNWfromS, sizeof(specsArray[cubeNinDataFile].textureNWfromS));
vertstr = "# Cube. mirroredNWfromS = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredNWfromS) + "\n";
outfile << vertstr;

if (specsArray[cubeNinDataFile].textureNWfromS !=0) { // Draw NORTH-WEST non-transp from SOUTH wall polygon
int tmpvalue8 = 0;
tmpvalue8 = (specsArray[cubeNinDataFile].textureNWfromS & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue8) + "\n";
			outfile << vertstr;
		#endif;
		// Draw polygon. Must consider FLIP in vts.
#if 1;
///**///**
if (backgroundsArray[tmpvalue8] !=0) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
	outfile << vertstr;
goto contNWfromS;
}

if ((levelN == 9)&&(tmpvalue8 == 37)) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
	outfile << vertstr;
goto contNWfromS;
}

if ((levelN == 9)&&(tmpvalue8 == 11)) {// New
	goto exclusionsNWfromS;
//	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
//	outfile << vertstr;
//goto contNWfromS;
}

if ((levelN == 12)&&((tmpvalue8 >= 52)&&(tmpvalue8 <= 63)||(tmpvalue8 == 49))) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
	outfile << vertstr;
goto contNWfromS;
}


	if (celsArray[tmpvalue8].bytes8 == true) { // If collision found
		if (specsArray[cubeNinDataFile].mirroredNWfromS == true) {
				if ((levelN == 12)&&(tmpvalue8 == 14)) goto exclusionsNWfromS;
				if ((levelN == 7)&&(tmpvalue8 == 15)) goto exclusionsNWfromS;
//				if ((levelN == 9)&&(tmpvalue8 == 37)) goto exclusionsNWfromS;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/18\n\n";
			outfile << vertstr;
			} else {
				if ((levelN == 12)&&(tmpvalue8 == 14)) goto exclusionsNWfromS;
				if ((levelN == 7)&&(tmpvalue8 == 15)) goto exclusionsNWfromS;
//				if ((levelN == 9)&&(tmpvalue8 == 37)) goto exclusionsNWfromS;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17\n\n";
			outfile << vertstr;
			}
		} else
///**///**
#endif;
	{///**///**
exclusionsNWfromS:///**///**

	if (specsArray[cubeNinDataFile].mirroredNWfromS == false) {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/17\n\n";
			outfile << vertstr;	
	} else {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/20\n\n";
			outfile << vertstr;
		}
	}///**///**
contNWfromS:///**///**

		vertstr = "newmtl " + patch::to_string((int)tmpvalue8) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue8)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue8)+"d.png"+"\n";
//			mtlfile << vertstr;// New transparent texture
	}
#endif;



#if 1;
vertstr = "# Cube. textureNEfromN = " + patch::to_string((int)specsArray[cubeNinDataFile].textureNEfromN) + "\n";// Byte 8
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureNEfromN, sizeof(specsArray[cubeNinDataFile].textureNEfromN));
vertstr = "# Cube. mirroredNEfromN = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredNEfromN) + "\n";
outfile << vertstr;

if (specsArray[cubeNinDataFile].textureNEfromN !=0) { // Draw NORTH-EAST non-transp from NORTH wall polygon
int tmpvalue9 = 0;
tmpvalue9 = (specsArray[cubeNinDataFile].textureNEfromN & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue9) + "\n";
			outfile << vertstr;
		#endif;
		// Draw polygon. Must consider FLIP in vts.
#if 1;
///**///**
if (backgroundsArray[tmpvalue9] !=0) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
	outfile << vertstr;
goto contNEfromN;
}

if ((levelN == 9)&&(tmpvalue9 == 37)) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
	outfile << vertstr;
goto contNEfromN;
}

if ((levelN == 9)&&(tmpvalue9 == 11)) {// New
	goto exclusionsNEfromN;
//	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
//	outfile << vertstr;
//goto contNEfromN;
}

if ((levelN == 12)&&((tmpvalue9 >= 52)&&(tmpvalue9 <= 63)||(tmpvalue9 == 49))) {
	vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
	outfile << vertstr;
goto contNEfromN;
}

	if (celsArray[tmpvalue9].bytes8 == true) { // If collision found
		if (specsArray[cubeNinDataFile].mirroredNEfromN == true) {
				if ((levelN == 12)&&(tmpvalue9 == 14)) goto exclusionsNEfromN;
				if ((levelN == 7)&&(tmpvalue9 == 15)) goto exclusionsNEfromN;
//				if ((levelN == 9)&&(tmpvalue9 == 37)) goto exclusionsNEfromN;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/18\n\n";
			outfile << vertstr;
			} else {
				if ((levelN == 12)&&(tmpvalue9 == 14)) goto exclusionsNEfromN;
				if ((levelN == 7)&&(tmpvalue9 == 15)) goto exclusionsNEfromN;
//				if ((levelN == 9)&&(tmpvalue9 == 37)) goto exclusionsNEfromN;

			vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17\n\n";
			outfile << vertstr;
			}
		} else
///**///**
#endif;
	{///**///**
exclusionsNEfromN:///**///**

	if (specsArray[cubeNinDataFile].mirroredNEfromN == false) {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/17\n\n";
			outfile << vertstr;	
	} else {
		vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/20\n\n";
			outfile << vertstr;
		}
	}///**///**
contNEfromN:///**///**

		vertstr = "newmtl " + patch::to_string((int)tmpvalue9) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue9)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue9)+"d.png"+"\n";
//			mtlfile << vertstr;// New transparent texture
	}
#endif;




#if 1;
vertstr = "# Cube. textureFloor = " + patch::to_string((int)specsArray[cubeNinDataFile].textureFloor) + "\n";// Byte 9
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureFloor, sizeof(specsArray[cubeNinDataFile].textureFloor));
vertstr = "# Cube. textureFloorOrient = " + patch::to_string((int)specsArray[cubeNinDataFile].textureFloorOrient) + "\n";
outfile << vertstr;
if (specsArray[cubeNinDataFile].textureFloor !=0) { // Draw FLOOR polygon
	// Check what kind of floor we have: Ramp (high, low, orientation), Stairs (high, low, orientation), Step (height)
//_ULonglong temp123 = 0;
temp123 = ValueSelector(voxelArray[voxCount].value1, 0);


#if 1;
if ((temp123 == 0)||(temp123 >= 0x80)&&((temp123 <= 0x97))) {// ADD more unique values!!!
int tmpvalue = 0;
tmpvalue = (specsArray[cubeNinDataFile].textureFloor & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
			outfile << vertstr;
		#endif;


// Draw polygon
if ((tmpvalue==31)&&(specsArray[cubeNinDataFile].textureFloorOrient == 2)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/5 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/6 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/7 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/8\n\n";
				outfile << vertstr;
				goto cont;
}

if ((tmpvalue==30)&&(specsArray[cubeNinDataFile].textureFloorOrient == 3)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/14 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/15 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/16 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/13\n\n";
				outfile << vertstr;
				goto cont;
}

if ((tmpvalue==30)&&(specsArray[cubeNinDataFile].textureFloorOrient == 1)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20\n\n";
				outfile << vertstr;
				goto cont;
}

if ((tmpvalue==30)&&(specsArray[cubeNinDataFile].textureFloorOrient == 2)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/18\n\n";
				outfile << vertstr;
				goto cont;
}

			if (specsArray[cubeNinDataFile].textureFloorOrient == 0) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/1 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/2 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/3 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/4\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureFloorOrient == 2) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/6 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/7 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/8 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/5\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureFloorOrient == 3) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/9 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/10 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/11 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/12\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureFloorOrient == 1) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/13 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/14 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/15 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/16\n\n";
				outfile << vertstr;
			}

cont:
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+"d.png"+"\n";
//			mtlfile << vertstr;// New transparent texture
		}
#endif;
	}
#endif;



#if 1;
vertstr = "# Cube. textureCeiling = " + patch::to_string((int)specsArray[cubeNinDataFile].textureCeiling) + "\n";// Byte 10
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].textureCeiling, sizeof(specsArray[cubeNinDataFile].textureCeiling));
vertstr = "# Cube. textureCeilingOrient = " + patch::to_string((int)specsArray[cubeNinDataFile].textureCeilingOrient) + "\n";
outfile << vertstr;
if (specsArray[cubeNinDataFile].textureCeiling !=0) { // Draw CEILING polygon
int tmpvalue1 = 0;
tmpvalue1 = (specsArray[cubeNinDataFile].textureCeiling & 0xFFFFFF3F);

	polyCount++;
		#if 1;
			vertstr = "usemtl " + patch::to_string((int)tmpvalue1) + "\n";
			outfile << vertstr;
		#endif;

		// Draw polygon. Must consider ORIENT in vts. CHECK!!!

#if 0;
if ((tmpvalue==31)&&(specsArray[cubeNinDataFile].textureCeilingOrient == 2)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/5 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/6 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/7 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/8\n\n";
				outfile << vertstr;
				goto cont;
}

if ((tmpvalue==30)&&(specsArray[cubeNinDataFile].textureCeilingOrient == 3)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/14 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/15 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/16 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/13\n\n";
				outfile << vertstr;
				goto cont;
}

if ((tmpvalue==30)&&(specsArray[cubeNinDataFile].textureCeilingOrient == 1)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20\n\n";
				outfile << vertstr;
				goto cont;
}

if ((tmpvalue==30)&&(specsArray[cubeNinDataFile].textureCeilingOrient == 2)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/18\n\n";
				outfile << vertstr;
				goto cont;
}
#endif;

			if (specsArray[cubeNinDataFile].textureCeilingOrient == 0) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/1 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/2 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/3 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/4\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureCeilingOrient == 2) {// Add support to 1 45 degrees floor CHECK!!!
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/5 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/6 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/7 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/8\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureCeilingOrient == 3) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/9 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/10 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/11 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/12\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureCeilingOrient == 1) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/13 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/14 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/15 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/16\n\n";
				outfile << vertstr;
			}


		vertstr = "newmtl " + patch::to_string((int)tmpvalue1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue1)+".png"+"\n";
			mtlfile << vertstr;
//		vertstr = "map_d Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue1)+"d.png"+"\n";
//			mtlfile << vertstr;// New transparent texture
	}
#endif;

#if 0;
vertstr = "# Cube. unknown1 = " + patch::to_string((int)specsArray[cubeNinDataFile].unknown1) + "\n";// Byte 11
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].unknown1, sizeof(specsArray[cubeNinDataFile].unknown1));

vertstr = "# Cube. telep_rest_elev = " + patch::to_string((int)specsArray[cubeNinDataFile].telep_rest_elev) + "\n";// Byte 12
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].telep_rest_elev, sizeof(specsArray[cubeNinDataFile].telep_rest_elev));

vertstr = "# Cube. unknown3 = " + patch::to_string((int)specsArray[cubeNinDataFile].unknown3) + "\n";// Byte 13
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].unknown3, sizeof(specsArray[cubeNinDataFile].unknown3));

vertstr = "# Cube. unknown4 = " + patch::to_string((int)specsArray[cubeNinDataFile].unknown4) + "\n";// Byte 14
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].unknown4, sizeof(specsArray[cubeNinDataFile].unknown4));

vertstr = "# Cube. unknown5 = " + patch::to_string((int)specsArray[cubeNinDataFile].unknown5) + "\n";// Byte 15. Additional collisions
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].unknown5, sizeof(specsArray[cubeNinDataFile].unknown5));

vertstr = "# Cube. unknown6 = " + patch::to_string((int)specsArray[cubeNinDataFile].unknown6) + "\n\n";// Byte 16
outfile << vertstr;
//tmpbinfile.write((char *)&specsArray[cubeNinDataFile].unknown6, sizeof(specsArray[cubeNinDataFile].unknown6));
#endif;

#endif; // ALL POLYGONS


#if 0;
	if (temp == 0xff00000000000000)	{
		vertstr = "usemtl blankvoxel\n";
		outfile << vertstr;
		} else
	{
		vertstr = "usemtl " + patch::to_string(temp) + "\n";
		outfile << vertstr;
	}
#endif;

			blankvoxel:
			voxCount++;
		}
}
}// LOOP END

// vt
#if 1;
		vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
		vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
		vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
		vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
		outfile << vertstr;

		vertstr = "vt 1.000 1.000 0.000  \n";// Wall.
		outfile << vertstr;
		vertstr = "vt 0.000 1.000 0.000  \n";// Wall.
		outfile << vertstr;
		vertstr = "vt 0.000 0.000 0.000  \n";// Wall.
		outfile << vertstr;
		vertstr = "vt 1.000 0.000 0.000  \n";// Wall.
		outfile << vertstr;

		vertstr = "vt 1.000 0.000 0.000  \n";// Orient 3.
		outfile << vertstr;
		vertstr = "vt 1.000 1.000 0.000  \n";// Orient 3.
		outfile << vertstr;
		vertstr = "vt 0.000 1.000 0.000  \n";// Orient 3.
		outfile << vertstr;
		vertstr = "vt 0.000 0.000 0.000  \n";// Orient 3.
		outfile << vertstr;

		vertstr = "vt 0.000 0.000 0.000  \n";// Orient 1.
		outfile << vertstr;
		vertstr = "vt 1.000 0.000 0.000  \n";// Orient 1.
		outfile << vertstr;
		vertstr = "vt 1.000 1.000 0.000  \n";// Orient 1.
		outfile << vertstr;
		vertstr = "vt 0.000 1.000 0.000  \n";// Orient 1.
		outfile << vertstr;

		vertstr = "vt 1.000 1.000 0.000  \n";// Wall. FIX!!!
		outfile << vertstr;
		vertstr = "vt 1.000 0.000 0.000  \n";// Wall.
		outfile << vertstr;
		vertstr = "vt 0.000 0.000 0.000  \n";// Wall.
		outfile << vertstr;
		vertstr = "vt 0.000 1.000 0.000  \n";// Wall.
		outfile << vertstr;

#endif;

// Write materials to mtlfile
// for each unique material:
		vertstr = "newmtl blankvoxel\n"; // always present
			mtlfile << vertstr;
		vertstr = "Kd 0.1 0.1 0.1\n"; //Diffuse
			mtlfile << vertstr;
		vertstr = "d 0.001\n"; // Transparency
			mtlfile << vertstr;

outfile.close();
mtlfile.close();
//tmpbinfile.close();
BuildRamps(); // Next ->: Make ramps. Store to individual file
exitnow:
voxCount = voxCount;
		  }
#endif;
	 }




// Build ramps
void BuildRamps(void) {

unsigned int wallsBevels1, wallsBevels2;
float gap = float::Parse(textBox42->Text);
int voxCount = 0;
int skippedVoxels = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned int polyCount1 = 0;
unsigned int currVertex = 0;
unsigned long long voxelarr[16384];
int tempFilename = 0;
string FileNameString222;

fstream outfile, mtlfile, tmpbinfile;

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Ramps.obj");
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);

pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Ramps.mtl"); 
const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
mtlfile.open(path1, ios::out);

std::string str;
std::string str2;
std::string str3;
std::string currN;
std::string vertstr;
// Fill temp array
	for (int p=0; p<16384; p++) {
		 voxelarr[p] = voxelArray[p].value1;
		}


for (int d=0; d<64; d++) { // LOOP START
currRow = d;
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {
		currFloor = s;


progressBar2->Increment(1); // Add
progressBar2->Update();
this->Update();

_ULonglong temp = voxelArray[voxCount].value1;
_ULonglong temp123 = 0;
temp123 = ValueSelector(voxelArray[voxCount].value1, 0); //Ramps and stairs value

/////////////**************//////////////////////********** 
#if 1;
wallsBevels1 = ValueSelector(voxelArray[voxCount].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[voxCount].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cube's N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
//dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);
//label139->Text = cubeNinDataFile.ToString();// For debug
#endif;
/////////////**************//////////////////////**********
String ^ LevelName3;
LevelName3 = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
FileNameString222 = context.marshal_as<std::string>(LevelName3);


if 	((temp == 0xff00000000000000)&&(checkBox1->CheckState == CheckState::Unchecked)) {
				skippedVoxels++;
				goto blankvoxel;
				}

if (temp123 != 0) { // If steps or ramps present

	// Filter for ramps and steps. Make vertexes corresponding to ramp direction and type.
switch (temp123) {


// Whole ramp vertexes
#if 1; 
#if 1;

		case (0xF0):// Ramp West low
		{	
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Ramp West low\n";
			outfile << vertstr;

		// v1 middle
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v2 middle
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
#if 0;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
			// Go to draw a polygon, and to the next voxel
			goto drawpolygon;
		}
#endif;



#if 1;
	case (0xF1):// Ramp West high
			{	
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Ramp West high\n";
			outfile << vertstr;

		// v5 high
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;
		// v6 high
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;
		// v7 middle
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v8 middle
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
#if 0;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;
		}
#endif;


#if 1;
	case (0xF2):// Ramp East low
		{	
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Ramp East low\n";
			outfile << vertstr;

		// v1 low
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v2 low
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v3 middle
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v4 middle
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
#if 0;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
			// Go to draw a polygon, and to the next voxel
			goto drawpolygon;
		}
#endif;


#if 1;
	case (0xF3):// Ramp East high
				{	
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Ramp East high\n";
			outfile << vertstr;

		// v5 middle
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v6 middle
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v7 high
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;
		// v8 high
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;
#if 0;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;
		}
#endif;


#if 1;
	case (0xF4):// Ramp North low
		{	
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Ramp North low\n";
			outfile << vertstr;

		// v1 low
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n"; // NW
			outfile << vertstr;
		// v2 low
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n"; // SW
			outfile << vertstr;
		// v3 middle
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";// SE
			outfile << vertstr;
		// v4 middle
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n"; // NE
			outfile << vertstr;
#if 0;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
			// Go to draw a polygon, and to the next voxel
			goto drawpolygon;
		}
#endif;


#if 1;
	case (0xF5):// Ramp North high
				{	
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Ramp North high\n";
			outfile << vertstr;

		// v5 middle
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n"; // NW
			outfile << vertstr;
		// v6 middle
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n"; // SW
			outfile << vertstr;
		// v7 high
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n"; // SE
			outfile << vertstr;
		// v8 high
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n"; // NE
			outfile << vertstr;
#if 0;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;
		}
#endif;


#if 1;
	case (0xF6):// Ramp South low
		{	
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Ramp South low\n";
			outfile << vertstr;

		// v1 low
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n"; // NW
			outfile << vertstr;
		// v2 low
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n"; // SW
			outfile << vertstr;
		// v3 middle
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";// SE
			outfile << vertstr;
		// v4 middle
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n"; // NE
			outfile << vertstr;
#if 0;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
			// Go to draw a polygon, and to the next voxel
			goto drawpolygon;
		}
#endif;


#if 1;
	case (0xF7):// Ramp South high
				{	
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Ramp South high\n";
			outfile << vertstr;

		// v5 middle
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n"; // NW
			outfile << vertstr;
		// v6 middle
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n"; // SW
			outfile << vertstr;
		// v7 high
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n"; // SE
			outfile << vertstr;
		// v8 high
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n"; // NE
			outfile << vertstr;
#if 0;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;
		}
#endif; // Whole ramp vertexes
#endif;
	// End of case
	} // END OF SWITCH

}

// Ramps
// POLYGONS
drawpolygon:
int tmpvalue, tmp1 = 0;
tmpvalue = (specsArray[cubeNinDataFile].textureFloor & 0xFFFFFF3F);


if (specsArray[cubeNinDataFile].textureFloor !=0) { // Draw polygon(s)

	// Ramps
#if 1;
	if ((temp123==0xF0)||(temp123==0xF1)||(temp123==0xF2)||(temp123==0xF3)||(temp123==0xF4)||(temp123==0xF5)||(temp123==0xF6)||(temp123==0xF7)) {

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw polygon.
				vertstr = "f "+patch::to_string((int)(polyCount1*4+1))+"/1 "+patch::to_string((int)(polyCount1*4+2))+"/2 "+patch::to_string((int)(polyCount1*4+3))+"/3 "+patch::to_string((int)(polyCount1*4+4))+"/4\n\n";
				outfile << vertstr;
	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
	}
#endif;


	}
		blankvoxel:
		voxCount++;
		}
}
}// LOOP END

#if 1;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
// Write materials to mtlfile
// for each unique material:
		vertstr = "newmtl blankvoxel\n"; // always present
			mtlfile << vertstr;
		vertstr = "Kd 0.1 0.1 0.1\n"; //Diffuse
			mtlfile << vertstr;
		vertstr = "d 0.001\n"; // Transparency
			mtlfile << vertstr;

outfile.close();
mtlfile.close();

BuildStairs(); // Now it's time to extract stairs.
} // End ramps end steps extraction



// Build Stairs and other unique obj in byte 0 (MAKE!)
void BuildStairs(void) {

unsigned int wallsBevels1, wallsBevels2;
float gap = float::Parse(textBox42->Text);
int voxCount = 0;
int skippedVoxels = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned int polyCount1 = 0;
unsigned int polyCount2 = 0;
unsigned int currVertex = 0;
unsigned long long voxelarr[16384];
int tempFilename = 0;
string FileNameString222;
int nextstairs = 0;

fstream outfile, mtlfile, tmpbinfile;

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Stairs.obj");
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);

pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Stairs.mtl"); 
const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
mtlfile.open(path1, ios::out);

std::string str;
std::string str2;
std::string str3;
std::string currN;
std::string vertstr;
// Fill temp array
	for (int p=0; p<16384; p++) {
		 voxelarr[p] = voxelArray[p].value1;
		}


for (int d=0; d<64; d++) { // LOOP START
currRow = d;
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {
		currFloor = s;

progressBar2->Increment(1); // Add
progressBar2->Update();
this->Update();

_ULonglong temp = voxelArray[voxCount].value1;
_ULonglong temp123 = 0;
temp123 = ValueSelector(voxelArray[voxCount].value1, 0); //Ramps and stairs value

/////////////**************//////////////////////********** 
#if 1;
wallsBevels1 = ValueSelector(voxelArray[voxCount].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[voxCount].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cube's N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
//dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);
//label139->Text = cubeNinDataFile.ToString();// For debug
#endif;
/////////////**************//////////////////////**********
String ^ LevelName3;
LevelName3 = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
FileNameString222 = context.marshal_as<std::string>(LevelName3);


if 	((temp == 0xff00000000000000)&&(checkBox1->CheckState == CheckState::Unchecked)) {
				skippedVoxels++;
				goto blankvoxel;
				}

if (temp123 != 0) { // If stairs present


	// Filter for stairs. Make vertexes corresponding to stair direction and type.
switch (temp123) {

// Core example
#if 0;
		// v1
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
		outfile << vertstr;
		// v2
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
		outfile << vertstr;
		// v3
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
		outfile << vertstr;
		// v4
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
		outfile << vertstr;
		// v5
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
		// v6
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
		// v7
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
		// v8
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
#endif;


// Stairs South low
#if 1;
		case (0x1):// Stairs South low
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
		vertstr = "# Stairs South low\n";
		outfile << vertstr;

			// v1 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v2 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;

			// v3 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v4 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;

			// v5 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
		outfile << vertstr;
			// v6 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
		outfile << vertstr;

			// v7 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
		outfile << vertstr;
			// v8 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
		outfile << vertstr;

			// v9 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
		outfile << vertstr;
			// v10 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
		outfile << vertstr;

			// v11 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
		outfile << vertstr;
			// v12 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
		outfile << vertstr;

			// v13 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
		outfile << vertstr;
			// v14 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
		outfile << vertstr;

			// v15 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
		outfile << vertstr;
			// v16 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
		outfile << vertstr;

			// v17 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;
			// v18 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;

			// v19 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v20 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;


#if 0;
			vertstr = "vt 0.000 0.000 0.000  \n";// First step (floor)
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";
			outfile << vertstr;
	#if 1;
			vertstr = "vt 0.000 0.250 0.000  \n";// Second step (+0.125)
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.500 0.000  \n";// Third step (+0.250)
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.750 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.750 0.000  \n";// Fourth step (+0.375)
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 1.000 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.000 0.000  \n";// Vertical texture for step 1
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.125 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.125 0.000  \n";// Vertical texture for step 2
			outfile << vertstr;
			vertstr = "vt 1.000 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.250 0.000  \n";// Vertical texture for step 3
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.375 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.375 0.000  \n";// Vertical texture for step 4
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";
			outfile << vertstr;


			vertstr = "vt 0.250 0.000 0.000  \n";// Side // v33 and forward
			outfile << vertstr;
			vertstr = "vt 0.250 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;

			vertstr = "# Side polygon test \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//41... Side polygons // v33 and forward FIX!!! //2
			outfile << vertstr;
			vertstr = "vt 0.250 0.500 0.000  \n"; //3
			outfile << vertstr;
			vertstr = "vt 0.250 0.675 0.000  \n";//6
			outfile << vertstr;
			vertstr = "vt 0.500 0.675 0.000  \n";//7
			outfile << vertstr;
			vertstr = "vt 0.500 0.750 0.000  \n";//10
			outfile << vertstr;
			vertstr = "vt 0.750 0.750 0.000  \n";//11
			outfile << vertstr;
			vertstr = "vt 0.750 0.875 0.000  \n";//14
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";//15
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";//20
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";//21
			outfile << vertstr;

	#endif;
#endif;
			// Go to draw polygons, and to the next voxel
			goto drawpolygon;
		}
#endif;

	// Stairs South high
	#if 1;
		case (0x5):// Stairs South high
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
		vertstr = "# Stairs South high\n";
		outfile << vertstr;

			// v1 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;
			// v2 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;

			// v3 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;
			// v4 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;

			// v5 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
		outfile << vertstr;
			// v6 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
		outfile << vertstr;

			// v7 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
		outfile << vertstr;
			// v8 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
		outfile << vertstr;

			// v9 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
		outfile << vertstr;
			// v10 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
		outfile << vertstr;

			// v11 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
		outfile << vertstr;
			// v12 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
		outfile << vertstr;

			// v13 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
		outfile << vertstr;
			// v14 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
		outfile << vertstr;

			// v15 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
		outfile << vertstr;
			// v16 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
		outfile << vertstr;

			// v17 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
		outfile << vertstr;
			// v18 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
		outfile << vertstr;

			// v19 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v20 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;

			// v21 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v22 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;


#if 0;
			vertstr = "vt 0.000 0.000 0.000  \n";// First step (+0.5)
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";
			outfile << vertstr;
	#if 1;
			vertstr = "vt 0.000 0.250 0.000  \n";// Second step (+0.625)
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.500 0.000  \n";// Third step (+0.750)
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.750 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.750 0.000  \n";// Fourth step (+1.000)
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 1.000 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.500 0.000  \n";// Vertical texture for step 1 (17...)
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.625 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.625 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.625 0.000  \n";// Vertical texture for step 2
			outfile << vertstr;
			vertstr = "vt 1.000 0.625 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.750 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.750 0.000  \n";// Vertical texture for step 3
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.875 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.000 0.875 0.000  \n";// Vertical texture for step 4
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 1.000 0.000  \n";
			outfile << vertstr;

			vertstr = "vt 0.250 0.000 0.000  \n";// Side // v33 and forward
			outfile << vertstr;
			vertstr = "vt 0.250 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;


			vertstr = "# Side polygon  \n"; // ADD VERTEXES AS IN NORTH HIGH!!!!
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";// Side polygons // v33 and forward NOT WORKING! SEE SUCH SECTION IN STAIR LOW //2
			outfile << vertstr;
			vertstr = "vt 0.250 0.500 0.000  \n"; //3
			outfile << vertstr;
			vertstr = "vt 0.250 0.675 0.000  \n";//6
			outfile << vertstr;
			vertstr = "vt 0.500 0.675 0.000  \n";//7
			outfile << vertstr;
			vertstr = "vt 0.500 0.750 0.000  \n";//10
			outfile << vertstr;
			vertstr = "vt 0.750 0.750 0.000  \n";//11
			outfile << vertstr;
			vertstr = "vt 0.750 0.875 0.000  \n";//14
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";//15
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";//20
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";//21
			outfile << vertstr;

#if 0;
			vertstr = "vt 0.000 0.000 0.000  \n";// Side // v33 and forward FIX!!!// 21
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n"; //2
			outfile << vertstr;
			vertstr = "vt 0.250 0.500 0.000  \n";//3
			outfile << vertstr;
			vertstr = "vt 0.250 0.675 0.000  \n";//6
			outfile << vertstr;
			vertstr = "vt 0.500 0.675 0.000  \n";//7
			outfile << vertstr;
			vertstr = "vt 0.500 0.750 0.000  \n";//10
			outfile << vertstr;
			vertstr = "vt 0.750 0.750 0.000  \n";//11
			outfile << vertstr;
			vertstr = "vt 0.750 0.875 0.000  \n";//14
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";//15
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";//20
			outfile << vertstr;
#endif;
	#endif;
#endif;
			// Go to draw polygons, and to the next voxel
			goto drawpolygon;
		}
#endif;	// Stairs South high

///////////////////////////////////

#if 1;
		case (0x2):// Stairs North low // 
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
		vertstr = "# Stairs North low\n";
		outfile << vertstr;

			// v1 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v2 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;

			// v3 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
		outfile << vertstr;
			// v4 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
		outfile << vertstr;

			// v5 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;
			// v6 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;

			// v7 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
		outfile << vertstr;
			// v8 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
		outfile << vertstr;

			// v9 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
		outfile << vertstr;
			// v10 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
		outfile << vertstr;

			// v11 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
		outfile << vertstr;
			// v12 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
		outfile << vertstr;

			// v13 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
		outfile << vertstr;
			// v14 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
		outfile << vertstr;

			// v15 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
		outfile << vertstr;
			// v16 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
		outfile << vertstr;

			// v17 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v18 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;

			// v19 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v20 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;


#if 0;
			vertstr = "vt 0.000 0.000 0.000  \n";// Fourth step (+0.375)
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";//4
			outfile << vertstr;
	#if 1;
			vertstr = "vt 0.000 0.250 0.000  \n";// Third step (+0.250)
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//8
			outfile << vertstr;

			vertstr = "vt 0.000 0.500 0.000  \n";// Second step (+0.125)
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.750 0.000  \n";//12
			outfile << vertstr;

			vertstr = "vt 0.000 0.750 0.000  \n";// Floor (0.000)
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 1.000 0.000  \n";//16
			outfile << vertstr;

		vertstr = "# Vertical texture for step 1\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Vertical texture for step 1
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.125 0.000  \n";//20
			outfile << vertstr;

		vertstr = "# Vertical texture for step 2\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.125 0.000  \n";// Vertical texture for step 2
			outfile << vertstr;
			vertstr = "vt 1.000 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";//24
			outfile << vertstr;

		vertstr = "# Vertical texture for step 3\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";// Vertical texture for step 3
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.375 0.000  \n";//28
			outfile << vertstr;

		vertstr = "# Vertical texture for step 4\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.375 0.000  \n";// Vertical texture for step 4
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//32
			outfile << vertstr;


			vertstr = "vt 0.250 0.000 0.000  \n";// Side // v33 and forward
			outfile << vertstr;
			vertstr = "vt 0.250 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";//40
			outfile << vertstr;

			vertstr = "# Side polygon test \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//41... Side polygons // v33 and forward //2
			outfile << vertstr;
			vertstr = "vt 0.250 0.500 0.000  \n"; //3
			outfile << vertstr;
			vertstr = "vt 0.250 0.675 0.000  \n";//6
			outfile << vertstr;
			vertstr = "vt 0.500 0.675 0.000  \n";//7
			outfile << vertstr;
			vertstr = "vt 0.500 0.750 0.000  \n";//10
			outfile << vertstr;
			vertstr = "vt 0.750 0.750 0.000  \n";//11
			outfile << vertstr;
			vertstr = "vt 0.750 0.875 0.000  \n";//14
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";//15
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";//20
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";//21
			outfile << vertstr;

	#endif;
#endif;
			// Go to draw polygons, and to the next voxel
			goto drawpolygon;
		}
#endif;

	// Stairs North high
	#if 1;
		case (0x6):// Stairs North high
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
		vertstr = "# Stairs North high\n";
		outfile << vertstr;

			// v1 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v2 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;

			// v3 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
		outfile << vertstr;
			// v4 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
		outfile << vertstr;

			// v5 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
		outfile << vertstr;
			// v6 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
		outfile << vertstr;

			// v7 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
		outfile << vertstr;
			// v8 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
		outfile << vertstr;

			// v9 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
		outfile << vertstr;
			// v10 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
		outfile << vertstr;

			// v11 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
		outfile << vertstr;
			// v12 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
		outfile << vertstr;

			// v13 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
		outfile << vertstr;
			// v14 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
		outfile << vertstr;

			// v15 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
		outfile << vertstr;
			// v16 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
		outfile << vertstr;

			// v17 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;
			// v18 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;

			// v19 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;
			// v20 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
		outfile << vertstr;

			// v21 (real)
		vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;
			// v22 (real)
		vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
		outfile << vertstr;


#if 0;
			vertstr = "vt 0.000 0.000 0.000  \n";// First step (floor)
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";//4
			outfile << vertstr;
	#if 1;
			vertstr = "vt 0.000 0.250 0.000  \n";// Second step (+0.125)
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//8
			outfile << vertstr;

			vertstr = "vt 0.000 0.500 0.000  \n";// Third step (+0.250)
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.750 0.000  \n";//12
			outfile << vertstr;

			vertstr = "vt 0.000 0.750 0.000  \n";// Fourth step (+0.375)
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 1.000 0.000  \n";//16
			outfile << vertstr;

			vertstr = "vt 0.000 0.000 0.000  \n";// Vertical texture for step 1
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.125 0.000  \n";//20
			outfile << vertstr;

			vertstr = "vt 0.000 0.125 0.000  \n";// Vertical texture for step 2
			outfile << vertstr;
			vertstr = "vt 1.000 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";//24
			outfile << vertstr;

			vertstr = "vt 0.000 0.250 0.000  \n";// Vertical texture for step 3
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.375 0.000  \n";//28
			outfile << vertstr;

			vertstr = "vt 0.000 0.375 0.000  \n";// Vertical texture for step 4
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//32
			outfile << vertstr;


			vertstr = "vt 0.250 0.000 0.000  \n";// Side // v33 and forward
			outfile << vertstr;
			vertstr = "vt 0.250 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;

			vertstr = "# Side polygon \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//41... Side polygons // v33 and forward//2
			outfile << vertstr;
			vertstr = "vt 0.250 0.500 0.000  \n"; //3
			outfile << vertstr;
			vertstr = "vt 0.250 0.675 0.000  \n";//6
			outfile << vertstr;
			vertstr = "vt 0.500 0.675 0.000  \n";//7
			outfile << vertstr;
			vertstr = "vt 0.500 0.750 0.000  \n";//10
			outfile << vertstr;
			vertstr = "vt 0.750 0.750 0.000  \n";//11
			outfile << vertstr;
			vertstr = "vt 0.750 0.875 0.000  \n";//14
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";//15
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";//20
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";//21
			outfile << vertstr;

	#endif;
#endif;
			// Go to draw polygons, and to the next voxel
			goto drawpolygon;
		}
#endif;	// Stairs North high



// Stairs East low
#if 1;
		case (0x4):// Stairs East low
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Stairs East low\n";
			outfile << vertstr;

		// v1 done
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v2 done
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// v4 done
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v3 done
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// v6 done
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v5 done
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;

		// v7 done
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v8 done
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;

		// v9 done
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v10 done
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;

		// v11 done
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v12 done
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;

		// v13 done
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v14 done
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;

		// v15 done
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v16 done
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;

		// v17 done
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v18 done
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// v19 done
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v20 done
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;


			// Go to draw a polygon, and to the next voxel
			goto drawpolygon;		
		}
#endif;// Stairs East low



// Stairs East high
#if 1;
		case (0x8):// Stairs East high
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Stairs East high\n";
			outfile << vertstr;

		// v1
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v2
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// v4
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v3
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// v6
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v5
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;

		// v7
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v8
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;

		// v9
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v10
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;

		// v11
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v12
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;

		// v13
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v14
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;

		// v15
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v16
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;

		// v17
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;
		// v18
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;

		// v19
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v20
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// v21
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v22
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

			// Go to draw a polygon, and to the next voxel
			goto drawpolygon;			
		}
#endif;// Stairs East high



// Stairs West low
#if 1;
		case (0x3):// Stairs West low
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Stairs West low\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// v4 
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// v6 
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v5 
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;

		// v7 
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;

		// v9 
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v10 
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;

		// v11 
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v12 
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;

		// v13 
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v14 
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;

		// v15 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v16 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;

		// v17 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v18 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// v19 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v20 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

			// Go to draw a polygon, and to the next voxel
			goto drawpolygon;		
		}
#endif;// Stairs West low



// Stairs West high
#if 1;
		case (0x7):// Stairs West high
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Stairs West high\n";
			outfile << vertstr;

		// v1
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v2
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// v4
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v3
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// v6
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v5
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;

		// v7
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v8
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;

		// v9
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v10
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;

		// v11
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v12
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;

		// v13
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v14
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;

		// v15
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v16
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;

		// v17
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;
		// v18
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;

		// v19
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v20
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// v21
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v22
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

			// Go to draw a polygon, and to the next voxel
			goto drawpolygon;			
		}
#endif;// Stairs West high



#if 0;
		case (0x9):// Columns in cube's corners MAKE!!!
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Columns in cube's corners\n";
			outfile << vertstr;

		// v1
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v2
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// v4
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v3
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// v6
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v5
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;

		// v7
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v8
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;

		// v9
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v10
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;

		// v11
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v12
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;

		// v13
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v14
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;

		// v15
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v16
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;

		// v17
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;
		// v18
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap-1) + "\n";
			outfile << vertstr;

		// v19
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v20
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// v21
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v22
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

			// Go to draw a polygon, and to the next voxel
			goto drawpolygon;			
		}
#endif;// Columns in cube's corners

//////////////////////////////////

	// End of case
	} // END OF SWITCH

}


drawpolygon:
int tmpvalue, tmp1 = 0;
tmpvalue = (specsArray[cubeNinDataFile].textureFloor & 0xFFFFFF3F);
tmp1 = (specsArray[cubeNinDataFile].telep_rest_elev & 0xFFFFFF3F);

if (specsArray[cubeNinDataFile].textureFloor !=0) { // Draw polygon(s)


#if 0;
	if (temp123==0x9) { // Columns in cube's corners MAKE!!!!

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw floor polygon.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/2 "+patch::to_string((int)(currVertex+3))+"/3 "+patch::to_string((int)(currVertex+4))+"/4\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/17 "+patch::to_string((int)(currVertex+4))+"/18 "+patch::to_string((int)(currVertex+5))+"/19 "+patch::to_string((int)(currVertex+6))+"/20\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;
	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/5 "+patch::to_string((int)(currVertex+6))+"/6 "+patch::to_string((int)(currVertex+7))+"/7 "+patch::to_string((int)(currVertex+8))+"/8\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/21 "+patch::to_string((int)(currVertex+8))+"/22 "+patch::to_string((int)(currVertex+9))+"/23 "+patch::to_string((int)(currVertex+10))+"/24\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;
	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+9))+"/9 "+patch::to_string((int)(currVertex+10))+"/10 "+patch::to_string((int)(currVertex+11))+"/11 "+patch::to_string((int)(currVertex+12))+"/12\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+11))+"/25 "+patch::to_string((int)(currVertex+12))+"/26 "+patch::to_string((int)(currVertex+13))+"/27 "+patch::to_string((int)(currVertex+14))+"/28\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;
	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+13))+"/13 "+patch::to_string((int)(currVertex+14))+"/14 "+patch::to_string((int)(currVertex+15))+"/15 "+patch::to_string((int)(currVertex+16))+"/16\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+15))+"/29 "+patch::to_string((int)(currVertex+16))+"/30 "+patch::to_string((int)(currVertex+17))+"/31 "+patch::to_string((int)(currVertex+18))+"/32\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;
	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/33 "+patch::to_string((int)(currVertex+6))+"/34 "+patch::to_string((int)(currVertex+7))+"/35 "+patch::to_string((int)(currVertex+10))+"/36 "+patch::to_string((int)(currVertex+11))+"/37 "+patch::to_string((int)(currVertex+14))+"/38 "+patch::to_string((int)(currVertex+15))+"/39 "+patch::to_string((int)(currVertex+20))+"/40\n";
//				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/" +patch::to_string((int)(currVertex+33)) + " " +patch::to_string((int)(currVertex+6))+"/"+patch::to_string((int)(currVertex+34)) + " " +patch::to_string((int)(currVertex+7))+"/" +patch::to_string((int)(currVertex+35)) + " "+patch::to_string((int)(currVertex+10))+"/"+patch::to_string((int)(currVertex+36)) + " "+patch::to_string((int)(currVertex+11))+"/"+patch::to_string((int)(currVertex+37)) + " "+patch::to_string((int)(currVertex+14))+"/"+patch::to_string((int)(currVertex+38)) + " "+patch::to_string((int)(currVertex+15))+"/"+patch::to_string((int)(currVertex+39)) + " "+patch::to_string((int)(currVertex+20))+"/"+patch::to_string((int)(currVertex+40)) + "\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/33 "+patch::to_string((int)(currVertex+5))+"/34 "+patch::to_string((int)(currVertex+8))+"/35 "+patch::to_string((int)(currVertex+9))+"/36 "+patch::to_string((int)(currVertex+12))+"/37 "+patch::to_string((int)(currVertex+13))+"/38 "+patch::to_string((int)(currVertex+16))+"/39 "+patch::to_string((int)(currVertex+19))+"/40\n";
//				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/" +patch::to_string((int)(currVertex+33)) + " " +patch::to_string((int)(currVertex+5))+"/"+patch::to_string((int)(currVertex+34)) + " " +patch::to_string((int)(currVertex+8))+"/" +patch::to_string((int)(currVertex+35)) + " "+patch::to_string((int)(currVertex+9))+"/"+patch::to_string((int)(currVertex+36)) + " "+patch::to_string((int)(currVertex+12))+"/"+patch::to_string((int)(currVertex+37)) + " "+patch::to_string((int)(currVertex+13))+"/"+patch::to_string((int)(currVertex+38)) + " "+patch::to_string((int)(currVertex+16))+"/"+patch::to_string((int)(currVertex+39)) + " "+patch::to_string((int)(currVertex+19))+"/"+patch::to_string((int)(currVertex+40)) + "\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	polyCount1 += 10;
				currVertex += 20;
	}
#endif; // Columns in cube's corners



// STAIRS POLYGONS
	// Stairs South low
#if 1;
	if (temp123==0x1) { // Stairs South low
//	if ((temp123==0x1)||(temp123==0x2)) { // Stairs south low
//	if ((temp123==0x1)||(temp123==0x2)||(temp123==0x3)||(temp123==0x4)||(temp123==0x5)||(temp123==0x6)||(temp123==0x7)||(temp123==0x8)) {

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw floor polygon.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/2 "+patch::to_string((int)(currVertex+3))+"/3 "+patch::to_string((int)(currVertex+4))+"/4\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
#if 1;
	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/17 "+patch::to_string((int)(currVertex+4))+"/18 "+patch::to_string((int)(currVertex+5))+"/19 "+patch::to_string((int)(currVertex+6))+"/20\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/5 "+patch::to_string((int)(currVertex+6))+"/6 "+patch::to_string((int)(currVertex+7))+"/7 "+patch::to_string((int)(currVertex+8))+"/8\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/21 "+patch::to_string((int)(currVertex+8))+"/22 "+patch::to_string((int)(currVertex+9))+"/23 "+patch::to_string((int)(currVertex+10))+"/24\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+9))+"/9 "+patch::to_string((int)(currVertex+10))+"/10 "+patch::to_string((int)(currVertex+11))+"/11 "+patch::to_string((int)(currVertex+12))+"/12\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+11))+"/25 "+patch::to_string((int)(currVertex+12))+"/26 "+patch::to_string((int)(currVertex+13))+"/27 "+patch::to_string((int)(currVertex+14))+"/28\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+13))+"/13 "+patch::to_string((int)(currVertex+14))+"/14 "+patch::to_string((int)(currVertex+15))+"/15 "+patch::to_string((int)(currVertex+16))+"/16\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+15))+"/29 "+patch::to_string((int)(currVertex+16))+"/30 "+patch::to_string((int)(currVertex+17))+"/31 "+patch::to_string((int)(currVertex+18))+"/32\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/33 "+patch::to_string((int)(currVertex+6))+"/34 "+patch::to_string((int)(currVertex+7))+"/35 "+patch::to_string((int)(currVertex+10))+"/36 "+patch::to_string((int)(currVertex+11))+"/37 "+patch::to_string((int)(currVertex+14))+"/38 "+patch::to_string((int)(currVertex+15))+"/39 "+patch::to_string((int)(currVertex+20))+"/40\n";
//				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/" +patch::to_string((int)(currVertex+33)) + " " +patch::to_string((int)(currVertex+6))+"/"+patch::to_string((int)(currVertex+34)) + " " +patch::to_string((int)(currVertex+7))+"/" +patch::to_string((int)(currVertex+35)) + " "+patch::to_string((int)(currVertex+10))+"/"+patch::to_string((int)(currVertex+36)) + " "+patch::to_string((int)(currVertex+11))+"/"+patch::to_string((int)(currVertex+37)) + " "+patch::to_string((int)(currVertex+14))+"/"+patch::to_string((int)(currVertex+38)) + " "+patch::to_string((int)(currVertex+15))+"/"+patch::to_string((int)(currVertex+39)) + " "+patch::to_string((int)(currVertex+20))+"/"+patch::to_string((int)(currVertex+40)) + "\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/33 "+patch::to_string((int)(currVertex+5))+"/34 "+patch::to_string((int)(currVertex+8))+"/35 "+patch::to_string((int)(currVertex+9))+"/36 "+patch::to_string((int)(currVertex+12))+"/37 "+patch::to_string((int)(currVertex+13))+"/38 "+patch::to_string((int)(currVertex+16))+"/39 "+patch::to_string((int)(currVertex+19))+"/40\n";
//				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/" +patch::to_string((int)(currVertex+33)) + " " +patch::to_string((int)(currVertex+5))+"/"+patch::to_string((int)(currVertex+34)) + " " +patch::to_string((int)(currVertex+8))+"/" +patch::to_string((int)(currVertex+35)) + " "+patch::to_string((int)(currVertex+9))+"/"+patch::to_string((int)(currVertex+36)) + " "+patch::to_string((int)(currVertex+12))+"/"+patch::to_string((int)(currVertex+37)) + " "+patch::to_string((int)(currVertex+13))+"/"+patch::to_string((int)(currVertex+38)) + " "+patch::to_string((int)(currVertex+16))+"/"+patch::to_string((int)(currVertex+39)) + " "+patch::to_string((int)(currVertex+19))+"/"+patch::to_string((int)(currVertex+40)) + "\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	polyCount1 += 10;
				currVertex += 20;
//				nextstairs = currVertex;
#endif;

	}
#endif; // Stairs South low


// Stairs North low
#if 1;
	if (temp123==0x2) { // Stairs North low
//	if ((temp123==0x1)||(temp123==0x2)) { // Stairs north low
//	if ((temp123==0x1)||(temp123==0x2)||(temp123==0x3)||(temp123==0x4)||(temp123==0x5)||(temp123==0x6)||(temp123==0x7)||(temp123==0x8)) {

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw back polygon.
				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/30 "+patch::to_string((int)(currVertex+5))+"/31 "+patch::to_string((int)(currVertex+6))+"/32 "+patch::to_string((int)(currVertex+3))+"/29\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;
#if 1;
	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/2 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/4\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/28 "+patch::to_string((int)(currVertex+9))+"/25 "+patch::to_string((int)(currVertex+10))+"/26 "+patch::to_string((int)(currVertex+7))+"/27\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+9))+"/5 "+patch::to_string((int)(currVertex+10))+"/6 "+patch::to_string((int)(currVertex+11))+"/7 "+patch::to_string((int)(currVertex+12))+"/8\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+11))+"/23 "+patch::to_string((int)(currVertex+12))+"/24 "+patch::to_string((int)(currVertex+13))+"/21 "+patch::to_string((int)(currVertex+14))+"/22\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+13))+"/9 "+patch::to_string((int)(currVertex+14))+"/10 "+patch::to_string((int)(currVertex+15))+"/11 "+patch::to_string((int)(currVertex+16))+"/12\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+16))+"/20 "+patch::to_string((int)(currVertex+17))+"/17 "+patch::to_string((int)(currVertex+18))+"/18 "+patch::to_string((int)(currVertex+15))+"/19\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw floor polygon.
				vertstr = "f "+patch::to_string((int)(currVertex+17))+"/13 "+patch::to_string((int)(currVertex+18))+"/14 "+patch::to_string((int)(currVertex+20))+"/15 "+patch::to_string((int)(currVertex+19))+"/16\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+2))+"/40 "+patch::to_string((int)(currVertex+3))+"/39 "+patch::to_string((int)(currVertex+7))+"/38 "+patch::to_string((int)(currVertex+10))+"/37 "+patch::to_string((int)(currVertex+11))+"/36 "+patch::to_string((int)(currVertex+14))+"/35 "+patch::to_string((int)(currVertex+15))+"/34 "+patch::to_string((int)(currVertex+18))+"/33\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/40 "+patch::to_string((int)(currVertex+4))+"/39 "+patch::to_string((int)(currVertex+8))+"/38 "+patch::to_string((int)(currVertex+9))+"/37 "+patch::to_string((int)(currVertex+12))+"/36 "+patch::to_string((int)(currVertex+13))+"/35 "+patch::to_string((int)(currVertex+16))+"/34 "+patch::to_string((int)(currVertex+17))+"/33\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	polyCount1 += 10;
				currVertex += 20;
//				nextstairs = currVertex;
#endif;

	}
#endif; // Stairs North low


// Stairs East low
#if 1;
	if (temp123==0x4) { // Stairs East low

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw floor polygon.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/2 "+patch::to_string((int)(currVertex+3))+"/3 "+patch::to_string((int)(currVertex+4))+"/4\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
#if 1;
	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/17 "+patch::to_string((int)(currVertex+4))+"/18 "+patch::to_string((int)(currVertex+5))+"/19 "+patch::to_string((int)(currVertex+6))+"/20\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/5 "+patch::to_string((int)(currVertex+6))+"/6 "+patch::to_string((int)(currVertex+8))+"/7 "+patch::to_string((int)(currVertex+7))+"/8\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/21 "+patch::to_string((int)(currVertex+8))+"/22 "+patch::to_string((int)(currVertex+9))+"/23 "+patch::to_string((int)(currVertex+10))+"/24\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+9))+"/9 "+patch::to_string((int)(currVertex+10))+"/10 "+patch::to_string((int)(currVertex+11))+"/11 "+patch::to_string((int)(currVertex+12))+"/12\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+11))+"/25 "+patch::to_string((int)(currVertex+12))+"/26 "+patch::to_string((int)(currVertex+13))+"/27 "+patch::to_string((int)(currVertex+14))+"/28\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+13))+"/13 "+patch::to_string((int)(currVertex+14))+"/14 "+patch::to_string((int)(currVertex+15))+"/15 "+patch::to_string((int)(currVertex+16))+"/16\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+15))+"/29 "+patch::to_string((int)(currVertex+16))+"/30 "+patch::to_string((int)(currVertex+17))+"/31 "+patch::to_string((int)(currVertex+18))+"/32\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/33 "+patch::to_string((int)(currVertex+5))+"/34 "+patch::to_string((int)(currVertex+7))+"/35 "+patch::to_string((int)(currVertex+10))+"/36 "+patch::to_string((int)(currVertex+11))+"/37 "+patch::to_string((int)(currVertex+14))+"/38 "+patch::to_string((int)(currVertex+15))+"/39 "+patch::to_string((int)(currVertex+19))+"/40\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/33 "+patch::to_string((int)(currVertex+6))+"/34 "+patch::to_string((int)(currVertex+8))+"/35 "+patch::to_string((int)(currVertex+9))+"/36 "+patch::to_string((int)(currVertex+12))+"/37 "+patch::to_string((int)(currVertex+13))+"/38 "+patch::to_string((int)(currVertex+16))+"/39 "+patch::to_string((int)(currVertex+20))+"/40\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	polyCount1 += 10;
				currVertex += 20;
#endif;
		
	}
#endif;// Stairs East low


// Stairs South high
#if 1;
	if (temp123==0x5) { // Stairs South high
//	if ((temp123==0x5)||(temp123==0x6)) { // Stairs high
//	if ((temp123==0x1)||(temp123==0x2)||(temp123==0x3)||(temp123==0x4)||(temp123==0x5)||(temp123==0x6)||(temp123==0x7)||(temp123==0x8)) {

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/2 "+patch::to_string((int)(currVertex+3))+"/3 "+patch::to_string((int)(currVertex+4))+"/4\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
#if 1;
	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/51 "+patch::to_string((int)(currVertex+4))+"/52 "+patch::to_string((int)(currVertex+5))+"/53 "+patch::to_string((int)(currVertex+6))+"/54\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/5 "+patch::to_string((int)(currVertex+6))+"/6 "+patch::to_string((int)(currVertex+7))+"/7 "+patch::to_string((int)(currVertex+8))+"/8\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/55 "+patch::to_string((int)(currVertex+8))+"/56 "+patch::to_string((int)(currVertex+9))+"/57 "+patch::to_string((int)(currVertex+10))+"/58\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+9))+"/9 "+patch::to_string((int)(currVertex+10))+"/10 "+patch::to_string((int)(currVertex+11))+"/11 "+patch::to_string((int)(currVertex+12))+"/12\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+11))+"/59 "+patch::to_string((int)(currVertex+12))+"/60 "+patch::to_string((int)(currVertex+13))+"/61 "+patch::to_string((int)(currVertex+14))+"/62\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+13))+"/13 "+patch::to_string((int)(currVertex+14))+"/14 "+patch::to_string((int)(currVertex+15))+"/15 "+patch::to_string((int)(currVertex+16))+"/16\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+15))+"/63 "+patch::to_string((int)(currVertex+16))+"/64 "+patch::to_string((int)(currVertex+17))+"/65 "+patch::to_string((int)(currVertex+18))+"/66\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
			vertstr = "f "+patch::to_string((int)(currVertex+2))+"/41 " +patch::to_string((int)(currVertex+3))+"/42 "+patch::to_string((int)(currVertex+6))+"/43 "+patch::to_string((int)(currVertex+7))+"/44 "+patch::to_string((int)(currVertex+10))+"/45 "+patch::to_string((int)(currVertex+11))+"/46 "+patch::to_string((int)(currVertex+14))+"/47 "+patch::to_string((int)(currVertex+15))+"/48 "+patch::to_string((int)(currVertex+20))+"/49 " +patch::to_string((int)(currVertex+22))+"/50\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/41 "+patch::to_string((int)(currVertex+4))+"/42 "+patch::to_string((int)(currVertex+5))+"/43 "+patch::to_string((int)(currVertex+8))+"/44 "+patch::to_string((int)(currVertex+9))+"/45 "+patch::to_string((int)(currVertex+12))+"/46 "+patch::to_string((int)(currVertex+13))+"/47 "+patch::to_string((int)(currVertex+16))+"/48 "+patch::to_string((int)(currVertex+19))+"/49 " +patch::to_string((int)(currVertex+21))+"/50\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	polyCount1 += 10;
				currVertex += 22;
#endif;

	}
#endif; // Stairs South high



// Stairs North high
#if 1;
	if (temp123==0x6) { // Stairs North high
//	if ((temp123==0x5)||(temp123==0x6)) { // Stairs north high
//	if ((temp123==0x1)||(temp123==0x2)||(temp123==0x3)||(temp123==0x4)||(temp123==0x5)||(temp123==0x6)||(temp123==0x7)||(temp123==0x8)) {

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/64 "+patch::to_string((int)(currVertex+5))+"/65 "+patch::to_string((int)(currVertex+6))+"/66 "+patch::to_string((int)(currVertex+3))+"/63\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;
#if 1;
	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/2 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/4\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/61 "+patch::to_string((int)(currVertex+8))+"/62 "+patch::to_string((int)(currVertex+9))+"/59 "+patch::to_string((int)(currVertex+10))+"/60\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+9))+"/5 "+patch::to_string((int)(currVertex+10))+"/6 "+patch::to_string((int)(currVertex+11))+"/7 "+patch::to_string((int)(currVertex+12))+"/8\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+11))+"/57 "+patch::to_string((int)(currVertex+12))+"/58 "+patch::to_string((int)(currVertex+13))+"/55 "+patch::to_string((int)(currVertex+14))+"/56\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+13))+"/9 "+patch::to_string((int)(currVertex+14))+"/10 "+patch::to_string((int)(currVertex+15))+"/11 "+patch::to_string((int)(currVertex+16))+"/12\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+15))+"/53 "+patch::to_string((int)(currVertex+16))+"/54 "+patch::to_string((int)(currVertex+17))+"/51 "+patch::to_string((int)(currVertex+18))+"/52\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+17))+"/13 "+patch::to_string((int)(currVertex+18))+"/14 "+patch::to_string((int)(currVertex+20))+"/15 "+patch::to_string((int)(currVertex+19))+"/16\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
			vertstr = "f "+patch::to_string((int)(currVertex+4))+"/48 " +patch::to_string((int)(currVertex+8))+"/47 "+patch::to_string((int)(currVertex+9))+"/46 "+patch::to_string((int)(currVertex+12))+"/45 "+patch::to_string((int)(currVertex+13))+"/44 "+patch::to_string((int)(currVertex+16))+"/43 "+patch::to_string((int)(currVertex+17))+"/42 "+patch::to_string((int)(currVertex+19))+"/41 "+patch::to_string((int)(currVertex+21))+"/50 " +patch::to_string((int)(currVertex+1))+"/49\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/48 "+patch::to_string((int)(currVertex+7))+"/47 "+patch::to_string((int)(currVertex+10))+"/46 "+patch::to_string((int)(currVertex+11))+"/45 "+patch::to_string((int)(currVertex+14))+"/44 "+patch::to_string((int)(currVertex+15))+"/43 "+patch::to_string((int)(currVertex+18))+"/42 "+patch::to_string((int)(currVertex+20))+"/41 "+patch::to_string((int)(currVertex+22))+"/50 " +patch::to_string((int)(currVertex+2))+"/49\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	polyCount1 += 10;
				currVertex += 22;
#endif;

	}
#endif; // Stairs North high



// Stairs East high
#if 1;
	if (temp123==0x8) { // Stairs East high

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/52 "+patch::to_string((int)(currVertex+5))+"/53 "+patch::to_string((int)(currVertex+6))+"/54 "+patch::to_string((int)(currVertex+3))+"/51\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;
#if 1;
	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/2 "+patch::to_string((int)(currVertex+4))+"/3 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+2))+"/1\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/55 "+patch::to_string((int)(currVertex+8))+"/56 "+patch::to_string((int)(currVertex+9))+"/57 "+patch::to_string((int)(currVertex+10))+"/58\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/6 "+patch::to_string((int)(currVertex+7))+"/7 "+patch::to_string((int)(currVertex+8))+"/8 "+patch::to_string((int)(currVertex+6))+"/5\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+11))+"/59 "+patch::to_string((int)(currVertex+12))+"/60 "+patch::to_string((int)(currVertex+13))+"/61 "+patch::to_string((int)(currVertex+14))+"/62\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+10))+"/10 "+patch::to_string((int)(currVertex+11))+"/11 "+patch::to_string((int)(currVertex+12))+"/12 "+patch::to_string((int)(currVertex+9))+"/9\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+15))+"/63 "+patch::to_string((int)(currVertex+16))+"/64 "+patch::to_string((int)(currVertex+17))+"/65 "+patch::to_string((int)(currVertex+18))+"/66\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+14))+"/14 "+patch::to_string((int)(currVertex+15))+"/15 "+patch::to_string((int)(currVertex+16))+"/16 "+patch::to_string((int)(currVertex+13))+"/13\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
			vertstr = "f "+patch::to_string((int)(currVertex+1))+"/41 " +patch::to_string((int)(currVertex+4))+"/42 "+patch::to_string((int)(currVertex+5))+"/43 "+patch::to_string((int)(currVertex+7))+"/44 "+patch::to_string((int)(currVertex+10))+"/45 "+patch::to_string((int)(currVertex+11))+"/46 "+patch::to_string((int)(currVertex+14))+"/47 "+patch::to_string((int)(currVertex+15))+"/48 "+patch::to_string((int)(currVertex+19))+"/49 " +patch::to_string((int)(currVertex+22))+"/50\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+2))+"/41 "+patch::to_string((int)(currVertex+3))+"/42 "+patch::to_string((int)(currVertex+6))+"/43 "+patch::to_string((int)(currVertex+8))+"/44 "+patch::to_string((int)(currVertex+9))+"/45 "+patch::to_string((int)(currVertex+12))+"/46 "+patch::to_string((int)(currVertex+13))+"/47 "+patch::to_string((int)(currVertex+16))+"/48 "+patch::to_string((int)(currVertex+20))+"/49 " +patch::to_string((int)(currVertex+21))+"/50\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	polyCount1 += 10;
				currVertex += 22;
#endif;		
	}
#endif;// Stairs East high



// Stairs West low
#if 1;
	if (temp123==0x3) { // Stairs West low

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw floor polygon.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/2 "+patch::to_string((int)(currVertex+3))+"/3 "+patch::to_string((int)(currVertex+4))+"/4\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;
#if 1;
	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/17 "+patch::to_string((int)(currVertex+4))+"/18 "+patch::to_string((int)(currVertex+5))+"/19 "+patch::to_string((int)(currVertex+6))+"/20\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/5 "+patch::to_string((int)(currVertex+6))+"/6 "+patch::to_string((int)(currVertex+8))+"/7 "+patch::to_string((int)(currVertex+7))+"/8\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/21 "+patch::to_string((int)(currVertex+8))+"/22 "+patch::to_string((int)(currVertex+9))+"/23 "+patch::to_string((int)(currVertex+10))+"/24\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+9))+"/9 "+patch::to_string((int)(currVertex+10))+"/10 "+patch::to_string((int)(currVertex+11))+"/11 "+patch::to_string((int)(currVertex+12))+"/12\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+11))+"/25 "+patch::to_string((int)(currVertex+12))+"/26 "+patch::to_string((int)(currVertex+13))+"/27 "+patch::to_string((int)(currVertex+14))+"/28\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+13))+"/13 "+patch::to_string((int)(currVertex+14))+"/14 "+patch::to_string((int)(currVertex+15))+"/15 "+patch::to_string((int)(currVertex+16))+"/16\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+15))+"/29 "+patch::to_string((int)(currVertex+16))+"/30 "+patch::to_string((int)(currVertex+17))+"/31 "+patch::to_string((int)(currVertex+18))+"/32\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/33 "+patch::to_string((int)(currVertex+5))+"/34 "+patch::to_string((int)(currVertex+7))+"/35 "+patch::to_string((int)(currVertex+10))+"/36 "+patch::to_string((int)(currVertex+11))+"/37 "+patch::to_string((int)(currVertex+14))+"/38 "+patch::to_string((int)(currVertex+15))+"/39 "+patch::to_string((int)(currVertex+19))+"/40\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+3))+"/33 "+patch::to_string((int)(currVertex+6))+"/34 "+patch::to_string((int)(currVertex+8))+"/35 "+patch::to_string((int)(currVertex+9))+"/36 "+patch::to_string((int)(currVertex+12))+"/37 "+patch::to_string((int)(currVertex+13))+"/38 "+patch::to_string((int)(currVertex+16))+"/39 "+patch::to_string((int)(currVertex+20))+"/40\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	polyCount1 += 10;
				currVertex += 20;
#endif;
	}
#endif;// Stairs West low


// Stairs West high
#if 1;
	if (temp123==0x7) { // Stairs West high

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+4))+"/52 "+patch::to_string((int)(currVertex+5))+"/53 "+patch::to_string((int)(currVertex+6))+"/54 "+patch::to_string((int)(currVertex+3))+"/51\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;
#if 1;
	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 1.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/2 "+patch::to_string((int)(currVertex+4))+"/3 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+2))+"/1\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/55 "+patch::to_string((int)(currVertex+8))+"/56 "+patch::to_string((int)(currVertex+9))+"/57 "+patch::to_string((int)(currVertex+10))+"/58\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/6 "+patch::to_string((int)(currVertex+7))+"/7 "+patch::to_string((int)(currVertex+8))+"/8 "+patch::to_string((int)(currVertex+6))+"/5\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+11))+"/59 "+patch::to_string((int)(currVertex+12))+"/60 "+patch::to_string((int)(currVertex+13))+"/61 "+patch::to_string((int)(currVertex+14))+"/62\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+10))+"/10 "+patch::to_string((int)(currVertex+11))+"/11 "+patch::to_string((int)(currVertex+12))+"/12 "+patch::to_string((int)(currVertex+9))+"/9\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmp1) + "\n";
	outfile << vertstr;
		// Draw vert polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+15))+"/63 "+patch::to_string((int)(currVertex+16))+"/64 "+patch::to_string((int)(currVertex+17))+"/65 "+patch::to_string((int)(currVertex+18))+"/66\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmp1) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmp1)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw step polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+14))+"/14 "+patch::to_string((int)(currVertex+15))+"/15 "+patch::to_string((int)(currVertex+16))+"/16 "+patch::to_string((int)(currVertex+13))+"/13\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
			vertstr = "f "+patch::to_string((int)(currVertex+1))+"/41 " +patch::to_string((int)(currVertex+4))+"/42 "+patch::to_string((int)(currVertex+5))+"/43 "+patch::to_string((int)(currVertex+7))+"/44 "+patch::to_string((int)(currVertex+10))+"/45 "+patch::to_string((int)(currVertex+11))+"/46 "+patch::to_string((int)(currVertex+14))+"/47 "+patch::to_string((int)(currVertex+15))+"/48 "+patch::to_string((int)(currVertex+19))+"/49 " +patch::to_string((int)(currVertex+22))+"/50\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;

	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw side polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+2))+"/41 "+patch::to_string((int)(currVertex+3))+"/42 "+patch::to_string((int)(currVertex+6))+"/43 "+patch::to_string((int)(currVertex+8))+"/44 "+patch::to_string((int)(currVertex+9))+"/45 "+patch::to_string((int)(currVertex+12))+"/46 "+patch::to_string((int)(currVertex+13))+"/47 "+patch::to_string((int)(currVertex+16))+"/48 "+patch::to_string((int)(currVertex+20))+"/49 " +patch::to_string((int)(currVertex+21))+"/50\n";
				outfile << vertstr;
//	polyCount1++;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
			mtlfile << vertstr;
	polyCount1 += 10;
				currVertex += 22;
#endif;	
	}
#endif;// Stairs West high

	}
		blankvoxel:
		voxCount++;
		}
}
}// LOOP END

#if 1; // Texture coords
		vertstr = "#Texture coords\n";
		outfile << vertstr;
		vertstr = "#First step\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// First step (floor)
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";//4
			outfile << vertstr;

		vertstr = "#Second step\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";// Second step (+0.125)
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//8
			outfile << vertstr;

		vertstr = "#Third step\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";// Third step (+0.250)
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.750 0.000  \n";//12
			outfile << vertstr;

		vertstr = "#Fourth step\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.750 0.000  \n";// Fourth step (+0.375)
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 1.000 0.000  \n";//16
			outfile << vertstr;

		vertstr = "#Vertical texture for step 1\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Vertical texture for step 1
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.125 0.000  \n";//20
			outfile << vertstr;

		vertstr = "#Vertical texture for step 2\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.125 0.000  \n";// Vertical texture for step 2
			outfile << vertstr;
			vertstr = "vt 1.000 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";//24
			outfile << vertstr;

		vertstr = "#Vertical texture for step 3\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.250 0.000  \n";// Vertical texture for step 3
			outfile << vertstr;
			vertstr = "vt 1.000 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.375 0.000  \n";//28
			outfile << vertstr;

		vertstr = "#Vertical texture for step 4\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.375 0.000  \n";// Vertical texture for step 4
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//32
			outfile << vertstr;

		vertstr = "#Side small\n";
		outfile << vertstr;
			vertstr = "vt 0.250 0.000 0.000  \n";// Side // v33 and forward
			outfile << vertstr;
			vertstr = "vt 0.250 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.125 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.500 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.250 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.750 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.375 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;

			vertstr = "# Side large \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n";//41... Side polygons // v33 and forward//2
			outfile << vertstr;
			vertstr = "vt 0.250 0.500 0.000  \n"; //3
			outfile << vertstr;
			vertstr = "vt 0.250 0.675 0.000  \n";//6
			outfile << vertstr;
			vertstr = "vt 0.500 0.675 0.000  \n";//7
			outfile << vertstr;
			vertstr = "vt 0.500 0.750 0.000  \n";//10
			outfile << vertstr;
			vertstr = "vt 0.750 0.750 0.000  \n";//11
			outfile << vertstr;
			vertstr = "vt 0.750 0.875 0.000  \n";//14
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";//15
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";//20
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";//21
			outfile << vertstr;

		vertstr = "#Vertical texture for step 5\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.500 0.000  \n"; // 51... // Vertical texture for step 5
			outfile << vertstr;
			vertstr = "vt 1.000 0.500 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.625 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.625 0.000  \n";
			outfile << vertstr;

		vertstr = "#Vertical texture for step 6\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.625 0.000  \n"; // 55... // Vertical texture for step 6
			outfile << vertstr;
			vertstr = "vt 1.000 0.625 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.750 0.000  \n";
			outfile << vertstr;

		vertstr = "#Vertical texture for step 7\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.750 0.000  \n";//59 // Vertical texture for step 7
			outfile << vertstr;
			vertstr = "vt 1.000 0.750 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.875 0.000  \n";
			outfile << vertstr;

		vertstr = "#Vertical texture for step 8\n";
		outfile << vertstr;
			vertstr = "vt 0.000 0.875 0.000  \n";// 63... // Vertical texture for step 8
			outfile << vertstr;
			vertstr = "vt 1.000 0.875 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 1.000 0.000  \n";
			outfile << vertstr;
#endif;

// Write materials to mtlfile
// for each unique material:
		vertstr = "newmtl blankvoxel\n"; // always present
			mtlfile << vertstr;
		vertstr = "Kd 0.1 0.1 0.1\n"; //Diffuse
			mtlfile << vertstr;
		vertstr = "d 0.001\n"; // Transparency
			mtlfile << vertstr;

outfile.close();
mtlfile.close();

if (progressBar2->Value == progressBar2->Maximum) {
progressBar2->Value = 0;
}
//BuildSteps(); // Next -> Build steps
	}



//Build Steps
private: System::Void button32_Click(System::Object^  sender, System::EventArgs^  e) {

unsigned int wallsBevels1, wallsBevels2;
float gap = float::Parse(textBox42->Text);
int voxCount = 0;
int skippedVoxels = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned int polyCount1 = 0;
unsigned int currVertex = 0;
unsigned long long voxelarr[16384];
int tempFilename = 0;
string FileNameString222;

fstream outfile, mtlfile;

if (saveFileDialog5->ShowDialog() == System::Windows::Forms::DialogResult::OK)
      {

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Steps.obj");
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);

pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Steps.mtl"); 
const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
mtlfile.open(path1, ios::out);

std::string str;
std::string str2;
std::string str3;
std::string currN;
std::string vertstr;
// Fill temp array
	for (int p=0; p<16384; p++) {
		 voxelarr[p] = voxelArray[p].value1;
		}

#if 1;
// Check if all textures are extracted to cel. (AnimBack, AnimEnemies, AnimObj, Objects)
String ^ path11111 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\Objects";
std::string stdString3 = msclr::interop::marshal_as<std::string>(path11111); //String^ to std
const char *c3 = stdString3.c_str();

if (access(c3, 0) == -1) {
	timer3->Enabled = 1;
		// Show Message
	MessageBox::Show("Please extract all textures first! Use 'Extract lvl texstures to *.cel' button and select *data file", "Warining. Extraction stop", MessageBoxButtons::OK, MessageBoxIcon::Exclamation);
//		MessageBox::Show("Please extract all textures first! Use red button.");
		return;
	}
#endif;

progressBar2->Maximum = 65536; // 16384*4 Steps, Objects, Torches, Logic lines
//progressBar2->Increment(1); // Add
//progressBar2->Update();

for (int d=0; d<64; d++) { // LOOP START
currRow = d;
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {
		currFloor = s;

progressBar2->Increment(1); // Add
progressBar2->Update();
this->Update();

_ULonglong temp = voxelArray[voxCount].value1;
_ULonglong temp123 = 0;
temp123 = ValueSelector(voxelArray[voxCount].value1, 0); //Steps value

/////////////**************//////////////////////********** 
#if 1;
wallsBevels1 = ValueSelector(voxelArray[voxCount].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[voxCount].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cube's N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
//dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);
//label139->Text = cubeNinDataFile.ToString();// For debug
#endif;
/////////////**************//////////////////////**********
String ^ LevelName3;
LevelName3 = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
FileNameString222 = context.marshal_as<std::string>(LevelName3);

int tmpvalue = 0;
tmpvalue = (specsArray[cubeNinDataFile].textureFloor & 0xFFFFFF3F);

if 	((temp == 0xff00000000000000)&&(checkBox1->CheckState == CheckState::Unchecked)) {
				skippedVoxels++;
				goto blankvoxel;
				}

if (temp123 != 0) { // If steps present

	// Filter for and steps. Make vertexes corresponding to steps type.
switch (temp123) {

// Whole step vertexes
#if 1;// Turn on all vertices.

		case (0x11):// Step. Height 1
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 1\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.0625) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.0625) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.0625) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.0625) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;	
		}


		case (0x12):// Step. Height 2
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 2\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x13):// Step. Height 3
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 3\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.1875) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.1875) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.1875) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.1875) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x14):// Step. Height 4
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 4\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x15):// Step. Height 5
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 5\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.3125) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.3125) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.3125) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.3125) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x16):// Step. Height 6
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 6\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x17):// Step. Height 7
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 7\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.4375) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.4375) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.4375) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.4375) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x18):// Step. Height 8
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 8\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x19):// Step. Height 9
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 9\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5625) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5625) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5625) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5625) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x1A):// Step. Height 10
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 10\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x1B):// Step. Height 11
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 11\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.6875) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.6875) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.6875) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.6875) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x1C):// Step. Height 12
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 12\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x1D):// Step. Height 13
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 13\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.8125) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.8125) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.8125) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.8125) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x1E):// Step. Height 14
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 14\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x1F):// Step. Height 15
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 15\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.9375) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.9375) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.9375) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.9375) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}




#if 1;
		case (0x21):// Step. Height 1. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 1. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.0625) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.0625) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.0625) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.0625) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel
		goto drawpolygon;		
		}

		case (0x22):// Step. Height 2. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 2. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.125) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x23):// Step. Height 3. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 3. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.1875) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.1875) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.1875) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.1875) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x24):// Step. Height 4. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 4. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.25) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x25):// Step. Height 5. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 5. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.3125) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.3125) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.3125) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.3125) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x26):// Step. Height 6. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 6. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.375) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x27):// Step. Height 7. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 7. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.4375) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.4375) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.4375) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.4375) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x28):// Step. Height 8. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 8. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x29):// Step. Height 9. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 9. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5625) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5625) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.5625) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.5625) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x2A):// Step. Height 10. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 10. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.625) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x2B):// Step. Height 11. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 11. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.6875) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.6875) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.6875) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.6875) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x2C):// Step. Height 12. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 12. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.75) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x2D):// Step. Height 13. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 13. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.8125) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.8125) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.8125) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.8125) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}

		case (0x2E):// Step. Height 14. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 14. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.875) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;	
		}

		case (0x2F):// Step. Height 15. Without vert. textures
		{
		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Step. Height 15. Without vert. textures\n";
			outfile << vertstr;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.9375) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.9375) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap-0.9375) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+1-gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap-0.9375) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;		
		}
#endif; // Without vert. textures block
	// Whole Step vertexes
#endif;
	// End of case
	} // END OF SWITCH

}

// Steps
// POLYGONS
drawpolygon:
//int tmpvalue = 0;
//tmpvalue = (specsArray[cubeNinDataFile].textureFloor & 0xFFFFFF3F);
//tmpvalue = specsArray[cubeNinDataFile].textureFloor;

if (specsArray[cubeNinDataFile].textureFloor !=0) { // Draw polygon(s)

// Steps
#if 1;
//	if (temp123==0x11) {
//if ((temp123==0x11)||(temp123==0x12)||(temp123==0x13)||(temp123==0x14)||(temp123==0x15)||(temp123==0x16)||(temp123==0x17)||(temp123==0x18)||(temp123==0x19)||(temp123==0x1A)||(temp123==0x1B)||(temp123==0x1C)||(temp123==0x1D)||(temp123==0x1E)||(temp123==0x1F)) {
	if ((temp123>0x10)&&(temp123<0x20)) {

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw floor polygon.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/2 "+patch::to_string((int)(currVertex+3))+"/3 "+patch::to_string((int)(currVertex+4))+"/4\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

//Switch for vt coords
#if 1;
switch (temp123) {

case (0x11): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/7 "+patch::to_string((int)(currVertex+6))+"/8 "+patch::to_string((int)(currVertex+2))+"/5 "+patch::to_string((int)(currVertex+1))+"/6\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/5 "+patch::to_string((int)(currVertex+7))+"/6 "+patch::to_string((int)(currVertex+3))+"/7 "+patch::to_string((int)(currVertex+2))+"/8\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/5 "+patch::to_string((int)(currVertex+8))+"/6 "+patch::to_string((int)(currVertex+4))+"/7 "+patch::to_string((int)(currVertex+3))+"/8\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/5 "+patch::to_string((int)(currVertex+5))+"/6 "+patch::to_string((int)(currVertex+1))+"/7 "+patch::to_string((int)(currVertex+4))+"/8\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;
		}


case (0x12): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/11 "+patch::to_string((int)(currVertex+6))+"/12 "+patch::to_string((int)(currVertex+2))+"/9 "+patch::to_string((int)(currVertex+1))+"/10\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/11 "+patch::to_string((int)(currVertex+7))+"/12 "+patch::to_string((int)(currVertex+3))+"/9 "+patch::to_string((int)(currVertex+2))+"/10\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/11 "+patch::to_string((int)(currVertex+8))+"/12 "+patch::to_string((int)(currVertex+4))+"/9 "+patch::to_string((int)(currVertex+3))+"/10\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/11 "+patch::to_string((int)(currVertex+5))+"/12 "+patch::to_string((int)(currVertex+1))+"/9 "+patch::to_string((int)(currVertex+4))+"/10\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;
		}


case (0x13): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/15 "+patch::to_string((int)(currVertex+6))+"/16 "+patch::to_string((int)(currVertex+2))+"/13 "+patch::to_string((int)(currVertex+1))+"/14\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/15 "+patch::to_string((int)(currVertex+7))+"/16 "+patch::to_string((int)(currVertex+3))+"/13 "+patch::to_string((int)(currVertex+2))+"/14\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/15 "+patch::to_string((int)(currVertex+8))+"/16 "+patch::to_string((int)(currVertex+4))+"/13 "+patch::to_string((int)(currVertex+3))+"/14\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/15 "+patch::to_string((int)(currVertex+5))+"/16 "+patch::to_string((int)(currVertex+1))+"/13 "+patch::to_string((int)(currVertex+4))+"/14\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x14): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/19 "+patch::to_string((int)(currVertex+6))+"/20 "+patch::to_string((int)(currVertex+2))+"/17 "+patch::to_string((int)(currVertex+1))+"/18\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/19 "+patch::to_string((int)(currVertex+7))+"/20 "+patch::to_string((int)(currVertex+3))+"/17 "+patch::to_string((int)(currVertex+2))+"/18\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/19 "+patch::to_string((int)(currVertex+8))+"/20 "+patch::to_string((int)(currVertex+4))+"/17 "+patch::to_string((int)(currVertex+3))+"/18\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/19 "+patch::to_string((int)(currVertex+5))+"/20 "+patch::to_string((int)(currVertex+1))+"/17 "+patch::to_string((int)(currVertex+4))+"/18\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x15): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/23 "+patch::to_string((int)(currVertex+6))+"/24 "+patch::to_string((int)(currVertex+2))+"/21 "+patch::to_string((int)(currVertex+1))+"/22\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/23 "+patch::to_string((int)(currVertex+7))+"/24 "+patch::to_string((int)(currVertex+3))+"/21 "+patch::to_string((int)(currVertex+2))+"/22\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/23 "+patch::to_string((int)(currVertex+8))+"/24 "+patch::to_string((int)(currVertex+4))+"/21 "+patch::to_string((int)(currVertex+3))+"/22\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/23 "+patch::to_string((int)(currVertex+5))+"/24 "+patch::to_string((int)(currVertex+1))+"/21 "+patch::to_string((int)(currVertex+4))+"/22\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;
		}


case (0x16): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/27 "+patch::to_string((int)(currVertex+6))+"/28 "+patch::to_string((int)(currVertex+2))+"/25 "+patch::to_string((int)(currVertex+1))+"/26\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/27 "+patch::to_string((int)(currVertex+7))+"/28 "+patch::to_string((int)(currVertex+3))+"/25 "+patch::to_string((int)(currVertex+2))+"/26\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/27 "+patch::to_string((int)(currVertex+8))+"/28 "+patch::to_string((int)(currVertex+4))+"/25 "+patch::to_string((int)(currVertex+3))+"/26\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/27 "+patch::to_string((int)(currVertex+5))+"/28 "+patch::to_string((int)(currVertex+1))+"/25 "+patch::to_string((int)(currVertex+4))+"/26\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x17): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/31 "+patch::to_string((int)(currVertex+6))+"/32 "+patch::to_string((int)(currVertex+2))+"/29 "+patch::to_string((int)(currVertex+1))+"/30\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/31 "+patch::to_string((int)(currVertex+7))+"/32 "+patch::to_string((int)(currVertex+3))+"/29 "+patch::to_string((int)(currVertex+2))+"/30\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/31 "+patch::to_string((int)(currVertex+8))+"/32 "+patch::to_string((int)(currVertex+4))+"/29 "+patch::to_string((int)(currVertex+3))+"/30\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/31 "+patch::to_string((int)(currVertex+5))+"/32 "+patch::to_string((int)(currVertex+1))+"/29 "+patch::to_string((int)(currVertex+4))+"/30\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x18): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/35 "+patch::to_string((int)(currVertex+6))+"/36 "+patch::to_string((int)(currVertex+2))+"/33 "+patch::to_string((int)(currVertex+1))+"/34\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/35 "+patch::to_string((int)(currVertex+7))+"/36 "+patch::to_string((int)(currVertex+3))+"/33 "+patch::to_string((int)(currVertex+2))+"/34\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/35 "+patch::to_string((int)(currVertex+8))+"/36 "+patch::to_string((int)(currVertex+4))+"/33 "+patch::to_string((int)(currVertex+3))+"/34\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/35 "+patch::to_string((int)(currVertex+5))+"/36 "+patch::to_string((int)(currVertex+1))+"/33 "+patch::to_string((int)(currVertex+4))+"/34\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x19): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/39 "+patch::to_string((int)(currVertex+6))+"/40 "+patch::to_string((int)(currVertex+2))+"/37 "+patch::to_string((int)(currVertex+1))+"/38\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/39 "+patch::to_string((int)(currVertex+7))+"/40 "+patch::to_string((int)(currVertex+3))+"/37 "+patch::to_string((int)(currVertex+2))+"/38\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/39 "+patch::to_string((int)(currVertex+8))+"/40 "+patch::to_string((int)(currVertex+4))+"/37 "+patch::to_string((int)(currVertex+3))+"/38\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/39 "+patch::to_string((int)(currVertex+5))+"/40 "+patch::to_string((int)(currVertex+1))+"/37 "+patch::to_string((int)(currVertex+4))+"/38\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x1A): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/43 "+patch::to_string((int)(currVertex+6))+"/44 "+patch::to_string((int)(currVertex+2))+"/41 "+patch::to_string((int)(currVertex+1))+"/42\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/43 "+patch::to_string((int)(currVertex+7))+"/44 "+patch::to_string((int)(currVertex+3))+"/41 "+patch::to_string((int)(currVertex+2))+"/42\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/43 "+patch::to_string((int)(currVertex+8))+"/44 "+patch::to_string((int)(currVertex+4))+"/41 "+patch::to_string((int)(currVertex+3))+"/42\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/43 "+patch::to_string((int)(currVertex+5))+"/44 "+patch::to_string((int)(currVertex+1))+"/41 "+patch::to_string((int)(currVertex+4))+"/42\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x1B): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/47 "+patch::to_string((int)(currVertex+6))+"/48 "+patch::to_string((int)(currVertex+2))+"/45 "+patch::to_string((int)(currVertex+1))+"/46\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/47 "+patch::to_string((int)(currVertex+7))+"/48 "+patch::to_string((int)(currVertex+3))+"/45 "+patch::to_string((int)(currVertex+2))+"/46\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/47 "+patch::to_string((int)(currVertex+8))+"/48 "+patch::to_string((int)(currVertex+4))+"/45 "+patch::to_string((int)(currVertex+3))+"/46\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/47 "+patch::to_string((int)(currVertex+5))+"/48 "+patch::to_string((int)(currVertex+1))+"/45 "+patch::to_string((int)(currVertex+4))+"/46\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x1C): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/51 "+patch::to_string((int)(currVertex+6))+"/52 "+patch::to_string((int)(currVertex+2))+"/49 "+patch::to_string((int)(currVertex+1))+"/50\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/51 "+patch::to_string((int)(currVertex+7))+"/52 "+patch::to_string((int)(currVertex+3))+"/49 "+patch::to_string((int)(currVertex+2))+"/50\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/51 "+patch::to_string((int)(currVertex+8))+"/52 "+patch::to_string((int)(currVertex+4))+"/49 "+patch::to_string((int)(currVertex+3))+"/50\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/51 "+patch::to_string((int)(currVertex+5))+"/52 "+patch::to_string((int)(currVertex+1))+"/49 "+patch::to_string((int)(currVertex+4))+"/50\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x1D): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/55 "+patch::to_string((int)(currVertex+6))+"/56 "+patch::to_string((int)(currVertex+2))+"/53 "+patch::to_string((int)(currVertex+1))+"/54\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/55 "+patch::to_string((int)(currVertex+7))+"/56 "+patch::to_string((int)(currVertex+3))+"/53 "+patch::to_string((int)(currVertex+2))+"/54\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/55 "+patch::to_string((int)(currVertex+8))+"/56 "+patch::to_string((int)(currVertex+4))+"/53 "+patch::to_string((int)(currVertex+3))+"/54\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/55 "+patch::to_string((int)(currVertex+5))+"/56 "+patch::to_string((int)(currVertex+1))+"/53 "+patch::to_string((int)(currVertex+4))+"/54\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;	
		}


case (0x1E): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/59 "+patch::to_string((int)(currVertex+6))+"/60 "+patch::to_string((int)(currVertex+2))+"/57 "+patch::to_string((int)(currVertex+1))+"/58\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/59 "+patch::to_string((int)(currVertex+7))+"/60 "+patch::to_string((int)(currVertex+3))+"/57 "+patch::to_string((int)(currVertex+2))+"/58\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/59 "+patch::to_string((int)(currVertex+8))+"/60 "+patch::to_string((int)(currVertex+4))+"/57 "+patch::to_string((int)(currVertex+3))+"/58\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/59 "+patch::to_string((int)(currVertex+5))+"/60 "+patch::to_string((int)(currVertex+1))+"/57 "+patch::to_string((int)(currVertex+4))+"/58\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;
		}


case (0x1F): {
		vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
		outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/63 "+patch::to_string((int)(currVertex+6))+"/64 "+patch::to_string((int)(currVertex+2))+"/61 "+patch::to_string((int)(currVertex+1))+"/62\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/63 "+patch::to_string((int)(currVertex+7))+"/64 "+patch::to_string((int)(currVertex+3))+"/61 "+patch::to_string((int)(currVertex+2))+"/62\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/63 "+patch::to_string((int)(currVertex+8))+"/64 "+patch::to_string((int)(currVertex+4))+"/61 "+patch::to_string((int)(currVertex+3))+"/62\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/63 "+patch::to_string((int)(currVertex+5))+"/64 "+patch::to_string((int)(currVertex+1))+"/61 "+patch::to_string((int)(currVertex+4))+"/62\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
	break;
		}
}
#endif;

#if 0;
	vertstr = "usemtl " + patch::to_string((int)defaultTextureID) + "\n";
	outfile << vertstr;
		// Draw polygon 2.
				vertstr = "f "+patch::to_string((int)(currVertex+5))+"/1 "+patch::to_string((int)(currVertex+6))+"/2 "+patch::to_string((int)(currVertex+2))+"/3 "+patch::to_string((int)(currVertex+1))+"/4\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 3.
				vertstr = "f "+patch::to_string((int)(currVertex+6))+"/1 "+patch::to_string((int)(currVertex+7))+"/2 "+patch::to_string((int)(currVertex+3))+"/3 "+patch::to_string((int)(currVertex+2))+"/4\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 4.
				vertstr = "f "+patch::to_string((int)(currVertex+7))+"/1 "+patch::to_string((int)(currVertex+8))+"/2 "+patch::to_string((int)(currVertex+4))+"/3 "+patch::to_string((int)(currVertex+3))+"/4\n";
				outfile << vertstr;
			vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
			vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

		// Draw polygon 5.
				vertstr = "f "+patch::to_string((int)(currVertex+8))+"/1 "+patch::to_string((int)(currVertex+5))+"/2 "+patch::to_string((int)(currVertex+1))+"/3 "+patch::to_string((int)(currVertex+4))+"/4\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)defaultTextureID) + "\n";
				mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)defaultTextureID)+".png"+"\n";
				mtlfile << vertstr;

	polyCount1 += 5;
	currVertex += 8;
#endif;

	} 
#endif;


// Steps without vert. textures
#if 1;
//	if (temp123==0x21) {
//*if ((temp123==0x21)||(temp123==0x22)||(temp123==0x23)||(temp123==0x24)||(temp123==0x25)||(temp123==0x26)||(temp123==0x27)||(temp123==0x28)||(temp123==0x29)||(temp123==0x2A)||(temp123==0x2B)||(temp123==0x2C)||(temp123==0x2D)||(temp123==0x2E)||(temp123==0x2F)) {
	if ((temp123>0x20)&&(temp123<0x30)) { 
//	if ((temp123>0x20)&&(temp123<0x30)) {


	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw floor polygon.
				vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/2 "+patch::to_string((int)(currVertex+3))+"/3 "+patch::to_string((int)(currVertex+4))+"/4\n";
				outfile << vertstr;
		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
#if 1;// Test fix-a
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+patch::to_string((int)tmpvalue)+".png"+"\n";
			mtlfile << vertstr;

	polyCount1 += 1;
	currVertex += 4;
#endif; // Test fix-a
//	goto blankvoxel;
	}
#endif;

	}
		blankvoxel:
		voxCount++;
		}
}
}// LOOP END

#if 1;
			vertstr = "vt 0.000 1.000 0.000  \n";// Floor 
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Floor
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Floor
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Floor
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 1. 
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 1.
			outfile << vertstr;
			vertstr = "vt 0.0625 0.000 0.000  \n";// Height 1.
			outfile << vertstr;
			vertstr = "vt 0.0625 1.000 0.000  \n";// Height 1.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 2.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 2.
			outfile << vertstr;
			vertstr = "vt 0.125 0.000 0.000  \n";// Height 2.
			outfile << vertstr;
			vertstr = "vt 0.125 1.000 0.000  \n";// Height 2.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 3. 
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 3.
			outfile << vertstr;
			vertstr = "vt 0.1875 0.000 0.000  \n";// Height 3.
			outfile << vertstr;
			vertstr = "vt 0.1875 1.000 0.000  \n";// Height 3.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 4.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 4.
			outfile << vertstr;
			vertstr = "vt 0.250 0.000 0.000  \n";// Height 4.
			outfile << vertstr;
			vertstr = "vt 0.250 1.000 0.000  \n";// Height 4.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 5. 
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 5.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Height 5.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Height 5.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 6.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 6.
			outfile << vertstr;
			vertstr = "vt 0.3125 0.000 0.000  \n";// Height 6.
			outfile << vertstr;
			vertstr = "vt 0.3125 1.000 0.000  \n";// Height 6.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 7. 
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 7.
			outfile << vertstr;
			vertstr = "vt 0.375 0.000 0.000  \n";// Height 7.
			outfile << vertstr;
			vertstr = "vt 0.375 1.000 0.000  \n";// Height 7.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 8. 
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 8.
			outfile << vertstr;
			vertstr = "vt 0.4375 0.000 0.000  \n";// Height 8.
			outfile << vertstr;
			vertstr = "vt 0.4375 1.000 0.000  \n";// Height 8.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 9.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 9.
			outfile << vertstr;
			vertstr = "vt 0.500 0.000 0.000  \n";// Height 9.
			outfile << vertstr;
			vertstr = "vt 0.500 1.000 0.000  \n";// Height 9.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 10. 
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 10.
			outfile << vertstr;
			vertstr = "vt 0.5625 0.000 0.000  \n";// Height 10.
			outfile << vertstr;
			vertstr = "vt 0.5625 1.000 0.000  \n";// Height 10.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 11.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 11.
			outfile << vertstr;
			vertstr = "vt 0.625 0.000 0.000  \n";// Height 11.
			outfile << vertstr;
			vertstr = "vt 0.625 1.000 0.000  \n";// Height 11.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 12. 
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 12.
			outfile << vertstr;
			vertstr = "vt 0.6875 0.000 0.000  \n";// Height 12.
			outfile << vertstr;
			vertstr = "vt 0.6875 1.000 0.000  \n";// Height 12.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 13.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 13.
			outfile << vertstr;
			vertstr = "vt 0.750 0.000 0.000  \n";// Height 13.
			outfile << vertstr;
			vertstr = "vt 0.750 1.000 0.000  \n";// Height 13.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 14. 
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 14.
			outfile << vertstr;
			vertstr = "vt 0.8125 0.000 0.000  \n";// Height 14.
			outfile << vertstr;
			vertstr = "vt 0.8125 1.000 0.000  \n";// Height 14.
			outfile << vertstr;

			vertstr = "vt 0.000 1.000 0.000  \n";// Height 15.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Height 15.
			outfile << vertstr;
			vertstr = "vt 0.875 0.000 0.000  \n";// Height 15.
			outfile << vertstr;
			vertstr = "vt 0.875 1.000 0.000  \n";// Height 15.
			outfile << vertstr;

#endif;
// Write materials to mtlfile
// for each unique material:
		vertstr = "newmtl blankvoxel\n"; // always present
			mtlfile << vertstr;
		vertstr = "Kd 0.1 0.1 0.1\n"; //Diffuse
			mtlfile << vertstr;
		vertstr = "d 0.001\n"; // Transparency
			mtlfile << vertstr;

outfile.close();
mtlfile.close();
BuildObjects();// Next - build all objects and enemies
} 
}


//Build Objects
void BuildObjects(void) {

unsigned int wallsBevels1, wallsBevels2;
float gap = float::Parse(textBox42->Text);
int voxCount = 0;
int skippedVoxels = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned int polyCount1 = 0;
unsigned int currVertex = 0;
unsigned long long voxelarr[16384];
int tempFilename = 0;
string FileNameString222;

fstream outfile, mtlfile;

//if (saveFileDialog5->ShowDialog() == System::Windows::Forms::DialogResult::OK)
//     {

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Objects.obj");
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);

pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Objects.mtl"); 
const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
mtlfile.open(path1, ios::out);

std::string str;
std::string str2;
std::string str3;
std::string currN;
std::string vertstr;
// Fill temp array
	for (int p=0; p<16384; p++) {
		 voxelarr[p] = voxelArray[p].value1;
		}



for (int d=0; d<64; d++) { // LOOP START
currRow = d;
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {
			currFloor = s;

progressBar2->Increment(1); // Add
progressBar2->Update();
this->Update();

_ULonglong temp = voxelArray[voxCount].value1;
_ULonglong temp123 = 0;
temp123 = ValueSelector(voxelArray[voxCount].value1, 7); //Objects value //

/////////////**************//////////////////////********** 
#if 1;
wallsBevels1 = ValueSelector(voxelArray[voxCount].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[voxCount].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cube's N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
cubeNinDataFile = Convert::ToInt32(systemString111, 16);
#endif;
/////////////**************//////////////////////**********
String ^ LevelName3;
LevelName3 = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
FileNameString222 = context.marshal_as<std::string>(LevelName3);

int tmpvalue = 0;
tmpvalue = temp123;

if 	((temp == 0xff00000000000000)&&(checkBox1->CheckState == CheckState::Unchecked)) {
				skippedVoxels++;
				goto blankvoxel;
				}

if (temp123 != 0xFF) { // If something present

/// Difficulty????


// Whole vertexes
#if 1;// Turn on all vertices.

if ((temp123>=0)&&(temp123<=0x2F)) { //It's enemy

#if 1; //Filter
	if ((temp123>=0)&&(temp123<=0xF)) { // Enemy type 1
		String ^ path11111 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimEnemies\\0\\8";
		std::string stdString3 = msclr::interop::marshal_as<std::string>(path11111); //String^ to std
		const char *c3 = stdString3.c_str();

			if (access(c3, 0) == -1) { // If texture file not found.
				goto blankvoxel;
			}
		}

	if ((temp123>=0x10)&&(temp123<=0x1F)) { // Enemy type 2
		String ^ path11111 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimEnemies\\1\\8";
		std::string stdString3 = msclr::interop::marshal_as<std::string>(path11111); //String^ to std
		const char *c3 = stdString3.c_str();

			if (access(c3, 0) == -1) { // If texture file not found.
				goto blankvoxel;
			}	
		}

	if ((temp123>=0x20)&&(temp123<=0x2F)) { // Enemy type 3
		String ^ path11111 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimEnemies\\2\\8";
		std::string stdString3 = msclr::interop::marshal_as<std::string>(path11111); //String^ to std
		const char *c3 = stdString3.c_str();

			if (access(c3, 0) == -1) { // If texture file not found.
				goto blankvoxel;
			}	
		}
#endif;

		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Enemy\n";
			outfile << vertstr;

#if 1;
float maxTexSize2 = 128;
float percentIntheBox2; // SCALE. size in the cube
float xSize2, ySize2, proportion2 = 0; 
unsigned int levelN2, lengthName2 = 0; 
String ^ name2 = "";
name2 = (System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
lengthName2 = name2->Length;

if (lengthName2 > 2) {
	//levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
} else {
	levelN2 = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
}


percentIntheBox2 = 0.9;

float z, x1, x2, zPos2;
	z = 0;
	x1 = 0;
	x2 = 0;
	zPos2 = 0;

		xSize2 = 128; //Defaults
		ySize2 = 128; //Defaults

if ((temp123>=0)&&(temp123<=0xF)) { // Enemy type 1.
//		if ((name2=="1")||(name2=="2")) {
		if ((name2=="5")||(name2=="12")||(name2=="23")) {
			xSize2 = 200;
			ySize2 = 200;
			zPos2 = 0;
//			zPos2 = 1-ySize2*percentIntheBox2/maxTexSize2;
		}
	}

if ((temp123>=0x10)&&(temp123<=0x1F)) { // Enemy type 2.

}

if ((temp123>=0x20)&&(temp123<=0x2F)) { // Enemy type 3.

}
#endif;

proportion2 = xSize2*percentIntheBox2/maxTexSize2; // Calculate enemy size
	z = ySize2*percentIntheBox2/maxTexSize2;
	x1 = (1-proportion2)/2;
	x2 = 1-(1-proportion2)/2;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap+x1) + " " + patch::to_string(currCol+gap+x1) + " "  + patch::to_string(-currFloor+1-gap-z-zPos2) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap+x1) + " " + patch::to_string(currCol+x2-gap) + " "  + patch::to_string(-currFloor+1-gap-z-zPos2) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+x2-gap) + " " + patch::to_string(currCol+x2-gap) + " "  + patch::to_string(-currFloor+1-gap-z-zPos2) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+x2-gap) + " " + patch::to_string(currCol+gap+x1) + " "  + patch::to_string(-currFloor+1-gap-z-zPos2) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap+x1) + " " + patch::to_string(currCol+gap+x1) + " "  + patch::to_string(-currFloor+1-gap-zPos2) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap+x1) + " " + patch::to_string(currCol+x2-gap) + " "  + patch::to_string(-currFloor+1-gap-zPos2) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+x2-gap) + " " + patch::to_string(currCol+x2-gap) + " "  + patch::to_string(-currFloor+1-gap-zPos2) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+x2-gap) + " " + patch::to_string(currCol+gap+x1) + " "  + patch::to_string(-currFloor+1-gap-zPos2) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;

#if 0;
		// v1 
			vertstr = "v " + patch::to_string(currRow+gap+0.1) + " " + patch::to_string(currCol+gap+0.1) + " "  + patch::to_string(-currFloor+1-gap-0.9) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap+0.1) + " " + patch::to_string(currCol+0.9-gap) + " "  + patch::to_string(-currFloor+1-gap-0.9) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+0.9-gap) + " " + patch::to_string(currCol+0.9-gap) + " "  + patch::to_string(-currFloor+1-gap-0.9) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+0.9-gap) + " " + patch::to_string(currCol+gap+0.1) + " "  + patch::to_string(-currFloor+1-gap-0.9) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap+0.1) + " " + patch::to_string(currCol+gap+0.1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap+0.1) + " " + patch::to_string(currCol+0.9-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+0.9-gap) + " " + patch::to_string(currCol+0.9-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+0.9-gap) + " " + patch::to_string(currCol+gap+0.1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;
#endif;
		}




if ((temp123>=0x30)&&(temp123<=0x4F)) { //It's decor

#if 1;//Filter
	if ((temp123>=0x30)&&(temp123<=0x37)) { // Decor type 1
		String ^ path111112 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimObj\\0\\0";
		std::string stdString32 = msclr::interop::marshal_as<std::string>(path111112); //String^ to std
		const char *c32 = stdString32.c_str();

			if (access(c32, 0) == -1) { // If texture file not found.
				goto blankvoxel;
			}
	}

	if ((temp123>=0x38)&&(temp123<=0x3F)) { // Decor type 2
		String ^ path111112 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimObj\\1\\0";
		std::string stdString32 = msclr::interop::marshal_as<std::string>(path111112); //String^ to std
		const char *c32 = stdString32.c_str();

			if (access(c32, 0) == -1) { // If texture file not found.
				goto blankvoxel;
			}
	}

	if ((temp123>=0x40)&&(temp123<=0x47)) { // Decor type 3
		String ^ path111112 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimObj\\2\\0";
		std::string stdString32 = msclr::interop::marshal_as<std::string>(path111112); //String^ to std
		const char *c32 = stdString32.c_str();

			if (access(c32, 0) == -1) { // If texture file not found.
				goto blankvoxel;
			}
	}

	if ((temp123>=0x48)&&(temp123<=0x4F)) { // Decor type 4
		String ^ path111112 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\AnimObj\\3\\0";
		std::string stdString32 = msclr::interop::marshal_as<std::string>(path111112); //String^ to std
		const char *c32 = stdString32.c_str();

			if (access(c32, 0) == -1) { // If texture file not found.
				goto blankvoxel;
			}
	}
#endif;

		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Decor\n";
			outfile << vertstr;

			
// Decor SCALE filter
#if 1;
float maxTexSize1 = 128;
float percentIntheBox1; // SCALE. size in the cube
float xSize1, ySize1, proportion1 = 0; 
unsigned int levelN1, lengthName = 0; 
String ^ name = "";
name = (System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
lengthName = name->Length;

if (lengthName > 2) {
	//levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
} else {
	levelN1 = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
}


percentIntheBox1 = 1;

float zz, x11, x22, zPos1;
	zz = 0;
	x11 = 0;
	x22 = 0;
	zPos1 = 0;


if ((temp123>=0x30)&&(temp123<=0x37)) { // Decor type 1.
		if ((name=="1")||(name=="2")) {
			xSize1 = 37;
			ySize1 = 43;
			zPos1 = 1-ySize1*percentIntheBox1/maxTexSize1;
		}
		if ((name=="3")||(name=="6")||(name=="11a")||(name=="11b")||(name=="11c")||(name=="11")||(name=="11d")||(name=="11e")||(name=="12")||(name=="23")) {
			xSize1 = 128;
			ySize1 = 128;
			zPos1 = 0;
		}
		if (name=="4") {
			xSize1 = 120;
			ySize1 = 112;
			zPos1 = 0;
		}
		if (name=="5") {
			xSize1 = 48;
			ySize1 = 128;
			zPos1 = 0;
		}
		if (name=="7") {
			xSize1 = 102;
			ySize1 = 95;
			zPos1 = 0;
		}
		if ((name=="8")||(name=="10")) {
			xSize1 = 66;
			ySize1 = 128;
			zPos1 = 0;
		}
		if (name=="9") {
			xSize1 = 62;
			ySize1 = 128;
			zPos1 = 0;
		}
		if ((name=="13")||(name=="14")||(name=="15")||(name=="16")||(name=="17")||(name=="18")||(name=="19")) {
			xSize1 = 91;
			ySize1 = 112;
			zPos1 = 0;
		}
		if ((name=="20")||(name=="21")) {
			xSize1 = 126;
			ySize1 = 71;
			zPos1 = 0;
		}
		if (name=="22") {
			xSize1 = 90;
			ySize1 = 125;
			zPos1 = 0;
		}

	}

if ((temp123>=0x38)&&(temp123<=0x3F)) { // Decor type 2.
		if (name=="1") {
			xSize1 = 56;
			ySize1 = 101;
			zPos1 = 0;
		}
		if ((name=="2")||(name=="3")) {
			xSize1 = 62;
			ySize1 = 128;
			zPos1 = 0;
		}
		if (name=="5") {
			xSize1 = 58;
			ySize1 = 105;
			zPos1 = 0;
		}
		if ((name=="6")||(name=="9")||(name=="10")) {
			xSize1 = 128;
			ySize1 = 128;
			zPos1 = 0;
		}
		if (name=="7") {
			xSize1 = 96;
			ySize1 = 106;
			zPos1 = 0;
		}
		if (name=="8") {
			xSize1 = 117;
			ySize1 = 95;
			zPos1 = 0;
		}
		if ((name=="11a")||(name=="11b")||(name=="11c")||(name=="11")||(name=="11d")||(name=="11e")) {
			xSize1 = 82;
			ySize1 = 124;
			zPos1 = 0;
		}
		if (name=="23") {
			xSize1 = 94;
			ySize1 = 128;
			zPos1 = 0;
		}

}

if ((temp123>=0x40)&&(temp123<=0x47)) { // Decor type 3.
		if ((name=="5")||(name=="7")) {
			xSize1 = 128;
			ySize1 = 128;
			zPos1 = 0;
		}
		if (name=="6") {
			xSize1 = 66;
			ySize1 = 128;
			zPos1 = 0;
		}
		if (name=="10") {
			xSize1 = 117;
			ySize1 = 95;
			zPos1 = 0;
		}
		if ((name=="11a")||(name=="11b")||(name=="11c")||(name=="11")||(name=="11d")||(name=="11e")) {
			xSize1 = 98;
			ySize1 = 107;
			zPos1 = 1-ySize1*percentIntheBox1/maxTexSize1;
		}

}

if ((temp123>=0x48)&&(temp123<=0x4F)) { // Decor type 4.
		if (name=="6") {
			xSize1 = 117;
			ySize1 = 95;
			zPos1 = 0;
		}
		if (name=="11") {
			xSize1 = 128;
			ySize1 = 128;
			zPos1 = 0;
		}
}
#endif;

proportion1 = xSize1*percentIntheBox1/maxTexSize1; // Calculate decor size
	zz = ySize1*percentIntheBox1/maxTexSize1;
	x11 = (1-proportion1)/2;
	x22 = 1-(1-proportion1)/2;

		// v1 
			vertstr = "v " + patch::to_string(currRow+gap+x11) + " " + patch::to_string(currCol+gap+x11) + " "  + patch::to_string(-currFloor+1-gap-zz-zPos1) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap+x11) + " " + patch::to_string(currCol+x22-gap) + " "  + patch::to_string(-currFloor+1-gap-zz-zPos1) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+x22-gap) + " " + patch::to_string(currCol+x22-gap) + " "  + patch::to_string(-currFloor+1-gap-zz-zPos1) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+x22-gap) + " " + patch::to_string(currCol+gap+x11) + " "  + patch::to_string(-currFloor+1-gap-zz-zPos1) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap+x11) + " " + patch::to_string(currCol+gap+x11) + " "  + patch::to_string(-currFloor+1-gap-zPos1) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap+x11) + " " + patch::to_string(currCol+x22-gap) + " "  + patch::to_string(-currFloor+1-gap-zPos1) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+x22-gap) + " " + patch::to_string(currCol+x22-gap) + " "  + patch::to_string(-currFloor+1-gap-zPos1) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+x22-gap) + " " + patch::to_string(currCol+gap+x11) + " "  + patch::to_string(-currFloor+1-gap-zPos1) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;

#if 0;
		// v1 
			vertstr = "v " + patch::to_string(currRow+gap+0.3) + " " + patch::to_string(currCol+gap+0.3) + " "  + patch::to_string(-currFloor+1-gap-0.4) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap+0.3) + " " + patch::to_string(currCol+0.7-gap) + " "  + patch::to_string(-currFloor+1-gap-0.4) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+0.7-gap) + " " + patch::to_string(currCol+0.7-gap) + " "  + patch::to_string(-currFloor+1-gap-0.4) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+0.7-gap) + " " + patch::to_string(currCol+gap+0.3) + " "  + patch::to_string(-currFloor+1-gap-0.4) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap+0.3) + " " + patch::to_string(currCol+gap+0.3) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap+0.3) + " " + patch::to_string(currCol+0.7-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+0.7-gap) + " " + patch::to_string(currCol+0.7-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+0.7-gap) + " " + patch::to_string(currCol+gap+0.3) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;
#endif;
}



if ((temp123>=0x50)&&(temp123<=0xC3)) { //It's items 

#if 1;// Filter
		String ^ path111113 = System::IO::Path::GetDirectoryName(Application::ExecutablePath) + "\\Textures3DO\\" + System::IO::Path::GetFileName(openFileDialog1->SafeFileName) + "data\\Objects\\" + temp123;
		std::string stdString33 = msclr::interop::marshal_as<std::string>(path111113); //String^ to std
		const char *c33 = stdString33.c_str();

			if (access(c33, 0) == -1) { // If texture file not found.
				goto blankvoxel;
			}
#endif;

		vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;
			vertstr = "# Item ID = "+ patch::to_string(temp123) + "\n";
			outfile << vertstr;

//OBJECT SIZE SUPPORT
// ITEMS (all sizes)
#if 1;
float maxTexSize = 128;
float percentIntheBox; // SCALE. max object size in the cube
float xSize, ySize, proportion = 0; 

percentIntheBox = float::Parse(textBox52->Text)/100;

float zzz, x111, x222;
	zzz = 0;
	x111 = 0;
	x222 = 0;

	if (temp123==0x50) { // Feast
		xSize = 119;
		ySize = 82;
//			zzz = 0.51;
//			x111 = 0.13;
//			x222 = 0.87;
			}
	if (temp123==0x51) { // Not used by the game. Only on level 6. No item appeared
		xSize = 50; // Just as random
		ySize = 50;	// Just as random
//			zzz = 0.5;
//			x111 = 0.3;
//			x222 = 0.7;
			}
	if (temp123==0x52) { // Dwarven Key, Tower Key, Fortress Key
		xSize = 112;
		ySize = 30;
//			zzz = 0.19;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0x53) { // Ancestral artifact RED
		xSize = 128;
		ySize = 128;
//			zzz = 0.8;
//			x111 = 0.1;
//			x222 = 0.9;
			}
	if (temp123==0x54) { // Ancestral artifact GREEN
		xSize = 128;
		ySize = 128;
//			zzz = 0.8;
//			x111 = 0.1;
//			x222 = 0.9;
			}
	if (temp123==0x55) { // Ancestral artifact BLUE
		xSize = 128;
		ySize = 128;
//			zzz = 0.8;
//			x111 = 0.1;
//			x222 = 0.9;
			}
	if (temp123==0x56) { // Rations
		xSize = 110;
		ySize = 77;
//			zzz = 0.48;
//			x111 = 0.16;
//			x222 = 0.84;
			}
	if (temp123==0x57) { // Healing potion
		xSize = 81;
		ySize = 121;
//			zzz = 0.76;
//			x111 = 0.25;
//			x222 = 0.75;
			}
	if (temp123==0x58) { // Potion of speed
		xSize = 51;
		ySize = 92;
//			zzz = 0.58;
//			x111 = 0.34;
//			x222 = 0.66;
			}
	if (temp123==0x59) { // Scroll of Acid protection
		xSize = 122;
		ySize = 21;
//			zzz = 0.13;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x5A) { // Rock
		xSize = 43;
		ySize = 23;
//			zzz = 0.14;
//			x111 = 0.63;
//			x222 = 0.37;
			}
	if (temp123==0x5B) { // Dart
		xSize = 81;
		ySize = 29;
//			zzz = 0.18;
//			x111 = 0.25;
//			x222 = 0.75;
			}
	if (temp123==0x5C) { // Scrying Glass
		xSize = 91;
		ySize = 39;
//			zzz = 0.24;
//			x111 = 0.22;
//			x222 = 0.78;
			}
	if (temp123==0x5D) { // Orb of Lighting
		xSize = 76;
		ySize = 120;
//			zzz = 0.75;
//			x111 = 0.26;
//			x222 = 0.74;
			}
	if (temp123==0x5E) { // Wand of Fear
		xSize = 125;
		ySize = 30;
//			zzz = 0.19;
//			x111 = 0.11;
//			x222 = 0.89;
			}
	if (temp123==0x5F) { // Winged Boots
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}

	if (temp123==0x60) { // Helm
		xSize = 82;
		ySize = 91;
//			zzz = 0.57;
//			x111 = 0.24;
//			x222 = 0.76;
			}
	if (temp123==0x61) { // Bracers
		xSize = 108;
		ySize = 54;
//			zzz = 0.34;
//			x111 = 0.16;
//			x222 = 0.84;
			}
	if (temp123==0x62) { // Ring of Flying
		xSize = 44;
		ySize = 23;
//			zzz = 0.14;
//			x111 = 0.36;
//			x222 = 0.64;
			}
	if (temp123==0x63) { // Ring of Protection
		xSize = 50;
		ySize = 34;
//			zzz = 0.21;
//			x111 = 0.34;
//			x222 = 0.66;
			}
	if (temp123==0x64) { // Amulet of magic resistance (round)
		xSize = 84;
		ySize = 81;
//			zzz = 0.51;
//			x111 = 0.24;
//			x222 = 0.76;
			}
	if (temp123==0x65) { // Amulet of imminent return (knife type)
		xSize = 93;
		ySize = 43;
//			zzz = 0.27;
//			x111 = 0.21;
//			x222 = 0.79;
			}
	if (temp123==0x66) { // Dagger
		xSize = 67;
		ySize = 11;
//			zzz = 0.07;
//			x111 = 0.29;
//			x222 = 0.71;
			}
	if (temp123==0x67) { // Long Sword
		xSize = 119;
		ySize = 36;
//			zzz = 0.23;
//			x111 = 0.13;
//			x222 = 0.87;
			}
	if (temp123==0x68) { // Longbow
		xSize = 122;
		ySize = 24;
//			zzz = 0.15;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x69) { // Spellbook
		xSize = 118;
		ySize = 60;
//			zzz = 0.38;
//			x111 = 0.13;
//			x222 = 0.87;
			}
	if (temp123==0x6A) { // Cloak
		xSize = 125;
		ySize = 28;
//			zzz = 0.18;
//			x111 = 0.11;
//			x222 = 0.89;
			}
	if (temp123==0x6B) { // Chain Mail
		xSize = 121;
		ySize = 119;
//			zzz = 0.74;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x6C) { // Scroll Spell
		xSize = 116;
		ySize = 42;
//			zzz = 0.26;
//			x111 = 0.14;
//			x222 = 0.86;
			}
	if (temp123==0x6D) { // Defender Sword
		xSize = 121;
		ySize = 30;
//			zzz = 0.19;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x6E) { // Vorpal Sword
		xSize = 121;
		ySize = 25;
//			zzz = 0.16;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x6F) { // Battle Axe
		xSize = 125;
		ySize = 82;
//			zzz = 0.51;
//			x111 = 0.11;
//			x222 = 0.89;
			}

	if (temp123==0x70) { // Hammer		
		xSize = 111;
		ySize = 66;
//			zzz = 0.41;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0x71) { // Staff
		xSize = 122;
		ySize = 9;
//			zzz = 0.06;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x72) { // Sling
		xSize = 111;
		ySize = 46;
//			zzz = 0.29;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0x73) { // Arrow
		xSize = 118;
		ySize = 14;
//			zzz = 0.09;
//			x111 = 0.13;
//			x222 = 0.87;
			}
	if (temp123==0x74) { // Gauntlets
		xSize = 113;
		ySize = 46;
//			zzz = 0.29;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0x75) { // Shield
		xSize = 107;
		ySize = 39;
//			zzz = 0.24;
//			x111 = 0.17;
//			x222 = 0.83;
			}
	if (temp123==0x76) { // Flame Tongue
		xSize = 126;
		ySize = 35;
//			zzz = 0.22;
//			x111 = 0.11;
//			x222 = 0.89;
			}
	if (temp123==0x77) { // Crossbow
		xSize = 115;
		ySize = 82;
//			zzz = 0.51;
//			x111 = 0.14;
//			x222 = 0.86;
			}
	if (temp123==0x78) { //// Not used by the game
		xSize = 1;
		ySize = 1;
//			zzz = 0;
//			x111 = 0;
//			x222 = 0;
			}
	if (temp123==0x79) { //// Not used by the game
		xSize = 1;
		ySize = 1;
//			zzz = 0;
//			x111 = 0;
//			x222 = 0;
			}
	if (temp123==0x7A) { // Amulet of Power
		xSize = 84;
		ySize = 81;
//			zzz = 0.51;
//			x111 = 0.24;
//			x222 = 0.74;
			}
	if (temp123==0x7B) { // Book of Spell Doubling
		xSize = 118;
		ySize = 60;
//			zzz = 0.38;
//			x111 = 0.13;
//			x222 = 0.87;
			}
	if (temp123==0x7C) { // Extra Healing potion
		xSize = 81;
		ySize = 121;
//			zzz = 0.76;
//			x111 = 0.25;
//			x222 = 0.75;
			}
	if (temp123==0x7D) { // Poison
		xSize = 81;
		ySize = 121;
//			zzz = 0.76;
//			x111 = 0.25;
//			x222 = 0.75;
			}
	if (temp123==0x7E) { // Potion of Cure Poison
		xSize = 81;
		ySize = 121;
//			zzz = 0.76;
//			x111 = 0.25;
//			x222 = 0.75;
			}
	if (temp123==0x7F) { // Water
		xSize = 81;
		ySize = 121;
//			zzz = 0.76;
//			x111 = 0.25;
//			x222 = 0.75;
			}

	if (temp123==0x80) { // Potion of Invulnerability
		xSize = 51;
		ySize = 92;
//			zzz = 0.58;
//			x111 = 0.34;
//			x222 = 0.66;
			}
	if (temp123==0x81) { // Scroll of Hurling
		xSize = 122;
		ySize = 21;
//			zzz = 0.13;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x82) { // Potion of Flying
		xSize = 51;
		ySize = 92;
//			zzz = 0.58;
//			x111 = 0.34;
//			x222 = 0.66;
			}
	if (temp123==0x83) { // Potion of Heroism
		xSize = 51;
		ySize = 92;
//			zzz = 0.58;
//			x111 = 0.34;
//			x222 = 0.66;
			}
	if (temp123==0x84) { // Potion of Super-Heroism
		xSize = 51;
		ySize = 92;
//			zzz = 0.58;
//			x111 = 0.34;
//			x222 = 0.66;
			}
	if (temp123==0x85) { // Potion of Invisibility
		xSize = 51;
		ySize = 92;
//			zzz = 0.58;
//			x111 = 0.34;
//			x222 = 0.66;
			}
	if (temp123==0x86) { // Potion of Hill Giant Strength
		xSize = 51;
		ySize = 92;
//			zzz = 0.58;
//			x111 = 0.34;
//			x222 = 0.66;
			}
	if (temp123==0x87) { // Potion of Storm Giant Strength
		xSize = 51;
		ySize = 92;
//			zzz = 0.58;
//			x111 = 0.34;
//			x222 = 0.66;
			}
	if (temp123==0x88) { // Lightining Staff
		xSize = 122;
		ySize = 9;
//			zzz = 0.06;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x89) { // Staff of Striking
		xSize = 122;
		ySize = 9;
//			zzz = 0.06;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x8A) { // Ring of Invisibility
		xSize = 44;
		ySize = 23;
//			zzz = 0.14;
//			x111 = 0.36;
//			x222 = 0.64;
			}
	if (temp123==0x8B) { // Ring of Regeneration
		xSize = 44;
		ySize = 23;
//			zzz = 0.14;
//			x111 = 0.36;
//			x222 = 0.64;
			}
	if (temp123==0x8C) { // Ring of Sustenance
		xSize = 44;
		ySize = 23;
//			zzz = 0.14;
//			x111 = 0.36;
//			x222 = 0.64;
			}
	if (temp123==0x8D) { // Ring of Weakness
		xSize = 44;
		ySize = 23;
//			zzz = 0.14;
//			x111 = 0.36;
//			x222 = 0.64;
			}
	if (temp123==0x8E) { // Ring of Wisardry
		xSize = 44;
		ySize = 23;
//			zzz = 0.14;
//			x111 = 0.36;
//			x222 = 0.64;
			}
	if (temp123==0x8F) { //// Not used by the game
		xSize = 1;
		ySize = 1;
//			zzz = 0;
//			x111 = 0;
//			x222 = 0;
			}

	if (temp123==0x90) { // Plate Mail
		xSize = 121;
		ySize = 119;
//			zzz = 0.74;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x91) { // Ring Mail
		xSize = 121;
		ySize = 119;
//			zzz = 0.74;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x92) { // Scale Mail
		xSize = 121;
		ySize = 119;
//			zzz = 0.74;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x93) { // Two-Handed Sword
		xSize = 119;
		ySize = 36;
//			zzz = 0.23;
//			x111 = 0.13;
//			x222 = 0.87;
			}
	if (temp123==0x94) { // Axe of Hurling
		xSize = 125;
		ySize = 82;
//			zzz = 0.51;
//			x111 = 0.11;
//			x222 = 0.89;
			}
	if (temp123==0x95) { // Dwarven Lord's Deathstriker
		xSize = 125;
		ySize = 82;
//			zzz = 0.51;
//			x111 = 0.11;
//			x222 = 0.89;
			}
	if (temp123==0x96) { // Storm Hammer
		xSize = 111;
		ySize = 66;
//			zzz = 0.41;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0x97) { // Dwarven Thrower II
		xSize = 111;
		ySize = 66;
//			zzz = 0.41;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0x98) { // Dagger of return 
		xSize = 67;
		ySize = 11;
//			zzz = 0.07;
//			x111 = 0.29;
//			x222 = 0.71;
			}
	if (temp123==0x99) { // Chill Blade
		xSize = 67;
		ySize = 11;
//			zzz = 0.07;
//			x111 = 0.29;
//			x222 = 0.71;
			}
	if (temp123==0x9A) { // Vampire Fang
		xSize = 67;
		ySize = 11;
//			zzz = 0.07;
//			x111 = 0.29;
//			x222 = 0.71;
			}
	if (temp123==0x9B) { // Luck Blade
		xSize = 119;
		ySize = 36;
//			zzz = 0.23;
//			x111 = 0.13;
//			x222 = 0.87;
			}
	if (temp123==0x9C) { // Crossbow of Accuracy
		xSize = 115;
		ySize = 82;
//			zzz = 0.51;
//			x111 = 0.14;
//			x222 = 0.86;
			}
	if (temp123==0x9D) { // Crossbow of Doubling
		xSize = 115;
		ySize = 82;
//			zzz = 0.51;
//			x111 = 0.14;
//			x222 = 0.86;
			}
	if (temp123==0x9E) { // Bow of Neverending Arrows
		xSize = 122;
		ySize = 24;
//			zzz = 0.15;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0x9F) { // Firebow
		xSize = 122;
		ySize = 24;
//			zzz = 0.15;
//			x111 = 0.12;
//			x222 = 0.88;
			}

	if (temp123==0xA0) { // Dart of Homing
		xSize = 81;
		ySize = 19;
//			zzz = 0.12;
//			x111 = 0.25;
//			x222 = 0.75;
			}
	if (temp123==0xA1) { // Bracers of Archery
		xSize = 108;
		ySize = 54;
//			zzz = 0.34;
//			x111 = 0.16;
//			x222 = 0.84;
			}
	if (temp123==0xA2) { // Bracers of Defense
		xSize = 108;
		ySize = 54;
//			zzz = 0.34;
//			x111 = 0.16;
//			x222 = 0.84;
			}
	if (temp123==0xA3) { // Sling of Seeking
		xSize = 111;
		ySize = 46;
//			zzz = 0.29;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0xA4) { // Fire Slinger
		xSize = 111;
		ySize = 46;
//			zzz = 0.29;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0xA5) { // Fire Sling of Doubling
		xSize = 111;
		ySize = 46;
//			zzz = 0.29;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0xA6) { // Gauntlets of Dexterity
		xSize = 113;
		ySize = 46;
//			zzz = 0.29;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0xA7) { // Gauntlets of Ogre Power
		xSize = 113;
		ySize = 46;
//			zzz = 0.29;
//			x111 = 0.15;
//			x222 = 0.85;
			}
	if (temp123==0xA8) { // Scroll of Electricity protection
		xSize = 122;
		ySize = 21;
//			zzz = 0.13;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0xA9) { // Scroll of Cold protection
		xSize = 122;
		ySize = 21;
//			zzz = 0.13;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0xAA) { // Scroll of Fire protection
		xSize = 122;
		ySize = 21;
//			zzz = 0.13;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0xAB) { // Scroll of Gas protection
		xSize = 122;
		ySize = 21;
//			zzz = 0.13;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0xAC) { // Scroll of Magic protection
		xSize = 122;
		ySize = 21;
//			zzz = 0.13;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0xAD) { // Scroll of Poison protection
		xSize = 122;
		ySize = 21;
//			zzz = 0.13;
//			x111 = 0.12;
//			x222 = 0.88;
			}
	if (temp123==0xAE) { // Boots of Ice Walking
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xAF) { // Boots of Ooze Walking
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}

	if (temp123==0xB0) { // Boots of Lava Walking
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xB1) { // Boots of Goop Walking
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xB2) { // Boots of Acid Walking		
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xB3) { // Boots of Ether Walking
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xB4) { // Boots of Artery Walking
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xB5) { // Boots of Vein Walking
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xB6) { // Boots of Dirt Walking
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xB7) { //// Not used by the game
		xSize = 1;
		ySize = 1;
//			zzz = 0;
//			x111 = 0;
//			x222 = 0;
			}
	if (temp123==0xB8) { // Boots of Leaping		
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xB9) { // Boots of Door Bashing
		xSize = 85;
		ySize = 74;
//			zzz = 0.46;
//			x111 = 0.23;
//			x222 = 0.77;
			}
	if (temp123==0xBA) { //// Not used by the game
		xSize = 1;
		ySize = 1;
//			zzz = 0;
//			x111 = 0;
//			x222 = 0;
			}
	if (temp123==0xBB) { // Wand of Fire
		xSize = 125;
		ySize = 30;
//			zzz = 0.19;
//			x111 = 0.11;
//			x222 = 0.89;
			}
	if (temp123==0xBC) { // Wand of Frost
		xSize = 125;
		ySize = 30;
//			zzz = 0.19;
//			x111 = 0.11;
//			x222 = 0.89;
			}
	if (temp123==0xBD) { // Wand of Lightning		
		xSize = 125;
		ySize = 30;
//			zzz = 0.19;
//			x111 = 0.11;
//			x222 = 0.89;
			}
	if (temp123==0xBE) { // Wand of Magic Missiles
		xSize = 125;
		ySize = 30;
//			zzz = 0.19;
//			x111 = 0.11;
//			x222 = 0.89;
			}
	if (temp123==0xBF) { // Wand of Paralysis
		xSize = 125;
		ySize = 30;
//			zzz = 0.19;
//			x111 = 0.11;
//			x222 = 0.89;
			}

	if (temp123==0xC0) { // Orb of Fire Storms
		xSize = 76;
		ySize = 120;
//			zzz = 0.75;
//			x111 = 0.24;
//			x222 = 0.76;
			}
	if (temp123==0xC1) { // Orb of True Seeing
		xSize = 76;
		ySize = 120;
//			zzz = 0.75;
//			x111 = 0.24;
//			x222 = 0.76;
			}
	if (temp123==0xC2) { // Orb of Magic Missiles
		xSize = 76;
		ySize = 120;
//			zzz = 0.75;
//			x111 = 0.24;
//			x222 = 0.76;
			}
	if (temp123==0xC3) { // Orb of Flame Strikes
		xSize = 76;
		ySize = 120;
//			zzz = 0.75;
//			x111 = 0.24;
//			x222 = 0.76;
			}
#endif; // ITEMS (all sizes)

proportion = xSize*percentIntheBox/maxTexSize; // Calculate object size
	zzz = ySize*percentIntheBox/maxTexSize;
	x111 = (1-proportion)/2;
	x222 = 1-(1-proportion)/2;

#if 1;
		// v1 
			vertstr = "v " + patch::to_string(currRow+gap+x111) + " " + patch::to_string(currCol+gap+x111) + " "  + patch::to_string(-currFloor+1-gap-zzz) + "\n";
			outfile << vertstr;
		// v2 
			vertstr = "v " + patch::to_string(currRow+gap+x111) + " " + patch::to_string(currCol+x222-gap) + " "  + patch::to_string(-currFloor+1-gap-zzz) + "\n";
			outfile << vertstr;
		// v3 
			vertstr = "v " + patch::to_string(currRow+x222-gap) + " " + patch::to_string(currCol+x222-gap) + " "  + patch::to_string(-currFloor+1-gap-zzz) + "\n";
			outfile << vertstr;
		// v4 
			vertstr = "v " + patch::to_string(currRow+x222-gap) + " " + patch::to_string(currCol+gap+x111) + " "  + patch::to_string(-currFloor+1-gap-zzz) + "\n";
			outfile << vertstr;

		// v5 
			vertstr = "v " + patch::to_string(currRow+gap+x111) + " " + patch::to_string(currCol+gap+x111) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v6 
			vertstr = "v " + patch::to_string(currRow+gap+x111) + " " + patch::to_string(currCol+x222-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v7 
			vertstr = "v " + patch::to_string(currRow+x222-gap) + " " + patch::to_string(currCol+x222-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v8 
			vertstr = "v " + patch::to_string(currRow+x222-gap) + " " + patch::to_string(currCol+gap+x111) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;

		// Go to draw a polygon, and to the next voxel	
		goto drawpolygon;	
#endif;
		}
#endif;
}


// POLYGONS
drawpolygon:
#if 1;
	if (temp123 !=0xFF) { 

		if ((temp123>=0)&&(temp123<=0xF)) { //It's enemy. Type 1

		vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
			outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/4 "+patch::to_string((int)(currVertex+6))+"/3 "+patch::to_string((int)(currVertex+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(currVertex+2))+"/1 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+7))+"/3 "+patch::to_string((int)(currVertex+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/4 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(currVertex+4))+"/1 "+patch::to_string((int)(currVertex+1))+"/4 "+patch::to_string((int)(currVertex+5))+"/3 "+patch::to_string((int)(currVertex+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+ "AnimEnemies\\0\\8.png" + "\n";
			mtlfile << vertstr;

	polyCount1 += 4;
	currVertex += 8;
	goto blankvoxel;
		}


	if ((temp123>=10)&&(temp123<=0x1F)) { //It's enemy. Type 2

		vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
			outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/4 "+patch::to_string((int)(currVertex+6))+"/3 "+patch::to_string((int)(currVertex+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(currVertex+2))+"/1 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+7))+"/3 "+patch::to_string((int)(currVertex+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/4 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(currVertex+4))+"/1 "+patch::to_string((int)(currVertex+1))+"/4 "+patch::to_string((int)(currVertex+5))+"/3 "+patch::to_string((int)(currVertex+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+ "AnimEnemies\\1\\8.png" + "\n";
			mtlfile << vertstr;

	polyCount1 += 4;
	currVertex += 8;
	goto blankvoxel;
		}


	if ((temp123>=20)&&(temp123<=0x2F)) { //It's enemy. Type 3

		vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
			outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/4 "+patch::to_string((int)(currVertex+6))+"/3 "+patch::to_string((int)(currVertex+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(currVertex+2))+"/1 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+7))+"/3 "+patch::to_string((int)(currVertex+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/4 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(currVertex+4))+"/1 "+patch::to_string((int)(currVertex+1))+"/4 "+patch::to_string((int)(currVertex+5))+"/3 "+patch::to_string((int)(currVertex+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+ "AnimEnemies\\2\\8.png" + "\n";
			mtlfile << vertstr;

	polyCount1 += 4;
	currVertex += 8;
	goto blankvoxel;
		}


if ((temp123>=0x30)&&(temp123<=0x37)) { //It's decor, type 1

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/4 "+patch::to_string((int)(currVertex+6))+"/3 "+patch::to_string((int)(currVertex+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(currVertex+2))+"/1 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+7))+"/3 "+patch::to_string((int)(currVertex+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/4 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(currVertex+4))+"/1 "+patch::to_string((int)(currVertex+1))+"/4 "+patch::to_string((int)(currVertex+5))+"/3 "+patch::to_string((int)(currVertex+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+ "AnimObj\\0\\0.png" + "\n";
			mtlfile << vertstr;

	polyCount1 += 4;
	currVertex += 8;
	goto blankvoxel;
	}


if ((temp123>=0x38)&&(temp123<=0x3F)) { //It's decor, type 2

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/4 "+patch::to_string((int)(currVertex+6))+"/3 "+patch::to_string((int)(currVertex+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(currVertex+2))+"/1 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+7))+"/3 "+patch::to_string((int)(currVertex+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/4 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(currVertex+4))+"/1 "+patch::to_string((int)(currVertex+1))+"/4 "+patch::to_string((int)(currVertex+5))+"/3 "+patch::to_string((int)(currVertex+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+ "AnimObj\\1\\0.png" + "\n";
			mtlfile << vertstr;

	polyCount1 += 4;
	currVertex += 8;
	goto blankvoxel;
	}



if ((temp123>=0x40)&&(temp123<=0x47)) { //It's decor, type 3

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/4 "+patch::to_string((int)(currVertex+6))+"/3 "+patch::to_string((int)(currVertex+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(currVertex+2))+"/1 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+7))+"/3 "+patch::to_string((int)(currVertex+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/4 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(currVertex+4))+"/1 "+patch::to_string((int)(currVertex+1))+"/4 "+patch::to_string((int)(currVertex+5))+"/3 "+patch::to_string((int)(currVertex+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+ "AnimObj\\2\\0.png" + "\n";
			mtlfile << vertstr;

	polyCount1 += 4;
	currVertex += 8;
	goto blankvoxel;
	}



if ((temp123>=0x48)&&(temp123<=0x4F)) { //It's decor, type 4

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/4 "+patch::to_string((int)(currVertex+6))+"/3 "+patch::to_string((int)(currVertex+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(currVertex+2))+"/1 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+7))+"/3 "+patch::to_string((int)(currVertex+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/4 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(currVertex+4))+"/1 "+patch::to_string((int)(currVertex+1))+"/4 "+patch::to_string((int)(currVertex+5))+"/3 "+patch::to_string((int)(currVertex+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+ "AnimObj\\3\\0.png" + "\n";
			mtlfile << vertstr;

	polyCount1 += 4;
	currVertex += 8;
	goto blankvoxel;
	}


if ((temp123>=0x50)&&(temp123<=0xC3)) { //It's items MAKE CHARACTER SELECTION SUPPORT!!!

	vertstr = "usemtl " + patch::to_string((int)tmpvalue) + "\n";
	outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(currVertex+1))+"/1 "+patch::to_string((int)(currVertex+2))+"/4 "+patch::to_string((int)(currVertex+6))+"/3 "+patch::to_string((int)(currVertex+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(currVertex+2))+"/1 "+patch::to_string((int)(currVertex+3))+"/4 "+patch::to_string((int)(currVertex+7))+"/3 "+patch::to_string((int)(currVertex+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(currVertex+3))+"/1 "+patch::to_string((int)(currVertex+4))+"/4 "+patch::to_string((int)(currVertex+8))+"/3 "+patch::to_string((int)(currVertex+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(currVertex+4))+"/1 "+patch::to_string((int)(currVertex+1))+"/4 "+patch::to_string((int)(currVertex+5))+"/3 "+patch::to_string((int)(currVertex+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)tmpvalue) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" +FileNameString222+"data\\"+ "Objects\\" + patch::to_string((int)tmpvalue)+ "\\0.png" + "\n";
			mtlfile << vertstr;

	polyCount1 += 4;
	currVertex += 8;
	goto blankvoxel;
	}

}
#endif;
		blankvoxel:
		voxCount++;
		}
}
}// LOOP END

#if 1;
			vertstr = "vt 0.000 1.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";
			outfile << vertstr;
#endif;
// Write materials to mtlfile
		vertstr = "newmtl blankvoxel\n"; // always present
			mtlfile << vertstr;
		vertstr = "Kd 0.1 0.1 0.1\n"; //Diffuse
			mtlfile << vertstr;
		vertstr = "d 0.001\n"; // Transparency
			mtlfile << vertstr;

outfile.close();
mtlfile.close();
//}
BuildTorches(); // Now it's time to extract torches.
}



// Build torches and others
void BuildTorches(void) {
unsigned int wallsBevels1, wallsBevels2;
float gap = float::Parse(textBox42->Text);
int voxCount = 0;
int skippedVoxels = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned int polyCount = 0;
unsigned int currVertex = 0;
unsigned long long voxelarr[16384];
int tempFilename, stepsValue = 0;
string FileNameString222;
unsigned int backTorchID, torchID, torchOffset;

fstream outfile, mtlfile, tmpbinfile;

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Torches.obj");
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);

pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Torches.mtl"); 
const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
mtlfile.open(path1, ios::out);

std::string str;
std::string str2;
std::string str3;
std::string currN;
std::string vertstr;
// Fill temp array
	for (int p=0; p<16384; p++) {
		 voxelarr[p] = voxelArray[p].value1;
		}



float maxTexSize = 128;
float percentIntheBox; // SCALE. size in the cube
float xSize, ySize, proportion, xSize2, ySize2, proportion2 = 0; 
unsigned int levelN, lengthName = 0; 
String ^ name = "";
name = (System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
lengthName = name->Length;

if (lengthName > 2) {
	//levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
} else {
	levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
}

percentIntheBox = 1;

float zz, x11, x22, zPos, zz2, x112, x222, zPos2;
	zz = 0;
	x11 = 0;
	x22 = 0;
	zPos = 0;

	zz2 = 0;
	x112 = 0;
	x222 = 0;
	zPos2 = 0;

	if (name=="1") {
			xSize = 31; // AnimBack1
			ySize = 59;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 74; //AnimBack0
			ySize2 = 89;
			zPos2 = 0;
		}

	if (name=="2") {
			xSize = 39; // AnimBack1
			ySize = 103;
			zPos = 0;

			xSize2 = 74; //AnimBack0 
			ySize2 = 89;
			zPos2 = 0;
		}

	if (name=="3") {
			xSize = 39; // AnimBack1
			ySize = 102;
//			zPos = 1-ySize*percentIntheBox/maxTexSize;
			zPos = 0;

			xSize2 = 74; //AnimBack0
			ySize2 = 94;
			zPos2 = 0;
		}

	if (name=="4") {
			xSize = 41; // AnimBack1
			ySize = 79;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 74; //AnimBack0
			ySize2 = 94;
			zPos2 = 0;
		}

	if (name=="5") {
			xSize = 10; // AnimBack1
			ySize = 59;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 10; //AnimBack0
			ySize2 = 59;
			zPos2 = 1-ySize*percentIntheBox/maxTexSize;
		}

	if (name=="6") {
			xSize = 10; // AnimBack1
			ySize = 59;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 88; //AnimBack0
			ySize2 = 56;
			zPos2 = 0;
		}

	if (name=="7") {
			xSize = 67; // AnimBack1
			ySize = 126;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 88; //AnimBack0
			ySize2 = 56;
			zPos2 = 0;
		}

	if (name=="8") {
			xSize = 10; // AnimBack1
			ySize = 59;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 88; //AnimBack0
			ySize2 = 56;
			zPos2 = 0;
		}


	if (name=="9") {
			xSize = 76; // AnimBack1
			ySize = 109;
			zPos = 0;

			xSize2 = 74; //AnimBack0
			ySize2 = 89;
			zPos2 = 0;
		}

	if (name=="10") {
			xSize = 10; // AnimBack1
			ySize = 59;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 88; //AnimBack0
			ySize2 = 56;
			zPos2 = 0;
		}

	if (name=="11") {
			xSize = 10; // AnimBack1
			ySize = 59;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 88; //AnimBack0
			ySize2 = 56;
			zPos2 = 0;
		}

	if (name=="11a") {// Just fiction sizes
			xSize = 64; // AnimBack1
			ySize = 64;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}

	if (name=="11b") {// Just fiction sizes
			xSize = 64; // AnimBack1
			ySize = 64;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}


	if (name=="11c") { // Just fiction sizes
			xSize = 10; // AnimBack1
			ySize = 10;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 10; //AnimBack0
			ySize2 = 10;
			zPos2 = 0;
		}

	if (name=="11d") { // Just fiction sizes
			xSize = 10; // AnimBack1
			ySize = 10;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 10; //AnimBack0
			ySize2 = 10;
			zPos2 = 0;
		}

	if (name=="11e") { // Just fiction sizes
			xSize = 10; // AnimBack1
			ySize = 10;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}

	if (name=="12") {
			xSize = 46; // AnimBack1
			ySize = 76;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 46; //AnimBack0
			ySize2 = 76;
			zPos2 = 0;
		}

	if (name=="13") {
			xSize = 66; // AnimBack1
			ySize = 115;
			zPos = 0;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}

	if (name=="14") {
			xSize = 66; // AnimBack1
			ySize = 115;
			zPos = 0;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}


	if (name=="15") {
			xSize = 66; // AnimBack1
			ySize = 115;
			zPos = 0;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}

	if (name=="16") {
			xSize = 63; // AnimBack1
			ySize = 82;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 63; //AnimBack0
			ySize2 = 82;
			zPos2 = 1-ySize*percentIntheBox/maxTexSize;
		}

	if (name=="17") {
			xSize = 66; // AnimBack1
			ySize = 115;
			zPos = 0;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}

	if (name=="18") {
			xSize = 66; // AnimBack1
			ySize = 115;
			zPos = 0;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}

	if (name=="19") {
			xSize = 63; // AnimBack1
			ySize = 82;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 63; //AnimBack0
			ySize2 = 82;
			zPos2 = 1-ySize*percentIntheBox/maxTexSize;
		}


	if (name=="20") {
			xSize = 66; // AnimBack1
			ySize = 115;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}

	if (name=="21") {
			xSize = 66; // AnimBack1
			ySize = 115;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}

	if (name=="22") {
			xSize = 10; // AnimBack1
			ySize = 10;
			zPos = 0;

			xSize2 = 10; //AnimBack0
			ySize2 = 10;
			zPos2 = 0;
		}

	if (name=="23") {
			xSize = 1; // AnimBack1. Random
			ySize = 1;
			zPos = 1-ySize*percentIntheBox/maxTexSize;

			xSize2 = 64; //AnimBack0
			ySize2 = 64;
			zPos2 = 0;
		}


proportion = xSize*percentIntheBox/maxTexSize; // Calculate AnimBack1 size
	zz = ySize*percentIntheBox/maxTexSize;
	x11 = (1-proportion)/2;
	x22 = 1-(1-proportion)/2;

proportion2 = xSize2*percentIntheBox/maxTexSize; // Calculate AnimBack0 size
	zz2 = ySize2*percentIntheBox/maxTexSize;
	x112 = (1-proportion2)/2;
	x222 = 1-(1-proportion2)/2;

float distBack = 1 - (float::Parse(textBox53->Text))/100; // 1-distBack ----> Distance from the wall to torch
float distTorch = distBack - (x22-x11)/2;

	bool doorPresent = 0;	// Door exists
	bool doorLocked = 0;	// Door is closed

int animcheck = 0;

for (int d=0; d<64; d++) { // LOOP START
currRow = d;
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {
		currFloor = s;

progressBar2->Increment(1); // Add
progressBar2->Update();
this->Update();

_ULonglong temp = voxelArray[voxCount].value1;
_ULonglong temp123 = 0;
//temp123 = ValueSelector(voxelArray[voxCount].value1, 0); //Ramps and stairs value

doorPresent = (bool((1 << 9)  &  voxelArray[voxCount].value1));	// Door exists
doorLocked = (bool((1 << 11)  &  voxelArray[voxCount].value1));	// Door is closed
stepsValue = ValueSelector(voxelArray[voxCount].value1, 0); //Steps value
/////////////**************//////////////////////********** 
#if 1;
wallsBevels1 = ValueSelector(voxelArray[voxCount].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[voxCount].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cube's N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
//dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);
//label139->Text = cubeNinDataFile.ToString();// For debug
#endif;
/////////////**************//////////////////////**********
String ^ LevelName3;
LevelName3 = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
FileNameString222 = context.marshal_as<std::string>(LevelName3);


if 	((temp == 0xff00000000000000)&&(checkBox1->CheckState == CheckState::Unchecked)) {
				skippedVoxels++;
				goto blankvoxel;
				}


// WEST wall polygon. Check for possible torch presence.
if (specsArray[cubeNinDataFile].textureW !=0) {
#if 1;
// Checking for possible background texture (torches, etc.)
// specsArray[cubeNinDataFile].textureW = offset in first 256 bytes in block 1. Read 1 byte. This 1 byte = background texture ID.
// Draw polygon near to wall with background texture.
// Draw polygon near to wall with torch texture AnimBack\1.




// West wall
backTorchID = backgroundsArray[specsArray[cubeNinDataFile].textureW & 0xFFFFFF3F];
animcheck = torchesArray[specsArray[cubeNinDataFile].textureW & 0xFFFFFF3F];

if ((backTorchID != 0)||(animcheck != 0)) {
//if ((backTorchID != 0)||(specsArray[cubeNinDataFile].textureFloor !=0)) {
//	richTextBox4->AppendText("texW = " + specsArray[cubeNinDataFile].textureW + "\n");
//	richTextBox4->AppendText("texW backG = " + backTorchID + "\n");


	// West background vertexes
#if 1;
	vertstr = "# Torch background West in the cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
	outfile << vertstr;
// Background
		// v1 top
			vertstr = "v " + patch::to_string(currRow+gap-distBack+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1+gap-1) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+gap-distBack+1) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1+gap-1) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+gap-distBack+1) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+gap-distBack+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
// Torch
if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing. Skip all torches at level "11" and "23".
		goto drawBackW;
		}
		// v1 top
			vertstr = "v " + patch::to_string(currRow+gap-distTorch+1) + " " + patch::to_string(currCol+x11) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+gap-distTorch+1) + " " + patch::to_string(currCol+x22) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+gap-distTorch+1) + " " + patch::to_string(currCol+x22) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+gap-distTorch+1) + " " + patch::to_string(currCol+x11) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;

		// v1 top
			vertstr = "v " + patch::to_string(currRow+gap+x22-x11-distBack+1) + " " + patch::to_string(currCol+0.5) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+gap-distBack+1) + " " + patch::to_string(currCol+0.5) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+gap-distBack+1) + " " + patch::to_string(currCol+0.5) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+gap+x22-x11-distBack+1) + " " + patch::to_string(currCol+0.5) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;


#if 1;
{
// Draw background
drawBackW:
	if (backTorchID != 0) {
		vertstr = "usemtl " + patch::to_string((int)backTorchID) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/1 "+patch::to_string(polyCount*4+2)+"/2 "+patch::to_string(polyCount*4+3)+"/3 "+patch::to_string(polyCount*4+4)+"/4\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)backTorchID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)backTorchID)+".png"+"\n";
			mtlfile << vertstr;
	} else {
		vertstr = "usemtl " + patch::to_string((int)specsArray[cubeNinDataFile].textureW & 0xFFFFFF3F) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/5 "+patch::to_string(polyCount*4+2)+"/6 "+patch::to_string(polyCount*4+3)+"/7 "+patch::to_string(polyCount*4+4)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)specsArray[cubeNinDataFile].textureW & 0xFFFFFF3F) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)specsArray[cubeNinDataFile].textureW & 0xFFFFFF3F)+".png"+"\n";
			mtlfile << vertstr;
		}
if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
		goto continW;
		}
// Draw torch itself
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+5)+"/5 "+patch::to_string(polyCount*4+6)+"/6 "+patch::to_string(polyCount*4+7)+"/7 "+patch::to_string(polyCount*4+8)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

if ((name=="5")||(name=="12")||(name=="16")||(name=="19")) {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
	} else {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
	}
			mtlfile << vertstr;

// Draw torch itself rotated by 90 degrees.
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+9)+"/5 "+patch::to_string(polyCount*4+10)+"/6 "+patch::to_string(polyCount*4+11)+"/7 "+patch::to_string(polyCount*4+12)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

if ((name=="5")||(name=="12")||(name=="16")||(name=="19")) {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
	} else {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
	}
			mtlfile << vertstr;

continW:
if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
	polyCount += 1; 
		} else {
	polyCount += 3; 
		}
	}
#endif;
//		goto drawpolygon;
#endif;



#if 0;
for (int i=0; i<block2Size-1; i++) {
//	richTextBox4->AppendText("i = " + i + "\n");
//	richTextBox4->AppendText("torchesblock2 = " + torchesblock2[i] + "\n");
	}
for (int i=0; i<0x100; i++) {
//	richTextBox4->AppendText("i = " + i + "\n");
//	richTextBox4->AppendText("torchesArray = " + torchesArray[i] + "\n");
	}
torchOffset = torchesArray[specsArray[cubeNinDataFile].textureW];
if (torchOffset != 0) {
//	torchID = torchesblock2[torchOffset+6];
//	richTextBox4->AppendText("texW torchOffset = " + torchOffset + "\n\n");
//	richTextBox4->AppendText("texW torchID = " + torchID + "\n\n");
	}
#endif;

}
#endif;
}




// South wall
backTorchID = backgroundsArray[specsArray[cubeNinDataFile].textureS & 0xFFFFFF3F];
animcheck = torchesArray[specsArray[cubeNinDataFile].textureS & 0xFFFFFF3F];

if ((backTorchID != 0)||(animcheck != 0)) {
//if ((backTorchID != 0)&&(!doorPresent)) { // && - skip doors. No animated object in front of the door.
#if 1;
// Checking for possible background texture (torches, etc.)
// specsArray[cubeNinDataFile].textureW = offset in first 256 bytes in block 1. Read 1 byte. This 1 byte = background texture ID.
// Draw polygon near to wall with background texture.
// Draw polygon near to wall with torch texture AnimBack\1.


// South wall
//backTorchID = backgroundsArray[specsArray[cubeNinDataFile].textureS & 0xFFFFFF3F];
//if (backTorchID != 0) {
//	richTextBox4->AppendText("texW = " + specsArray[cubeNinDataFile].textureW + "\n");
//	richTextBox4->AppendText("texW backG = " + backTorchID + "\n");


	// South background vertexes
#if 1;
	vertstr = "# Torch background South in the cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
	outfile << vertstr;
// Background
		// v1 top
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+distBack) + " "  + patch::to_string(-currFloor+gap) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+distBack) + " "  + patch::to_string(-currFloor+gap) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+distBack) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+distBack) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
// Torch
if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
		goto drawBackS;
		}
		// v1 top
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol-gap+distBack) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol-gap+distBack-x22+x11) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol-gap+distBack-x22+x11) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol-gap+distBack) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;

		// v1 top
			vertstr = "v " + patch::to_string(currRow+x11) + " " + patch::to_string(currCol-gap+distTorch) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+x22) + " " + patch::to_string(currCol-gap+distTorch) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+x22) + " " + patch::to_string(currCol-gap+distTorch) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+x11) + " " + patch::to_string(currCol-gap+distTorch) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;


#if 1;
{
// Draw background
drawBackS:
	if (backTorchID != 0) {
		vertstr = "usemtl " + patch::to_string((int)backTorchID) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/1 "+patch::to_string(polyCount*4+2)+"/2 "+patch::to_string(polyCount*4+3)+"/3 "+patch::to_string(polyCount*4+4)+"/4\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)backTorchID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)backTorchID)+".png"+"\n";
			mtlfile << vertstr;
	} else {
		vertstr = "usemtl " + patch::to_string((int)specsArray[cubeNinDataFile].textureS & 0xFFFFFF3F) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/5 "+patch::to_string(polyCount*4+2)+"/6 "+patch::to_string(polyCount*4+3)+"/7 "+patch::to_string(polyCount*4+4)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)specsArray[cubeNinDataFile].textureS & 0xFFFFFF3F) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)specsArray[cubeNinDataFile].textureS & 0xFFFFFF3F)+".png"+"\n";
			mtlfile << vertstr;	
	}

if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
		goto continS;
		}
// Draw torch itself
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+5)+"/5 "+patch::to_string(polyCount*4+6)+"/6 "+patch::to_string(polyCount*4+7)+"/7 "+patch::to_string(polyCount*4+8)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

if ((name=="5")||(name=="12")||(name=="16")||(name=="19")) {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
	} else {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
	}
			mtlfile << vertstr;

// Draw torch itself rotated by 90 degrees.
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+9)+"/5 "+patch::to_string(polyCount*4+10)+"/6 "+patch::to_string(polyCount*4+11)+"/7 "+patch::to_string(polyCount*4+12)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

if ((name=="5")||(name=="12")||(name=="16")||(name=="19")) {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
	} else {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
	}
			mtlfile << vertstr;
continS:
if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
	polyCount += 1; 
		} else {
	polyCount += 3;
		}
	}
#endif;
#endif;
//}

#endif;	
}


//if (cubeNinDataFile == 1942) {
//	richTextBox4->AppendText("backgroundsArray 44 = " + backgroundsArray[specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F] + "\n");
//	}

//if (specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F == 169) {
//	richTextBox4->AppendText("backgroundsArray 44 = " + backgroundsArray[specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F] + "\n");
//	}



//East wall
backTorchID = backgroundsArray[specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F];
animcheck = torchesArray[specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F];

if ((backTorchID != 0)||(animcheck != 0)) {
//	richTextBox4->AppendText("texW = " + specsArray[cubeNinDataFile].textureW + "\n");
//	richTextBox4->AppendText("texW backG = " + backTorchID + "\n");


	// East background vertexes
#if 1;
	vertstr = "# Torch background East in the cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
	outfile << vertstr;
// Background
		// v1 top
			vertstr = "v " + patch::to_string(currRow-gap+distBack) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1+gap-1) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow-gap+distBack) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1+gap-1) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow-gap+distBack) + " " + patch::to_string(currCol+1-gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow-gap+distBack) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
// Torch
if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
		goto drawBackE;
		}
		// v1 top
			vertstr = "v " + patch::to_string(currRow-gap+distTorch) + " " + patch::to_string(currCol+x11) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow-gap+distTorch) + " " + patch::to_string(currCol+x22) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow-gap+distTorch) + " " + patch::to_string(currCol+x22) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow-gap+distTorch) + " " + patch::to_string(currCol+x11) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;

		// v1 top
			vertstr = "v " + patch::to_string(currRow-gap-x22+x11+distBack) + " " + patch::to_string(currCol+0.5) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow-gap+distBack) + " " + patch::to_string(currCol+0.5) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow-gap+distBack) + " " + patch::to_string(currCol+0.5) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow-gap-x22+x11+distBack) + " " + patch::to_string(currCol+0.5) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;


#if 1;
{
// Draw background
drawBackE:
	if (backTorchID != 0) {
		vertstr = "usemtl " + patch::to_string((int)backTorchID) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/1 "+patch::to_string(polyCount*4+2)+"/2 "+patch::to_string(polyCount*4+3)+"/3 "+patch::to_string(polyCount*4+4)+"/4\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)backTorchID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)backTorchID)+".png"+"\n";
			mtlfile << vertstr;

	} else {
		vertstr = "usemtl " + patch::to_string((int)specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/5 "+patch::to_string(polyCount*4+2)+"/6 "+patch::to_string(polyCount*4+3)+"/7 "+patch::to_string(polyCount*4+4)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F)+".png"+"\n";
			mtlfile << vertstr;	
		}

if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
		goto continE;
		}
// Draw torch itself
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+5)+"/5 "+patch::to_string(polyCount*4+6)+"/6 "+patch::to_string(polyCount*4+7)+"/7 "+patch::to_string(polyCount*4+8)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

if ((name=="5")||(name=="12")||(name=="16")||(name=="19")) {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
	} else {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
	}
			mtlfile << vertstr;

// Draw torch itself rotated by 90 degrees.
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+9)+"/5 "+patch::to_string(polyCount*4+10)+"/6 "+patch::to_string(polyCount*4+11)+"/7 "+patch::to_string(polyCount*4+12)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

if ((name=="5")||(name=="12")||(name=="16")||(name=="19")) {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
	} else {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
	}
			mtlfile << vertstr;
continE:
if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
	polyCount += 1; 
		} else {
	polyCount += 3;
		}
	}
#endif;
//		goto drawpolygon;
#endif;
}




// North wall
backTorchID = backgroundsArray[specsArray[cubeNinDataFile].textureN & 0xFFFFFF3F];
animcheck = torchesArray[specsArray[cubeNinDataFile].textureN & 0xFFFFFF3F];

if ((backTorchID != 0)||(animcheck != 0)) {
//	richTextBox4->AppendText("texW = " + specsArray[cubeNinDataFile].textureW + "\n");
//	richTextBox4->AppendText("texW backG = " + backTorchID + "\n");
//	richTextBox4->AppendText("backTorchID = " + backTorchID + "\n\n");
//	richTextBox4->AppendText("animcheck = " + animcheck + "\n\n");

	// North background vertexes
#if 1;
	vertstr = "# Torch background North in the cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
	outfile << vertstr;
// Background
		// v1 top
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap-distBack+1) + " "  + patch::to_string(-currFloor+gap) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap-distBack+1) + " "  + patch::to_string(-currFloor+gap) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap-distBack+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap-distBack+1) + " "  + patch::to_string(-currFloor+1-gap) + "\n";
			outfile << vertstr;
// Torch
if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
		goto drawBackN;
		}
		// v1 top
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap-distBack+1) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap-distBack+x22-x11+1) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap-distBack+x22-x11+1) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap-distBack+1) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;

		// v1 top
			vertstr = "v " + patch::to_string(currRow+x11) + " " + patch::to_string(currCol+gap-distTorch+1) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+x22) + " " + patch::to_string(currCol+gap-distTorch+1) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+x22) + " " + patch::to_string(currCol+gap-distTorch+1) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+x11) + " " + patch::to_string(currCol+gap-distTorch+1) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;


#if 1;
{
// Draw background
drawBackN:
	if (backTorchID != 0) {
		vertstr = "usemtl " + patch::to_string((int)backTorchID) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/1 "+patch::to_string(polyCount*4+2)+"/2 "+patch::to_string(polyCount*4+3)+"/3 "+patch::to_string(polyCount*4+4)+"/4\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)backTorchID) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)backTorchID)+".png"+"\n";
			mtlfile << vertstr;

	} else {
		vertstr = "usemtl " + patch::to_string((int)specsArray[cubeNinDataFile].textureN & 0xFFFFFF3F) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/5 "+patch::to_string(polyCount*4+2)+"/6 "+patch::to_string(polyCount*4+3)+"/7 "+patch::to_string(polyCount*4+4)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)specsArray[cubeNinDataFile].textureN & 0xFFFFFF3F) + "\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\"+patch::to_string((int)specsArray[cubeNinDataFile].textureN & 0xFFFFFF3F)+".png"+"\n";
			mtlfile << vertstr;
		}

if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
		goto continN;
		}
// Draw torch itself
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+5)+"/5 "+patch::to_string(polyCount*4+6)+"/6 "+patch::to_string(polyCount*4+7)+"/7 "+patch::to_string(polyCount*4+8)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

if ((name=="5")||(name=="12")||(name=="16")||(name=="19")) {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
	} else {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
	}
			mtlfile << vertstr;

// Draw torch itself rotated by 90 degrees.
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+9)+"/5 "+patch::to_string(polyCount*4+10)+"/6 "+patch::to_string(polyCount*4+11)+"/7 "+patch::to_string(polyCount*4+12)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

if ((name=="5")||(name=="12")||(name=="16")||(name=="19")) {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
	} else {
		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
	}
			mtlfile << vertstr;
continN:
if ((doorPresent)||(name=="11")||(name=="23")) { // Skip torch drawing
	polyCount += 1; 
		} else {
	polyCount += 3;
		}
	}
#endif;
#endif;
}




// Level 7 floor torch
// FLOORS
#if 1;
int torchID = 0;
int ttt = specsArray[cubeNinDataFile].textureFloor & 0xFFFFFF3F;
torchID = torchesArray[specsArray[cubeNinDataFile].textureFloor & 0xFFFFFF3F];

if ((specsArray[cubeNinDataFile].textureFloor & 0xFFFFFF3F) !=0) {

	if ((torchID != 0)&&(stepsValue)) { // Animated floor or big torch on the floor (level 7) found.
//	richTextBox4->AppendText("Steps anim floor = " + ttt + "\n");
// AnimBack\0
#if 1;
	// Adjust height based on Step height.
#if 1;
float height;

	switch (stepsValue) {
		case (0x11): {
		height = -0.0625;
			break;
			}

		case (0x12): {
		height = -0.125;
			break;
			}

		case (0x13): {
		height = -0.1875;
			break;
			}

		case (0x14): {
		height = -0.25;
			break;
			}

		case (0x15): {
		height = -0.3125;
			break;
			}

		case (0x16): {
		height = -0.375;
			break;
			}

		case (0x17): {
		height = -0.4375;
			break;
			}

		case (0x18): {
		height = -0.5;
			break;
			}

		case (0x19): {
		height = -0.5625;
			break;
			}

		case (0x1A): {
		height = -0.625;
			break;
			}

		case (0x1B): {
		height = -0.6875;
			break;
			}

		case (0x1C): {
		height = -0.75;
			break;
			}

		case (0x1D): {
		height = -0.8125;
			break;
			}

		case (0x1E): {
		height = -0.875;
			break;
			}

		case (0x1F): {
		height = -0.9375;
			break;
			}



		case (0x21): {
		height = -0.0625;
			break;
			}

		case (0x22): {
		height = -0.125;
			break;
			}

		case (0x23): {
		height = -0.1875;
			break;
			}

		case (0x24): {
		height = -0.25;
			break;
			}

		case (0x25): {
		height = -0.3125;
			break;
			}

		case (0x26): {
		height = -0.375;
			break;
			}

		case (0x27): {
		height = -0.4375;
			break;
			}

		case (0x28): {
		height = -0.5;
			break;
			}

		case (0x29): {
		height = -0.5625;
			break;
			}

		case (0x2A): {
		height = -0.625;
			break;
			}

		case (0x2B): {
		height = -0.6875;
			break;
			}

		case (0x2C): {
		height = -0.75;
			break;
			}

		case (0x2D): {
		height = -0.8125;
			break;
			}

		case (0x2E): {
		height = -0.875;
			break;
			}

		case (0x2F): {
		height = -0.9375;
			break;
			}
	}
#endif;

		// v1 top
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap+x112) + " "  + patch::to_string(-currFloor+1+gap-zz2-zPos2+height) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap+1-x112) + " "  + patch::to_string(-currFloor+1+gap-zz2-zPos2+height) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap+1-x112) + " "  + patch::to_string(-currFloor+1-gap-zPos2+height) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap+x112) + " "  + patch::to_string(-currFloor+1-gap-zPos2+height) + "\n";
			outfile << vertstr;

		// v1 top
			vertstr = "v " + patch::to_string(currRow+x112) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1+gap-zz2-zPos2+height) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+x222) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1+gap-zz2-zPos2+height) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+x222) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-zPos2+height) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+x112) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-zPos2+height) + "\n";
			outfile << vertstr;

// Draw torch itself
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+667)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/5 "+patch::to_string(polyCount*4+2)+"/6 "+patch::to_string(polyCount*4+3)+"/7 "+patch::to_string(polyCount*4+4)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+667)) + "\n";
			mtlfile << vertstr;

		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
			mtlfile << vertstr;

// Draw torch itself rotated by 90 degrees.
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+667)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+5)+"/5 "+patch::to_string(polyCount*4+6)+"/6 "+patch::to_string(polyCount*4+7)+"/7 "+patch::to_string(polyCount*4+8)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+667)) + "\n";
			mtlfile << vertstr;

		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\0\\1.png\n";
			mtlfile << vertstr;
	polyCount += 2;
	goto blankvoxel;
#endif;

	} else

	if (torchID != 0) {
		richTextBox4->AppendText("Green anim floor (level 7) = " + ttt + "\n");
// AnimBack\1
		// v1 top
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap+x22-x11+0.25) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap+x22-x11+0.25) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+0.5) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;

		// v1 top
			vertstr = "v " + patch::to_string(currRow+x11) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v2 top
			vertstr = "v " + patch::to_string(currRow+x22) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1+gap-zz-zPos) + "\n";
			outfile << vertstr;
		// v3 low
			vertstr = "v " + patch::to_string(currRow+x22) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;
		// v4 low
			vertstr = "v " + patch::to_string(currRow+x11) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor+1-gap-zPos) + "\n";
			outfile << vertstr;

// Draw torch itself
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+1)+"/5 "+patch::to_string(polyCount*4+2)+"/6 "+patch::to_string(polyCount*4+3)+"/7 "+patch::to_string(polyCount*4+4)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
			mtlfile << vertstr;

// Draw torch itself rotated by 90 degrees.
			vertstr = "usemtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			outfile << vertstr;

		vertstr = "f "+patch::to_string(polyCount*4+5)+"/5 "+patch::to_string(polyCount*4+6)+"/6 "+patch::to_string(polyCount*4+7)+"/7 "+patch::to_string(polyCount*4+8)+"/8\n\n";
			outfile << vertstr;

		vertstr = "newmtl " + patch::to_string((int)(backTorchID+666)) + "\n";
			mtlfile << vertstr;

		vertstr = "map_Kd Textures3DO\\" + FileNameString222+"data\\AnimBack\\1\\1.png\n";
			mtlfile << vertstr;
	polyCount += 2;
		}


}
#endif;
blankvoxel:
voxCount++;
		}
}
}// LOOP END


#if 1;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;

			vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
			vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
			outfile << vertstr;
#endif;
// Write materials to mtlfile
// for each unique material:
		vertstr = "newmtl blankvoxel\n"; // always present
			mtlfile << vertstr;
		vertstr = "Kd 0.1 0.1 0.1\n"; //Diffuse
			mtlfile << vertstr;
		vertstr = "d 0.001\n"; // Transparency
			mtlfile << vertstr;

outfile.close();
mtlfile.close();
//BuildLogicLines(); // TURN OFF!
BuildLogicLinesNew(); // TURN ON!
} // End torches extraction






// Build Teleport and other types Lines (not active)
void BuildLogicLines(void) {

unsigned int wallsBevels1, wallsBevels2;
float gap = float::Parse(textBox42->Text);
int voxCount = 0;
int skippedVoxels = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned int polyCount1 = 0;
unsigned int currVertex = 0;
unsigned long long voxelarr[16384];
int tempFilename = 0;
string FileNameString222;
std::string vertstr;
fstream outfile, mtlfile;

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_LogicLines.obj");
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);

pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_LogicLines.mtl"); 
const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
mtlfile.open(path1, ios::out);



// Do all stuff here
ifstream dfile;
pin_ptr<const wchar_t> dir2 = PtrToStringChars(openFileDialog1->FileName + "data"); 
const wchar_t *dir3 = dir2; 
dfile.open(dir3, ios::binary|ios::in);

    dfile.seekg (0, dfile.end);
    int datalength11 = dfile.tellg();
    dfile.seekg (0, dfile.beg);
//File opened.

int buf21, buf22;
unsigned int n2=0;
unsigned int pos3002, b5size2 = 0;
unsigned int count2 = 0;
unsigned int count3 = 0;
bool eightbytes2 = false;
unsigned char b2size2 = 0;
char temp111;
unsigned char delimeter = 0;


//mtllib Scenery.mtl
// Link a mtl file
//String ^ name = "";
//name = (System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName));

//msclr::interop::marshal_context context;
//std::string standardString1 = context.marshal_as<std::string>(name);
//vertstr = "mtllib " + patch::to_string(name) + "_LogicLines.mtl\n";
//outfile << vertstr;

	// Reading first 4 bytes. It's a number of CCBs I must skip to read data blocks.
	dfile.read((char *)&buf21,sizeof(buf21));
		count2 += 4;
	buf21 = Swap4Bytes(buf21);
	numofEntries = buf21;

// Skip all numofEntries cel files
for (int i=0; i<datalength11/4; i++) {
		dfile.read((char *)&buf21,sizeof(buf21));
		count2 += 4;
			if (buf21 == 0x20424343) {
			n2++;
				if (n2 == numofEntries) {
//				richTextBox4->AppendText("numofEntries = " + numofEntries + "\n");
//				richTextBox4->AppendText("count2 = " + count2 + "\n");
			// It's the last CCB before my 5 blocks. Save it and close tmpfile1.
//			richTextBox4->AppendText("count = " + count + "\n");

						dfile.seekg (count2-8, dfile.beg);
						count2 -=8;
						dfile.read((char *)&buf22,sizeof(buf22));
						count2 +=4;
							buf22 = Swap4Bytes(buf22);
			//******************************************************
							// IF size not found (8 bytes before located) Seek size
							if (buf22 > 0xFFFFF) {
								eightbytes2 = true;
								// Step back for 12 bytes
								dfile.seekg (count2-12, dfile.beg);
								dfile.read((char *)&buf22,sizeof(buf22));
								buf22 = Swap4Bytes(buf22);
								count2 -=8;
								}
//						richTextBox4->AppendText("Last CCB position = " + count + "\n");
//						richTextBox4->AppendText("Last CCB size = " + buf2 + "\n");
							if (eightbytes2) {
//								infile.seekg (count+buf2+8, infile.beg);
								count2 += 8;
//								richTextBox4->AppendText("8 bytes\n");
								} else 
								{
//								infile.seekg (count+buf2, infile.beg);
								count2;
								}
			//******************************************************
						dfile.seekg (count2+4, dfile.beg); // Jump to pos just after CCB label
						for (int j=0; j<(buf22/4); j++) {
//							richTextBox4->AppendText("j = " + j + "\n");
							dfile.read((char *)&buf21,sizeof(buf21));
							count2 += 4;
							}
//						richTextBox4->AppendText("count2 = " + count2 + "\n");
						goto complete;
				}
		}
	}
complete:
// Skip block 1, 2, 3
#if 0;
unsigned char bufer100 = 0;

for (int i=0; i<0x100; i++) {
	dfile.read((char *)&bufer100, sizeof(bufer100));
//	backgroundsArray[i] = bufer100;
}
for (int i=0; i<0x100; i++) {
	dfile.read((char *)&bufer100, sizeof(bufer100)); // For torches
//	torchesArray[i] = bufer100;
}
// Skip the rest 0x100 bytes of block 1.
for (int i=0; i<0x100; i++) {
	dfile.read((char *)&bufer100, sizeof(bufer100)); // Just skip 0x100 bytes.
}
#endif;
/////////////*****************//////***********************////////////////////////////
						// Skip block 1.
						pos3002 = count2 + buf22;
						dfile.seekg (count2 + 0x300, dfile.beg);
//						dfile.seekg (count2 + buf22 + 0x300, dfile.beg);
//						count2 = count2 + buf22 + 0x300;
						count2 = count2 + 0x300;

						// Skip block 2.
						// Read 1 byte (block 2 size)
						dfile.read((char *)&b2size2,sizeof(b2size2));
						count2 += b2size2;
						block2Size = b2size2;
//						richTextBox4->AppendText("b2size = " + b2size + "\n");

						dfile.seekg (count2, dfile.beg);
						// Reading N of entries of Block 3 (cube's specs itself)
						dfile.read((char *)&buf22,sizeof(buf22));
						count2 += 4;
						buf22 = Swap4Bytes(buf22);
//						richTextBox4->AppendText("Block 3 entries = " + buf2 + "\n");
						numofEntries = buf22;

						// Skip block 3
				//		count2 = count2 + numofEntries*16 + 8;
						count2 = count2 + numofEntries*16;
							// Read entryX, entryY, entryZ
							dfile.seekg (count2, dfile.beg);
							dfile.read((char *)&temp111,1);
								entryX = temp111;
							dfile.read((char *)&temp111,1);
								entryY = temp111;
							dfile.read((char *)&temp111,1);
								entryZ = temp111;
							dfile.read((char *)&temp111,1);
								entryRotation = temp111;
							dfile.read((char *)&temp111,1);
								exitX = temp111;
							dfile.read((char *)&temp111,1);
								exitY = temp111;
							dfile.read((char *)&temp111,1);
								exitZ = temp111;
//							dfile.read((char *)&temp111,sizeof(temp111));
								count2 += 8;

						dfile.seekg (count2, dfile.beg);
//							richTextBox4->AppendText("Total specs= " + numofEntries + "\n");
//							richTextBox4->AppendText("count2 = " + count2 + "\n");


#if 1;
		// Seek teleports data (block 5)
unsigned int buf777, b5size, c6blockoffset;
unsigned char tt, tele = 0;
unsigned int vertexCounter, quant = 0;
int buffer, buffer2 = 0;
float entX, entY, entZ, exiX, exiY, exiZ, tempbyte1, tempbyte2, tempbyte3 = 0;

// Skip 0x6C block
				c6blockoffset = count2;
						count2 += 0x70;
						// Read block 5 (teleports and elevators)
						dfile.seekg (count2, dfile.beg);
						// Read block 5 size
						dfile.read((char *)&buf777,sizeof(buf777));
						count2 += 4;
						buf777 = Swap4Bytes(buf777);
						b5size = buf777;
						richTextBox4->AppendText("Block 5 (teleports) size = " + b5size + "\n");
							if (b5size == 4) {
								dataGridView18->Rows[0]->Cells[0]->Value = "No teleports";
								dataGridView18->Rows[0]->Cells[1]->Value = "or elevators";
								dataGridView18->Rows[0]->Cells[2]->Value = "found";
								goto makestartexit;
							} else {

#if 1;
// Teleports 0x80-0xE4
		dfile.seekg (c6blockoffset + 0x74, dfile.beg);

//						richTextBox4->AppendText("c6blockoffset + 0x74 = " + (c6blockoffset + 0x74) + "\n");
									// Now at the block 5 data start. Read and fill dataGridView18.
						dfile.read((char *)&tt,sizeof(tt));	// Reading teleports quantity.
						richTextBox4->AppendText("Teleports = " + tt + "\n");

							for (int i=0; i<tt; i++) {	// Do this teleport quantity times
								dfile.read((char *)&temp111,1);
									entX = temp111;
								dfile.read((char *)&temp111,1);
									entY = temp111;
								dfile.read((char *)&temp111,1);
									entZ = temp111;
								dfile.read((char *)&temp111,1); // Skip delimeter or if it != 1 do other stuff...
							//		if ((temp111 != 1)&&(ValueSelector(voxelArray[val].value1, 1) != 0x80)) {
									if (temp111 != 1) {
										richTextBox4->AppendText("Non-teleport type? Exit cubes = " + temp111 + "\n");
											for (int j=0; j<temp111; j++) {
												dfile.read((char *)&temp111,1);
												richTextBox4->AppendText("exiX = " + temp111 + "\n");
												dfile.read((char *)&temp111,1);
												richTextBox4->AppendText("exiY = " + temp111 + "\n");
												dfile.read((char *)&temp111,1);
												richTextBox4->AppendText("exiZ = " + temp111 + "\n");
												}
											} else {
								dfile.read((char *)&temp111,1);
									exiX = temp111;
								dfile.read((char *)&temp111,1);
									exiY = temp111;
								dfile.read((char *)&temp111,1);
									exiZ = temp111;
									}
		// entry
	vertstr = "o Teleport " + patch::to_string(i) + "\n";
	outfile << vertstr;
			vertstr = "v " + patch::to_string(entX+0.5) + " " + patch::to_string(entY+0.5) + " "  + patch::to_string(-entZ-0.5+1) + "\n";
			outfile << vertstr;
				vertexCounter++;
		// exit
			vertstr = "v " + patch::to_string(exiX+0.5) + " " + patch::to_string(exiY+0.5) + " "  + patch::to_string(-exiZ-0.5+1) + "\n";
			outfile << vertstr;
//				vertexCounter++;
// Draw line between teleport entry and exit
			vertstr = "l " + patch::to_string(vertexCounter) + " " + patch::to_string(vertexCounter+1) + "\n";
			outfile << vertstr;
				vertexCounter++; // Make a new line separate from the previous segment
							}
#endif;




// OTHER TYPES
dfile.seekg (c6blockoffset + 4, dfile.beg); // Set to 6C block start for other types
unsigned int frompolys = 0;

for (int j=0; j<27; j++) {

progressBar2->Increment(100); // Add
progressBar2->Update();
this->Update();

	dfile.seekg (c6blockoffset + 4 + j*4, dfile.beg);
		// Read active offsets for block 5. All non-zero offsets would be in the block 5.
		dfile.read((char *)&buffer,sizeof(buffer));
		buffer = Swap4Bytes(buffer);

	if (buffer != 0) {
			dfile.seekg (c6blockoffset + 0x74 + buffer, dfile.beg);
#if 1;
			switch (j) {

				case 1: {// Trigger for the door 0x81-0xE5
						richTextBox4->AppendText("Offset to 0x81-0xE5 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 2: {// Elevator DOWN 0x82-0xE6
						richTextBox4->AppendText("Offset to 0x82-0xE6 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 3: {// Points on cubes around elevators 0x83-0xE7
						richTextBox4->AppendText("Offset to 0x83-0xE7 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 4: {//Wall fireball trigger
						richTextBox4->AppendText("Offset to 0x84-0xE8 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 5: {//Floor flame trigger
						richTextBox4->AppendText("Offset to 0x85-0xE9 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 6: {//Ceiling fireball trigger
						richTextBox4->AppendText("Offset to 0x86-0xEA = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 7: {//Wall fireball trigger (blue)
						richTextBox4->AppendText("Offset to 0x87-0xEB = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 8: {//Switch off the light (reduces brightness)
						richTextBox4->AppendText("Offset to 0x88-0xEC = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 9: {
						richTextBox4->AppendText("Offset to 0x89-0xED = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 10: {
						richTextBox4->AppendText("Offset to 0x8A-0xEE = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 11: {//This cube points on some Monsters to set to active mode
						richTextBox4->AppendText("Offset to 0x8B-0xEF = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 12: {
						richTextBox4->AppendText("Offset to 0x8C-0xF0 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 13: {
						richTextBox4->AppendText("Offset to 0x8D-0xF1 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 14: {
						richTextBox4->AppendText("Offset to 0x8E-0xF2 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 15: {
						richTextBox4->AppendText("Offset to 0x8F-0xF3 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 16: {
						richTextBox4->AppendText("Offset to 0x90-0xF4 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 17: {
						richTextBox4->AppendText("Offset to 0x91-0xF5 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 18: {
						richTextBox4->AppendText("Offset to 0x92-0xF6 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 19: {
						richTextBox4->AppendText("Offset to 0x93-0xF7 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 20: {// Turns ON flickering light
						richTextBox4->AppendText("Offset to 0x94-0xF8 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 21: {//Elevator DOWN
						richTextBox4->AppendText("Offset to 0x95-0xF9 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 22: {//Elevator UP
						richTextBox4->AppendText("Offset to 0x96-0xFA = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 23: {//Elevator DOWN
						richTextBox4->AppendText("Offset to 0x97-0xFB = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 24: {
						richTextBox4->AppendText("Offset to 0x98-0xFC = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 25: {
						richTextBox4->AppendText("Offset to 0x99-0xFD = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				case 26: {
						richTextBox4->AppendText("Offset to 0x9A-0xFE = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}
				}
#endif;
//						richTextBox4->AppendText("Offset to 0x81-0xE5 = " + (c6blockoffset + 0x74 + buffer) + "\n");			
						// Read quantity for this type
							dfile.read((char *)&temp111,1);
							quant = temp111;
							for (int i=0; i<quant; i++) {
								//Read entry cube (3 bytes)
								dfile.read((char *)&temp111,1);
									entX = temp111;
								dfile.read((char *)&temp111,1);
									entY = temp111;
								dfile.read((char *)&temp111,1);
									entZ = temp111;
										vertstr = "\n";
											outfile << vertstr;
											// Case
			switch (j) {

				case 1: {// Trigger for the door 0x81-0xE5
						vertstr = "o 81E5-DoorTrigger" + patch::to_string(i) + "\n";
						break;
						}
				case 2: {// Elevator DOWN 0x82-0xE6
						vertstr = "o 82E6-ElevatorDOWN" + patch::to_string(i) + "\n";
						break;
						}
				case 3: {// Points on cubes around elevators 0x83-0xE7
						vertstr = "o 83E7-AroundElevators" + patch::to_string(i) + "\n";
						break;
						}
				case 4: {// Wall fireball trigger
						vertstr = "o 84E8-WallFireball" + patch::to_string(i) + "\n";
						break;
						}
				case 5: {//Floor flame trigger
						vertstr = "o 85E9-FloorFireball" + patch::to_string(i) + "\n";
						break;
						}
				case 6: {//Ceiling fireball trigger
						vertstr = "o 86EA-CeilingFireball" + patch::to_string(i) + "\n";
						break;
						}
				case 7: {//Wall fireball trigger (blue)
						vertstr = "o 87EB-WallFireballBlue" + patch::to_string(i) + "\n";
						break;
						}
				case 8: {//Switch off the light (reduces brightness)
						vertstr = "o 88EC-LightOFF" + patch::to_string(i) + "\n";
						break;
						}
				case 9: {
						vertstr = "o 89ED-" + patch::to_string(i) + "\n";
						break;
						}
				case 10: {
						vertstr = "o 8AEE-" + patch::to_string(i) + "\n";
						break;
						 }
				case 11: {//This cube points on some Monsters to set to active mode
						vertstr = "o 8BEF-ActivateMonster" + patch::to_string(i) + "\n";
						break;
						 }
				case 12: {
						vertstr = "o 8CF0-" + patch::to_string(i) + "\n";
						break;
						 }
				case 13: {
						vertstr = "o 8DF1-" + patch::to_string(i) + "\n";
						break;
						 }
				case 14: {
						vertstr = "o 8EF2-" + patch::to_string(i) + "\n";
						break;
						 }
				case 15: {
						vertstr = "o 8FF3-" + patch::to_string(i) + "\n";
						break;
						 }
				case 16: {
						vertstr = "o 90F4-" + patch::to_string(i) + "\n";
						break;
						 }
				case 17: {
						vertstr = "o 91F5-" + patch::to_string(i) + "\n";
						break;
						 }
				case 18: {
						vertstr = "o 92F6-" + patch::to_string(i) + "\n";
						break;
						 }
				case 19: {
						vertstr = "o 93F7-" + patch::to_string(i) + "\n";
						break;
						 }
				case 20: {// Turns ON flickering light
						vertstr = "o 94F8-TurnFlickeringLightON" + patch::to_string(i) + "\n";
						break;
						 }
				case 21: {//Elevator DOWN
						vertstr = "o 95F9-ElevatorDOWN" + patch::to_string(i) + "\n";
						break;
						 }
				case 22: {//Elevator UP
						vertstr = "o 96FA-ElevatorUP" + patch::to_string(i) + "\n";
						break;
						 }
				case 23: {//Elevator DOWN
						vertstr = "o 97FB-ElevatorDOWN" + patch::to_string(i) + "\n";
						break;
						 }
				case 24: {
						vertstr = "o 98FC-" + patch::to_string(i) + "\n";
						break;
						 }
				case 25: {
						vertstr = "o 99FD-" + patch::to_string(i) + "\n";
						break;
						 }
				case 26: {
						vertstr = "o 9AFE-" + patch::to_string(i) + "\n";
						break;
						 }
				}

//										vertstr = "o 81E5-" + patch::to_string(i) + "\n";
											outfile << vertstr;
										vertstr = "v " + patch::to_string(entX+0.5) + " " + patch::to_string(entY+0.5) + " "  + patch::to_string(-entZ-0.5+1) + "\n";
											outfile << vertstr;
										vertexCounter++;
								// Read delimeter/cube exit quantity (1 byte)
								dfile.read((char *)&temp111,1);
									delimeter = temp111;
								// Read exit cubes (depends on delimeter value)
									for (int i=0; i<delimeter; i++) {
										dfile.read((char *)&temp111,1);
											tempbyte1 = temp111;
										dfile.read((char *)&temp111,1);
											tempbyte2 = temp111;
										dfile.read((char *)&temp111,1);
											tempbyte3 = temp111;
										vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.5+1) + "\n";
											outfile << vertstr;
										vertexCounter++;
									//Draw lines
								if (((j==4)||(j==5)||(j==6)||(j==7))&&(i!=0)) {// Exceptions
									vertstr = "l " + patch::to_string(vertexCounter-1-i-8*i) + " " + patch::to_string(vertexCounter) + "\n";
										} else {
									vertstr = "l " + patch::to_string(vertexCounter-1-i) + " " + patch::to_string(vertexCounter) + "\n";
										}
										outfile << vertstr;

			switch (j) {
				case 4: {// Wall fireball trigger
						vertstr = "# Wall fireball trigger " + patch::to_string(i) + "\n";
						outfile << vertstr;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

		vertstr = "usemtl WallFireball\n";
			outfile << vertstr;
		vertstr = "f "+patch::to_string((int)(vertexCounter-7))+"/1 "+patch::to_string((int)(vertexCounter-6))+"/4 "+patch::to_string((int)(vertexCounter-4))+"/3 "+patch::to_string((int)(vertexCounter-5))+"/2\n";
			outfile << vertstr;		
		vertstr = "f "+patch::to_string((int)(vertexCounter-3))+"/1 "+patch::to_string((int)(vertexCounter-2))+"/4 "+patch::to_string((int)(vertexCounter))+"/3 "+patch::to_string((int)(vertexCounter-1))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl WallFireball\n";
			mtlfile << vertstr;
			unsigned int index1 = comboBox1->SelectedIndex;
			unsigned int id1 = 0;
			switch (index1) {
				case 0: {
					id1 = 17;
					break;
					}
				case 1: {
					id1 = 19;
					break;
					}
				case 2: {
					id1 = 18;
					break;
					}
				}
		vertstr = "map_Kd Textures3DO\\DK_Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex" + patch::to_string((int)id1) + ".png\n\n";
			mtlfile << vertstr;

//		vertstr = "map_Kd Textures3DO\\DK Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex17.png\n";
//			mtlfile << vertstr;
			frompolys++;
						break;
						}

				case 5: {//Floor flame trigger
						vertstr = "# Floor flame trigger " + patch::to_string(i) + "\n";
						outfile << vertstr;
#if 1;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

		vertstr = "usemtl FloorFlame\n";
			outfile << vertstr;
		vertstr = "f "+patch::to_string((int)(vertexCounter-7))+"/1 "+patch::to_string((int)(vertexCounter-6))+"/4 "+patch::to_string((int)(vertexCounter-4))+"/3 "+patch::to_string((int)(vertexCounter-5))+"/2\n";
			outfile << vertstr;		
		vertstr = "f "+patch::to_string((int)(vertexCounter-3))+"/1 "+patch::to_string((int)(vertexCounter-2))+"/4 "+patch::to_string((int)(vertexCounter))+"/3 "+patch::to_string((int)(vertexCounter-1))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl FloorFlame\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\DK_Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex11.png\n\n";
			mtlfile << vertstr;
			frompolys++;
#endif;
						break;
						}

				case 6: {//Ceiling fireball trigger Tex 20 24 22
						vertstr = "# Ceiling fireball trigger " + patch::to_string(i) + "\n";
						outfile << vertstr;
#if 1;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;


		vertstr = "usemtl CeilingFireball\n";
			outfile << vertstr;
		vertstr = "f "+patch::to_string((int)(vertexCounter-7))+"/1 "+patch::to_string((int)(vertexCounter-6))+"/4 "+patch::to_string((int)(vertexCounter-4))+"/3 "+patch::to_string((int)(vertexCounter-5))+"/2\n";
			outfile << vertstr;		
		vertstr = "f "+patch::to_string((int)(vertexCounter-3))+"/1 "+patch::to_string((int)(vertexCounter-2))+"/4 "+patch::to_string((int)(vertexCounter))+"/3 "+patch::to_string((int)(vertexCounter-1))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl CeilingFireball\n";
			mtlfile << vertstr;
			unsigned int index = comboBox1->SelectedIndex;
			unsigned int id = 0;
			switch (index) {
				case 0: {
					id = 20;
					break;
					}
				case 1: {
					id = 24;
					break;
					}
				case 2: {
					id = 22;
					break;
					}
				}
		vertstr = "map_Kd Textures3DO\\DK_Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex" + patch::to_string((int)id) + ".png\n\n";
			mtlfile << vertstr;
			frompolys++;
#endif;
						break;
						}


				case 7: {//Wall fireball trigger (blue) Tex 19 21 20
						vertstr = "# Wall fireball trigger (blue) " + patch::to_string(i) + "\n";
						outfile << vertstr;
#if 1;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

		vertstr = "usemtl WallFireballBlue\n";
			outfile << vertstr;
		vertstr = "f "+patch::to_string((int)(vertexCounter-7))+"/1 "+patch::to_string((int)(vertexCounter-6))+"/4 "+patch::to_string((int)(vertexCounter-4))+"/3 "+patch::to_string((int)(vertexCounter-5))+"/2\n";
			outfile << vertstr;		
		vertstr = "f "+patch::to_string((int)(vertexCounter-3))+"/1 "+patch::to_string((int)(vertexCounter-2))+"/4 "+patch::to_string((int)(vertexCounter))+"/3 "+patch::to_string((int)(vertexCounter-1))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl WallFireballBlue\n";
			mtlfile << vertstr;
			unsigned int index = comboBox1->SelectedIndex;
			unsigned int id = 0;
			switch (index) {
				case 0: {
					id = 19;
					break;
					}
				case 1: {
					id = 21;
					break;
					}
				case 2: {
					id = 20;
					break;
					}
				}
		vertstr = "map_Kd Textures3DO\\DK_Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex" + patch::to_string((int)id) + ".png\n\n";
			mtlfile << vertstr;
			frompolys++;
#endif;
						break;
						}
				}
										}
							vertstr = "\n";
							outfile << vertstr;
							}
					}
				}
			}

#endif;

makestartexit:
// Mark level start end exit
float cubeSize = 0.3;
	vertstr = "o Start\n";
	outfile << vertstr;
	// v1 high
	vertstr = "v " + patch::to_string(entryX+gap+cubeSize) + " " + patch::to_string(entryY+gap+cubeSize) + " "  + patch::to_string(-entryZ+gap+cubeSize) + "\n";
	outfile << vertstr;
		currVertex++;
	// v2 high
	vertstr = "v " + patch::to_string(entryX+gap+cubeSize) + " " + patch::to_string(entryY+1-gap-cubeSize) + " "  + patch::to_string(-entryZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	// v3 high
	vertstr = "v " + patch::to_string(entryX+1-gap-cubeSize) + " " + patch::to_string(entryY+1-gap-cubeSize) + " "  + patch::to_string(-entryZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	// v4 high
	vertstr = "v " + patch::to_string(entryX+1-gap-cubeSize) + " " + patch::to_string(entryY+gap+cubeSize) + " "  + patch::to_string(-entryZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	
		// v5 low
	vertstr = "v " + patch::to_string(entryX+gap+cubeSize) + " " + patch::to_string(entryY+gap+cubeSize) + " "  + patch::to_string(-entryZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v6 low
	vertstr = "v " + patch::to_string(entryX+gap+cubeSize) + " " + patch::to_string(entryY+1-gap-cubeSize) + " "  + patch::to_string(-entryZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v7 low
	vertstr = "v " + patch::to_string(entryX+1-gap-cubeSize) + " " + patch::to_string(entryY+1-gap-cubeSize) + " "  + patch::to_string(-entryZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v8 low
	vertstr = "v " + patch::to_string(entryX+1-gap-cubeSize) + " " + patch::to_string(entryY+gap+cubeSize) + " "  + patch::to_string(-entryZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;


		vertstr = "usemtl start\n";
			outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(vertexCounter+1))+"/1 "+patch::to_string((int)(vertexCounter+2))+"/4 "+patch::to_string((int)(vertexCounter+6))+"/3 "+patch::to_string((int)(vertexCounter+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(vertexCounter+2))+"/1 "+patch::to_string((int)(vertexCounter+3))+"/4 "+patch::to_string((int)(vertexCounter+7))+"/3 "+patch::to_string((int)(vertexCounter+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(vertexCounter+3))+"/1 "+patch::to_string((int)(vertexCounter+4))+"/4 "+patch::to_string((int)(vertexCounter+8))+"/3 "+patch::to_string((int)(vertexCounter+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(vertexCounter+4))+"/1 "+patch::to_string((int)(vertexCounter+1))+"/4 "+patch::to_string((int)(vertexCounter+5))+"/3 "+patch::to_string((int)(vertexCounter+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl start\n";
			mtlfile << vertstr;
		vertstr = "Kd 1.000 0.000 0.000\n";
			mtlfile << vertstr;
vertexCounter += 8;

	vertstr = "o Exit\n";
	outfile << vertstr;
	// v1 high
	vertstr = "v " + patch::to_string(exitX+gap+cubeSize) + " " + patch::to_string(exitY+gap+cubeSize) + " "  + patch::to_string(-exitZ+gap+cubeSize) + "\n";
	outfile << vertstr;
		currVertex++;
	// v2 high
	vertstr = "v " + patch::to_string(exitX+gap+cubeSize) + " " + patch::to_string(exitY+1-gap-cubeSize) + " "  + patch::to_string(-exitZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	// v3 high
	vertstr = "v " + patch::to_string(exitX+1-gap-cubeSize) + " " + patch::to_string(exitY+1-gap-cubeSize) + " "  + patch::to_string(-exitZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	// v4 high
	vertstr = "v " + patch::to_string(exitX+1-gap-cubeSize) + " " + patch::to_string(exitY+gap+cubeSize) + " "  + patch::to_string(-exitZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	
		// v5 low
	vertstr = "v " + patch::to_string(exitX+gap+cubeSize) + " " + patch::to_string(exitY+gap+cubeSize) + " "  + patch::to_string(-exitZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v6 low
	vertstr = "v " + patch::to_string(exitX+gap+cubeSize) + " " + patch::to_string(exitY+1-gap-cubeSize) + " "  + patch::to_string(-exitZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v7 low
	vertstr = "v " + patch::to_string(exitX+1-gap-cubeSize) + " " + patch::to_string(exitY+1-gap-cubeSize) + " "  + patch::to_string(-exitZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v8 low
	vertstr = "v " + patch::to_string(exitX+1-gap-cubeSize) + " " + patch::to_string(exitY+gap+cubeSize) + " "  + patch::to_string(-exitZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;

		vertstr = "usemtl exit\n";
			outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(vertexCounter+1))+"/1 "+patch::to_string((int)(vertexCounter+2))+"/4 "+patch::to_string((int)(vertexCounter+6))+"/3 "+patch::to_string((int)(vertexCounter+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(vertexCounter+2))+"/1 "+patch::to_string((int)(vertexCounter+3))+"/4 "+patch::to_string((int)(vertexCounter+7))+"/3 "+patch::to_string((int)(vertexCounter+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(vertexCounter+3))+"/1 "+patch::to_string((int)(vertexCounter+4))+"/4 "+patch::to_string((int)(vertexCounter+8))+"/3 "+patch::to_string((int)(vertexCounter+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(vertexCounter+4))+"/1 "+patch::to_string((int)(vertexCounter+1))+"/4 "+patch::to_string((int)(vertexCounter+5))+"/3 "+patch::to_string((int)(vertexCounter+8))+"/2\n";
			outfile << vertstr;
		vertstr = "newmtl exit\n";
			mtlfile << vertstr;
		vertstr = "Kd 0.000 0.000 1.000\n";
			mtlfile << vertstr;

		vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
		vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
		vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
		vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
outfile.close();
mtlfile.close();

progressBar2->Increment(2600); // Fill the rest of progressBar2
progressBar2->Update();
this->Update();

if (progressBar2->Value == progressBar2->Maximum) {
progressBar2->Value = 0;
}
//BuildCollision(); // Next stop - collision model :)
}




// Build Teleport and other types Lines (new logic)
void BuildLogicLinesNew(void) {

unsigned int wallsBevels1, wallsBevels2;
float gap = float::Parse(textBox42->Text);
int voxCount = 0;
int skippedVoxels = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned int polyCount1 = 0;
unsigned int currVertex = 0;
unsigned long long voxelarr[16384];
//unsigned int teleportarr[16384];
int tempFilename = 0;
string FileNameString222;
// Create vector of vectors for teleports on the level 11a
vector <vector <int>> teleportgraph;
teleportgraph.reserve(16384); 
//vector <int> tempvec;

fstream outfile, mtlfile, tmpbinfile, graphfile;

#if 1;
unsigned int buf777, b5size, c6blockoffset;
unsigned char tt, tele = 0;
unsigned int vertexCounter, quant, offset2data, tempoffset, tempoffset2 = 0;
unsigned int skipcubes = 0;
int buffer, buffer2 = 0;
float entX, entY, entZ, exiX, exiY, exiZ, tempbyte1, tempbyte2, tempbyte3 = 0;
#endif;

vertexCounter = 0;

pin_ptr<const wchar_t> convertedValue = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_LogicLines.obj");
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);

pin_ptr<const wchar_t> convertedValue1 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_LogicLines.mtl"); 
const wchar_t *path1 = convertedValue1;                     // <-- Unnecessary, but to be completely verbose
mtlfile.open(path1, ios::out);

std::string str;
std::string str2;
std::string str3;
std::string currN;
std::string vertstr;
// Fill temp arrays
	for (int p=0; p<16384; p++) {
		 voxelarr[p] = voxelArray[p].value1;
		}

	for (int p=0; p<16384; p++) {
//		 teleportarr[p] = 0;
		}


_ULonglong temp = voxelArray[voxCount].value1;
_ULonglong temp123 = 0;

///////////////////////////////////////****************************////////////////////
// Do all stuff here
ifstream dfile;
pin_ptr<const wchar_t> dir2 = PtrToStringChars(openFileDialog1->FileName + "data"); 
const wchar_t *dir3 = dir2; 
dfile.open(dir3, ios::binary|ios::in);

    dfile.seekg (0, dfile.end);
    int datalength11 = dfile.tellg();
    dfile.seekg (0, dfile.beg);
//File opened.

int buf21, buf22;
unsigned int n2=0;
unsigned int pos3002, b5size2 = 0;
unsigned int count2 = 0;
unsigned int count3 = 0;
bool eightbytes2 = false;
unsigned char b2size2 = 0;
char temp111;
unsigned char delimeter = 0;
unsigned int frompolys = 0;
unsigned char telecount = 0;


//mtllib Scenery.mtl
// Link a mtl file
//String ^ name = "";
//name = (System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName));

//msclr::interop::marshal_context context;
//std::string standardString1 = context.marshal_as<std::string>(name);
//vertstr = "mtllib " + patch::to_string(name) + "_LogicLines.mtl\n";
//outfile << vertstr;

	// Reading first 4 bytes. It's a number of CCBs I must skip to read data blocks.
	dfile.read((char *)&buf21,sizeof(buf21));
		count2 += 4;
	buf21 = Swap4Bytes(buf21);
	numofEntries = buf21;

// Skip all numofEntries cel files
for (int i=0; i<datalength11/4; i++) {
		dfile.read((char *)&buf21,sizeof(buf21));
		count2 += 4;
			if (buf21 == 0x20424343) {
			n2++;
				if (n2 == numofEntries) {
//				richTextBox4->AppendText("numofEntries = " + numofEntries + "\n");
//				richTextBox4->AppendText("count2 = " + count2 + "\n");
			// It's the last CCB before my 5 blocks. Save it and close tmpfile1.
//			richTextBox4->AppendText("count = " + count + "\n");

						dfile.seekg (count2-8, dfile.beg);
						count2 -=8;
						dfile.read((char *)&buf22,sizeof(buf22));
						count2 +=4;
							buf22 = Swap4Bytes(buf22);
			//******************************************************
							// IF size not found (8 bytes before located) Seek size
							if (buf22 > 0xFFFFF) {
								eightbytes2 = true;
								// Step back for 12 bytes
								dfile.seekg (count2-12, dfile.beg);
								dfile.read((char *)&buf22,sizeof(buf22));
								buf22 = Swap4Bytes(buf22);
								count2 -=8;
								}
//						richTextBox4->AppendText("Last CCB position = " + count + "\n");
//						richTextBox4->AppendText("Last CCB size = " + buf2 + "\n");
							if (eightbytes2) {
//								infile.seekg (count+buf2+8, infile.beg);
								count2 += 8;
//								richTextBox4->AppendText("8 bytes\n");
								} else 
								{
//								infile.seekg (count+buf2, infile.beg);
								count2;
								}
			//******************************************************
						dfile.seekg (count2+4, dfile.beg); // Jump to pos just after CCB label
						for (int j=0; j<(buf22/4); j++) {
//							richTextBox4->AppendText("j = " + j + "\n");
							dfile.read((char *)&buf21,sizeof(buf21));
							count2 += 4;
							}
//						richTextBox4->AppendText("count2 = " + count2 + "\n");
						goto complete;
				}
		}
	}
complete:
// Skip block 1, 2, 3
#if 0;
unsigned char bufer100 = 0;

for (int i=0; i<0x100; i++) {
	dfile.read((char *)&bufer100, sizeof(bufer100));
//	backgroundsArray[i] = bufer100;
}
for (int i=0; i<0x100; i++) {
	dfile.read((char *)&bufer100, sizeof(bufer100)); // For torches
//	torchesArray[i] = bufer100;
}
// Skip the rest 0x100 bytes of block 1.
for (int i=0; i<0x100; i++) {
	dfile.read((char *)&bufer100, sizeof(bufer100)); // Just skip 0x100 bytes.
}
#endif;
/////////////*****************//////***********************////////////////////////////
						// Skip block 1.
						pos3002 = count2 + buf22;
						dfile.seekg (count2 + 0x300, dfile.beg);
//						dfile.seekg (count2 + buf22 + 0x300, dfile.beg);
//						count2 = count2 + buf22 + 0x300;
						count2 = count2 + 0x300;

						// Skip block 2.
						// Read 1 byte (block 2 size)
						dfile.read((char *)&b2size2,sizeof(b2size2));
						count2 += b2size2;
						block2Size = b2size2;
//						richTextBox4->AppendText("b2size = " + b2size + "\n");

						dfile.seekg (count2, dfile.beg);
						// Reading N of entries of Block 3 (cube's specs itself)
						dfile.read((char *)&buf22,sizeof(buf22));
						count2 += 4;
						buf22 = Swap4Bytes(buf22);
//						richTextBox4->AppendText("Block 3 entries = " + buf2 + "\n");
						numofEntries = buf22;

						// Skip block 3
				//		count2 = count2 + numofEntries*16 + 8;
						count2 = count2 + numofEntries*16;
							// Read entryX, entryY, entryZ
							dfile.seekg (count2, dfile.beg);
							dfile.read((char *)&temp111,1);
								entryX = temp111;
							dfile.read((char *)&temp111,1);
								entryY = temp111;
							dfile.read((char *)&temp111,1);
								entryZ = temp111;
							dfile.read((char *)&temp111,1);
								entryRotation = temp111;
							dfile.read((char *)&temp111,1);
								exitX = temp111;
							dfile.read((char *)&temp111,1);
								exitY = temp111;
							dfile.read((char *)&temp111,1);
								exitZ = temp111;
//							dfile.read((char *)&temp111,sizeof(temp111));
								count2 += 8;

						dfile.seekg (count2, dfile.beg);
//							richTextBox4->AppendText("Total specs= " + numofEntries + "\n");
//							richTextBox4->AppendText("count2 = " + count2 + "\n");



		// Seek teleports data (block 5)
#if 0;
unsigned int buf777, b5size, c6blockoffset;
unsigned char tt, tele = 0;
unsigned int vertexCounter, quant, offset2data, tempoffset, tempoffset2 = 0;
unsigned int skipcubes = 0;
int buffer, buffer2 = 0;
float entX, entY, entZ, exiX, exiY, exiZ, tempbyte1, tempbyte2, tempbyte3 = 0;
#endif;

// Skip 0x6C block
				c6blockoffset = count2;
						count2 += 0x70;
						// Read block 5 (teleports and elevators)
						dfile.seekg (count2, dfile.beg);
						// Read block 5 size
						dfile.read((char *)&buf777,sizeof(buf777));
						count2 += 4;
						buf777 = Swap4Bytes(buf777);
						b5size = buf777;
						richTextBox4->AppendText("Block 5 (teleports) size = " + b5size + "\n");
							if (b5size == 4) {
								dataGridView18->Rows[0]->Cells[0]->Value = "No teleports";
								dataGridView18->Rows[0]->Cells[1]->Value = "or elevators";
								dataGridView18->Rows[0]->Cells[2]->Value = "found";
									progressBar2->Increment(16384); // Add
									progressBar2->Update();
									this->Update();
								goto makestartexit;
							} //else {

//								}
///////////////////////////////////////****************************////////////////////
//string stdstring;

// Make a 11a level graph
// If level N is 11a, 
#if 1;
//voxelArray[voxCount].value1
if ((voxelArray[7896].value1 == 0xff00000090270000)&&(voxelArray[4400].value1 == 0xff0000007016002a)&&(voxelArray[5932].value1 == 0xff0000008020002a)&&(voxelArray[15213].value1 == 0xff00000080430000)) {
//if (openFileDialog1->SafeFileName == "11a") {
dataGridView19->RowCount = 140;

// Initialize int arrays:
/////unsigned int vertexesgraph[] = {289,293,345,401,405,457,461,1033,1037,1085,1137,1145,1149,1249,1253,1825,1829,1881,1937,1941,1993,1997,2083,2139,2197,2249,2253,2827,2931,2941,2993,3041,3045,3619,3675,3733,3785,3789,3873,3877,3929,3933,4043,4617,4621,4721,4725,4787,4835,5413,5465,5469,5669,5723,6409,6413,6457,6461,6467,6515,6579,6627,7201,7371,7569,7625,7629,8205,8253,8259,8307,8313,8373,8417,8421,8997,9051,9105,9161,9249,9253,9305,9309,9361,9993,9997,10101,10153,10165,10213,10789,10841,10845,10897,10957,11099,11155,11209,11785,11833,11843,11947,11953,12001,12635,12691,12891,12947,13117,13577,13625,13635,13739,13745,13793,14369,14427,14483,14537,14629,14681,14685,14737,14741,14795,15373,15425,15453,15529,15533,15539,15587,16165,16217,16221,16273,16277,16331};
unsigned int vertexesgraph[] = {289,293,345,401,405,457,461,1033,1037,1085,1137,1145,1149,1249,1253,1825,1829,1881,1937,1941,1993,1997,2083,2139,2197,2249,2253,2827,2931,2941,2993,3041,3045,3619,3675,3733,3785,3789,3873,3877,3929,3933,4043,4617,4621,4721,4725,4787,4835,5413,5465,5469,5669,5723,6409,6413,6457,6461,6467,6515,6579,6627,7201,7371,7569,7625,7629,8205,8253,8259,8307,8313,8373,8417,8421,8997,9051,9105,9161,9249,9253,9305,9309,9361,9993,9997,10101,10153,10165,10213,10789,10841,10845,10897,10957,11099,11155,11209,11785,11833,11843,11947,11953,12001,12635,12691,12891,12947,13117,13577,13625,13635,13739,13745,13793,14369,14427,14483,14537,14629,14681,14685,14737,14741,14795,15373,15425,15453,15529,15533,15539,15587,16165,16217,16221,16273,16277,16331,13349};
bool foundvertex = false;
unsigned int checking = 0;
unsigned int counterVox = -1;
string strfortextfile;

unsigned int ribsblank[] = {0};
vector <int> vribsblank(ribsblank, ribsblank+1);
//ribsblank.push_back(vribsblank);


unsigned int ribs0[] = {1993,1033,1825,1881,345,1137};
unsigned int ribs1[] = {14483,1037,1829,1085};
unsigned int ribs2[] = {7201,289,1033,1825,1881,1137};
unsigned int ribs3[] = {1881,1145,1937,1993,1249,457};
unsigned int ribs4[] = {3789,1149,1941,1997,1253,461};
unsigned int ribs5[] = {5465,401,1145,1937,1993,1249};
unsigned int ribs6[] = {3733,405,1149,1941,1997,1253};
unsigned int ribs7[] = {1249,289,1825,345,1881,1137};
unsigned int ribs8[] = {2931,1829,1085,293};
unsigned int ribs9[] = {9997,293,1037,1829};
unsigned int ribs10[] = {4617,345,289,1033,1825,1881};
unsigned int ribs11[] = {3041,1937,1993,1249,457,401};
unsigned int ribs12[] = {6515,1941,1997,1253,461,405};
unsigned int ribs13[] = {1033,457,401,1145,1937,1993};
unsigned int ribs14[] = {8373,461,405,1149,1941,1997};
unsigned int ribs15[] = {2249,1033,289,345,1881,1137};
unsigned int ribs16[] = {12947,1085,293,1037};
unsigned int ribs17[] = {401,1137,345,289,1033,1825};
unsigned int ribs18[] = {3873,1993,1249,457,401,1145};
unsigned int ribs19[] = {5723,1997,1253,461,405,1149};
unsigned int ribs20[] = {289,457,1249,401,1937,1145};
unsigned int ribs21[] = {2197,1253,461,405,1149,1941};
unsigned int ribs22[] = {10957,2827,3619,3675,2931,2139};
unsigned int ribs23[] = {10789,2083,2827,3619,3675,2931};
unsigned int ribs24[] = {1997,2941,3733,3789,3045,2253};
unsigned int ribs25[] = {1825,2993,3785,3041};
unsigned int ribs26[] = {8997,2197,2941,3733,3789,3045};
unsigned int ribs27[] = {10213,3619,3675,2931,2139,2083};
unsigned int ribs28[] = {1037,2139,2083,2827,3619,3675};
unsigned int ribs29[] = {8421,3733,3789,3045,2253,2197};
unsigned int ribs30[] = {4721,3785,3041,2249};
unsigned int ribs31[] = {1145,2249,2993,3785};
unsigned int ribs32[] = {8205,2253,2197,2941,3733,3789};
unsigned int ribs33[] = {9253,3675,2931,2139,2083,2827};
unsigned int ribs34[] = {9309,2931,2139,2083,2827,3619};
unsigned int ribs35[] = {461,3789,3045,2253,2197,2941};
unsigned int ribs36[] = {3929,3041,2249,2993};
unsigned int ribs37[] = {405,3045,2253,2197,2941,3733};
unsigned int ribs38[] = {1937,4617,6409,7201,6457,5465,4721,3929};
unsigned int ribs39[] = {16165,4621,5413,5469,4725,3933};
unsigned int ribs40[] = {3785,3873,4617,6409,7201,6457,5465,4721};
unsigned int ribs41[] = {16277,3877,4621,5413,5469,4725};
unsigned int ribs42[] = {9051,4787,6579,7371,6627,4835};
unsigned int ribs43[] = {1137,6409,7201,6457,5465,4721,3929,3873};
unsigned int ribs44[] = {15533,5413,5469,4725,3933,3877};
unsigned int ribs45[] = {2993,3929,3873,4617,6409,7201,6457,5465};
unsigned int ribs46[] = {15373,3933,3877,4621,5413,5469};
unsigned int ribs47[] = {4725,6579,7371,6627,4835,4043};
unsigned int ribs48[] = {4621,4043,4787,6579,7371,6627};
unsigned int ribs49[] = {14741,5469,4725,3933,3877,4621};
unsigned int ribs50[] = {457,4721,3929,3873,4617,6409,7201,6457};
unsigned int ribs51[] = {14629,4725,3933,3877,4621,5413};
unsigned int ribs52[] = {7371,6413,8205,8997,8253,6461};
unsigned int ribs53[] = {1941,6467,8259,9051,8307,6515};
unsigned int ribs54[] = {13625,7201,6457,5465,4721,3929,3873,4617};
unsigned int ribs55[] = {8307,8205,8997,8253,6461,5669};
unsigned int ribs56[] = {13577,5465,4721,3929,3873,4617,6409,7201};
unsigned int ribs57[] = {8259,5669,6413,8205,8997,8253};
unsigned int ribs58[] = {8253,8259,9051,8307,6515,5723};
unsigned int ribs59[] = {1149,5723,6467,8259,9051,8307};
unsigned int ribs60[] = {4725,7371,6627,4835,4043,4787};
unsigned int ribs61[] = {4621,4835,4043,4787,6579,7371};
unsigned int ribs62[] = {345,6457,5465,4721,3929,3873,4617,6409};
unsigned int ribs63[] = {5669,6627,4835,4043,4787,6579};
unsigned int ribs64[] = {10897,8313,9105,9161,8417,7625};
unsigned int ribs65[] = {14369,7569,8313,9105,9161,8417};
unsigned int ribs66[] = {10845,8373,10165,10957,10213,8421};
unsigned int ribs67[] = {3045,8997,8253,6461,5669,6413};
unsigned int ribs68[] = {6467,6461,5669,6413,8205,8997};
unsigned int ribs69[] = {6461,9051,8307,6515,5723,6467};
unsigned int ribs70[] = {6413,6515,5723,6467,8259,9051};
unsigned int ribs71[] = {11833,9105,9161,8417,7625,7569};
unsigned int ribs72[] = {1253,10165,10957,10213,8421,7629};
unsigned int ribs73[] = {11785,7625,7569,8313,9105,9161};
unsigned int ribs74[] = {2941,7629,8373,10165,10957,10213};
unsigned int ribs75[] = {2253,8253,6461,5669,6413,8205};
unsigned int ribs76[] = {4043,8307,6515,5723,6467,8259};
unsigned int ribs77[] = {9249,9161,8417,7625,7569,8313};
unsigned int ribs78[] = {9361,8417,7625,7569,8313,9105};
unsigned int ribs79[] = {9105,9993,11785,13577,14369,13625,11833,10841,10897,10153,9361,9305};
unsigned int ribs80[] = {3619,9997,10789,10845,10101,9309};
unsigned int ribs81[] = {12691,9249,9993,11785,13577,14369,13625,11833,10841,10897,10153,9361};
unsigned int ribs82[] = {3675,9253,9997,10789,10845,10101};
unsigned int ribs83[] = {9161,9305,9249,9993,11785,13577,14369,13625,11833,10841,10897,10153};
unsigned int ribs84[] = {10153,11785,13577,14369,13625,11833,10841,10897,10153,9361,9305,9249};
unsigned int ribs85[] = {1085,10789,10845,10101,9309,9253};
unsigned int ribs86[] = {10165,9309,9253,9997,10789,10845};
unsigned int ribs87[] = {9993,9361,9305,9249,9993,11785,13577,14369,13625,11833,10841,10897};
unsigned int ribs88[] = {10101,10957,10213,8421,7629,8373};
unsigned int ribs89[] = {2827,8421,7629,8373,10165,10957};
unsigned int ribs90[] = {2139,10845,10101,9309,9253,9997};
unsigned int ribs91[] = {11155,10897,10153,9361,9305,9249,9993,11785,13577,14369,13625,11833};
unsigned int ribs92[] = {7629,10101,9309,9253,9997,10789};
unsigned int ribs93[] = {7569,10153,9361,9305,9249,9993,11785,13577,14369,13625,11833,10841};
unsigned int ribs94[] = {2083,10213,8421,7629,8373,10165};
unsigned int ribs95[] = {16217,11843,12635,12691,11947,11155};
unsigned int ribs96[] = {10841,11099,11843,12635,12691,11947};
unsigned int ribs97[] = {16331,11953,13745,14537,13793,12001};
unsigned int ribs98[] = {8417,13577,14369,13625,11833,10841,10897,10153,9361,9305,9249,9993};
unsigned int ribs99[] = {8313,10841,10897,10153,9361,9305,9249,9993,11785,13577,14369,13625};
unsigned int ribs100[] = {15587,12635,12691,11947,11155,11099};
unsigned int ribs101[] = {15425,11155,11099,11843,12635,12691};
unsigned int ribs102[] = {13739,13745,14537,13793,12001,11209};
unsigned int ribs103[] = {13745,11209,11953,13745,14537,13793};
unsigned int ribs104[] = {14737,12691,11947,11155,11099,11843};
unsigned int ribs105[] = {9305,11947,11155,11099,11843,12635};
unsigned int ribs106[] = {16273,13635,14427,14483,13739,12947};
unsigned int ribs107[] = {1829,12891,13635,14427,14483,13739};
unsigned int ribs108[] = {3217, 13349};
unsigned int ribs109[] = {6457,14369,13625,11833,10841,10897,10153,9361,9305,9249,9993,11785};
unsigned int ribs110[] = {6409,11833,10841,10897,10153,9361,9305,9249,9993,11785,13577,14369};
unsigned int ribs111[] = {13793,14427,14483,13739,12947,12891};
unsigned int ribs112[] = {11953,12947,12891,13635,14427,14483};
unsigned int ribs113[] = {12001,14537,13793,12001,11209,11953};
unsigned int ribs114[] = {13635,12001,11209,11953,13745,14537};
unsigned int ribs115[] = {7625,13625,11833,10841,10897,10153,9361,9305,9249,9993,11785,13577};
unsigned int ribs116[] = {14681,14483,13739,12947,12891,13635};
unsigned int ribs117[] = {293,13739,12947,12891,13635,14427};
unsigned int ribs118[] = {14795,13793,12001,11209,11953,13745};
unsigned int ribs119[] = {5469,15453,15373,16165,16221,16277,15533,14741,14685};
unsigned int ribs120[] = {14427,15425,16217,16273,15529,14737};
unsigned int ribs121[] = {7371,14629,15453,15373,16165,16221,16277,15533,14741};
unsigned int ribs122[] = {12635,14681,15425,16217,16273,15529};
unsigned int ribs123[] = {5413,14685,14629,15453,15373,16165,16221,16277,15533};
unsigned int ribs124[] = {14537,15539,16331,15587};
unsigned int ribs125[] = {15533,16165,16221,16277,15533,14741,14685,14629,15453};
unsigned int ribs126[] = {11947,16217,16273,15529,14737,14681};
unsigned int ribs127[] = {13349,15373,16165,16221,16277,15533,14741,14685,14629};
unsigned int ribs128[] = {15539,14737,14681,15425,16217,16273};
unsigned int ribs129[] = {15373,14741,14685,14629,15453,15373,16165,16221,16277};
unsigned int ribs130[] = {15529,16331,15587,14795};
unsigned int ribs131[] = {11843,14795,15539,16331};
unsigned int ribs132[] = {3877,16221,16277,15533,14741,14685,14629,15453,15373};
unsigned int ribs133[] = {11099,16273,15529,14737,14681,15425};
unsigned int ribs134[] = {4043,16277,15533,14741,14685,14629,15453,15373,16165};
unsigned int ribs135[] = {12891,15529,14737,14681,15425,16217};
unsigned int ribs136[] = {3933,15533,14741,14685,14629,15453,15373,16165,16221};
unsigned int ribs137[] = {11209,15587,14795,15539};
unsigned int ribs138[] = {13117};


	//289 
//	unsigned int ribs0[] = {1993,1033,1825,1881,345,1137};
//		vector <int> vribs00(ribs0, ribs0+6);

	//293
//	unsigned int ribs1[] = {14483,1037,1829,1085};
//		vector <int> vribs01(ribs1, ribs1+4);

	//345
//	unsigned int ribs2[] = {7201,289,1033,1825,1881,1137};
//		vector <int> vribs02(ribs2, ribs2+6);


vector <int> vribs00(ribs0, ribs0 + 6);
vector <int> vribs01(ribs1, ribs1 + 4);
vector <int> vribs02(ribs2, ribs2 + 6);
vector <int> vribs03(ribs3, ribs3 + 6);
vector <int> vribs04(ribs4, ribs4 + 6);
vector <int> vribs05(ribs5, ribs5 + 6);
vector <int> vribs06(ribs6, ribs6 + 6);
vector <int> vribs07(ribs7, ribs7 + 6);
vector <int> vribs08(ribs8, ribs8 + 4);
vector <int> vribs09(ribs9, ribs9 + 4);
vector <int> vribs10(ribs10, ribs10 + 6);
vector <int> vribs11(ribs11, ribs11 + 6);
vector <int> vribs12(ribs12, ribs12 + 6);
vector <int> vribs13(ribs13, ribs13 + 6);
vector <int> vribs14(ribs14, ribs14 + 6);
vector <int> vribs15(ribs15, ribs15 + 6);
vector <int> vribs16(ribs16, ribs16 + 4);
vector <int> vribs17(ribs17, ribs17 + 6);
vector <int> vribs18(ribs18, ribs18 + 6);
vector <int> vribs19(ribs19, ribs19 + 6);
vector <int> vribs20(ribs20, ribs20 + 6);
vector <int> vribs21(ribs21, ribs21 + 6);
vector <int> vribs22(ribs22, ribs22 + 6);
vector <int> vribs23(ribs23, ribs23 + 6);
vector <int> vribs24(ribs24, ribs24 + 6);
vector <int> vribs25(ribs25, ribs25 + 4);
vector <int> vribs26(ribs26, ribs26 + 6);
vector <int> vribs27(ribs27, ribs27 + 6);
vector <int> vribs28(ribs28, ribs28 + 6);
vector <int> vribs29(ribs29, ribs29 + 6);
vector <int> vribs30(ribs30, ribs30 + 4);
vector <int> vribs31(ribs31, ribs31 + 4);
vector <int> vribs32(ribs32, ribs32 + 6);
vector <int> vribs33(ribs33, ribs33 + 6);
vector <int> vribs34(ribs34, ribs34 + 6);
vector <int> vribs35(ribs35, ribs35 + 6);
vector <int> vribs36(ribs36, ribs36 + 4);
vector <int> vribs37(ribs37, ribs37 + 6);
vector <int> vribs38(ribs38, ribs38 + 8);
vector <int> vribs39(ribs39, ribs39 + 6);
vector <int> vribs40(ribs40, ribs40 + 8);
vector <int> vribs41(ribs41, ribs41 + 6);
vector <int> vribs42(ribs42, ribs42 + 6);
vector <int> vribs43(ribs43, ribs43 + 8);
vector <int> vribs44(ribs44, ribs44 + 6);
vector <int> vribs45(ribs45, ribs45 + 8);
vector <int> vribs46(ribs46, ribs46 + 6);
vector <int> vribs47(ribs47, ribs47 + 6);
vector <int> vribs48(ribs48, ribs48 + 6);
vector <int> vribs49(ribs49, ribs49 + 6);
vector <int> vribs50(ribs50, ribs50 + 8);
vector <int> vribs51(ribs51, ribs51 + 6);
vector <int> vribs52(ribs52, ribs52 + 6);
vector <int> vribs53(ribs53, ribs53 + 6);
vector <int> vribs54(ribs54, ribs54 + 8);
vector <int> vribs55(ribs55, ribs55 + 6);
vector <int> vribs56(ribs56, ribs56 + 8);
vector <int> vribs57(ribs57, ribs57 + 6);
vector <int> vribs58(ribs58, ribs58 + 6);
vector <int> vribs59(ribs59, ribs59 + 6);
vector <int> vribs60(ribs60, ribs60 + 6);
vector <int> vribs61(ribs61, ribs61 + 6);
vector <int> vribs62(ribs62, ribs62 + 8);
vector <int> vribs63(ribs63, ribs63 + 6);
vector <int> vribs64(ribs64, ribs64 + 6);
vector <int> vribs65(ribs65, ribs65 + 6);
vector <int> vribs66(ribs66, ribs66 + 6);
vector <int> vribs67(ribs67, ribs67 + 6);
vector <int> vribs68(ribs68, ribs68 + 6);
vector <int> vribs69(ribs69, ribs69 + 6);
vector <int> vribs70(ribs70, ribs70 + 6);
vector <int> vribs71(ribs71, ribs71 + 6);
vector <int> vribs72(ribs72, ribs72 + 6);
vector <int> vribs73(ribs73, ribs73 + 6);
vector <int> vribs74(ribs74, ribs74 + 6);
vector <int> vribs75(ribs75, ribs75 + 6);
vector <int> vribs76(ribs76, ribs76 + 6);
vector <int> vribs77(ribs77, ribs77 + 6);
vector <int> vribs78(ribs78, ribs78 + 6);
vector <int> vribs79(ribs79, ribs79 + 12);
vector <int> vribs80(ribs80, ribs80 + 6);
vector <int> vribs81(ribs81, ribs81 + 12);
vector <int> vribs82(ribs82, ribs82 + 6);
vector <int> vribs83(ribs83, ribs83 + 12);
vector <int> vribs84(ribs84, ribs84 + 12);
vector <int> vribs85(ribs85, ribs85 + 6);
vector <int> vribs86(ribs86, ribs86 + 6);
vector <int> vribs87(ribs87, ribs87 + 12);
vector <int> vribs88(ribs88, ribs88 + 6);
vector <int> vribs89(ribs89, ribs89 + 6);
vector <int> vribs90(ribs90, ribs90 + 6);
vector <int> vribs91(ribs91, ribs91 + 12);
vector <int> vribs92(ribs92, ribs92 + 6);
vector <int> vribs93(ribs93, ribs93 + 12);
vector <int> vribs94(ribs94, ribs94 + 6);
vector <int> vribs95(ribs95, ribs95 + 6);
vector <int> vribs96(ribs96, ribs96 + 6);
vector <int> vribs97(ribs97, ribs97 + 6);
vector <int> vribs98(ribs98, ribs98 + 12);
vector <int> vribs99(ribs99, ribs99 + 12);
vector <int> vribs100(ribs100, ribs100 + 6);
vector <int> vribs101(ribs101, ribs101 + 6);
vector <int> vribs102(ribs102, ribs102 + 6);
vector <int> vribs103(ribs103, ribs103 + 6);
vector <int> vribs104(ribs104, ribs104 + 6);
vector <int> vribs105(ribs105, ribs105 + 6);
vector <int> vribs106(ribs106, ribs106 + 6);
vector <int> vribs107(ribs107, ribs107 + 6);
vector <int> vribs108(ribs108, ribs108 + 2);
vector <int> vribs109(ribs109, ribs109 + 12);
vector <int> vribs110(ribs110, ribs110 + 12);
vector <int> vribs111(ribs111, ribs111 + 6);
vector <int> vribs112(ribs112, ribs112 + 6);
vector <int> vribs113(ribs113, ribs113 + 6);
vector <int> vribs114(ribs114, ribs114 + 6);
vector <int> vribs115(ribs115, ribs115 + 12);
vector <int> vribs116(ribs116, ribs116 + 6);
vector <int> vribs117(ribs117, ribs117 + 6);
vector <int> vribs118(ribs118, ribs118 + 6);
vector <int> vribs119(ribs119, ribs119 + 9);
vector <int> vribs120(ribs120, ribs120 + 6);
vector <int> vribs121(ribs121, ribs121 + 9);
vector <int> vribs122(ribs122, ribs122 + 6);
vector <int> vribs123(ribs123, ribs123 + 9);
vector <int> vribs124(ribs124, ribs124 + 4);
vector <int> vribs125(ribs125, ribs125 + 9);
vector <int> vribs126(ribs126, ribs126 + 6);
vector <int> vribs127(ribs127, ribs127 + 9);
vector <int> vribs128(ribs128, ribs128 + 6);
vector <int> vribs129(ribs129, ribs129 + 9);
vector <int> vribs130(ribs130, ribs130 + 4);
vector <int> vribs131(ribs131, ribs131 + 4);
vector <int> vribs132(ribs132, ribs132 + 9);
vector <int> vribs133(ribs133, ribs133 + 6);
vector <int> vribs134(ribs134, ribs134 + 9);
vector <int> vribs135(ribs135, ribs135 + 6);
vector <int> vribs136(ribs136, ribs136 + 9);
vector <int> vribs137(ribs137, ribs137 + 4);
vector <int> vribs138(ribs138, ribs138 + 1);



	for (int i=0; i<16384; i++) {
//counterVox++;
		// If vertexN (i) is not found in the vertexesgraph, just write a blank vector
		for (int j=0; j<139; j++) { // N of teleports
//			checking = vertexesgraph[j];
			if (vertexesgraph[j] == i) { //Vertex present
				//Skip adding to teleportgraph
				foundvertex = true;
					goto makeways;
					//teleportgraph.push_back(ribsblank);
//					dataGridView19->Rows[i]->Cells[2]->Value = i;
					
					//dataGridView19->Rows[i]->Cells[1]->Value = teleportgraph[0][1].ToString();
				} else {
					foundvertex = false;
					//goto makeways;
//					dataGridView19->Rows[i]->Cells[3]->Value = i;
					}
			}

makeways:
//	if (i==16300) {
//			dataGridView19->Rows[i]->Cells[3]->Value = i;
//			}

	if (foundvertex == true) {

///**//		dataGridView19->Rows[i]->Cells[2]->Value = i;

		if (i==289) {
			teleportgraph.push_back(vribs00);
///**//			dataGridView19->Rows[i]->Cells[0]->Value = i;
///**//			dataGridView19->Rows[i]->Cells[1]->Value = teleportgraph[i][0].ToString();
			}

		if (i==293) {
			teleportgraph.push_back(vribs01);
///**//			dataGridView19->Rows[i]->Cells[0]->Value = i;
///**//			dataGridView19->Rows[i]->Cells[1]->Value = teleportgraph[i][0].ToString();
		}

if (i==345) {teleportgraph.push_back(vribs02);}
if (i==401) {teleportgraph.push_back(vribs03);}
if (i==405) {teleportgraph.push_back(vribs04);}
if (i==457) {teleportgraph.push_back(vribs05);}
if (i==461) {teleportgraph.push_back(vribs06);}
if (i==1033) {teleportgraph.push_back(vribs07);}
if (i==1037) {teleportgraph.push_back(vribs08);}
if (i==1085) {teleportgraph.push_back(vribs09);}
if (i==1137) {teleportgraph.push_back(vribs10);}
if (i==1145) {teleportgraph.push_back(vribs11);}
if (i==1149) {teleportgraph.push_back(vribs12);}
if (i==1249) {teleportgraph.push_back(vribs13);}
if (i==1253) {teleportgraph.push_back(vribs14);}
if (i==1825) {teleportgraph.push_back(vribs15);}
if (i==1829) {teleportgraph.push_back(vribs16);}
if (i==1881) {teleportgraph.push_back(vribs17);}
if (i==1937) {teleportgraph.push_back(vribs18);}
if (i==1941) {teleportgraph.push_back(vribs19);}
if (i==1993) {teleportgraph.push_back(vribs20);}
if (i==1997) {teleportgraph.push_back(vribs21);}
if (i==2083) {teleportgraph.push_back(vribs22);}
if (i==2139) {teleportgraph.push_back(vribs23);}
if (i==2197) {teleportgraph.push_back(vribs24);}
if (i==2249) {teleportgraph.push_back(vribs25);}
if (i==2253) {teleportgraph.push_back(vribs26);}
if (i==2827) {teleportgraph.push_back(vribs27);}
if (i==2931) {teleportgraph.push_back(vribs28);}
if (i==2941) {teleportgraph.push_back(vribs29);}
if (i==2993) {teleportgraph.push_back(vribs30);}
if (i==3041) {teleportgraph.push_back(vribs31);}
if (i==3045) {teleportgraph.push_back(vribs32);}
if (i==3619) {teleportgraph.push_back(vribs33);}
if (i==3675) {teleportgraph.push_back(vribs34);}
if (i==3733) {teleportgraph.push_back(vribs35);}
if (i==3785) {teleportgraph.push_back(vribs36);}
if (i==3789) {teleportgraph.push_back(vribs37);}
if (i==3873) {teleportgraph.push_back(vribs38);}
if (i==3877) {teleportgraph.push_back(vribs39);}
if (i==3929) {teleportgraph.push_back(vribs40);}
if (i==3933) {teleportgraph.push_back(vribs41);}
if (i==4043) {teleportgraph.push_back(vribs42);}
if (i==4617) {teleportgraph.push_back(vribs43);}
if (i==4621) {teleportgraph.push_back(vribs44);}
if (i==4721) {teleportgraph.push_back(vribs45);}
if (i==4725) {teleportgraph.push_back(vribs46);}
if (i==4787) {teleportgraph.push_back(vribs47);}
if (i==4835) {teleportgraph.push_back(vribs48);}
if (i==5413) {teleportgraph.push_back(vribs49);}
if (i==5465) {teleportgraph.push_back(vribs50);}
if (i==5469) {teleportgraph.push_back(vribs51);}
if (i==5669) {teleportgraph.push_back(vribs52);}
if (i==5723) {teleportgraph.push_back(vribs53);}
if (i==6409) {teleportgraph.push_back(vribs54);}
if (i==6413) {teleportgraph.push_back(vribs55);}
if (i==6457) {teleportgraph.push_back(vribs56);}
if (i==6461) {teleportgraph.push_back(vribs57);}
if (i==6467) {teleportgraph.push_back(vribs58);}
if (i==6515) {teleportgraph.push_back(vribs59);}
if (i==6579) {teleportgraph.push_back(vribs60);}
if (i==6627) {teleportgraph.push_back(vribs61);}
if (i==7201) {teleportgraph.push_back(vribs62);}
if (i==7371) {teleportgraph.push_back(vribs63);}
if (i==7569) {teleportgraph.push_back(vribs64);}
if (i==7625) {teleportgraph.push_back(vribs65);}
if (i==7629) {teleportgraph.push_back(vribs66);}
if (i==8205) {teleportgraph.push_back(vribs67);}
if (i==8253) {teleportgraph.push_back(vribs68);}
if (i==8259) {teleportgraph.push_back(vribs69);}
if (i==8307) {teleportgraph.push_back(vribs70);}
if (i==8313) {teleportgraph.push_back(vribs71);}
if (i==8373) {teleportgraph.push_back(vribs72);}
if (i==8417) {teleportgraph.push_back(vribs73);}
if (i==8421) {teleportgraph.push_back(vribs74);}
if (i==8997) {teleportgraph.push_back(vribs75);}
if (i==9051) {teleportgraph.push_back(vribs76);}
if (i==9105) {teleportgraph.push_back(vribs77);}
if (i==9161) {teleportgraph.push_back(vribs78);}
if (i==9249) {teleportgraph.push_back(vribs79);}
if (i==9253) {teleportgraph.push_back(vribs80);}
if (i==9305) {teleportgraph.push_back(vribs81);}
if (i==9309) {teleportgraph.push_back(vribs82);}
if (i==9361) {teleportgraph.push_back(vribs83);}
if (i==9993) {teleportgraph.push_back(vribs84);}
if (i==9997) {teleportgraph.push_back(vribs85);}
if (i==10101) {teleportgraph.push_back(vribs86);}
if (i==10153) {teleportgraph.push_back(vribs87);}
if (i==10165) {teleportgraph.push_back(vribs88);}
if (i==10213) {teleportgraph.push_back(vribs89);}
if (i==10789) {teleportgraph.push_back(vribs90);}
if (i==10841) {teleportgraph.push_back(vribs91);}
if (i==10845) {teleportgraph.push_back(vribs92);}
if (i==10897) {teleportgraph.push_back(vribs93);}
if (i==10957) {teleportgraph.push_back(vribs94);}
if (i==11099) {teleportgraph.push_back(vribs95);}
if (i==11155) {teleportgraph.push_back(vribs96);}
if (i==11209) {teleportgraph.push_back(vribs97);}
if (i==11785) {teleportgraph.push_back(vribs98);}
if (i==11833) {teleportgraph.push_back(vribs99);}
if (i==11843) {teleportgraph.push_back(vribs100);}
if (i==11947) {teleportgraph.push_back(vribs101);}
if (i==11953) {teleportgraph.push_back(vribs102);}
if (i==12001) {teleportgraph.push_back(vribs103);}
if (i==12635) {teleportgraph.push_back(vribs104);}
if (i==12691) {teleportgraph.push_back(vribs105);}
if (i==12891) {teleportgraph.push_back(vribs106);}
if (i==12947) {teleportgraph.push_back(vribs107);}
if (i==13117) {teleportgraph.push_back(vribs108);}
if (i==13577) {teleportgraph.push_back(vribs109);}
if (i==13625) {teleportgraph.push_back(vribs110);}
if (i==13635) {teleportgraph.push_back(vribs111);}
if (i==13739) {teleportgraph.push_back(vribs112);}
if (i==13745) {teleportgraph.push_back(vribs113);}
if (i==13793) {teleportgraph.push_back(vribs114);}
if (i==14369) {teleportgraph.push_back(vribs115);}
if (i==14427) {teleportgraph.push_back(vribs116);}
if (i==14483) {teleportgraph.push_back(vribs117);}
if (i==14537) {teleportgraph.push_back(vribs118);}
if (i==14629) {teleportgraph.push_back(vribs119);}
if (i==14681) {teleportgraph.push_back(vribs120);}
if (i==14685) {teleportgraph.push_back(vribs121);}
if (i==14737) {teleportgraph.push_back(vribs122);}
if (i==14741) {teleportgraph.push_back(vribs123);}
if (i==14795) {teleportgraph.push_back(vribs124);}
if (i==15373) {teleportgraph.push_back(vribs125);}
if (i==15425) {teleportgraph.push_back(vribs126);}
if (i==15453) {teleportgraph.push_back(vribs127);}
if (i==15529) {teleportgraph.push_back(vribs128);}
if (i==15533) {teleportgraph.push_back(vribs129);}
if (i==15539) {teleportgraph.push_back(vribs130);}
if (i==15587) {teleportgraph.push_back(vribs131);}
if (i==16165) {teleportgraph.push_back(vribs132);}
if (i==16217) {teleportgraph.push_back(vribs133);}
if (i==16221) {teleportgraph.push_back(vribs134);}
if (i==16273) {teleportgraph.push_back(vribs135);}
if (i==16277) {teleportgraph.push_back(vribs136);}
if (i==16331) {teleportgraph.push_back(vribs137);}
if (i==13349) {teleportgraph.push_back(vribs138);}


	} else {
			// add blank vector	
///**//		dataGridView19->Rows[i]->Cells[3]->Value = i;
		teleportgraph.push_back(vribsblank);
//		dataGridView19->Rows[i]->Cells[3]->Value = teleportgraph[i][0].ToString();

 
	}

//		if (i==289) {
//			teleportgraph.push_back(vribs00);
//			dataGridView19->Rows[i]->Cells[0]->Value = i;
//			dataGridView19->Rows[i]->Cells[1]->Value = teleportgraph[0][1].ToString();
//			}

//		if (i==293) {
//			teleportgraph.push_back(vribs01);
//			dataGridView19->Rows[i]->Cells[0]->Value = i;
//			dataGridView19->Rows[i]->Cells[1]->Value = teleportgraph[1][1].ToString();
//		}

//justleave:
//			{
//			teleportgraph.push_back(ribsblank);
//			dataGridView19->Rows[i]->Cells[3]->Value = i;
//			dataGridView19->Rows[i]->Cells[1]->Value = teleportgraph[0][1].ToString();
//			}
foundvertex = false;

#if 0;
		vector <int> tempvec;

		if (i==2) {
			dataGridView19->Rows[i]->Cells[0]->Value = i;
//			dataGridView19->Rows[i]->Cells[1]->Value = ribs00[1];
			teleportgraph.push_back(ribs00);
			dataGridView19->Rows[i]->Cells[1]->Value = teleportgraph[i-2][1].ToString();
			}

		if (i==10) {
			tempvec.push_back(123123);
			dataGridView19->Rows[i]->Cells[0]->Value = i;
			dataGridView19->Rows[i]->Cells[1]->Value = tempvec[0];
			teleportgraph.push_back(tempvec);
			}

		if (i==289) {
			tempvec.push_back(1993);
			tempvec.push_back(1033);
			tempvec.push_back(1825);
			tempvec.push_back(1881);
			tempvec.push_back(345);
			tempvec.push_back(1137);
			dataGridView19->Rows[i]->Cells[0]->Value = i;
			dataGridView19->Rows[i]->Cells[1]->Value = tempvec[0] + "," + tempvec[1] + "," + tempvec[2] + "," + tempvec[3] + "," + tempvec[4] + "," + tempvec[5];
			teleportgraph.push_back(tempvec);
			}
#endif;
		}

// CHECKING GRAPH
		for (int i=0; i<16384; i++) {
//			dataGridView19->Rows[i]->Cells[1]->Value = teleportgraph[i][0].ToString();
			}




		// Write graph to text file
pin_ptr<const wchar_t> convertedGPath = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Graph_11a.txt");
const wchar_t *pathgraph = convertedGPath;  
string tempforlist;
unsigned int countvert, p, h, j, i, checking2, d, f = 0;

graphfile.open(pathgraph, ios::out);
	// line format: |vertexN: Neighbour1, Neighbour2, ... |
for (i=0; i<16384; i++) {

		//strfortextfile = patch::to_string(vertexesgraph[i]) + ": " + "\n";
	if (teleportgraph[i][0] != 0) {
			#if 0;
				countvert++; 
					strfortextfile = patch::to_string(countvert) + "\n";
					graphfile << strfortextfile;
				// Assign countvert to all teleportgraph[][*] which are == i;
//				for (p=0; p<16384; p++) {

//					for (h=0; p<teleportgraph[p].size(); h++) {
//						if (teleportgraph[p][h] == i) {
//							teleportgraph[p][h] = countvert;
//						}
//					}
//				}

			#endif; 

		strfortextfile = patch::to_string(i) + ": " + patch::to_string(teleportgraph[i][0]) + ", ";
		graphfile << strfortextfile;

			for (j=1; j<teleportgraph[i].size(); j++) {
				strfortextfile = patch::to_string(teleportgraph[i][j]) + ", ";
				//strfortextfile = patch::to_string(j) + ", ";
				graphfile << strfortextfile;
			} 
//			if (teleportgraph[i][0] != 0) {
//				strfortextfile = patch::to_string(countvert) + " \n";
//				countvert++;
//				} else {
					strfortextfile = "\n";
//					}
		graphfile << strfortextfile;
		}
}	

#if 1;
for (d=0; d<16384; d++) {
	if (teleportgraph[d][0] != 0) {
///*			strfortextfile = "Teleport start: " + patch::to_string(d) + " - ";
///*			graphfile << strfortextfile;
		countvert++; 
		// Assign countvert to all teleportgraph[][*] which are == d;
			for (p=0; p<16384; p++) {
					// Change value if it's present anyware in the child vector
								for (f=0; f<teleportgraph[p].size(); f++) {
									 if (teleportgraph[p][f] == d) {
											teleportgraph[p][f] = countvert;
///*											strfortextfile = patch::to_string(teleportgraph[p][f]) + ", ";
///*											graphfile << strfortextfile;
											}
								if (teleportgraph[p][f] == 3217) { // Only for level exit.
											teleportgraph[p][f] = 140;
///*											strfortextfile = patch::to_string(teleportgraph[p][f]) + ", ";
///*											graphfile << strfortextfile;
											}

					}
			}
///*				strfortextfile = "\n";
///*				graphfile << strfortextfile;
	}
}
#endif;

// Write modified vector of vectors
unsigned int tmp123 = 0;
string childtel, result;
string comma = ", ";
char buffer[100];

strfortextfile = "\n";
graphfile << strfortextfile;

for (i=0; i<16384; i++) {
	if (teleportgraph[i][0] != 0) {
		tmp123++;
//		strfortextfile = patch::to_string(i) + ": " + patch::to_string(teleportgraph[i][0]) + ", ";
///*		strfortextfile = patch::to_string(i) + ": ";
		dataGridView19->Rows[tmp123-1]->Cells[2]->Value = i;
		strfortextfile = patch::to_string(tmp123) + ": ";
//		strfortextfile = patch::to_string(teleportgraph[i][0]) + ", ";
		graphfile << strfortextfile;

			for (j=0; j<teleportgraph[i].size(); j++) {
						sprintf(buffer, "%d", teleportgraph[i][j]);
						string childtel(buffer);
							if (j==0) {
									result = result + childtel;
								} else {
									result = result + comma + childtel;
							}
						String^ str2 = gcnew String(result.c_str());
				//childtel = childtel + comma + (string)teleportgraph[i][j];
						dataGridView19->Rows[tmp123-1]->Cells[1]->Value = str2;
						//dataGridView19->Rows[tmp123-1]->Cells[1]->Value = teleportgraph[i][j]; //FIX!!!
						dataGridView19->Rows[tmp123-1]->Cells[0]->Value = tmp123 + ":";
						strfortextfile = patch::to_string(teleportgraph[i][j]) + ", ";
						graphfile << strfortextfile;
///				}
			} 
			result = ' ';
		strfortextfile = "\n";
		graphfile << strfortextfile;
		}
}
	dataGridView19->Rows[109]->Cells[0]->Value = 110;
	dataGridView19->Rows[139]->Cells[0]->Value = 140;
	dataGridView19->Rows[139]->Cells[2]->Value = 3217;
		strfortextfile = patch::to_string(140) + ": ";
		graphfile << strfortextfile;

graphfile.close();
}
#endif;




for (int d=0; d<64; d++) { // LOOP START
currRow = d;
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {
		currFloor = s;


progressBar2->Increment(1); // Add
progressBar2->Update();
this->Update();

temp123 = ValueSelector(voxelArray[voxCount].value1, 0); //Special lines, ramps, elevators, teleports
//richTextBox4->AppendText("temp123 = " + temp123 + " voxcount = " + voxCount + "\n");
// ValueSelector(voxelArray[val].value1, 1) != 0x80)

/////////////**************//////////////////////********** 
#if 1;
wallsBevels1 = ValueSelector(voxelArray[voxCount].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[voxCount].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cube's N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
//dataGridView9->Rows[6]->Cells[2]->Value = "0x" + systemString111;
cubeNinDataFile = Convert::ToInt32(systemString111, 16);
//label139->Text = cubeNinDataFile.ToString();// For debug
#endif;
/////////////**************//////////////////////**********
String ^ LevelName3;
LevelName3 = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
FileNameString222 = context.marshal_as<std::string>(LevelName3);


if 	((temp == 0xff00000000000000)&&(checkBox1->CheckState == CheckState::Unchecked)) {
//				skippedVoxels++;
//				goto blankvoxel;
				}

if (temp123 != 0) { // If something present

	switch (temp123) {

		case 0x80:// Teleports
			{
				offset2data = 4;
				// Seek at 0 offset in 0x6C block
				dfile.seekg (c6blockoffset + offset2data, dfile.beg);
				// Read local offset to teleports data
				dfile.read((char *)&buf777,sizeof(buf777));
				buf777 = Swap4Bytes(buf777);

				// Jump to teleports within 0x6C block
				dfile.seekg (c6blockoffset + 0x74 + buf777, dfile.beg);
					tempoffset = c6blockoffset + 0x74 + buf777;
				richTextBox4->AppendText("Offset to 0x80-0xE4 = " + (c6blockoffset + 0x74 + buf777) + "\n");
#if 1;
// Teleports 0x80-0xE4
//						richTextBox4->AppendText("c6blockoffset + 0x74 = " + (c6blockoffset + 0x74) + "\n");
									// Now at the block 5 data start. Read and fill dataGridView18.
						dfile.read((char *)&tt,sizeof(tt));	// Reading teleports quantity.
						tempoffset++;
//						richTextBox4->AppendText("Teleports = " + tt + "\n");

///**//							for (int i=0; i<tt; i++) {	// Do this teleport quantity times ///**//
//currRow currCol currFloor X Y Z
newentry:
								dfile.read((char *)&temp111,1);
#if 1;
									if (temp111 == currRow) {
											entX = temp111;
										dfile.read((char *)&temp111,1);
											entY = temp111;
											if (temp111 == currCol) {
												dfile.read((char *)&temp111,1);
													entZ = temp111;
												if (temp111 == currFloor) {
													// it's right cube entry, read delimeter end exit cube
													goto rightcube;
													} else {
														// Seek another cube entry
														tempoffset += 3;
														//-*/richTextBox4->AppendText("tempoffset = " + tempoffset + "\n");
														tempoffset += 4;
														dfile.seekg (tempoffset, dfile.beg);
														goto newentry;
													}
												} else {
													// Seek another cube entry
													tempoffset += 2;
													//-*/richTextBox4->AppendText("tempoffset = " + tempoffset + "\n");
													tempoffset += 5;
													dfile.seekg (tempoffset, dfile.beg);
													goto newentry;
												}
											} else {
												// Seek another cube entry
												tempoffset += 1;
												//-*/richTextBox4->AppendText("tempoffset = " + tempoffset + "\n");
												tempoffset += 6;
												dfile.seekg (tempoffset, dfile.beg);
												goto newentry;
												}
#endif;
///**//									entX = temp111;///**//
///**//								dfile.read((char *)&temp111,1);///**//
///**//									entY = temp111;///**//
///**//								dfile.read((char *)&temp111,1);///**//
///**//									entZ = temp111;///**//
rightcube:
								dfile.read((char *)&temp111,1); // Skip delimeter
								dfile.read((char *)&temp111,1);
									exiX = temp111;
								dfile.read((char *)&temp111,1);
									exiY = temp111;
								dfile.read((char *)&temp111,1);
									exiZ = temp111;
		// entry
///**//	vertstr = "o Teleport " + patch::to_string(i) + "\n";
dataGridView18->RowCount = tt; // Set N of strings in datagridview


	vertstr = "o Teleport " + patch::to_string(voxCount) + "\n";
//		dataGridView18->Rows[telecount]->Cells[0]->Value = telecount;
		dataGridView18->Rows[telecount]->Cells[0]->Value = voxCount;

//		dataGridView18->Rows[telecount]->Cells[3]->Value = 123;
				//Seek equal string in the voxelArray
				string	stdstring;
					stdstring = msclr::interop::marshal_as<std::string>(exiX + "," + exiY + "," + exiZ);
					for (int k=0; k<16384; k++) {	
//							if (strcmp (stdstring, voxelArray[k].coords)) {
							if (stdstring == voxelArray[k].coords) {
							voxelindex = k;
							}
						}
					dataGridView18->Rows[telecount]->Cells[3]->Value = voxelindex;
//			String^ forDatagrid18 = gcnew String(voxelArray[voxCount].coords.c_str());
//			dataGridView18->Rows[telecount]->Cells[3]->Value = forDatagrid18;
	outfile << vertstr;
			vertstr = "v " + patch::to_string(entX+0.5) + " " + patch::to_string(entY+0.5) + " "  + patch::to_string(-entZ-0.5+1) + "\n";
			outfile << vertstr;
					dataGridView18->Rows[telecount]->Cells[1]->Value = entX + "," + entY + "," + entZ;
//				teleportarr[vertexCounter] = voxCount; // Add voxel number to array
				vertexCounter++;
				
		// exit
			vertstr = "v " + patch::to_string(exiX+0.5) + " " + patch::to_string(exiY+0.5) + " "  + patch::to_string(-exiZ-0.5+1) + "\n";
					dataGridView18->Rows[telecount]->Cells[2]->Value = exiX + "," + exiY + "," + exiZ;
			outfile << vertstr;
//				vertexCounter++;
// Draw line between teleport entry and exit
			vertstr = "l " + patch::to_string(vertexCounter) + " " + patch::to_string(vertexCounter+1) + "\n";
			outfile << vertstr;
				vertexCounter++; // Make a new line separate from the previous segment
				telecount++;

				// Determing unique cubes:
					
///**//							}///**//
#endif;
//goto makestartexit;
				break;		
			}



				case 0x81: {// Trigger for the door 0x81-0xE5
					offset2data = 8;
						vertstr = "o 81E5-DoorTrigger " + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x81-0xE5 voxel = " + voxCount + "\n");
//						richTextBox4->AppendText("Offset to 0x81-0xE5 = " + (c6blockoffset + 0x74 + buf777) + "\n");
//						vector <int> tempvec;
//						tempvec.push_back(111);
//						dataGridView19->Rows[telecount]->Cells[0]->Value = voxCount;
//						dataGridView19->Rows[telecount]->Cells[1]->Value = tempvec[0];
						// Fill vector of vectors:
//						teleportgraph.push_back(tempvec);
					goto makedata;
						break;
						}

				case 0x82: {// Elevator DOWN 0x82-0xE6
					offset2data = 12;
						vertstr = "o 82E6-ElevatorDOWN " + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x82-0xE6 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x82-0xE6 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x83: {// Points on cubes around elevators 0x83-0xE7
					offset2data = 16;
						vertstr = "o 83E7-AroundElevators " + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x83-0xE7 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x83-0xE7 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x84: {//Wall fireball trigger
					offset2data = 20;
						vertstr = "o 84E8-WallFireball " + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x84-0xE8 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x84-0xE8 = " + (c6blockoffset + 0x74 + buffer) + "\n");
						break;
						}

				case 0x85: {//Floor flame trigger
					offset2data = 24;
						vertstr = "o 85E9-FloorFireball " + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x85-0xE9 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x85-0xE9 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x86: {//Ceiling fireball trigger
					offset2data = 28;
						vertstr = "o 86EA-CeilingFireball " + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x86-0xEA voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x86-0xEA = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x87: {//Wall fireball trigger (blue)
					offset2data = 32;
						vertstr = "o 87EB-WallFireballBlue " + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x87-0xEB voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x87-0xEB = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x88: {//Switch off the light (reduces brightness)
					offset2data = 36;
						vertstr = "o 88EC-LightOFF " + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x88-0xEC voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x88-0xEC = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x89: {
					offset2data = 40;
						vertstr = "o 89ED-" + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x89-0xED voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x89-0xED = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x8A: {
					offset2data = 44;
						vertstr = "o 8AEE-" + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x8A-0xEE voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x8A-0xEE = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x8B: {//This cube points on some Monsters to set to active mode
					offset2data = 48;
						vertstr = "o 8BEF-ActivateMonster " + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x8B-0xEF voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x8B-0xEF = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x8C: {
					offset2data = 52;
						vertstr = "o 8CF0-" + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x8C-0xF0 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x8C-0xF0 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x8D: {
					offset2data = 56;
						vertstr = "o 8DF1-" + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x8D-0xF1 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x8D-0xF1 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x8E: {
					offset2data = 60;
						vertstr = "o 8EF2-" + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x8E-0xF2 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x8E-0xF2 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x8F: {
					offset2data = 64;
						vertstr = "o 8FF3-" + patch::to_string(voxCount) + "\n";
					outfile << vertstr;
						richTextBox4->AppendText("0x8F-0xF3 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x8F-0xF3 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x90: {
					offset2data = 68;
						vertstr = "o 90F4-" + patch::to_string(voxCount) + "\n";				
					outfile << vertstr;
						richTextBox4->AppendText("0x90-0xF4 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x90-0xF4 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x91: {
					offset2data = 72;
						vertstr = "o 91F5-" + patch::to_string(voxCount) + "\n";					
					outfile << vertstr;
						richTextBox4->AppendText("0x91-0xF5 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x91-0xF5 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x92: {
					offset2data = 76;
						vertstr = "o 92F6-" + patch::to_string(voxCount) + "\n";				
					outfile << vertstr;
						richTextBox4->AppendText("0x92-0xF6 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x92-0xF6 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x93: {
					offset2data = 80;
						vertstr = "o 93F7-" + patch::to_string(voxCount) + "\n";					
					outfile << vertstr;
						richTextBox4->AppendText("0x93-0xF7 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x93-0xF7 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x94: {// Turns ON flickering light
					offset2data = 84;
						vertstr = "o 94F8-TurnFlickeringLightON " + patch::to_string(voxCount) + "\n";					
					outfile << vertstr;
						richTextBox4->AppendText("0x94-0xF8 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x94-0xF8 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}
				case 0x95: {//Elevator DOWN
					offset2data = 88;
						vertstr = "o 95F9-ElevatorDOWN " + patch::to_string(voxCount) + "\n";					
					outfile << vertstr;
						richTextBox4->AppendText("0x95-0xF9 voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x95-0xF9 = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x96: {//Elevator UP
					offset2data = 92;
						vertstr = "o 96FA-ElevatorUP " + patch::to_string(voxCount) + "\n";					
					outfile << vertstr;
						richTextBox4->AppendText("0x96-0xFA voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x96-0xFA = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x97: {//Elevator DOWN
					offset2data = 96;
						vertstr = "o 97FB-ElevatorDOWN " + patch::to_string(voxCount) + "\n";					
					outfile << vertstr;
						richTextBox4->AppendText("0x97-0xFB voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x97-0xFB = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x98: {
					offset2data = 100;
						vertstr = "o 98FC-" + patch::to_string(voxCount) + "\n";					
					outfile << vertstr;
						richTextBox4->AppendText("0x98-0xFC voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x98-0xFC = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x99: {
					offset2data = 104;
						vertstr = "o 99FD-" + patch::to_string(voxCount) + "\n";					
					outfile << vertstr;
						richTextBox4->AppendText("0x99-0xFD voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x99-0xFD = " + (c6blockoffset + 0x74 + buf777) + "\n");
						break;
						}

				case 0x9A: {
					offset2data = 108;
						vertstr = "o 9AFE-" + patch::to_string(voxCount) + "\n";					
					outfile << vertstr;
						richTextBox4->AppendText("0x9A-0xFE voxel = " + voxCount + "\n");
					goto makedata;
//						richTextBox4->AppendText("Offset to 0x9A-0xFE = " + (c6blockoffset + 0x74 + buf777) + "\n")
						break;
						}


	// End of case
	} // END OF SWITCH

if ((temp123!=0x80)||(temp123!=0x81)||(temp123!=0x82)||(temp123!=0x83)||(temp123!=0x84)||(temp123!=0x85)||(temp123!=0x86)||(temp123!=0x87)||(temp123!=0x88)||(temp123!=0x89)||(temp123!=0x8A)||(temp123!=0x8B)||(temp123!=0x8C)||(temp123!=0x8D)||(temp123!=0x8E)||(temp123!=0x8F)||(temp123!=0x90)||(temp123!=0x91)||(temp123!=0x92)||(temp123!=0x93)||(temp123!=0x94)||(temp123!=0x95)||(temp123!=0x96)||(temp123!=0x97)||(temp123!=0x98)||(temp123!=0x99)||(temp123!=0x9A)) {
		goto blankvoxel;	
		} 

makedata:
#if 1;
		// Seek at offset in 0x6C block
		dfile.seekg (c6blockoffset + offset2data, dfile.beg);
		// Read local offset
		dfile.read((char *)&buf777,sizeof(buf777));
		buf777 = Swap4Bytes(buf777);

		// Jump to correspoding data type within 0x6C block
		tempoffset2 = c6blockoffset + 0x74 + buf777;
		dfile.seekg (c6blockoffset + 0x74 + buf777, dfile.beg);
		richTextBox4->AppendText("Other type offset = " + (c6blockoffset + 0x74 + buf777) + "\n");


#if 1; //Other types
		// Read quantity for this type
		dfile.read((char *)&temp111,1);
		tempoffset2++;
		quant = temp111;
//			for (int i=0; i<quant; i++) {/////*****/////
				//Read entry cube (3 bytes)
		#if 1;
newentry2:
								dfile.read((char *)&temp111,1);
									if (temp111 == currRow) {
											entX = temp111;
										dfile.read((char *)&temp111,1);
											entY = temp111;
											if (temp111 == currCol) {
												dfile.read((char *)&temp111,1);
													entZ = temp111;
												if (temp111 == currFloor) {
													// it's right cube entry, read delimeter end exit cube
													goto rightcube2;
													} else {
														// Seek another cube entry
														dfile.read((char *)&temp111,1);
															skipcubes = temp111;
															tempoffset2 += 4;
															richTextBox4->AppendText("tempoffset2 = " + tempoffset2 + "\n");
															tempoffset2 += skipcubes*3;
															dfile.seekg (tempoffset2, dfile.beg);
															goto newentry2;
													}
												} else {
													// Seek another cube entry
													dfile.read((char *)&temp111,1);
													dfile.read((char *)&temp111,1);
														skipcubes = temp111;
														tempoffset2 += 4;
														richTextBox4->AppendText("tempoffset2 = " + tempoffset2 + "\n");
														tempoffset2 += skipcubes*3;
														dfile.seekg (tempoffset2, dfile.beg);
														goto newentry2;
												}
											} else {
												// Seek another cube entry
												dfile.read((char *)&temp111,1);
												dfile.read((char *)&temp111,1);
												dfile.read((char *)&temp111,1);
													skipcubes = temp111;
													tempoffset2 += 4;
													richTextBox4->AppendText("tempoffset2 = " + tempoffset2 + "\n");
													tempoffset2 += skipcubes*3;
													dfile.seekg (tempoffset2, dfile.beg);
													goto newentry2;
												}
#endif;
//////*****/////								dfile.read((char *)&temp111,1);
//////*****/////									entX = temp111;
//////*****/////								dfile.read((char *)&temp111,1);
//////*****/////									entY = temp111;
//////*****/////								dfile.read((char *)&temp111,1);
//////*****/////									entZ = temp111;
rightcube2:
										vertstr = "\n";
											outfile << vertstr;


//										vertstr = "o 81E5-" + patch::to_string(i) + "\n";
											outfile << vertstr;
										vertstr = "v " + patch::to_string(entX+0.5) + " " + patch::to_string(entY+0.5) + " "  + patch::to_string(-entZ-0.5+1) + "\n";
											outfile << vertstr;
										vertexCounter++;
								// Read delimeter/cube exit quantity (1 byte)
								dfile.read((char *)&temp111,1);
									delimeter = temp111;
								// Read exit cubes (depends on delimeter value)
									for (int i=0; i<delimeter; i++) {
										dfile.read((char *)&temp111,1);
											tempbyte1 = temp111;
										dfile.read((char *)&temp111,1);
											tempbyte2 = temp111;
										dfile.read((char *)&temp111,1);
											tempbyte3 = temp111;
										vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.5+1) + "\n";
											outfile << vertstr;
										vertexCounter++;

									//Draw lines
								if (((temp123==0x84)||(temp123==0x85)||(temp123==0x86)||(temp123==0x87))&&(i!=0)) {// Exceptions
									vertstr = "l " + patch::to_string(vertexCounter-1-i-8*i) + " " + patch::to_string(vertexCounter) + "\n";
										} else {
									vertstr = "l " + patch::to_string(vertexCounter-1-i) + " " + patch::to_string(vertexCounter) + "\n";
										}
										outfile << vertstr;

			switch (temp123) {
				case 0x84: {// Wall fireball trigger
						vertstr = "# Wall fireball trigger " + patch::to_string(i) + "\n";
						outfile << vertstr;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

		vertstr = "usemtl WallFireball\n";
			outfile << vertstr;
		vertstr = "f "+patch::to_string((int)(vertexCounter-7))+"/1 "+patch::to_string((int)(vertexCounter-6))+"/4 "+patch::to_string((int)(vertexCounter-4))+"/3 "+patch::to_string((int)(vertexCounter-5))+"/2\n";
			outfile << vertstr;		
		vertstr = "f "+patch::to_string((int)(vertexCounter-3))+"/1 "+patch::to_string((int)(vertexCounter-2))+"/4 "+patch::to_string((int)(vertexCounter))+"/3 "+patch::to_string((int)(vertexCounter-1))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl WallFireball\n";
			mtlfile << vertstr;
			unsigned int index1 = comboBox1->SelectedIndex;
			unsigned int id1 = 0;
			switch (index1) {
				case 0: {
					id1 = 17;
					break;
					}
				case 1: {
					id1 = 19;
					break;
					}
				case 2: {
					id1 = 18;
					break;
					}
				}
		vertstr = "map_Kd Textures3DO\\DK_Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex" + patch::to_string((int)id1) + "_0.png\n\n";
			mtlfile << vertstr;

//		vertstr = "map_Kd Textures3DO\\DK Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex17.png\n";
//			mtlfile << vertstr;
			frompolys++;
						break;
						}

				case 0x85: {//Floor flame trigger
						vertstr = "# Floor flame trigger " + patch::to_string(i) + "\n";
						outfile << vertstr;
#if 1;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

		vertstr = "usemtl FloorFlame\n";
			outfile << vertstr;
		vertstr = "f "+patch::to_string((int)(vertexCounter-7))+"/1 "+patch::to_string((int)(vertexCounter-6))+"/4 "+patch::to_string((int)(vertexCounter-4))+"/3 "+patch::to_string((int)(vertexCounter-5))+"/2\n";
			outfile << vertstr;		
		vertstr = "f "+patch::to_string((int)(vertexCounter-3))+"/1 "+patch::to_string((int)(vertexCounter-2))+"/4 "+patch::to_string((int)(vertexCounter))+"/3 "+patch::to_string((int)(vertexCounter-1))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl FloorFlame\n";
			mtlfile << vertstr;
		vertstr = "map_Kd Textures3DO\\DK_Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex11_0.png\n\n";
			mtlfile << vertstr;
			frompolys++;
#endif;
						break;
						}

				case 0x86: {//Ceiling fireball trigger Tex 20 24 22
						vertstr = "# Ceiling fireball trigger " + patch::to_string(i) + "\n";
						outfile << vertstr;
#if 1;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;


		vertstr = "usemtl CeilingFireball\n";
			outfile << vertstr;
		vertstr = "f "+patch::to_string((int)(vertexCounter-7))+"/1 "+patch::to_string((int)(vertexCounter-6))+"/4 "+patch::to_string((int)(vertexCounter-4))+"/3 "+patch::to_string((int)(vertexCounter-5))+"/2\n";
			outfile << vertstr;		
		vertstr = "f "+patch::to_string((int)(vertexCounter-3))+"/1 "+patch::to_string((int)(vertexCounter-2))+"/4 "+patch::to_string((int)(vertexCounter))+"/3 "+patch::to_string((int)(vertexCounter-1))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl CeilingFireball\n";
			mtlfile << vertstr;
			unsigned int index = comboBox1->SelectedIndex;
			unsigned int id = 0;
			switch (index) {
				case 0: {
					id = 20;
					break;
					}
				case 1: {
					id = 24;
					break;
					}
				case 2: {
					id = 22;
					break;
					}
				}
		vertstr = "map_Kd Textures3DO\\DK_Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex" + patch::to_string((int)id) + "_0.png\n\n";
			mtlfile << vertstr;
			frompolys++;
#endif;
						break;
						}


				case 0x87: {//Wall fireball trigger (blue) Tex 19 21 20
						vertstr = "# Wall fireball trigger (blue) " + patch::to_string(i) + "\n";
						outfile << vertstr;
#if 1;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.2+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.25) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.5) + " " + patch::to_string(tempbyte2+0.75) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.25+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.25) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;
						vertstr = "v " + patch::to_string(tempbyte1+0.75) + " " + patch::to_string(tempbyte2+0.5) + " "  + patch::to_string(-tempbyte3-0.75+1) + "\n";
						outfile << vertstr;
							vertexCounter++;

		vertstr = "usemtl WallFireballBlue\n";
			outfile << vertstr;
		vertstr = "f "+patch::to_string((int)(vertexCounter-7))+"/1 "+patch::to_string((int)(vertexCounter-6))+"/4 "+patch::to_string((int)(vertexCounter-4))+"/3 "+patch::to_string((int)(vertexCounter-5))+"/2\n";
			outfile << vertstr;		
		vertstr = "f "+patch::to_string((int)(vertexCounter-3))+"/1 "+patch::to_string((int)(vertexCounter-2))+"/4 "+patch::to_string((int)(vertexCounter))+"/3 "+patch::to_string((int)(vertexCounter-1))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl WallFireballBlue\n";
			mtlfile << vertstr;
			unsigned int index = comboBox1->SelectedIndex;
			unsigned int id = 0;
			switch (index) {
				case 0: {
					id = 19;
					break;
					}
				case 1: {
					id = 21;
					break;
					}
				case 2: {
					id = 20;
					break;
					}
				}
		vertstr = "map_Kd Textures3DO\\DK_Data"+patch::to_string((int)(comboBox1->SelectedIndex+1))+ "\\Tex" + patch::to_string((int)id) + "_0.png\n\n";
			mtlfile << vertstr;
			frompolys++;
#endif;
						break;
						}
				}
										}
							vertstr = "\n";
							outfile << vertstr;
//							} /////*****/////
#endif; // Other types

#endif;

}

blankvoxel:

//if (teleportgraph[voxCount].empty()) {
//	label162->Text = voxCount.ToString();
//}
		#if 0;
//			if (teleportgraph.empty()) {
			vector <int> tempvec;
			tempvec.push_back(20000);
			if (teleportgraph[voxCount][tempvec.size()] == 0) {

				// Fill vector of vectors:
				teleportgraph.push_back(tempvec);
				dataGridView19->Rows[voxCount]->Cells[2]->Value = voxCount;
				dataGridView19->Rows[voxCount]->Cells[3]->Value = teleportgraph[voxCount][0].ToString();
				//dataGridView19->Rows[voxCount]->Cells[3]->Value = teleportgraph[voxCount][tempvec];
			}
		#endif;
		voxCount++;
		}
}

}// LOOP END

#if 0;
vector <int> tempvec;
tempvec.push_back(111);
	// Fill vector of vectors:
	teleportgraph.push_back(tempvec);
	dataGridView19->Rows[voxCount]->Cells[2]->Value = voxCount;
//				dataGridView19->Rows[voxCount]->Cells[3]->Value = teleportgraph[voxCount][tempvec[1]];
#endif;

makestartexit:
// Mark level start end exit
float cubeSize = 0.3;
	vertstr = "o Start\n";
	outfile << vertstr;
	// v1 high
	vertstr = "v " + patch::to_string(entryX+gap+cubeSize) + " " + patch::to_string(entryY+gap+cubeSize) + " "  + patch::to_string(-entryZ+gap+cubeSize) + "\n";
	outfile << vertstr;
		currVertex++;
	// v2 high
	vertstr = "v " + patch::to_string(entryX+gap+cubeSize) + " " + patch::to_string(entryY+1-gap-cubeSize) + " "  + patch::to_string(-entryZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	// v3 high
	vertstr = "v " + patch::to_string(entryX+1-gap-cubeSize) + " " + patch::to_string(entryY+1-gap-cubeSize) + " "  + patch::to_string(-entryZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	// v4 high
	vertstr = "v " + patch::to_string(entryX+1-gap-cubeSize) + " " + patch::to_string(entryY+gap+cubeSize) + " "  + patch::to_string(-entryZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	
		// v5 low
	vertstr = "v " + patch::to_string(entryX+gap+cubeSize) + " " + patch::to_string(entryY+gap+cubeSize) + " "  + patch::to_string(-entryZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v6 low
	vertstr = "v " + patch::to_string(entryX+gap+cubeSize) + " " + patch::to_string(entryY+1-gap-cubeSize) + " "  + patch::to_string(-entryZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v7 low
	vertstr = "v " + patch::to_string(entryX+1-gap-cubeSize) + " " + patch::to_string(entryY+1-gap-cubeSize) + " "  + patch::to_string(-entryZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v8 low
	vertstr = "v " + patch::to_string(entryX+1-gap-cubeSize) + " " + patch::to_string(entryY+gap+cubeSize) + " "  + patch::to_string(-entryZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;


		vertstr = "usemtl start\n";
			outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(vertexCounter+1))+"/1 "+patch::to_string((int)(vertexCounter+2))+"/4 "+patch::to_string((int)(vertexCounter+6))+"/3 "+patch::to_string((int)(vertexCounter+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(vertexCounter+2))+"/1 "+patch::to_string((int)(vertexCounter+3))+"/4 "+patch::to_string((int)(vertexCounter+7))+"/3 "+patch::to_string((int)(vertexCounter+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(vertexCounter+3))+"/1 "+patch::to_string((int)(vertexCounter+4))+"/4 "+patch::to_string((int)(vertexCounter+8))+"/3 "+patch::to_string((int)(vertexCounter+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(vertexCounter+4))+"/1 "+patch::to_string((int)(vertexCounter+1))+"/4 "+patch::to_string((int)(vertexCounter+5))+"/3 "+patch::to_string((int)(vertexCounter+8))+"/2\n";
			outfile << vertstr;

		vertstr = "newmtl start\n";
			mtlfile << vertstr;
		vertstr = "Kd 1.000 0.000 0.000\n";
			mtlfile << vertstr;
vertexCounter += 8;

	vertstr = "o Exit\n";
	outfile << vertstr;
	// v1 high
	vertstr = "v " + patch::to_string(exitX+gap+cubeSize) + " " + patch::to_string(exitY+gap+cubeSize) + " "  + patch::to_string(-exitZ+gap+cubeSize) + "\n";
	outfile << vertstr;
		currVertex++;
	// v2 high
	vertstr = "v " + patch::to_string(exitX+gap+cubeSize) + " " + patch::to_string(exitY+1-gap-cubeSize) + " "  + patch::to_string(-exitZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	// v3 high
	vertstr = "v " + patch::to_string(exitX+1-gap-cubeSize) + " " + patch::to_string(exitY+1-gap-cubeSize) + " "  + patch::to_string(-exitZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	// v4 high
	vertstr = "v " + patch::to_string(exitX+1-gap-cubeSize) + " " + patch::to_string(exitY+gap+cubeSize) + " "  + patch::to_string(-exitZ+gap+cubeSize) + "\n";
	outfile << vertstr;
	
		// v5 low
	vertstr = "v " + patch::to_string(exitX+gap+cubeSize) + " " + patch::to_string(exitY+gap+cubeSize) + " "  + patch::to_string(-exitZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v6 low
	vertstr = "v " + patch::to_string(exitX+gap+cubeSize) + " " + patch::to_string(exitY+1-gap-cubeSize) + " "  + patch::to_string(-exitZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v7 low
	vertstr = "v " + patch::to_string(exitX+1-gap-cubeSize) + " " + patch::to_string(exitY+1-gap-cubeSize) + " "  + patch::to_string(-exitZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;
		// v8 low
	vertstr = "v " + patch::to_string(exitX+1-gap-cubeSize) + " " + patch::to_string(exitY+gap+cubeSize) + " "  + patch::to_string(-exitZ+1-gap-cubeSize) + "\n";
	outfile << vertstr;

		vertstr = "usemtl exit\n";
			outfile << vertstr;
		// Draw side polygon 1.
		vertstr = "f "+patch::to_string((int)(vertexCounter+1))+"/1 "+patch::to_string((int)(vertexCounter+2))+"/4 "+patch::to_string((int)(vertexCounter+6))+"/3 "+patch::to_string((int)(vertexCounter+5))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 2.
		vertstr = "f "+patch::to_string((int)(vertexCounter+2))+"/1 "+patch::to_string((int)(vertexCounter+3))+"/4 "+patch::to_string((int)(vertexCounter+7))+"/3 "+patch::to_string((int)(vertexCounter+6))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 3.
		vertstr = "f "+patch::to_string((int)(vertexCounter+3))+"/1 "+patch::to_string((int)(vertexCounter+4))+"/4 "+patch::to_string((int)(vertexCounter+8))+"/3 "+patch::to_string((int)(vertexCounter+7))+"/2\n";
			outfile << vertstr;
		// Draw side polygon 4.
		vertstr = "f "+patch::to_string((int)(vertexCounter+4))+"/1 "+patch::to_string((int)(vertexCounter+1))+"/4 "+patch::to_string((int)(vertexCounter+5))+"/3 "+patch::to_string((int)(vertexCounter+8))+"/2\n";
			outfile << vertstr;
		vertstr = "newmtl exit\n";
			mtlfile << vertstr;
		vertstr = "Kd 0.000 0.000 1.000\n";
			mtlfile << vertstr;

		vertstr = "vt 1.000 0.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
		vertstr = "vt 1.000 1.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
		vertstr = "vt 0.000 1.000 0.000  \n";// Normal texturing.
		outfile << vertstr;
		vertstr = "vt 0.000 0.000 0.000  \n";// Normal texturing.
		outfile << vertstr;

outfile.close();
mtlfile.close();

//progressBar2->Increment(2600); // Fill the rest of progressBar2
//progressBar2->Update();
//this->Update();

if (progressBar2->Value == progressBar2->Maximum) {
progressBar2->Value = 0;
}
}


// Build collision model. Only complex collision maps.
private: System::Void button33_Click(System::Object^  sender, System::EventArgs^  e) {

unsigned int wallsBevels1, wallsBevels2;
float gap = float::Parse(textBox42->Text);
int voxCount = 0;
int skippedVoxels = 0;
int currCol = 0;
int currRow = 0;
int currFloor = 0;
int countLines = 0;
unsigned int polyCount = 0;
unsigned int torchesVertexes = 0;
unsigned int currVertex = 0;
unsigned long long voxelarr[16384];
int tempFilename = 0;
string FileNameString222;
unsigned int levelN, lengthName = 0; 
String ^ name = "";
_ULonglong elevatorPath = 0;
int tmpvalue3, tmpvalue4, tmpvalue5, tmpvalue6, tmpvalue7, tmpvalue8, tmpvalue9, tmpvalue10 = 0;
unsigned int v1, v2, v3, v4 = 0;

if (saveFileDialog5->ShowDialog() == System::Windows::Forms::DialogResult::OK)
     {

name = (System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
lengthName = name->Length;

if (lengthName > 2) {
	//levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
} else {
	levelN = int::Parse(System::IO::Path::GetFileNameWithoutExtension(openFileDialog1->FileName));
}



#if 1;
fstream outfile, binfile;
pin_ptr<const wchar_t> convertedValue = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_Collision.obj");
const wchar_t *path = convertedValue;                     // <-- Unnecessary, but to be completely verbose
outfile.open(path, ios::out);

//pin_ptr<const wchar_t> convertedValue123 = PtrToStringChars(System::IO::Path::GetDirectoryName(saveFileDialog5->FileName) + "\\" + System::IO::Path::GetFileNameWithoutExtension(saveFileDialog5->FileName) + "_CollisionBin");
//const wchar_t *path123 = convertedValue123;                     // <-- Unnecessary, but to be completely verbose
//binfile.open(path123, ios::binary|ios::out);

std::string str;
std::string str2;
std::string str3;
std::string currN;
std::string vertstr;

progressBar2->Maximum = 16384;


#if 1;
for (int d=0; d<64; d++) { // LOOP START
currRow = d;
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {
		currFloor = s;

progressBar2->Increment(1); // Add
progressBar2->Update();
this->Update();

_ULonglong temp = voxelArray[voxCount].value1;
_ULonglong temp123 = 0;
temp123 = ValueSelector(voxelArray[voxCount].value1, 0);

/////////////**************//////////////////////********** 
#if 1;
wallsBevels1 = ValueSelector(voxelArray[voxCount].value1, 2);	// Walls and Bevels. Byte 1
wallsBevels2 = (voxelArray[voxCount].value1 & 0x00000000F0000000) >> 28;

char bufff[2], bufff2[2];
itoa(wallsBevels1, bufff, 16);
itoa(wallsBevels2, bufff2, 16);

   std::string rez = ""; // Add cube's N to dataGridView.
   rez += bufff[0];
	if (bufff[1]) {
		rez += bufff[1];
		}
	if (bufff2[1]) {
		rez += bufff2[0];
		rez += bufff2[1];
		}	else {
	rez += bufff2[0];
	}

System::String^ systemString111 = msclr::interop::marshal_as<System::String^>(rez);
cubeNinDataFile = Convert::ToInt32(systemString111, 16);
#endif;
/////////////**************//////////////////////**********
String ^ LevelName3;
LevelName3 = openFileDialog1->SafeFileName;
msclr::interop::marshal_context context;
FileNameString222 = context.marshal_as<std::string>(LevelName3);



if 	((temp == 0xff00000000000000)&&(checkBox1->CheckState == CheckState::Unchecked)) {
				skippedVoxels++;
				goto blankvoxel;
				}

	vertstr = "# Cube N" + patch::to_string(voxCount) + ". Location: " + patch::to_string(currRow) + " " + patch::to_string(currCol) + " "  + patch::to_string(currFloor) + "\n";
		outfile << vertstr;

///// WEST SIDE
#if 1;
// row 1
		// v5 low (1)1
	vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
			// (2)2
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (3)3
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (4)4
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (5)5
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (6)6
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (7)7
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (8)8
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;

		// v6 low (397)9
	vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;

	// row 2
			// (9)10
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (10)11
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (11)12
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (12)13
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (13)14
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (14)15
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (15)16
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (16)17
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (398)18
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+1) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;

	// row 3
			// (17)19
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (18)20
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (19)21
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (20)22
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (21)23
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (22)24
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (23)25
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (24)26
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (399)27
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+1) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;

	// row 4
			// (25)28
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (26)29
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (27)30
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (28)31
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (29)32
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (30)33
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (31)34
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (32)35
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (400)36
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+1) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;

	// row 5
			// (33)37
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (34)38
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (35)39
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (36)40
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (37)41
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (38)42
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (39)43
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (40)44
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (401)45
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+1) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;

	// row 6
			// (41)46
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (42)47
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (43)48
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (44)49
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (45)50
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (46)51
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (47)52
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (48)53
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (402)54
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+1) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;

	// row 7
			// (49)55
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (50)56
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (51)57
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (52)58
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (53)59
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (54)60
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (55)61
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (56)62
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (403)63
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+1) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;

	// row 8
			// (57)64
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (58)65
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (59)66
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (60)67
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (61)68
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (62)69
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (63)70
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (64)71
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (404)72
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+1) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;

	// row 9
	// v1 high (65)73
	vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
	outfile << vertstr;

			// (66)74
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (67)75
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (68)76
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (69)77
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (70)78
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (71)79
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (72)80
			vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;

	// v2 high (405)81
	vertstr = "v " + patch::to_string(currRow+gap) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+gap) + "\n";
	outfile << vertstr;
#endif;
///// WEST SIDE END




///// NORTH SIDE
#if 1;
// row 1
	// v8 low (73)82
	vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
			// (74)83
			vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (75)84
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (76)85
			vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (77)86
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (78)87
			vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (79)88
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (80)89
			vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;

// row 2
			// (81)90
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (82)91
			vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (83)92
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (84)93
			vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (85)94
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (86)95
			vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (87)96
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (88)97
			vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;

// row 3
			// (89)98
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (90)99
			vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (91)100
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (92)101
			vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (93)102
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (94)103
			vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (95)104
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (96)105
			vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;

// row 4
			// (97)106
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (98)107
			vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (99)108
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (100)109
			vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (101)110
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (102)111
			vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (103)112
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (104)113
			vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;

// row 5
			// (105)114
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (106)115
			vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (107)116
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (108)117
			vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (109)118
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (110)119
			vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (111)120
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (112)121
			vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;

// row 6
			// (113)122
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (114)123
			vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (115)124
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (116)125
			vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (117)126
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (118)127
			vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (119)128
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (120)129
			vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;

// row 7
			// (121)130
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (122)131
			vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (123)132
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (124)133
			vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (125)134
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (126)135
			vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (127)136
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (128)137
			vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;

// row 8
			// (129)138
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (130)139
			vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (131)140
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (132)141
			vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (133)142
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (134)143
			vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (135)144
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (136)145
			vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;

// row 9
	// v4 high (137)146
	vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor+gap) + "\n";
	outfile << vertstr;
			// (138)147
			vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (139)148
			vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (140)149
			vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (141)150
			vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (142)151
			vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (143)152
			vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (144)153
			vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
#endif;
///// NORTH SIDE END




///// EAST SIDE
#if 1;
// row 1
			// (199)154
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (200)155
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (201)156
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (202)157
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (203)158
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (204)159
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (205)160
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
	// v7 low (325)161
	vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;

// row 2
			// (206)162
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (207)163
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (208)164
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (209)165
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (210)166
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (211)167
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (212)168
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (333)169
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;

// row 3
			// (213)170
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (214)171
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (215)172
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (216)173
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (217)174
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (218)175
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (219)176
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (341)177
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
// row 4
			// (220)178
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (221)179
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (222)180
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (223)181
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (224)182
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (225)183
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (226)184
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (349)185
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
// row 5
			// (227)186
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (228)187
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (229)188
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (230)189
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (231)190
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (232)191
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (233)192
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (357)193
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;

// row 6
			// (234)194
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (235)195
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (236)196
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (237)197
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (238)198
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (239)199
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (240)200
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (365)201
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;

// row 7
			// (241)202
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (242)203
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (243)204
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (244)205
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (245)206
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (246)207
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (247)208
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (373)209
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;

// row 8
			// (248)210
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (249)211
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (250)212
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (251)213
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (252)214
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (253)215
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (254)216
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (381)217
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;

// row 9
			// (255)218
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (256)219
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (257)220
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (258)221
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (259)222
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (260)223
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (261)224
			vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
	// v3 high (389)225
	vertstr = "v " + patch::to_string(currRow-gap+1) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor+gap) + "\n";
	outfile << vertstr;
#endif;
///// EAST SIDE END



///// SOUTH SIDE
#if 1;
//row 1
			// (326)226
			vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (327)227
			vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (328)228
			vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (329)229
			vertstr = "v " + patch::to_string(currRow-gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (330)230
			vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (331)231
			vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
			// (332)232
			vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
			outfile << vertstr;
//row 2
			// (334)233
			vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (335)234
			vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (336)235
			vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (337)236
			vertstr = "v " + patch::to_string(currRow-gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (338)237
			vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (339)238
			vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
			// (340)239
			vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
			outfile << vertstr;
//row 3
			// (342)240
			vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (343)241
			vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (344)242
			vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (345)243
			vertstr = "v " + patch::to_string(currRow-gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (346)244
			vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (347)245
			vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;
			// (348)246
			vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
			outfile << vertstr;

//row 4
			// (350)247
			vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (351)248
			vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (352)249
			vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (353)250
			vertstr = "v " + patch::to_string(currRow-gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (354)251
			vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (355)252
			vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
			// (356)253
			vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
			outfile << vertstr;
//row 5
			// (358)254
			vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (359)255
			vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (360)256
			vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (361)257
			vertstr = "v " + patch::to_string(currRow-gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (362)258
			vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (363)259
			vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
			// (364)260
			vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
			outfile << vertstr;
//row 6
			// (366)261
			vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (367)262
			vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (368)263
			vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (369)264
			vertstr = "v " + patch::to_string(currRow-gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (370)265
			vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (371)266
			vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;
			// (372)267
			vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
			outfile << vertstr;

//row 7
			// (374)268
			vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (375)269
			vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (376)270
			vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (377)271
			vertstr = "v " + patch::to_string(currRow-gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (378)272
			vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (379)273
			vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
			// (380)274
			vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
			outfile << vertstr;
//row 8
			// (382)275
			vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (383)276
			vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (384)277
			vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (385)278
			vertstr = "v " + patch::to_string(currRow-gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (386)279
			vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (387)280
			vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
			// (388)281
			vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
			outfile << vertstr;
//row 9
			// (390)282
			vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (391)283
			vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (392)284
			vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (393)285
			vertstr = "v " + patch::to_string(currRow-gap+0.5) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (394)286
			vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (395)287
			vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
			// (396)288
			vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol-gap+1) + " "  + patch::to_string(-currFloor-gap) + "\n";
			outfile << vertstr;
#endif;
///// SOUTH SIDE END

// DIAGONAL 1
#if 1;
// row 1
	// 262-289
	vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 263-290
	vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 264-291
	vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 265-292
	vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 266-293
	vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 267-294
	vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 268-295
	vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;

// row 2
	// 269-296
	vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 270-297
	vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 271-298
	vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 272-299
	vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 273-300
	vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 274-301
	vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 275-302
	vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;

// row 3
	// 276-303
	vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 277-304
	vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 278-305
	vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 279-306
	vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 280-307
	vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 281-308
	vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 282-309
	vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;

// row 4
	// 283-310
	vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 284-311
	vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 285-312
	vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 286-313
	vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 287-314
	vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 288-315
	vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 289-316
	vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;

// row 5
	// 290-317
	vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 291-318
	vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 292-319
	vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 293-320
	vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 294-321
	vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 295-322
	vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 296-323
	vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;

// row 6
	// 297-324
	vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 298-325
	vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 299-326
	vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 300-327
	vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 301-328
	vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 302-329
	vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 303-330
	vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;

// row 7
	// 304-331
	vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 305-332
	vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 306-333
	vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 307-334
	vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 308-335
	vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 309-336
	vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 310-337
	vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;

// row 8
	// 311-338
	vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 312-339
	vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 313-340
	vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 314-341
	vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 315-342
	vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 316-343
	vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 317-344
	vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;

// row 9
	// 318-345
	vertstr = "v " + patch::to_string(currRow+gap+0.125) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 319-346
	vertstr = "v " + patch::to_string(currRow+gap+0.25) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 320-347
	vertstr = "v " + patch::to_string(currRow+gap+0.375) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 321-348
	vertstr = "v " + patch::to_string(currRow+gap+0.5) + " " + patch::to_string(currCol+gap+0.5) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 322-349
	vertstr = "v " + patch::to_string(currRow+gap+0.625) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 323-350
	vertstr = "v " + patch::to_string(currRow+gap+0.75) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 324-351
	vertstr = "v " + patch::to_string(currRow+gap+0.875) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
#endif;
// DIAGONAL 1 END




// DIAGONAL 2
#if 1;
// row 1
	// 145-352
	vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 146-353
	vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 147-354
	vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 148-355
	vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 149-356
	vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;
	// 150-357
	vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+1) + "\n";
	outfile << vertstr;

// row 2
	// 151-358
	vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 152-359
	vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 153-360
	vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 154-361
	vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 155-362
	vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;
	// 156-363
	vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.875) + "\n";
	outfile << vertstr;

// row 3
	// 157-364
	vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 158-365
	vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 159-366
	vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 160-367
	vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 161-368
	vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;
	// 162-369
	vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.75) + "\n";
	outfile << vertstr;

// row 4
	// 163-370
	vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 164-371
	vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 165-372
	vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 166-373
	vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 167-374
	vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;
	// 168-375
	vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.625) + "\n";
	outfile << vertstr;

// row 5
	// 169-376
	vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 170-377
	vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 171-378
	vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 172-379
	vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 173-380
	vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;
	// 174-381
	vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.5) + "\n";
	outfile << vertstr;

// row 6
	// 175-382
	vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 176-383
	vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 177-384
	vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 178-385
	vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 179-386
	vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;
	// 180-387
	vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.375) + "\n";
	outfile << vertstr;

// row 7
	// 181-388
	vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 182-389
	vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 183-390
	vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 184-391
	vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 185-392
	vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;
	// 186-393
	vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.25) + "\n";
	outfile << vertstr;

// row 8
	// 187-394
	vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 188-395
	vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 189-396
	vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 190-397
	vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 191-398
	vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;
	// 192-399
	vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap+0.125) + "\n";
	outfile << vertstr;

// row 9
	// 193-400
	vertstr = "v " + patch::to_string(currRow-gap+0.875) + " " + patch::to_string(currCol+gap+0.125) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 194-401
	vertstr = "v " + patch::to_string(currRow-gap+0.75) + " " + patch::to_string(currCol+gap+0.25) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 195-402
	vertstr = "v " + patch::to_string(currRow-gap+0.625) + " " + patch::to_string(currCol+gap+0.375) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 196-403
	vertstr = "v " + patch::to_string(currRow-gap+0.375) + " " + patch::to_string(currCol+gap+0.625) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 197-404
	vertstr = "v " + patch::to_string(currRow-gap+0.25) + " " + patch::to_string(currCol+gap+0.75) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
	// 198-405
	vertstr = "v " + patch::to_string(currRow-gap+0.125) + " " + patch::to_string(currCol+gap+0.875) + " "  + patch::to_string(-currFloor-gap) + "\n";
	outfile << vertstr;
#endif;
// DIAGONAL 2 END




// WEST WALL
#if 1;
if (specsArray[cubeNinDataFile].textureW !=0) { // WEST wall

vertstr = "# Cube. collisionW = " + patch::to_string((int)specsArray[cubeNinDataFile].textureW) + "\n";
outfile << vertstr;
vertstr = "# Cube. mirroredW = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredW) + "\n";
outfile << vertstr;
tmpvalue3 = (specsArray[cubeNinDataFile].textureW & 0xFFFFFF3F);


// Collision bits 
#if 1; 
	if (celsArray[tmpvalue3].bytes8 == true) { // If collision found
#if 1;
			richTextBox4->AppendText("\ncollision " + tmpvalue3 + "\n");
			richTextBox4->AppendText("bit0 = " + celsArray[tmpvalue3].bit0 + "\n");
			richTextBox4->AppendText("bit1 = " + celsArray[tmpvalue3].bit1 + "\n");
			richTextBox4->AppendText("bit2 = " + celsArray[tmpvalue3].bit2 + "\n");
			richTextBox4->AppendText("bit3 = " + celsArray[tmpvalue3].bit3 + "\n");
			richTextBox4->AppendText("bit4 = " + celsArray[tmpvalue3].bit4 + "\n");
			richTextBox4->AppendText("bit5 = " + celsArray[tmpvalue3].bit5 + "\n");
			richTextBox4->AppendText("bit6 = " + celsArray[tmpvalue3].bit6 + "\n");
			richTextBox4->AppendText("bit7 = " + celsArray[tmpvalue3].bit7 + "\n");
			richTextBox4->AppendText("bit8 = " + celsArray[tmpvalue3].bit8 + "\n");
			richTextBox4->AppendText("bit9 = " + celsArray[tmpvalue3].bit9 + "\n");
			richTextBox4->AppendText("bit10 = " + celsArray[tmpvalue3].bit10 + "\n");
			richTextBox4->AppendText("bit11 = " + celsArray[tmpvalue3].bit11 + "\n");
			richTextBox4->AppendText("bit12 = " + celsArray[tmpvalue3].bit12 + "\n");
			richTextBox4->AppendText("bit13 = " + celsArray[tmpvalue3].bit13 + "\n");
			richTextBox4->AppendText("bit14 = " + celsArray[tmpvalue3].bit14 + "\n");
			richTextBox4->AppendText("bit15 = " + celsArray[tmpvalue3].bit15 + "\n");
			richTextBox4->AppendText("bit16 = " + celsArray[tmpvalue3].bit16 + "\n");
			richTextBox4->AppendText("bit17 = " + celsArray[tmpvalue3].bit17 + "\n");
			richTextBox4->AppendText("bit18 = " + celsArray[tmpvalue3].bit18 + "\n");
			richTextBox4->AppendText("bit19 = " + celsArray[tmpvalue3].bit19 + "\n");
			richTextBox4->AppendText("bit20 = " + celsArray[tmpvalue3].bit20 + "\n");
			richTextBox4->AppendText("bit21 = " + celsArray[tmpvalue3].bit21 + "\n");
			richTextBox4->AppendText("bit22 = " + celsArray[tmpvalue3].bit22 + "\n");
			richTextBox4->AppendText("bit23 = " + celsArray[tmpvalue3].bit23 + "\n");
			richTextBox4->AppendText("bit24 = " + celsArray[tmpvalue3].bit24 + "\n");
			richTextBox4->AppendText("bit25 = " + celsArray[tmpvalue3].bit25 + "\n");
			richTextBox4->AppendText("bit26 = " + celsArray[tmpvalue3].bit26 + "\n");
			richTextBox4->AppendText("bit27 = " + celsArray[tmpvalue3].bit27 + "\n");
			richTextBox4->AppendText("bit28 = " + celsArray[tmpvalue3].bit28 + "\n");
			richTextBox4->AppendText("bit29 = " + celsArray[tmpvalue3].bit29 + "\n");
			richTextBox4->AppendText("bit30 = " + celsArray[tmpvalue3].bit30 + "\n");
			richTextBox4->AppendText("bit31 = " + celsArray[tmpvalue3].bit31 + "\n");

			richTextBox4->AppendText("bit32 = " + celsArray[tmpvalue3].bit32 + "\n");
			richTextBox4->AppendText("bit33 = " + celsArray[tmpvalue3].bit33 + "\n");
			richTextBox4->AppendText("bit34 = " + celsArray[tmpvalue3].bit34 + "\n");
			richTextBox4->AppendText("bit35 = " + celsArray[tmpvalue3].bit35 + "\n");
			richTextBox4->AppendText("bit36 = " + celsArray[tmpvalue3].bit36 + "\n");
			richTextBox4->AppendText("bit37 = " + celsArray[tmpvalue3].bit37 + "\n");
			richTextBox4->AppendText("bit38 = " + celsArray[tmpvalue3].bit38 + "\n");
			richTextBox4->AppendText("bit39 = " + celsArray[tmpvalue3].bit39 + "\n");
			richTextBox4->AppendText("bit40 = " + celsArray[tmpvalue3].bit40 + "\n");
			richTextBox4->AppendText("bit41 = " + celsArray[tmpvalue3].bit41 + "\n");
			richTextBox4->AppendText("bit42 = " + celsArray[tmpvalue3].bit42 + "\n");
			richTextBox4->AppendText("bit43 = " + celsArray[tmpvalue3].bit43 + "\n");
			richTextBox4->AppendText("bit44 = " + celsArray[tmpvalue3].bit44 + "\n");
			richTextBox4->AppendText("bit45 = " + celsArray[tmpvalue3].bit45 + "\n");
			richTextBox4->AppendText("bit46 = " + celsArray[tmpvalue3].bit46 + "\n");
			richTextBox4->AppendText("bit47 = " + celsArray[tmpvalue3].bit47 + "\n");
			richTextBox4->AppendText("bit48 = " + celsArray[tmpvalue3].bit48 + "\n");
			richTextBox4->AppendText("bit49 = " + celsArray[tmpvalue3].bit49 + "\n");
			richTextBox4->AppendText("bit50 = " + celsArray[tmpvalue3].bit50 + "\n");
			richTextBox4->AppendText("bit51 = " + celsArray[tmpvalue3].bit51 + "\n");
			richTextBox4->AppendText("bit52 = " + celsArray[tmpvalue3].bit52 + "\n");
			richTextBox4->AppendText("bit53 = " + celsArray[tmpvalue3].bit53 + "\n");
			richTextBox4->AppendText("bit54 = " + celsArray[tmpvalue3].bit54 + "\n");
			richTextBox4->AppendText("bit55 = " + celsArray[tmpvalue3].bit55 + "\n");
			richTextBox4->AppendText("bit56 = " + celsArray[tmpvalue3].bit56 + "\n");
			richTextBox4->AppendText("bit57 = " + celsArray[tmpvalue3].bit57 + "\n");
			richTextBox4->AppendText("bit58 = " + celsArray[tmpvalue3].bit58 + "\n");
			richTextBox4->AppendText("bit59 = " + celsArray[tmpvalue3].bit59 + "\n");
			richTextBox4->AppendText("bit60 = " + celsArray[tmpvalue3].bit60 + "\n");
			richTextBox4->AppendText("bit61 = " + celsArray[tmpvalue3].bit61 + "\n");
			richTextBox4->AppendText("bit62 = " + celsArray[tmpvalue3].bit62 + "\n");
			richTextBox4->AppendText("bit63 = " + celsArray[tmpvalue3].bit63 + "\n");
#endif;
binfile.write((char *)&tmpvalue3, 1);
binfile.write((char *)&celsArray[tmpvalue3].bit3, 1);


//#if 1;
		if (celsArray[tmpvalue3].bit0 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=1;
				v2=10;//
				v3=11;//
				v4=2;//	
			} else {
				v1=8;//
				v2=17;//
				v3=18;//
				v4=9;//				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit0 = " + celsArray[tmpvalue3].bit0 + "\n");
			}
		if (celsArray[tmpvalue3].bit1 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=2;//
				v2=11;//
				v3=12;//
				v4=3;//			
			} else {
				v1=7;//
				v2=16;//
				v3=17;//
				v4=8;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit1 = " + celsArray[tmpvalue3].bit1 + "\n");
			}
		if (celsArray[tmpvalue3].bit2 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=3;//
				v2=12;//
				v3=13;//
				v4=4;//			
			} else {
				v1=6;//
				v2=15;//
				v3=16;//
				v4=7;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit2 = " + celsArray[tmpvalue3].bit2 + "\n");
			}
//#endif;

		if (celsArray[tmpvalue3].bit3 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=4;//
				v2=13;//
				v3=14;//
				v4=5;//			
			} else {
				v1=5;//
				v2=14;//
				v3=15;//
				v4=6;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit3 = " + celsArray[tmpvalue3].bit3 + "\n");
			}

//#if 1;
		if (celsArray[tmpvalue3].bit4 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=5;//
				v2=14;//
				v3=15;//
				v4=6;//			
			} else {
				v1=4;//
				v2=13;
				v3=14;//
				v4=5;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit4 = " + celsArray[tmpvalue3].bit4 + "\n");
			}
		if (celsArray[tmpvalue3].bit5 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=6;///
				v2=15;///
				v3=16;///
				v4=7;///			
			} else {
				v1=3;///
				v2=12;///
				v3=13;///
				v4=4;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit5 = " + celsArray[tmpvalue3].bit5 + "\n");
			}
		if (celsArray[tmpvalue3].bit6 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=7;///
				v2=16;///
				v3=17;///
				v4=8;///			
			} else {
				v1=2;///
				v2=11;///
				v3=12;///
				v4=3;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit6 = " + celsArray[tmpvalue3].bit6 + "\n");
			}
		if (celsArray[tmpvalue3].bit7 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=8;///
				v2=17;///
				v3=18;///
				v4=9;///			
			} else {
				v1=1;///
				v2=10;///
				v3=11;///
				v4=2;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit7 = " + celsArray[tmpvalue3].bit7 + "\n");
			}
		if (celsArray[tmpvalue3].bit8 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=10;///
				v2=19;///
				v3=20;///
				v4=11;///			
			} else {
				v1=17;///
				v2=26;///
				v3=27;///
				v4=18;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit9 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=11;///
				v2=20;///
				v3=21;///
				v4=12;///			
			} else {
				v1=16;///
				v2=25;///
				v3=26;///
				v4=17;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit10 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=12;///
				v2=21;///
				v3=22;///
				v4=13;///			
			} else {
				v1=15;///
				v2=24;///
				v3=25;///
				v4=16;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit11 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=13;///
				v2=22;///
				v3=23;///
				v4=14;///			
			} else {
				v1=14;///
				v2=23;///
				v3=24;///
				v4=15;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit12 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=14;///
				v2=23;///
				v3=24;///
				v4=15;///			
			} else {
				v1=13;///
				v2=22;///
				v3=23;///
				v4=14;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit13 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=15;///
				v2=24;///
				v3=25;///
				v4=16;///			
			} else {
				v1=12;///
				v2=21;///
				v3=22;///
				v4=13;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit14 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=16;///
				v2=25;///
				v3=26;///
				v4=17;///			
			} else {
				v1=11;///
				v2=20;///
				v3=21;///
				v4=12;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit15 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=17;///
				v2=26;///
				v3=27;///
				v4=18;///			
			} else {
				v1=10;///
				v2=19;///
				v3=20;///
				v4=11;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit16 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=19;///
				v2=28;///
				v3=29;///
				v4=20;///			
			} else {
				v1=26;///
				v2=35;///
				v3=36;///
				v4=27;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit17 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=20;///
				v2=29;///
				v3=30;///
				v4=21;///			
			} else {
				v1=25;///
				v2=34;///
				v3=35;///
				v4=26;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit18 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=21;///
				v2=30;///
				v3=31;///
				v4=22;///			
			} else {
				v1=24;///
				v2=33;///
				v3=34;///
				v4=25;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit19 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=22;///
				v2=31;///
				v3=32;///
				v4=23;///			
			} else {
				v1=23;///
				v2=32;///
				v3=33;///
				v4=24;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit20 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=23;///
				v2=32;///
				v3=33;///
				v4=24;///			
			} else {
				v1=22;///
				v2=31;///
				v3=32;///
				v4=23;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit21 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=24;///
				v2=33;///
				v3=34;///
				v4=25;///			
			} else {
				v1=21;///
				v2=30;///
				v3=31;///
				v4=22;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit22 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=25;///
				v2=34;///
				v3=35;///
				v4=26;///			
			} else {
				v1=20;///
				v2=29;///
				v3=30;///
				v4=21;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit23 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=26;///
				v2=35;///
				v3=36;///
				v4=27;///			
			} else {
				v1=19;///
				v2=28;///
				v3=29;///
				v4=20;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit24 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=28;///
				v2=37;///
				v3=38;///
				v4=29;///			
			} else {
				v1=35;///
				v2=44;///
				v3=45;///
				v4=36;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit25 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=29;///
				v2=38;///
				v3=39;///
				v4=30;///			
			} else {
				v1=34;///
				v2=43;///
				v3=44;///
				v4=35;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit26 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=30;///
				v2=39;///
				v3=40;///
				v4=31;///			
			} else {
				v1=33;///
				v2=42;///
				v3=43;///
				v4=34;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit27 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=31;///
				v2=40;///
				v3=41;///
				v4=32;///			
			} else {
				v1=32;///
				v2=41;///
				v3=42;///
				v4=33;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit28 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=32;///
				v2=41;///
				v3=42;///
				v4=33;///			
			} else {
				v1=31;///
				v2=40;///
				v3=41;///
				v4=32;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit29 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=33;///
				v2=42;///
				v3=43;///
				v4=34;///			
			} else {
				v1=30;///
				v2=39;///
				v3=40;///
				v4=31;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit30 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=34;///
				v2=43;///
				v3=44;///
				v4=35;///			
			} else {
				v1=29;///
				v2=38;///
				v3=39;///
				v4=30;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}

		if (celsArray[tmpvalue3].bit31 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=35;///
				v2=44;///
				v3=45;///
				v4=36;///			
			} else {
				v1=28;///
				v2=37;///
				v3=38;///
				v4=29;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}


// Upper part
		if (celsArray[tmpvalue3].bit32 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=37;///
				v2=46;///
				v3=47;///
				v4=38;///			
			} else {
				v1=44;///
				v2=53;///
				v3=54;///
				v4=45;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit33 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=38;///
				v2=47;///
				v3=48;///
				v4=39;///			
			} else {
				v1=43;///
				v2=52;///
				v3=53;///
				v4=44;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit34 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=39;///
				v2=48;///
				v3=49;///
				v4=40;///			
			} else {
				v1=42;///
				v2=51;///
				v3=52;///
				v4=43;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit35 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=40;///
				v2=49;///
				v3=50;///
				v4=41;///			
			} else {
				v1=41;///
				v2=50;///
				v3=51;///
				v4=42;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit36 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=41;///
				v2=50;///
				v3=51;///
				v4=42;///			
			} else {
				v1=40;///
				v2=49;///
				v3=50;///
				v4=41;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit37 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=42;///
				v2=51;///
				v3=52;///
				v4=43;///			
			} else {
				v1=39;///
				v2=48;///
				v3=49;///
				v4=40;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit38 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=43;///
				v2=52;///
				v3=53;///
				v4=44;///			
			} else {
				v1=38;///
				v2=47;///
				v3=48;///
				v4=39;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit39 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=44;///
				v2=53;///
				v3=54;///
				v4=45;///			
			} else {
				v1=37;///
				v2=46;///
				v3=47;///
				v4=38;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit40 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=46;///
				v2=55;///
				v3=56;///
				v4=47;///			
			} else {
				v1=53;///
				v2=62;///
				v3=63;///
				v4=54;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit41 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=47;///
				v2=56;///
				v3=57;///
				v4=48;///			
			} else {
				v1=52;///
				v2=61;///
				v3=62;///
				v4=53;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit42 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=48;///
				v2=57;///
				v3=58;///
				v4=49;///			
			} else {
				v1=51;///
				v2=60;///
				v3=61;///
				v4=52;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit43 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=49;///
				v2=58;///
				v3=59;///
				v4=50;///			
			} else {
				v1=50;///
				v2=59;///
				v3=60;///
				v4=51;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit44 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=50;///
				v2=59;///
				v3=60;///
				v4=51;///			
			} else {
				v1=49;///
				v2=58;///
				v3=59;///
				v4=50;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit45 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=51;///
				v2=60;///
				v3=61;///
				v4=52;///			
			} else {
				v1=48;///
				v2=57;///
				v3=58;///
				v4=49;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit46 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=52;///
				v2=61;///
				v3=62;///
				v4=53;///			
			} else {
				v1=47;///
				v2=56;///
				v3=57;///
				v4=48;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit47 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=53;///
				v2=62;///
				v3=63;///
				v4=54;///			
			} else {
				v1=46;///
				v2=55;///
				v3=56;///
				v4=47;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit48 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=55;///
				v2=64;///
				v3=65;///
				v4=56;///			
			} else {
				v1=62;///
				v2=71;///
				v3=72;///
				v4=63;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit49 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=56;///
				v2=65;///
				v3=66;///
				v4=57;///			
			} else {
				v1=61;///
				v2=70;///
				v3=71;///
				v4=62;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit50 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=57;///
				v2=66;///
				v3=67;///
				v4=58;///			
			} else {
				v1=60;///
				v2=69;///
				v3=70;///
				v4=61;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit51 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=58;///
				v2=67;///
				v3=68;///
				v4=59;///			
			} else {
				v1=59;///
				v2=68;///
				v3=69;///
				v4=60;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit52 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=59;///
				v2=68;///
				v3=69;///
				v4=60;///			
			} else {
				v1=58;///
				v2=67;///
				v3=68;///
				v4=59;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit53 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=60;///
				v2=69;///
				v3=70;///
				v4=61;///			
			} else {
				v1=57;///
				v2=66;///
				v3=67;///
				v4=58;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit54 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=61;///
				v2=70;///
				v3=71;///
				v4=62;///			
			} else {
				v1=56;///
				v2=65;///
				v3=66;///
				v4=57;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit55 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=62;///
				v2=71;///
				v3=72;///
				v4=63;///			
			} else {
				v1=55;///
				v2=64;///
				v3=65;///
				v4=56;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit56 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=64;///
				v2=73;///
				v3=74;///
				v4=65;///			
			} else {
				v1=71;///
				v2=80;///
				v3=81;///
				v4=72;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit57 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=65;///
				v2=74;///
				v3=75;///
				v4=66;///			
			} else {
				v1=70;///
				v2=79;///
				v3=80;///
				v4=71;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit58 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=66;///
				v2=75;///
				v3=76;///
				v4=67;///			
			} else {
				v1=69;///
				v2=78;///
				v3=79;///
				v4=70;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit59 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=67;///
				v2=76;///
				v3=77;///
				v4=68;///			
			} else {
				v1=68;///
				v2=77;///
				v3=78;///
				v4=69;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit60 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=68;///
				v2=77;///
				v3=78;///
				v4=69;///			
			} else {
				v1=67;///
				v2=76;///
				v3=77;///
				v4=68;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit61 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=69;///
				v2=78;///
				v3=79;///
				v4=70;///			
			} else {
				v1=66;///
				v2=75;///
				v3=76;///
				v4=67;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit62 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=70;///
				v2=79;///
				v3=80;///
				v4=71;///			
			} else {
				v1=65;///
				v2=74;///
				v3=75;///
				v4=66;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue3].bit63 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredW == false) {
				v1=71;///
				v2=80;///
				v3=81;///
				v4=72;///			
			} else {
				v1=64;///
				v2=73;///
				v3=74;///
				v4=65;///					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
//#endif;
		}


#endif;// Collision bits
}
#endif;




// NORTH WALL
#if 1;
if (specsArray[cubeNinDataFile].textureN !=0) { // NORTH wall

vertstr = "# Cube. collisionN = " + patch::to_string((int)specsArray[cubeNinDataFile].textureN) + "\n";
outfile << vertstr;
vertstr = "# Cube. mirroredN = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredN) + "\n";
outfile << vertstr;
tmpvalue4 = (specsArray[cubeNinDataFile].textureN & 0xFFFFFF3F);


// Collision bits 
#if 1; 
	if (celsArray[tmpvalue4].bytes8 == true) { // If collision found

		if (celsArray[tmpvalue4].bit0 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=1;
				v2=10;
				v3=97;
				v4=89;		
			} else {
				v1=83;
				v2=91;
				v3=90;
				v4=82;				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit0 = " + celsArray[tmpvalue3].bit0 + "\n");
			}
#if 1;
		if (celsArray[tmpvalue4].bit1 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=89;
				v2=97;
				v3=96;
				v4=88;			
			} else {
				v1=84;
				v2=92;
				v3=91;
				v4=83;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit1 = " + celsArray[tmpvalue3].bit1 + "\n");
			}
		if (celsArray[tmpvalue4].bit2 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=88;
				v2=96;
				v3=95;
				v4=87;		
			} else {
				v1=85;
				v2=93;
				v3=92;
				v4=84;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit2 = " + celsArray[tmpvalue3].bit2 + "\n");
			}
		if (celsArray[tmpvalue4].bit3 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=87;
				v2=95;
				v3=94;
				v4=86;		
			} else {
				v1=86;
				v2=94;
				v3=93;
				v4=85;				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit3 = " + celsArray[tmpvalue3].bit3 + "\n");
			}
		if (celsArray[tmpvalue4].bit4 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=86;
				v2=94;
				v3=93;
				v4=85;			
			} else {
				v1=87;
				v2=95;
				v3=94;
				v4=86;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit4 = " + celsArray[tmpvalue3].bit4 + "\n");
			}
		if (celsArray[tmpvalue4].bit5 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=85;
				v2=93;
				v3=92;
				v4=84;			
			} else {
				v1=88;
				v2=96;
				v3=95;
				v4=87;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit5 = " + celsArray[tmpvalue3].bit5 + "\n");
			}
		if (celsArray[tmpvalue4].bit6 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=84;
				v2=92;
				v3=91;
				v4=83;			
			} else {
				v1=89;
				v2=97;
				v3=96;
				v4=88;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit6 = " + celsArray[tmpvalue3].bit6 + "\n");
			}
		if (celsArray[tmpvalue4].bit7 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=83;
				v2=91;
				v3=90;
				v4=82;			
			} else {
				v1=1;
				v2=10;
				v3=97;
				v4=89;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit7 = " + celsArray[tmpvalue3].bit7 + "\n");
			}
		if (celsArray[tmpvalue4].bit8 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=10;
				v2=19;
				v3=105;
				v4=97;			
			} else {
				v1=91;
				v2=99;
				v3=98;
				v4=90;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit9 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=97;
				v2=105;
				v3=104;
				v4=96;			
			} else {
				v1=92;
				v2=100;
				v3=99;
				v4=91;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit10 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=96;
				v2=104;
				v3=103;
				v4=95;			
			} else {
				v1=93;
				v2=101;
				v3=100;
				v4=92;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit11 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=95;
				v2=103;
				v3=102;
				v4=94;			
			} else {
				v1=94;
				v2=102;
				v3=101;
				v4=93;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit12 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=94;
				v2=102;
				v3=101;
				v4=93;			
			} else {
				v1=95;
				v2=103;
				v3=102;
				v4=94;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit13 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=93;
				v2=101;
				v3=100;
				v4=92;			
			} else {
				v1=96;
				v2=104;
				v3=103;
				v4=95;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit14 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=92;
				v2=100;
				v3=99;
				v4=91;			
			} else {
				v1=97;
				v2=105;
				v3=104;
				v4=96;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit15 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=91;
				v2=99;
				v3=98;
				v4=90;			
			} else {
				v1=10;
				v2=19;
				v3=105;
				v4=97;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit16 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=19;
				v2=28;
				v3=113;
				v4=105;			
			} else {
				v1=99;
				v2=107;
				v3=106;
				v4=98;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit17 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=105;
				v2=113;
				v3=112;
				v4=104;			
			} else {
				v1=100;
				v2=108;
				v3=107;
				v4=99;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit18 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=104;
				v2=112;
				v3=111;
				v4=103;			
			} else {
				v1=101;
				v2=109;
				v3=108;
				v4=100;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit19 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=103;
				v2=111;
				v3=110;
				v4=102;			
			} else {
				v1=102;
				v2=110;
				v3=109;
				v4=101;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit20 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=102;
				v2=110;
				v3=109;
				v4=101;			
			} else {
				v1=103;
				v2=111;
				v3=110;
				v4=102;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit21 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=101;
				v2=109;
				v3=108;
				v4=100;			
			} else {
				v1=104;
				v2=112;
				v3=111;
				v4=103;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit22 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=100;
				v2=108;
				v3=107;
				v4=99;			
			} else {
				v1=105;
				v2=113;
				v3=112;
				v4=104;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit23 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=99;
				v2=107;
				v3=106;
				v4=98;			
			} else {
				v1=19;
				v2=28;
				v3=113;
				v4=105;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit24 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=28;
				v2=37;
				v3=121;
				v4=113;			
			} else {
				v1=107;
				v2=115;
				v3=114;
				v4=106;
			}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit25 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=113;
				v2=121;
				v3=120;
				v4=112;			
			} else {
				v1=108;
				v2=116;
				v3=115;
				v4=107;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit26 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=112;
				v2=120;
				v3=119;
				v4=111;			
			} else {
				v1=109;
				v2=117;
				v3=116;
				v4=108;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit27 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=111;
				v2=119;
				v3=118;
				v4=110;			
			} else {
				v1=110;
				v2=118;
				v3=117;
				v4=109;				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit28 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=110;
				v2=118;
				v3=117;
				v4=109;			
			} else {
				v1=111;
				v2=119;
				v3=118;
				v4=110;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit29 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=109;
				v2=117;
				v3=116;
				v4=108;			
			} else {
				v1=112;
				v2=120;
				v3=119;
				v4=111;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit30 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=108;
				v2=116;
				v3=115;
				v4=107;			
			} else {
				v1=113;
				v2=121;
				v3=120;
				v4=112;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit31 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=107;
				v2=115;
				v3=114;
				v4=106;			
			} else {
				v1=28;
				v2=37;
				v3=121;
				v4=113;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}


// Upper part
		if (celsArray[tmpvalue4].bit32 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=37;//
				v2=46;//
				v3=129;//
				v4=121;//			
			} else {
				v1=115;//
				v2=123;//
				v3=122;//
				v4=114;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit33 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=121;//
				v2=129;//
				v3=128;//
				v4=120;//			
			} else {
				v1=116;//
				v2=124;//
				v3=123;//
				v4=115;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit34 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=120;//
				v2=128;//
				v3=127;//
				v4=119;//			
			} else {
				v1=117;//
				v2=125;//
				v3=124;//
				v4=116;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit35 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=119;//
				v2=127;//
				v3=126;//
				v4=118;//			
			} else {
				v1=118;//
				v2=126;//
				v3=125;//
				v4=117;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit36 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=118;//
				v2=126;//
				v3=125;//
				v4=117;//			
			} else {
				v1=119;//
				v2=127;//
				v3=126;//
				v4=118;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit37 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=117;//
				v2=125;//
				v3=124;//
				v4=116;//			
			} else {
				v1=120;//
				v2=128;//
				v3=127;//
				v4=119;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit38 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=116;//
				v2=124;//
				v3=123;//
				v4=115;//			
			} else {
				v1=121;//
				v2=129;//
				v3=128;//
				v4=120;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit39 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=115;//
				v2=123;//
				v3=122;//
				v4=114;//			
			} else {
				v1=37;//
				v2=46;//
				v3=129;//
				v4=121;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit40 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=46;//
				v2=55;//
				v3=137;//
				v4=129;//			
			} else {
				v1=123;//
				v2=131;//
				v3=130;//
				v4=122;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit41 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=129;//
				v2=137;//
				v3=136;//
				v4=128;//			
			} else {
				v1=124;//
				v2=132;//
				v3=131;//
				v4=123;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit42 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=128;//
				v2=136;//
				v3=135;//
				v4=127;//			
			} else {
				v1=125;//
				v2=133;//
				v3=132;//
				v4=124;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit43 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=127;//
				v2=135;//
				v3=134;//
				v4=126;//			
			} else {
				v1=126;//
				v2=134;//
				v3=133;//
				v4=125;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit44 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=126;//
				v2=134;//
				v3=133;//
				v4=125;//			
			} else {
				v1=127;//
				v2=135;//
				v3=134;//
				v4=126;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit45 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=125;//
				v2=133;//
				v3=132;//
				v4=124;//			
			} else {
				v1=128;//
				v2=136;//
				v3=135;//
				v4=127;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit46 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=124;//
				v2=132;//
				v3=131;//
				v4=123;//			
			} else {
				v1=129;//
				v2=137;//
				v3=136;//
				v4=128;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit47 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=123;//
				v2=131;//
				v3=130;//
				v4=122;//			
			} else {
				v1=46;//
				v2=55;//
				v3=137;//
				v4=129;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit48 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=55;//
				v2=64;//
				v3=145;//
				v4=137;//			
			} else {
				v1=131;//
				v2=139;//
				v3=138;//
				v4=130;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit49 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=137;//
				v2=145;//
				v3=144;//
				v4=136;//			
			} else {
				v1=132;//
				v2=140;//
				v3=139;//
				v4=131;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit50 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=136;//
				v2=144;//
				v3=143;//
				v4=135;//			
			} else {
				v1=133;//
				v2=141;//
				v3=140;//
				v4=132;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit51 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=135;//
				v2=143;//
				v3=142;//
				v4=134;//			
			} else {
				v1=134;//
				v2=142;//
				v3=141;//
				v4=133;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit52 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=134;//
				v2=142;//
				v3=141;//
				v4=133;//			
			} else {
				v1=135;//
				v2=143;//
				v3=142;//
				v4=134;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit53 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=133;//
				v2=141;//
				v3=140;//
				v4=132;//			
			} else {
				v1=136;//
				v2=144;//
				v3=143;//
				v4=135;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit54 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=132;//
				v2=140;//
				v3=139;//
				v4=131;//			
			} else {
				v1=137;//
				v2=145;//
				v3=144;//
				v4=136;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit55 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=131;//
				v2=139;//
				v3=138;//
				v4=130;//			
			} else {
				v1=55;//
				v2=64;//
				v3=145;//
				v4=137;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit56 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=64;//
				v2=73;//
				v3=153;//
				v4=145;//			
			} else {
				v1=139;//
				v2=147;//
				v3=146;//
				v4=138;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit57 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=145;//
				v2=153;//
				v3=152;//
				v4=144;//			
			} else {
				v1=140;//
				v2=148;//
				v3=147;//
				v4=139;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit58 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=144;//
				v2=152;//
				v3=151;//
				v4=143;//			
			} else {
				v1=141;//
				v2=149;//
				v3=148;//
				v4=140;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit59 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=143;//
				v2=151;//
				v3=150;//
				v4=142;//			
			} else {
				v1=142;//
				v2=150;//
				v3=149;//
				v4=141;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit60 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=142;//
				v2=150;//
				v3=149;//
				v4=141;//			
			} else {
				v1=143;//
				v2=151;//
				v3=150;//
				v4=142;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit61 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=141;//
				v2=149;//
				v3=148;//
				v4=140;//			
			} else {
				v1=144;//
				v2=152;//
				v3=151;//
				v4=143;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit62 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=140;//
				v2=148;//
				v3=147;//
				v4=139;//			
			} else {
				v1=145;//
				v2=153;//
				v3=152;//
				v4=144;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue4].bit63 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredN == true) {
				v1=139;//
				v2=147;//
				v3=146;//
				v4=138;//			
			} else {
				v1=64;//
				v2=73;//
				v3=153;//
				v4=145;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#endif;
		}


#endif;// Collision bits
}
#endif;


// EAST WALL
#if 1;
if (specsArray[cubeNinDataFile].textureE !=0) { // EAST wall

vertstr = "# Cube. collisionE = " + patch::to_string((int)specsArray[cubeNinDataFile].textureE) + "\n";
outfile << vertstr;
vertstr = "# Cube. mirroredE = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredE) + "\n";
outfile << vertstr;
tmpvalue5 = (specsArray[cubeNinDataFile].textureE & 0xFFFFFF3F);


// Collision bits 
#if 1; 
	if (celsArray[tmpvalue5].bytes8 == true) { // If collision found

		if (celsArray[tmpvalue5].bit0 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=82;
				v2=90;
				v3=162;
				v4=154;		
			} else {
				v1=160;
				v2=168;
				v3=169;
				v4=161;				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit0 = " + celsArray[tmpvalue3].bit0 + "\n");
			}
		if (celsArray[tmpvalue5].bit1 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=154;
				v2=162;
				v3=163;
				v4=155;			
			} else {
				v1=159;
				v2=167;
				v3=168;
				v4=160;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit1 = " + celsArray[tmpvalue3].bit1 + "\n");
			}
		if (celsArray[tmpvalue5].bit2 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=155;
				v2=163;
				v3=164;
				v4=156;		
			} else {
				v1=158;
				v2=166;
				v3=167;
				v4=159;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit2 = " + celsArray[tmpvalue3].bit2 + "\n");
			}
		if (celsArray[tmpvalue5].bit3 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=156;
				v2=164;
				v3=165;
				v4=157;		
			} else {
				v1=157;
				v2=165;
				v3=166;
				v4=158;				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit3 = " + celsArray[tmpvalue3].bit3 + "\n");
			}
		if (celsArray[tmpvalue5].bit4 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=157;
				v2=165;
				v3=166;
				v4=158;			
			} else {
				v1=156;
				v2=164;
				v3=165;
				v4=157;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit4 = " + celsArray[tmpvalue3].bit4 + "\n");
			}
		if (celsArray[tmpvalue5].bit5 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=158;
				v2=166;
				v3=167;
				v4=159;			
			} else {
				v1=155;
				v2=163;
				v3=164;
				v4=156;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit5 = " + celsArray[tmpvalue3].bit5 + "\n");
			}
		if (celsArray[tmpvalue5].bit6 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=159;
				v2=167;
				v3=168;
				v4=160;			
			} else {
				v1=154;
				v2=162;
				v3=163;
				v4=155;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit6 = " + celsArray[tmpvalue3].bit6 + "\n");
			}
		if (celsArray[tmpvalue5].bit7 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=160;
				v2=168;
				v3=169;
				v4=161;			
			} else {
				v1=82;
				v2=90;
				v3=162;
				v4=154;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit7 = " + celsArray[tmpvalue3].bit7 + "\n");
			}
		if (celsArray[tmpvalue5].bit8 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=90;
				v2=98;
				v3=170;
				v4=162;			
			} else {
				v1=168;
				v2=176;
				v3=177;
				v4=169;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit9 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=162;
				v2=170;
				v3=171;
				v4=163;			
			} else {
				v1=167;
				v2=175;
				v3=176;
				v4=168;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit10 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=163;
				v2=171;
				v3=172;
				v4=164;			
			} else {
				v1=166;
				v2=174;
				v3=175;
				v4=167;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit11 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=164;
				v2=172;
				v3=173;
				v4=165;			
			} else {
				v1=165;
				v2=173;
				v3=174;
				v4=166;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit12 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=165;
				v2=173;
				v3=174;
				v4=166;			
			} else {
				v1=164;
				v2=172;
				v3=173;
				v4=165;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit13 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=166;
				v2=174;
				v3=175;
				v4=167;			
			} else {
				v1=163;
				v2=171;
				v3=172;
				v4=164;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit14 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=167;
				v2=175;
				v3=176;
				v4=168;			
			} else {
				v1=162;
				v2=170;
				v3=171;
				v4=163;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit15 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=168;
				v2=176;
				v3=177;
				v4=169;			
			} else {
				v1=90;
				v2=98;
				v3=170;
				v4=162;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}

		if (celsArray[tmpvalue5].bit16 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=98;
				v2=106;
				v3=178;
				v4=170;			
			} else {
				v1=176;
				v2=184;
				v3=185;
				v4=177;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit17 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=170;
				v2=178;
				v3=179;
				v4=171;			
			} else {
				v1=175;
				v2=183;
				v3=184;
				v4=176;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit18 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=171;
				v2=179;
				v3=180;
				v4=172;			
			} else {
				v1=174;
				v2=182;
				v3=183;
				v4=175;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit19 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=172;
				v2=180;
				v3=181;
				v4=173;			
			} else {
				v1=173;
				v2=181;
				v3=182;
				v4=174;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit20 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=173;
				v2=181;
				v3=182;
				v4=174;			
			} else {
				v1=172;
				v2=180;
				v3=181;
				v4=173;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit21 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=174;
				v2=182;
				v3=183;
				v4=175;			
			} else {
				v1=171;
				v2=179;
				v3=180;
				v4=172;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit22 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=175;
				v2=183;
				v3=184;
				v4=176;			
			} else {
				v1=170;
				v2=178;
				v3=179;
				v4=171;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit23 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=176;
				v2=184;
				v3=185;
				v4=177;			
			} else {
				v1=98;
				v2=106;
				v3=178;
				v4=170;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit24 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=106;
				v2=114;
				v3=186;
				v4=178;			
			} else {
				v1=184;
				v2=192;
				v3=193;
				v4=185;
			}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit25 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=178;
				v2=186;
				v3=187;
				v4=179;			
			} else {
				v1=183;
				v2=191;
				v3=192;
				v4=184;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit26 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=179;
				v2=187;
				v3=188;
				v4=180;			
			} else {
				v1=182;
				v2=190;
				v3=191;
				v4=183;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit27 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=180;
				v2=188;
				v3=189;
				v4=181;			
			} else {
				v1=181;
				v2=189;
				v3=190;
				v4=182;				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit28 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=181;
				v2=189;
				v3=190;
				v4=182;			
			} else {
				v1=180;
				v2=188;
				v3=189;
				v4=181;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit29 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=182;
				v2=190;
				v3=191;
				v4=183;			
			} else {
				v1=179;
				v2=187;
				v3=188;
				v4=180;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit30 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=183;
				v2=191;
				v3=192;
				v4=184;			
			} else {
				v1=178;
				v2=186;
				v3=187;
				v4=179;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit31 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=184;
				v2=192;
				v3=193;
				v4=185;			
			} else {
				v1=106;
				v2=114;
				v3=186;
				v4=178;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}


// Upper part
		if (celsArray[tmpvalue5].bit32 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=114;//
				v2=122;//
				v3=194;//
				v4=186;//			
			} else {
				v1=192;//
				v2=200;//
				v3=201;//
				v4=193;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit33 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=186;//
				v2=194;//
				v3=195;//
				v4=187;//			
			} else {
				v1=191;//
				v2=199;//
				v3=200;//
				v4=192;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit34 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=187;//
				v2=195;//
				v3=196;//
				v4=188;//			
			} else {
				v1=190;//
				v2=198;//
				v3=199;//
				v4=191;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit35 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=188;//
				v2=196;//
				v3=197;//
				v4=189;//			
			} else {
				v1=189;//
				v2=197;//
				v3=198;//
				v4=190;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit36 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=189;//
				v2=197;//
				v3=198;//
				v4=190;//			
			} else {
				v1=188;//
				v2=196;//
				v3=197;//
				v4=189;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit37 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=190;//
				v2=198;//
				v3=199;//
				v4=191;//			
			} else {
				v1=187;//
				v2=195;//
				v3=196;//
				v4=188;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit38 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=191;//
				v2=199;//
				v3=200;//
				v4=192;//			
			} else {
				v1=186;//
				v2=194;//
				v3=195;//
				v4=187;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit39 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=192;//
				v2=200;//
				v3=201;//
				v4=193;//			
			} else {
				v1=114;//
				v2=122;//
				v3=194;//
				v4=186;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit40 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=122;//
				v2=130;//
				v3=202;//
				v4=194;//			
			} else {
				v1=200;//
				v2=208;//
				v3=209;//
				v4=201;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit41 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=194;//
				v2=202;//
				v3=203;//
				v4=195;//			
			} else {
				v1=199;//
				v2=207;//
				v3=208;//
				v4=200;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit42 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=195;//
				v2=203;//
				v3=204;//
				v4=196;//			
			} else {
				v1=198;//
				v2=206;//
				v3=207;//
				v4=199;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit43 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=196;//
				v2=204;//
				v3=205;//
				v4=197;//			
			} else {
				v1=197;//
				v2=205;//
				v3=206;//
				v4=198;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit44 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=197;//
				v2=205;//
				v3=206;//
				v4=198;//			
			} else {
				v1=196;//
				v2=204;//
				v3=205;//
				v4=197;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit45 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=198;//
				v2=206;//
				v3=207;//
				v4=199;//			
			} else {
				v1=195;//
				v2=203;//
				v3=204;//
				v4=196;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit46 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=199;//
				v2=207;//
				v3=208;//
				v4=200;//			
			} else {
				v1=194;//
				v2=202;//
				v3=203;//
				v4=195;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit47 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=200;//
				v2=208;//
				v3=209;//
				v4=201;//			
			} else {
				v1=122;//
				v2=130;//
				v3=202;//
				v4=194;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit48 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=130;//
				v2=138;//
				v3=210;//
				v4=202;//			
			} else {
				v1=208;//
				v2=216;//
				v3=217;//
				v4=209;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit49 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=202;//
				v2=210;//
				v3=211;//
				v4=203;//			
			} else {
				v1=207;//
				v2=215;//
				v3=216;//
				v4=208;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit50 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=203;//
				v2=211;//
				v3=212;//
				v4=204;//			
			} else {
				v1=206;//
				v2=214;//
				v3=215;//
				v4=207;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit51 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=204;//
				v2=212;//
				v3=213;//
				v4=205;//			
			} else {
				v1=205;//
				v2=213;//
				v3=214;//
				v4=206;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit52 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=205;//
				v2=213;//
				v3=214;//
				v4=206;//			
			} else {
				v1=204;//
				v2=212;//
				v3=213;//
				v4=205;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit53 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=206;//
				v2=214;//
				v3=215;//
				v4=207;//			
			} else {
				v1=203;//
				v2=211;//
				v3=212;//
				v4=204;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit54 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=207;//
				v2=215;//
				v3=216;//
				v4=208;//			
			} else {
				v1=202;//
				v2=210;//
				v3=211;//
				v4=203;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit55 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=208;//
				v2=216;//
				v3=217;//
				v4=209;//			
			} else {
				v1=130;//
				v2=138;//
				v3=210;//
				v4=202;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#if 1;
		if (celsArray[tmpvalue5].bit56 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=138;//
				v2=146;//
				v3=218;//
				v4=210;//			
			} else {
				v1=216;//
				v2=224;//
				v3=225;//
				v4=217;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit57 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=210;//
				v2=218;//
				v3=219;//
				v4=211;//			
			} else {
				v1=215;//
				v2=223;//
				v3=224;//
				v4=216;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit58 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=211;//
				v2=219;//
				v3=220;//
				v4=212;//			
			} else {
				v1=214;//
				v2=222;//
				v3=223;//
				v4=215;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit59 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=212;//
				v2=220;//
				v3=221;//
				v4=213;//			
			} else {
				v1=213;//
				v2=221;//
				v3=222;//
				v4=214;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit60 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=213;//
				v2=221;//
				v3=222;//
				v4=214;//			
			} else {
				v1=212;//
				v2=220;//
				v3=221;//
				v4=213;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit61 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=214;//
				v2=222;//
				v3=223;//
				v4=215;//			
			} else {
				v1=211;//
				v2=219;//
				v3=220;//
				v4=212;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit62 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=215;//
				v2=223;//
				v3=224;//
				v4=216;//			
			} else {
				v1=210;//
				v2=218;//
				v3=219;//
				v4=211;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue5].bit63 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredE == true) {
				v1=216;//
				v2=224;//
				v3=225;//
				v4=217;//			
			} else {
				v1=138;//
				v2=146;//
				v3=218;//
				v4=210;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#endif;
		}


#endif;// Collision bits
}
#endif;



// SOUTH WALL
#if 1;
if (specsArray[cubeNinDataFile].textureS !=0) { // SOUTH wall

vertstr = "# Cube. collisionS = " + patch::to_string((int)specsArray[cubeNinDataFile].textureS) + "\n";
outfile << vertstr;
vertstr = "# Cube. mirroredS = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredS) + "\n";
outfile << vertstr;
tmpvalue6 = (specsArray[cubeNinDataFile].textureS & 0xFFFFFF3F);


// Collision bits 
#if 1; 
	if (celsArray[tmpvalue6].bytes8 == true) { // If collision found

		if (celsArray[tmpvalue6].bit0 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=161;
				v2=169;
				v3=233;
				v4=226;		
			} else {
				v1=232;
				v2=239;
				v3=18;
				v4=9;				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit0 = " + celsArray[tmpvalue3].bit0 + "\n");
			}
		if (celsArray[tmpvalue6].bit1 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=226;
				v2=233;
				v3=234;
				v4=227;			
			} else {
				v1=231;
				v2=238;
				v3=239;
				v4=232;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit1 = " + celsArray[tmpvalue3].bit1 + "\n");
			}
		if (celsArray[tmpvalue6].bit2 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=227;
				v2=234;
				v3=235;
				v4=228;		
			} else {
				v1=230;
				v2=237;
				v3=238;
				v4=231;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit2 = " + celsArray[tmpvalue3].bit2 + "\n");
			}
		if (celsArray[tmpvalue6].bit3 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=228;
				v2=235;
				v3=236;
				v4=229;		
			} else {
				v1=229;
				v2=236;
				v3=237;
				v4=230;				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit3 = " + celsArray[tmpvalue3].bit3 + "\n");
			}
		if (celsArray[tmpvalue6].bit4 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=229;
				v2=236;
				v3=237;
				v4=230;			
			} else {
				v1=228;
				v2=235;
				v3=236;
				v4=229;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit4 = " + celsArray[tmpvalue3].bit4 + "\n");
			}
		if (celsArray[tmpvalue6].bit5 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=230;
				v2=237;
				v3=238;
				v4=231;			
			} else {
				v1=227;
				v2=234;
				v3=235;
				v4=228;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit5 = " + celsArray[tmpvalue3].bit5 + "\n");
			}
		if (celsArray[tmpvalue6].bit6 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=231;
				v2=238;
				v3=239;
				v4=232;			
			} else {
				v1=226;
				v2=233;
				v3=234;
				v4=227;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit6 = " + celsArray[tmpvalue3].bit6 + "\n");
			}
		if (celsArray[tmpvalue6].bit7 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=232;
				v2=239;
				v3=18;
				v4=9;			
			} else {
				v1=161;
				v2=169;
				v3=233;
				v4=226;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit7 = " + celsArray[tmpvalue3].bit7 + "\n");
			}
		if (celsArray[tmpvalue6].bit8 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=169;
				v2=177;
				v3=240;
				v4=233;			
			} else {
				v1=239;
				v2=246;
				v3=27;
				v4=18;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit9 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=233;
				v2=240;
				v3=241;
				v4=234;			
			} else {
				v1=238;
				v2=245;
				v3=246;
				v4=239;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit10 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=234;
				v2=241;
				v3=242;
				v4=235;			
			} else {
				v1=237;
				v2=244;
				v3=245;
				v4=238;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit11 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=235;
				v2=242;
				v3=243;
				v4=236;			
			} else {
				v1=236;
				v2=243;
				v3=244;
				v4=237;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit12 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=236;
				v2=243;
				v3=244;
				v4=237;			
			} else {
				v1=235;
				v2=242;
				v3=243;
				v4=236;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit13 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=237;
				v2=244;
				v3=245;
				v4=238;			
			} else {
				v1=234;
				v2=241;
				v3=242;
				v4=235;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit14 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=238;
				v2=245;
				v3=246;
				v4=239;			
			} else {
				v1=233;
				v2=240;
				v3=241;
				v4=234;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit15 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=239;
				v2=246;
				v3=27;
				v4=18;			
			} else {
				v1=169;
				v2=177;
				v3=240;
				v4=233;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit16 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=177;
				v2=185;
				v3=247;
				v4=240;			
			} else {
				v1=246;
				v2=253;
				v3=36;
				v4=27;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit17 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=240;
				v2=247;
				v3=248;
				v4=241;			
			} else {
				v1=245;
				v2=252;
				v3=253;
				v4=246;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit18 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=241;
				v2=248;
				v3=249;
				v4=242;			
			} else {
				v1=244;
				v2=251;
				v3=252;
				v4=245;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit19 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=242;
				v2=249;
				v3=250;
				v4=243;			
			} else {
				v1=243;
				v2=250;
				v3=251;
				v4=244;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit20 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=243;
				v2=250;
				v3=251;
				v4=244;			
			} else {
				v1=242;
				v2=249;
				v3=250;
				v4=243;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit21 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=244;
				v2=251;
				v3=252;
				v4=245;			
			} else {
				v1=241;
				v2=248;
				v3=249;
				v4=242;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit22 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=245;
				v2=252;
				v3=253;
				v4=246;			
			} else {
				v1=240;
				v2=247;
				v3=248;
				v4=241;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit23 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=246;
				v2=253;
				v3=36;
				v4=27;			
			} else {
				v1=177;
				v2=185;
				v3=247;
				v4=240;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit24 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=185;
				v2=193;
				v3=254;
				v4=247;			
			} else {
				v1=253;
				v2=260;
				v3=45;
				v4=36;
			}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit25 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=247;
				v2=254;
				v3=255;
				v4=248;			
			} else {
				v1=252;
				v2=259;
				v3=260;
				v4=253;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit26 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=248;
				v2=255;
				v3=256;
				v4=249;			
			} else {
				v1=251;
				v2=258;
				v3=259;
				v4=252;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit27 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=249;
				v2=256;
				v3=257;
				v4=250;			
			} else {
				v1=250;
				v2=257;
				v3=258;
				v4=251;				
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit28 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=250;
				v2=257;
				v3=258;
				v4=251;			
			} else {
				v1=249;
				v2=256;
				v3=257;
				v4=250;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit29 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=251;
				v2=258;
				v3=259;
				v4=252;			
			} else {
				v1=248;
				v2=255;
				v3=256;
				v4=249;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit30 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=252;
				v2=259;
				v3=260;
				v4=253;			
			} else {
				v1=247;
				v2=254;
				v3=255;
				v4=248;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit31 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=253;
				v2=260;
				v3=45;
				v4=36;			
			} else {
				v1=185;
				v2=193;
				v3=254;
				v4=247;					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}


// Upper part
		if (celsArray[tmpvalue6].bit32 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=193;//
				v2=201;//
				v3=261;//
				v4=254;//			
			} else {
				v1=260;//
				v2=267;//
				v3=54;//
				v4=45;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit33 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=254;//
				v2=261;//
				v3=262;//
				v4=255;//			
			} else {
				v1=259;//
				v2=266;//
				v3=267;//
				v4=260;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit34 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=255;//
				v2=262;//
				v3=263;//
				v4=256;//			
			} else {
				v1=258;//
				v2=265;//
				v3=266;//
				v4=259;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit35 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=256;//
				v2=263;//
				v3=264;//
				v4=257;//			
			} else {
				v1=257;//
				v2=264;//
				v3=265;//
				v4=258;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit36 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=257;//
				v2=264;//
				v3=265;//
				v4=258;//			
			} else {
				v1=256;//
				v2=263;//
				v3=264;//
				v4=257;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit37 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=258;//
				v2=265;//
				v3=266;//
				v4=259;//			
			} else {
				v1=255;//
				v2=262;//
				v3=263;//
				v4=256;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit38 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=259;//
				v2=266;//
				v3=267;//
				v4=260;//			
			} else {
				v1=254;//
				v2=261;//
				v3=262;//
				v4=255;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit39 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=260;//
				v2=267;//
				v3=54;//
				v4=45;//			
			} else {
				v1=193;//
				v2=201;//
				v3=261;//
				v4=254;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit40 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=201;//
				v2=209;//
				v3=268;//
				v4=261;//			
			} else {
				v1=267;//
				v2=274;//
				v3=63;//
				v4=54;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit41 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=261;//
				v2=268;//
				v3=269;//
				v4=262;//			
			} else {
				v1=266;//
				v2=273;//
				v3=274;//
				v4=267;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit42 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=262;//
				v2=269;//
				v3=270;//
				v4=263;//			
			} else {
				v1=265;//
				v2=272;//
				v3=273;//
				v4=266;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit43 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=263;//
				v2=270;//
				v3=271;//
				v4=264;//			
			} else {
				v1=264;//
				v2=271;//
				v3=272;//
				v4=265;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit44 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=264;//
				v2=271;//
				v3=272;//
				v4=265;//			
			} else {
				v1=263;//
				v2=270;//
				v3=271;//
				v4=264;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit45 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=265;//
				v2=272;//
				v3=273;//
				v4=266;//			
			} else {
				v1=262;//
				v2=269;//
				v3=270;//
				v4=263;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit46 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=266;//
				v2=273;//
				v3=274;//
				v4=267;//			
			} else {
				v1=261;//
				v2=268;//
				v3=269;//
				v4=262;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit47 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=267;//
				v2=274;//
				v3=63;//
				v4=54;//			
			} else {
				v1=201;//
				v2=209;//
				v3=268;//
				v4=261;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit48 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=209;//
				v2=217;//
				v3=275;//
				v4=268;//			
			} else {
				v1=274;//
				v2=281;//
				v3=72;//
				v4=63;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit49 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=268;//
				v2=275;//
				v3=276;//
				v4=269;//			
			} else {
				v1=273;//
				v2=280;//
				v3=281;//
				v4=274;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit50 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=269;//
				v2=276;//
				v3=277;//
				v4=270;//			
			} else {
				v1=272;//
				v2=279;//
				v3=280;//
				v4=273;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit51 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=270;//
				v2=277;//
				v3=278;//
				v4=271;//			
			} else {
				v1=271;//
				v2=278;//
				v3=279;//
				v4=272;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit52 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=271;//
				v2=278;//
				v3=279;//
				v4=272;//			
			} else {
				v1=270;//
				v2=277;//
				v3=278;//
				v4=271;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit53 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=272;//
				v2=279;//
				v3=280;//
				v4=273;//			
			} else {
				v1=269;//
				v2=276;//
				v3=277;//
				v4=270;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit54 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=273;//
				v2=280;//
				v3=281;//
				v4=274;//			
			} else {
				v1=268;//
				v2=275;//
				v3=276;//
				v4=269;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit55 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=274;//
				v2=281;//
				v3=72;//
				v4=63;//			
			} else {
				v1=209;//
				v2=217;//
				v3=275;//
				v4=268;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#if 1;
		if (celsArray[tmpvalue6].bit56 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=217;//
				v2=225;//
				v3=282;//
				v4=275;//			
			} else {
				v1=281;//
				v2=288;//
				v3=81;//
				v4=72;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit57 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=275;//
				v2=282;//
				v3=283;//
				v4=276;//			
			} else {
				v1=280;//
				v2=287;//
				v3=288;//
				v4=281;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit58 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=276;//
				v2=283;//
				v3=284;//
				v4=277;//			
			} else {
				v1=279;//
				v2=286;//
				v3=287;//
				v4=280;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit59 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=277;//
				v2=284;//
				v3=285;//
				v4=278;//			
			} else {
				v1=278;//
				v2=285;//
				v3=286;//
				v4=279;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit60 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=278;//
				v2=285;//
				v3=286;//
				v4=279;//			
			} else {
				v1=277;//
				v2=284;//
				v3=285;//
				v4=278;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit61 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=279;//
				v2=286;//
				v3=287;//
				v4=280;//			
			} else {
				v1=276;//
				v2=283;//
				v3=284;//
				v4=277;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit62 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=280;//
				v2=287;//
				v3=288;//
				v4=281;//			
			} else {
				v1=275;//
				v2=282;//
				v3=283;//
				v4=276;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue6].bit63 == true) { // Draw bit polygon
			if (specsArray[cubeNinDataFile].mirroredS == true) {
				v1=281;//
				v2=288;//
				v3=81;//
				v4=72;//			
			} else {
				v1=217;//
				v2=225;//
				v3=282;//
				v4=275;//					
				}
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#endif;
		}


#endif;// Collision bits
}
#endif;


// NW from N WALL
#if 1;
if (specsArray[cubeNinDataFile].textureNWfromN !=0) { // NW from N wall

vertstr = "# Cube. collisionNWfromN = " + patch::to_string((int)specsArray[cubeNinDataFile].textureNWfromN) + "\n";
outfile << vertstr;
vertstr = "# Cube. mirroredNWfromN = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredNWfromN) + "\n";
outfile << vertstr;
tmpvalue7 = (specsArray[cubeNinDataFile].textureNWfromN & 0xFFFFFF3F);


// Collision bits 
#if 1; 
	if (celsArray[tmpvalue7].bytes8 == true) { // If collision found

		if (celsArray[tmpvalue7].bit0 == true) { // Draw bit polygon
				v1=1;
				v2=10;
				v3=296;
				v4=289;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit0 = " + celsArray[tmpvalue3].bit0 + "\n");
			}
		if (celsArray[tmpvalue7].bit1 == true) { // Draw bit polygon
				v1=289;
				v2=296;
				v3=297;
				v4=290;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit1 = " + celsArray[tmpvalue3].bit1 + "\n");
			}
		if (celsArray[tmpvalue7].bit2 == true) { // Draw bit polygon
				v1=290;
				v2=297;
				v3=298;
				v4=291;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit2 = " + celsArray[tmpvalue3].bit2 + "\n");
			}
		if (celsArray[tmpvalue7].bit3 == true) { // Draw bit polygon
				v1=291;
				v2=298;
				v3=299;
				v4=292;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit3 = " + celsArray[tmpvalue3].bit3 + "\n");
			}
		if (celsArray[tmpvalue7].bit4 == true) { // Draw bit polygon
				v1=292;
				v2=299;
				v3=300;
				v4=293;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit4 = " + celsArray[tmpvalue3].bit4 + "\n");
			}
		if (celsArray[tmpvalue7].bit5 == true) { // Draw bit polygon
				v1=293;
				v2=300;
				v3=301;
				v4=294;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit5 = " + celsArray[tmpvalue3].bit5 + "\n");
			}
		if (celsArray[tmpvalue7].bit6 == true) { // Draw bit polygon
				v1=294;
				v2=301;
				v3=302;
				v4=295;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit6 = " + celsArray[tmpvalue3].bit6 + "\n");
			}
		if (celsArray[tmpvalue7].bit7 == true) { // Draw bit polygon
				v1=295;
				v2=302;
				v3=169;
				v4=161;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit7 = " + celsArray[tmpvalue3].bit7 + "\n");
			}
		if (celsArray[tmpvalue7].bit8 == true) { // Draw bit polygon
				v1=10;
				v2=19;
				v3=303;
				v4=296;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit9 == true) { // Draw bit polygon
				v1=296;
				v2=303;
				v3=304;
				v4=297;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit10 == true) { // Draw bit polygon
				v1=297;
				v2=304;
				v3=305;
				v4=298;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit11 == true) { // Draw bit polygon
				v1=298;
				v2=305;
				v3=306;
				v4=299;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit12 == true) { // Draw bit polygon
				v1=299;
				v2=306;
				v3=307;
				v4=300;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit13 == true) { // Draw bit polygon
				v1=300;
				v2=307;
				v3=308;
				v4=301;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit14 == true) { // Draw bit polygon
				v1=301;
				v2=308;
				v3=309;
				v4=302;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit15 == true) { // Draw bit polygon
				v1=302;
				v2=309;
				v3=177;
				v4=169;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit16 == true) { // Draw bit polygon
				v1=19;
				v2=28;
				v3=310;
				v4=303;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit17 == true) { // Draw bit polygon
				v1=303;
				v2=310;
				v3=311;
				v4=304;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit18 == true) { // Draw bit polygon
				v1=304;
				v2=311;
				v3=312;
				v4=305;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit19 == true) { // Draw bit polygon
				v1=305;
				v2=312;
				v3=313;
				v4=306;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit20 == true) { // Draw bit polygon
				v1=306;
				v2=313;
				v3=314;
				v4=307;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit21 == true) { // Draw bit polygon
				v1=307;
				v2=314;
				v3=315;
				v4=308;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit22 == true) { // Draw bit polygon
				v1=308;
				v2=315;
				v3=316;
				v4=309;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit23 == true) { // Draw bit polygon
				v1=309;
				v2=316;
				v3=185;
				v4=177;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit24 == true) { // Draw bit polygon
				v1=28;
				v2=37;
				v3=317;
				v4=310;
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit25 == true) { // Draw bit polygon
				v1=310;
				v2=317;
				v3=318;
				v4=311;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit26 == true) { // Draw bit polygon
				v1=311;
				v2=318;
				v3=319;
				v4=312;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit27 == true) { // Draw bit polygon
				v1=312;
				v2=319;
				v3=320;
				v4=313;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit28 == true) { // Draw bit polygon
				v1=313;
				v2=320;
				v3=321;
				v4=314;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit29 == true) { // Draw bit polygon
				v1=314;
				v2=321;
				v3=322;
				v4=315;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit30 == true) { // Draw bit polygon
				v1=315;
				v2=322;
				v3=323;
				v4=316;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit31 == true) { // Draw bit polygon
				v1=316;
				v2=323;
				v3=193;
				v4=185;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}


// Upper part
		if (celsArray[tmpvalue7].bit32 == true) { // Draw bit polygon
				v1=37;//
				v2=46;//
				v3=324;//
				v4=317;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit33 == true) { // Draw bit polygon
				v1=317;//
				v2=324;//
				v3=325;//
				v4=318;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit34 == true) { // Draw bit polygon
				v1=318;//
				v2=325;//
				v3=326;//
				v4=319;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit35 == true) { // Draw bit polygon
				v1=319;//
				v2=326;//
				v3=327;//
				v4=320;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit36 == true) { // Draw bit polygon
				v1=320;//
				v2=327;//
				v3=328;//
				v4=321;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit37 == true) { // Draw bit polygon
				v1=321;//
				v2=328;//
				v3=329;//
				v4=322;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit38 == true) { // Draw bit polygon
				v1=322;//
				v2=329;//
				v3=330;//
				v4=323;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit39 == true) { // Draw bit polygon
				v1=323;//
				v2=330;//
				v3=201;//
				v4=193;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit40 == true) { // Draw bit polygon
				v1=46;//
				v2=55;//
				v3=331;//
				v4=324;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit41 == true) { // Draw bit polygon
				v1=324;//
				v2=331;//
				v3=332;//
				v4=325;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit42 == true) { // Draw bit polygon
				v1=325;//
				v2=332;//
				v3=333;//
				v4=326;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit43 == true) { // Draw bit polygon
				v1=326;//
				v2=333;//
				v3=334;//
				v4=327;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit44 == true) { // Draw bit polygon
				v1=327;//
				v2=334;//
				v3=335;//
				v4=328;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit45 == true) { // Draw bit polygon
				v1=328;//
				v2=335;//
				v3=336;//
				v4=329;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit46 == true) { // Draw bit polygon
				v1=329;//
				v2=336;//
				v3=337;//
				v4=330;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit47 == true) { // Draw bit polygon
				v1=330;//
				v2=337;//
				v3=209;//
				v4=201;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit48 == true) { // Draw bit polygon
				v1=55;//
				v2=64;//
				v3=338;//
				v4=331;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit49 == true) { // Draw bit polygon
				v1=331;//
				v2=338;//
				v3=339;//
				v4=332;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit50 == true) { // Draw bit polygon
				v1=332;//
				v2=339;//
				v3=340;//
				v4=333;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit51 == true) { // Draw bit polygon
				v1=333;//
				v2=340;//
				v3=341;//
				v4=334;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit52 == true) { // Draw bit polygon
				v1=334;//
				v2=341;//
				v3=342;//
				v4=335;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit53 == true) { // Draw bit polygon
				v1=335;//
				v2=342;//
				v3=343;//
				v4=336;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit54 == true) { // Draw bit polygon
				v1=336;//
				v2=343;//
				v3=344;//
				v4=337;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit55 == true) { // Draw bit polygon
				v1=337;//
				v2=344;//
				v3=217;//
				v4=209;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#if 1;
		if (celsArray[tmpvalue7].bit56 == true) { // Draw bit polygon
				v1=64;//
				v2=73;//
				v3=345;//
				v4=338;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit57 == true) { // Draw bit polygon
				v1=338;//
				v2=345;//
				v3=346;//
				v4=339;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit58 == true) { // Draw bit polygon
				v1=339;//
				v2=346;//
				v3=347;//
				v4=340;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit59 == true) { // Draw bit polygon
				v1=340;//
				v2=347;//
				v3=348;//
				v4=341;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit60 == true) { // Draw bit polygon
				v1=341;//
				v2=348;//
				v3=349;//
				v4=342;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit61 == true) { // Draw bit polygon
				v1=342;//
				v2=349;//
				v3=350;//
				v4=343;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit62 == true) { // Draw bit polygon
				v1=343;//
				v2=350;//
				v3=351;//
				v4=344;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue7].bit63 == true) { // Draw bit polygon
				v1=344;//
				v2=351;//
				v3=225;//
				v4=217;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#endif;
		}


#endif;// Collision bits
}
#endif;


// NW from S WALL
#if 1;
if (specsArray[cubeNinDataFile].textureNWfromS !=0) { // NW from N wall

vertstr = "# Cube. collisionNWfromS = " + patch::to_string((int)specsArray[cubeNinDataFile].textureNWfromS) + "\n";
outfile << vertstr;
vertstr = "# Cube. mirroredNWfromS = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredNWfromS) + "\n";
outfile << vertstr;
tmpvalue8 = (specsArray[cubeNinDataFile].textureNWfromS & 0xFFFFFF3F);


// Collision bits 
#if 1; 
	if (celsArray[tmpvalue8].bytes8 == true) { // If collision found

		if (celsArray[tmpvalue8].bit0 == true) { // Draw bit polygon
				v1=1;
				v2=10;
				v3=296;
				v4=289;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit0 = " + celsArray[tmpvalue3].bit0 + "\n");
			}
		if (celsArray[tmpvalue8].bit1 == true) { // Draw bit polygon
				v1=289;
				v2=296;
				v3=297;
				v4=290;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit1 = " + celsArray[tmpvalue3].bit1 + "\n");
			}
		if (celsArray[tmpvalue8].bit2 == true) { // Draw bit polygon
				v1=290;
				v2=297;
				v3=298;
				v4=291;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit2 = " + celsArray[tmpvalue3].bit2 + "\n");
			}
		if (celsArray[tmpvalue8].bit3 == true) { // Draw bit polygon
				v1=291;
				v2=298;
				v3=299;
				v4=292;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit3 = " + celsArray[tmpvalue3].bit3 + "\n");
			}
		if (celsArray[tmpvalue8].bit4 == true) { // Draw bit polygon
				v1=292;
				v2=299;
				v3=300;
				v4=293;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit4 = " + celsArray[tmpvalue3].bit4 + "\n");
			}
		if (celsArray[tmpvalue8].bit5 == true) { // Draw bit polygon
				v1=293;
				v2=300;
				v3=301;
				v4=294;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit5 = " + celsArray[tmpvalue3].bit5 + "\n");
			}
		if (celsArray[tmpvalue8].bit6 == true) { // Draw bit polygon
				v1=294;
				v2=301;
				v3=302;
				v4=295;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit6 = " + celsArray[tmpvalue3].bit6 + "\n");
			}
		if (celsArray[tmpvalue8].bit7 == true) { // Draw bit polygon
				v1=295;
				v2=302;
				v3=169;
				v4=161;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit7 = " + celsArray[tmpvalue3].bit7 + "\n");
			}
		if (celsArray[tmpvalue8].bit8 == true) { // Draw bit polygon
				v1=10;
				v2=19;
				v3=303;
				v4=296;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit9 == true) { // Draw bit polygon
				v1=296;
				v2=303;
				v3=304;
				v4=297;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit10 == true) { // Draw bit polygon
				v1=297;
				v2=304;
				v3=305;
				v4=298;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit11 == true) { // Draw bit polygon
				v1=298;
				v2=305;
				v3=306;
				v4=299;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit12 == true) { // Draw bit polygon
				v1=299;
				v2=306;
				v3=307;
				v4=300;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit13 == true) { // Draw bit polygon
				v1=300;
				v2=307;
				v3=308;
				v4=301;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit14 == true) { // Draw bit polygon
				v1=301;
				v2=308;
				v3=309;
				v4=302;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit15 == true) { // Draw bit polygon
				v1=302;
				v2=309;
				v3=177;
				v4=169;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit16 == true) { // Draw bit polygon
				v1=19;
				v2=28;
				v3=310;
				v4=303;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit17 == true) { // Draw bit polygon
				v1=303;
				v2=310;
				v3=311;
				v4=304;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit18 == true) { // Draw bit polygon
				v1=304;
				v2=311;
				v3=312;
				v4=305;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit19 == true) { // Draw bit polygon
				v1=305;
				v2=312;
				v3=313;
				v4=306;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit20 == true) { // Draw bit polygon
				v1=306;
				v2=313;
				v3=314;
				v4=307;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit21 == true) { // Draw bit polygon
				v1=307;
				v2=314;
				v3=315;
				v4=308;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit22 == true) { // Draw bit polygon
				v1=308;
				v2=315;
				v3=316;
				v4=309;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit23 == true) { // Draw bit polygon
				v1=309;
				v2=316;
				v3=185;
				v4=177;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit24 == true) { // Draw bit polygon
				v1=28;
				v2=37;
				v3=317;
				v4=310;
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit25 == true) { // Draw bit polygon
				v1=310;
				v2=317;
				v3=318;
				v4=311;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit26 == true) { // Draw bit polygon
				v1=311;
				v2=318;
				v3=319;
				v4=312;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit27 == true) { // Draw bit polygon
				v1=312;
				v2=319;
				v3=320;
				v4=313;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit28 == true) { // Draw bit polygon
				v1=313;
				v2=320;
				v3=321;
				v4=314;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit29 == true) { // Draw bit polygon
				v1=314;
				v2=321;
				v3=322;
				v4=315;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit30 == true) { // Draw bit polygon
				v1=315;
				v2=322;
				v3=323;
				v4=316;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit31 == true) { // Draw bit polygon
				v1=316;
				v2=323;
				v3=193;
				v4=185;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}


// Upper part
		if (celsArray[tmpvalue8].bit32 == true) { // Draw bit polygon
				v1=37;//
				v2=46;//
				v3=324;//
				v4=317;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit33 == true) { // Draw bit polygon
				v1=317;//
				v2=324;//
				v3=325;//
				v4=318;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit34 == true) { // Draw bit polygon
				v1=318;//
				v2=325;//
				v3=326;//
				v4=319;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit35 == true) { // Draw bit polygon
				v1=319;//
				v2=326;//
				v3=327;//
				v4=320;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit36 == true) { // Draw bit polygon
				v1=320;//
				v2=327;//
				v3=328;//
				v4=321;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit37 == true) { // Draw bit polygon
				v1=321;//
				v2=328;//
				v3=329;//
				v4=322;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit38 == true) { // Draw bit polygon
				v1=322;//
				v2=329;//
				v3=330;//
				v4=323;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit39 == true) { // Draw bit polygon
				v1=323;//
				v2=330;//
				v3=201;//
				v4=193;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit40 == true) { // Draw bit polygon
				v1=46;//
				v2=55;//
				v3=331;//
				v4=324;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit41 == true) { // Draw bit polygon
				v1=324;//
				v2=331;//
				v3=332;//
				v4=325;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit42 == true) { // Draw bit polygon
				v1=325;//
				v2=332;//
				v3=333;//
				v4=326;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit43 == true) { // Draw bit polygon
				v1=326;//
				v2=333;//
				v3=334;//
				v4=327;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit44 == true) { // Draw bit polygon
				v1=327;//
				v2=334;//
				v3=335;//
				v4=328;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit45 == true) { // Draw bit polygon
				v1=328;//
				v2=335;//
				v3=336;//
				v4=329;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit46 == true) { // Draw bit polygon
				v1=329;//
				v2=336;//
				v3=337;//
				v4=330;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit47 == true) { // Draw bit polygon
				v1=330;//
				v2=337;//
				v3=209;//
				v4=201;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit48 == true) { // Draw bit polygon
				v1=55;//
				v2=64;//
				v3=338;//
				v4=331;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit49 == true) { // Draw bit polygon
				v1=331;//
				v2=338;//
				v3=339;//
				v4=332;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit50 == true) { // Draw bit polygon
				v1=332;//
				v2=339;//
				v3=340;//
				v4=333;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit51 == true) { // Draw bit polygon
				v1=333;//
				v2=340;//
				v3=341;//
				v4=334;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit52 == true) { // Draw bit polygon
				v1=334;//
				v2=341;//
				v3=342;//
				v4=335;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit53 == true) { // Draw bit polygon
				v1=335;//
				v2=342;//
				v3=343;//
				v4=336;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit54 == true) { // Draw bit polygon
				v1=336;//
				v2=343;//
				v3=344;//
				v4=337;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit55 == true) { // Draw bit polygon
				v1=337;//
				v2=344;//
				v3=217;//
				v4=209;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#if 1;
		if (celsArray[tmpvalue8].bit56 == true) { // Draw bit polygon
				v1=64;//
				v2=73;//
				v3=345;//
				v4=338;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit57 == true) { // Draw bit polygon
				v1=338;//
				v2=345;//
				v3=346;//
				v4=339;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit58 == true) { // Draw bit polygon
				v1=339;//
				v2=346;//
				v3=347;//
				v4=340;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit59 == true) { // Draw bit polygon
				v1=340;//
				v2=347;//
				v3=348;//
				v4=341;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit60 == true) { // Draw bit polygon
				v1=341;//
				v2=348;//
				v3=349;//
				v4=342;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit61 == true) { // Draw bit polygon
				v1=342;//
				v2=349;//
				v3=350;//
				v4=343;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit62 == true) { // Draw bit polygon
				v1=343;//
				v2=350;//
				v3=351;//
				v4=344;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue8].bit63 == true) { // Draw bit polygon
				v1=344;//
				v2=351;//
				v3=225;//
				v4=217;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#endif;
		}


#endif;// Collision bits
}
#endif;


// NE from N WALL
#if 1;
if (specsArray[cubeNinDataFile].textureNEfromN !=0) { // NE from N wall

vertstr = "# Cube. collisionNEfromN = " + patch::to_string((int)specsArray[cubeNinDataFile].textureNEfromN) + "\n";
outfile << vertstr;
vertstr = "# Cube. mirroredNEfromN = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredNEfromN) + "\n";
outfile << vertstr;
tmpvalue9 = (specsArray[cubeNinDataFile].textureNEfromN & 0xFFFFFF3F);


// Collision bits 
#if 1; 
	if (celsArray[tmpvalue9].bytes8 == true) { // If collision found

		if (celsArray[tmpvalue9].bit0 == true) { // Draw bit polygon
				v1=82;
				v2=90;
				v3=358;
				v4=352;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit0 = " + celsArray[tmpvalue3].bit0 + "\n");
			}
		if (celsArray[tmpvalue9].bit1 == true) { // Draw bit polygon
				v1=352;
				v2=358;
				v3=359;
				v4=353;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit1 = " + celsArray[tmpvalue3].bit1 + "\n");
			}
		if (celsArray[tmpvalue9].bit2 == true) { // Draw bit polygon
				v1=353;
				v2=359;
				v3=360;
				v4=354;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit2 = " + celsArray[tmpvalue3].bit2 + "\n");
			}
		if (celsArray[tmpvalue9].bit3 == true) { // Draw bit polygon
				v1=354;
				v2=360;
				v3=299;
				v4=292;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit3 = " + celsArray[tmpvalue3].bit3 + "\n");
			}
		if (celsArray[tmpvalue9].bit4 == true) { // Draw bit polygon
				v1=292;
				v2=299;
				v3=361;
				v4=355;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit4 = " + celsArray[tmpvalue3].bit4 + "\n");
			}
		if (celsArray[tmpvalue9].bit5 == true) { // Draw bit polygon
				v1=355;
				v2=361;
				v3=362;
				v4=356;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit5 = " + celsArray[tmpvalue3].bit5 + "\n");
			}
		if (celsArray[tmpvalue9].bit6 == true) { // Draw bit polygon
				v1=356;
				v2=362;
				v3=363;
				v4=357;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit6 = " + celsArray[tmpvalue3].bit6 + "\n");
			}
		if (celsArray[tmpvalue9].bit7 == true) { // Draw bit polygon
				v1=357;
				v2=363;
				v3=18;
				v4=9;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit7 = " + celsArray[tmpvalue3].bit7 + "\n");
			}
		if (celsArray[tmpvalue9].bit8 == true) { // Draw bit polygon
				v1=90;
				v2=98;
				v3=364;
				v4=358;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit9 == true) { // Draw bit polygon
				v1=358;
				v2=364;
				v3=365;
				v4=359;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit10 == true) { // Draw bit polygon
				v1=359;
				v2=365;
				v3=366;
				v4=360;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit11 == true) { // Draw bit polygon
				v1=360;
				v2=366;
				v3=306;
				v4=299;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit12 == true) { // Draw bit polygon
				v1=299;
				v2=306;
				v3=367;
				v4=361;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit13 == true) { // Draw bit polygon
				v1=361;
				v2=367;
				v3=368;
				v4=362;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit14 == true) { // Draw bit polygon
				v1=362;
				v2=368;
				v3=369;
				v4=363;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit15 == true) { // Draw bit polygon
				v1=363;
				v2=369;
				v3=27;
				v4=18;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit16 == true) { // Draw bit polygon
				v1=98;
				v2=106;
				v3=370;
				v4=364;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit17 == true) { // Draw bit polygon
				v1=364;
				v2=370;
				v3=371;
				v4=365;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit18 == true) { // Draw bit polygon
				v1=365;
				v2=371;
				v3=372;
				v4=366;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit19 == true) { // Draw bit polygon
				v1=366;
				v2=372;
				v3=313;
				v4=306;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit20 == true) { // Draw bit polygon
				v1=306;
				v2=313;
				v3=373;
				v4=367;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit21 == true) { // Draw bit polygon
				v1=367;
				v2=373;
				v3=374;
				v4=368;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit22 == true) { // Draw bit polygon
				v1=368;
				v2=374;
				v3=375;
				v4=369;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit23 == true) { // Draw bit polygon
				v1=369;
				v2=375;
				v3=36;
				v4=27;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit24 == true) { // Draw bit polygon
				v1=106;
				v2=114;
				v3=376;
				v4=370;
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit25 == true) { // Draw bit polygon
				v1=370;
				v2=376;
				v3=377;
				v4=371;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit26 == true) { // Draw bit polygon
				v1=371;
				v2=377;
				v3=378;
				v4=372;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit27 == true) { // Draw bit polygon
				v1=372;
				v2=378;
				v3=320;
				v4=313;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit28 == true) { // Draw bit polygon
				v1=313;
				v2=320;
				v3=379;
				v4=373;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit29 == true) { // Draw bit polygon
				v1=373;
				v2=379;
				v3=380;
				v4=374;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit30 == true) { // Draw bit polygon
				v1=374;
				v2=380;
				v3=381;
				v4=375;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit31 == true) { // Draw bit polygon
				v1=375;
				v2=381;
				v3=45;
				v4=36;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}


// Upper part
		if (celsArray[tmpvalue9].bit32 == true) { // Draw bit polygon
				v1=114;//
				v2=122;//
				v3=382;//
				v4=376;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit33 == true) { // Draw bit polygon
				v1=376;//
				v2=382;//
				v3=383;//
				v4=377;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit34 == true) { // Draw bit polygon
				v1=377;//
				v2=383;//
				v3=384;//
				v4=378;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit35 == true) { // Draw bit polygon
				v1=378;//
				v2=384;//
				v3=327;//
				v4=320;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit36 == true) { // Draw bit polygon
				v1=320;//
				v2=327;//
				v3=385;//
				v4=379;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit37 == true) { // Draw bit polygon
				v1=379;//
				v2=385;//
				v3=386;//
				v4=380;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit38 == true) { // Draw bit polygon
				v1=380;//
				v2=386;//
				v3=387;//
				v4=381;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit39 == true) { // Draw bit polygon
				v1=381;//
				v2=387;//
				v3=54;//
				v4=45;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit40 == true) { // Draw bit polygon
				v1=122;//
				v2=130;//
				v3=388;//
				v4=382;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit41 == true) { // Draw bit polygon
				v1=382;//
				v2=388;//
				v3=389;//
				v4=383;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit42 == true) { // Draw bit polygon
				v1=383;//
				v2=389;//
				v3=390;//
				v4=384;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit43 == true) { // Draw bit polygon
				v1=384;//
				v2=390;//
				v3=334;//
				v4=327;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit44 == true) { // Draw bit polygon
				v1=327;//
				v2=334;//
				v3=391;//
				v4=385;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit45 == true) { // Draw bit polygon
				v1=385;//
				v2=391;//
				v3=392;//
				v4=386;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit46 == true) { // Draw bit polygon
				v1=386;//
				v2=392;//
				v3=393;//
				v4=387;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit47 == true) { // Draw bit polygon
				v1=387;//
				v2=393;//
				v3=63;//
				v4=54;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit48 == true) { // Draw bit polygon
				v1=130;//
				v2=138;//
				v3=394;//
				v4=388;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit49 == true) { // Draw bit polygon
				v1=388;//
				v2=394;//
				v3=395;//
				v4=389;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit50 == true) { // Draw bit polygon
				v1=389;//
				v2=395;//
				v3=396;//
				v4=390;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit51 == true) { // Draw bit polygon
				v1=390;//
				v2=396;//
				v3=341;//
				v4=334;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit52 == true) { // Draw bit polygon
				v1=334;//
				v2=341;//
				v3=397;//
				v4=391;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit53 == true) { // Draw bit polygon
				v1=391;//
				v2=397;//
				v3=398;//
				v4=392;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit54 == true) { // Draw bit polygon
				v1=392;//
				v2=398;//
				v3=399;//
				v4=393;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit55 == true) { // Draw bit polygon
				v1=393;//
				v2=399;//
				v3=72;//
				v4=63;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#if 1;
		if (celsArray[tmpvalue9].bit56 == true) { // Draw bit polygon
				v1=138;//
				v2=146;//
				v3=400;//
				v4=394;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit57 == true) { // Draw bit polygon
				v1=394;//
				v2=400;//
				v3=401;//
				v4=395;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit58 == true) { // Draw bit polygon
				v1=395;//
				v2=401;//
				v3=402;//
				v4=396;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit59 == true) { // Draw bit polygon
				v1=396;//
				v2=402;//
				v3=348;//
				v4=341;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit60 == true) { // Draw bit polygon
				v1=341;//
				v2=348;//
				v3=403;//
				v4=397;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit61 == true) { // Draw bit polygon
				v1=397;//
				v2=403;//
				v3=404;//
				v4=398;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit62 == true) { // Draw bit polygon
				v1=398;//
				v2=404;//
				v3=405;//
				v4=399;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue9].bit63 == true) { // Draw bit polygon
				v1=399;//
				v2=405;//
				v3=81;//
				v4=72;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#endif;
		}


#endif;// Collision bits
}
#endif;


// NE from S WALL
#if 1;
if (specsArray[cubeNinDataFile].textureNEfromS !=0) { // NE from S wall

vertstr = "# Cube. collisionNEfromS = " + patch::to_string((int)specsArray[cubeNinDataFile].textureNEfromS) + "\n";
outfile << vertstr;
vertstr = "# Cube. mirroredNEfromS = " + patch::to_string((int)specsArray[cubeNinDataFile].mirroredNEfromS) + "\n";
outfile << vertstr;
tmpvalue10 = (specsArray[cubeNinDataFile].textureNEfromS & 0xFFFFFF3F);


// Collision bits 
#if 1; 
	if (celsArray[tmpvalue10].bytes8 == true) { // If collision found

		if (celsArray[tmpvalue10].bit0 == true) { // Draw bit polygon
				v1=82;
				v2=90;
				v3=358;
				v4=352;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit0 = " + celsArray[tmpvalue3].bit0 + "\n");
			}
		if (celsArray[tmpvalue10].bit1 == true) { // Draw bit polygon
				v1=352;
				v2=358;
				v3=359;
				v4=353;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit1 = " + celsArray[tmpvalue3].bit1 + "\n");
			}
		if (celsArray[tmpvalue10].bit2 == true) { // Draw bit polygon
				v1=353;
				v2=359;
				v3=360;
				v4=354;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit2 = " + celsArray[tmpvalue3].bit2 + "\n");
			}
		if (celsArray[tmpvalue10].bit3 == true) { // Draw bit polygon
				v1=354;
				v2=360;
				v3=299;
				v4=292;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit3 = " + celsArray[tmpvalue3].bit3 + "\n");
			}
		if (celsArray[tmpvalue10].bit4 == true) { // Draw bit polygon
				v1=292;
				v2=299;
				v3=361;
				v4=355;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit4 = " + celsArray[tmpvalue3].bit4 + "\n");
			}
		if (celsArray[tmpvalue10].bit5 == true) { // Draw bit polygon
				v1=355;
				v2=361;
				v3=362;
				v4=356;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit5 = " + celsArray[tmpvalue3].bit5 + "\n");
			}
		if (celsArray[tmpvalue10].bit6 == true) { // Draw bit polygon
				v1=356;
				v2=362;
				v3=363;
				v4=357;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit6 = " + celsArray[tmpvalue3].bit6 + "\n");
			}
		if (celsArray[tmpvalue10].bit7 == true) { // Draw bit polygon
				v1=357;
				v2=363;
				v3=18;
				v4=9;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
//				richTextBox4->AppendText("bit7 = " + celsArray[tmpvalue3].bit7 + "\n");
			}
		if (celsArray[tmpvalue10].bit8 == true) { // Draw bit polygon
				v1=90;
				v2=98;
				v3=364;
				v4=358;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit9 == true) { // Draw bit polygon
				v1=358;
				v2=364;
				v3=365;
				v4=359;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit10 == true) { // Draw bit polygon
				v1=359;
				v2=365;
				v3=366;
				v4=360;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit11 == true) { // Draw bit polygon
				v1=360;
				v2=366;
				v3=306;
				v4=299;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit12 == true) { // Draw bit polygon
				v1=299;
				v2=306;
				v3=367;
				v4=361;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit13 == true) { // Draw bit polygon
				v1=361;
				v2=367;
				v3=368;
				v4=362;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit14 == true) { // Draw bit polygon
				v1=362;
				v2=368;
				v3=369;
				v4=363;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit15 == true) { // Draw bit polygon
				v1=363;
				v2=369;
				v3=27;
				v4=18;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit16 == true) { // Draw bit polygon
				v1=98;
				v2=106;
				v3=370;
				v4=364;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit17 == true) { // Draw bit polygon
				v1=364;
				v2=370;
				v3=371;
				v4=365;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit18 == true) { // Draw bit polygon
				v1=365;
				v2=371;
				v3=372;
				v4=366;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit19 == true) { // Draw bit polygon
				v1=366;
				v2=372;
				v3=313;
				v4=306;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit20 == true) { // Draw bit polygon
				v1=306;
				v2=313;
				v3=373;
				v4=367;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit21 == true) { // Draw bit polygon
				v1=367;
				v2=373;
				v3=374;
				v4=368;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit22 == true) { // Draw bit polygon
				v1=368;
				v2=374;
				v3=375;
				v4=369;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit23 == true) { // Draw bit polygon
				v1=369;
				v2=375;
				v3=36;
				v4=27;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit24 == true) { // Draw bit polygon
				v1=106;
				v2=114;
				v3=376;
				v4=370;
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit25 == true) { // Draw bit polygon
				v1=370;
				v2=376;
				v3=377;
				v4=371;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit26 == true) { // Draw bit polygon
				v1=371;
				v2=377;
				v3=378;
				v4=372;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit27 == true) { // Draw bit polygon
				v1=372;
				v2=378;
				v3=320;
				v4=313;				
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit28 == true) { // Draw bit polygon
				v1=313;
				v2=320;
				v3=379;
				v4=373;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit29 == true) { // Draw bit polygon
				v1=373;
				v2=379;
				v3=380;
				v4=374;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit30 == true) { // Draw bit polygon
				v1=374;
				v2=380;
				v3=381;
				v4=375;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit31 == true) { // Draw bit polygon
				v1=375;
				v2=381;
				v3=45;
				v4=36;					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}


// Upper part
		if (celsArray[tmpvalue10].bit32 == true) { // Draw bit polygon
				v1=114;//
				v2=122;//
				v3=382;//
				v4=376;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit33 == true) { // Draw bit polygon
				v1=376;//
				v2=382;//
				v3=383;//
				v4=377;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit34 == true) { // Draw bit polygon
				v1=377;//
				v2=383;//
				v3=384;//
				v4=378;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit35 == true) { // Draw bit polygon
				v1=378;//
				v2=384;//
				v3=327;//
				v4=320;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit36 == true) { // Draw bit polygon
				v1=320;//
				v2=327;//
				v3=385;//
				v4=379;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit37 == true) { // Draw bit polygon
				v1=379;//
				v2=385;//
				v3=386;//
				v4=380;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit38 == true) { // Draw bit polygon
				v1=380;//
				v2=386;//
				v3=387;//
				v4=381;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit39 == true) { // Draw bit polygon
				v1=381;//
				v2=387;//
				v3=54;//
				v4=45;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit40 == true) { // Draw bit polygon
				v1=122;//
				v2=130;//
				v3=388;//
				v4=382;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit41 == true) { // Draw bit polygon
				v1=382;//
				v2=388;//
				v3=389;//
				v4=383;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit42 == true) { // Draw bit polygon
				v1=383;//
				v2=389;//
				v3=390;//
				v4=384;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit43 == true) { // Draw bit polygon
				v1=384;//
				v2=390;//
				v3=334;//
				v4=327;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit44 == true) { // Draw bit polygon
				v1=327;//
				v2=334;//
				v3=391;//
				v4=385;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit45 == true) { // Draw bit polygon
				v1=385;//
				v2=391;//
				v3=392;//
				v4=386;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit46 == true) { // Draw bit polygon
				v1=386;//
				v2=392;//
				v3=393;//
				v4=387;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit47 == true) { // Draw bit polygon
				v1=387;//
				v2=393;//
				v3=63;//
				v4=54;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit48 == true) { // Draw bit polygon
				v1=130;//
				v2=138;//
				v3=394;//
				v4=388;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit49 == true) { // Draw bit polygon
				v1=388;//
				v2=394;//
				v3=395;//
				v4=389;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit50 == true) { // Draw bit polygon
				v1=389;//
				v2=395;//
				v3=396;//
				v4=390;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit51 == true) { // Draw bit polygon
				v1=390;//
				v2=396;//
				v3=341;//
				v4=334;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit52 == true) { // Draw bit polygon
				v1=334;//
				v2=341;//
				v3=397;//
				v4=391;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit53 == true) { // Draw bit polygon
				v1=391;//
				v2=397;//
				v3=398;//
				v4=392;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit54 == true) { // Draw bit polygon
				v1=392;//
				v2=398;//
				v3=399;//
				v4=393;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit55 == true) { // Draw bit polygon
				v1=393;//
				v2=399;//
				v3=72;//
				v4=63;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#if 1;
		if (celsArray[tmpvalue10].bit56 == true) { // Draw bit polygon
				v1=138;//
				v2=146;//
				v3=400;//
				v4=394;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit57 == true) { // Draw bit polygon
				v1=394;//
				v2=400;//
				v3=401;//
				v4=395;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit58 == true) { // Draw bit polygon
				v1=395;//
				v2=401;//
				v3=402;//
				v4=396;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit59 == true) { // Draw bit polygon
				v1=396;//
				v2=402;//
				v3=348;//
				v4=341;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit60 == true) { // Draw bit polygon
				v1=341;//
				v2=348;//
				v3=403;//
				v4=397;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit61 == true) { // Draw bit polygon
				v1=397;//
				v2=403;//
				v3=404;//
				v4=398;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit62 == true) { // Draw bit polygon
				v1=398;//
				v2=404;//
				v3=405;//
				v4=399;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
		if (celsArray[tmpvalue10].bit63 == true) { // Draw bit polygon
				v1=399;//
				v2=405;//
				v3=81;//
				v4=72;//					
			vertstr = "f "+patch::to_string(voxCount*405-skippedVoxels*405+v1)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v2)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v3)+" "+patch::to_string(voxCount*405-skippedVoxels*405+v4)+"\n";
			outfile << vertstr;
			}
#endif;
		}


#endif;// Collision bits
}
#endif;



// WALLS
#if 0; // ALL POLYGONS
//vertstr = "#CubeSpecsN = " + patch::to_string(cubeNinDataFile) + "\n";
//outfile << vertstr;


// Floor
#if 1;
vertstr = "# Cube. textureFloor = " + patch::to_string((int)specsArray[cubeNinDataFile].textureFloor) + "\n";// Byte 9
outfile << vertstr;
vertstr = "# Cube. textureFloorOrient = " + patch::to_string((int)specsArray[cubeNinDataFile].textureFloorOrient) + "\n";
outfile << vertstr;
if (specsArray[cubeNinDataFile].textureFloor !=0) { // Draw FLOOR polygon
	// Check what kind of floor we have: Ramp (high, low, orientation), Stairs (high, low, orientation), Step (height)

temp123 = ValueSelector(voxelArray[voxCount].value1, 0);


#if 1;
if ((temp123 == 0)||(temp123 >= 0x80)&&((temp123 <= 0x97))) {// ADD more unique values!!!
int tmpvalue = 0;
tmpvalue = (specsArray[cubeNinDataFile].textureFloor & 0xFFFFFF3F);

	polyCount++;


// Draw polygon
if ((tmpvalue==31)&&(specsArray[cubeNinDataFile].textureFloorOrient == 2)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/5 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/6 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/7 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/8\n\n";
				outfile << vertstr;
				goto cont;
}

if ((tmpvalue==30)&&(specsArray[cubeNinDataFile].textureFloorOrient == 3)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/14 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/15 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/16 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/13\n\n";
				outfile << vertstr;
				goto cont;
}

if ((tmpvalue==30)&&(specsArray[cubeNinDataFile].textureFloorOrient == 1)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/18 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/20\n\n";
				outfile << vertstr;
				goto cont;
}

if ((tmpvalue==30)&&(specsArray[cubeNinDataFile].textureFloorOrient == 2)) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/19 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/20 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/17 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/18\n\n";
				outfile << vertstr;
				goto cont;
}

			if (specsArray[cubeNinDataFile].textureFloorOrient == 0) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/1 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/2 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/3 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/4\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureFloorOrient == 2) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/6 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/7 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/8 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/5\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureFloorOrient == 3) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/9 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/10 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/11 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/12\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureFloorOrient == 1) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+5)+"/13 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+6)+"/14 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+7)+"/15 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+8)+"/16\n\n";
				outfile << vertstr;
			}
cont:
vertstr = "# Floor...\n"; // Just for cont:
		}
#endif;
}
#endif;


// Ceiling
#if 1;
vertstr = "# Cube. textureCeiling = " + patch::to_string((int)specsArray[cubeNinDataFile].textureCeiling) + "\n";// Byte 10
outfile << vertstr;
vertstr = "# Cube. textureCeilingOrient = " + patch::to_string((int)specsArray[cubeNinDataFile].textureCeilingOrient) + "\n";
outfile << vertstr;
if (specsArray[cubeNinDataFile].textureCeiling !=0) { // Draw CEILING polygon
int tmpvalue1 = 0;
tmpvalue1 = (specsArray[cubeNinDataFile].textureCeiling & 0xFFFFFF3F);

	polyCount++;

		// Draw polygon. Must consider ORIENT in vts. CHECK!!!


			if (specsArray[cubeNinDataFile].textureCeilingOrient == 0) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/1 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/2 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/3 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/4\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureCeilingOrient == 2) {// Add support to 1 45 degrees floor CHECK!!!
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/5 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/6 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/7 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/8\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureCeilingOrient == 3) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/9 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/10 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/11 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/12\n\n";
				outfile << vertstr;
			}

			if (specsArray[cubeNinDataFile].textureCeilingOrient == 1) {
				vertstr = "f "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+1)+"/13 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+2)+"/14 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+3)+"/15 "+patch::to_string(voxCount*8+torchesVertexes-skippedVoxels*8+4)+"/16\n\n";
				outfile << vertstr;
			}
	}
#endif;
#endif; // ALL POLYGONS

			blankvoxel:
			voxCount++;
		}
}
}// LOOP END

if (progressBar2->Value == progressBar2->Maximum) {
progressBar2->Value = 0;
}
#endif;
outfile.close();
//binfile.close();
exitnow:
voxCount = voxCount;
#endif;
	}
}




// Confirm CubeN Floor0 edit change and edit global array
private: System::Void button24_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
int i = int::Parse(textBox5->Text); // Voxel pos //*******************///////////////

std::string str3 = "";
str3 = msclr::interop::marshal_as<std::string>(textBox44->Text);//*******************///////////////

// Measure str length
unsigned int l = str3.length();
unsigned int first, second = 0;

// 4 bytes and 2 bytes are unchanged
unsigned int first4bytes = (voxelArray[i].value1 & 0xFFFFFFFF00000000) >> 32;
unsigned int last2bytes = voxelArray[i].value1 & 0x000000000000FFFF;
//label139->Text = last2bytes.ToString();// For debug

// Take chars from textBox44
if (l==3) {
	// Take 2 chars and then 1 char
	std::string char1and2 = "";
	std::string char3 = "";
	char1and2 = str3.substr(0,2);
	char3 = str3.substr(2,1);

//	label139->Text = gcnew System::String(char1and2.c_str()); // For debug
//	label139->Text = gcnew System::String(char3.c_str()); // For debug
	first = stoul(char1and2, 0, 16); // hex string to int
	second = stoul(char3, 0, 16); // hex string to int

// Combine all ints together.
//label139->Text = first4bytes.ToString(); // For debug
//label139->Text = last2bytes.ToString(); // For debug
voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes;
label139->Text = voxelArray[i].value1.ToString(); // For debug
//label140->Text = last2bytes.ToString(); // For debug
	}


if (l<3) {
	// Take 1 char and then 1 char
	std::string char1 = "";
	std::string char2 = "";
	char1 = str3.substr(0,1);
	char2 = str3.substr(1,1);

//	label139->Text = gcnew System::String(char1.c_str()); // For debug
//	label139->Text = gcnew System::String(char2.c_str()); // For debug
	first = stoul(char1, 0, 16); // hex string to int
	second = stoul(char2, 0, 16); // hex string to int

voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes; 
label139->Text = voxelArray[i].value1.ToString(); // For debug
	}

// Edit textBoxes


// Edit color.
	voxelArray[i].x = dataGridView1->CurrentCell->ColumnIndex;//*******************///////////////
	voxelArray[i].y = dataGridView1->CurrentCell->RowIndex;//*******************///////////////
	voxelArray[i].z = 0;//*******************///////////////

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView1->CurrentCell->RowIndex;//*******************///////////////
int column = dataGridView1->CurrentCell->ColumnIndex;//*******************///////////////

dataGridView1->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);//*******************///////////////
dataGridView1->Rows[row]->Cells[column]->Value = voxelArray[i].value1;//*******************///////////////

	}


// Confirm CubeN Floor1 edit change and edit global array
private: System::Void button25_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
int i = int::Parse(textBox10->Text); // Voxel pos //*******************///////////////

std::string str3 = "";
str3 = msclr::interop::marshal_as<std::string>(textBox45->Text);//*******************///////////////

// Measure str length
unsigned int l = str3.length();
unsigned int first, second = 0;

// 4 bytes and 2 bytes are unchanged
unsigned int first4bytes = (voxelArray[i].value1 & 0xFFFFFFFF00000000) >> 32;
unsigned int last2bytes = voxelArray[i].value1 & 0x000000000000FFFF;

// Take chars from textBox44
if (l==3) {
	// Take 2 chars and then 1 char
	std::string char1and2 = "";
	std::string char3 = "";
	char1and2 = str3.substr(0,2);
	char3 = str3.substr(2,1);

	first = stoul(char1and2, 0, 16); // hex string to int
	second = stoul(char3, 0, 16); // hex string to int

// Combine all ints together.
voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes;
label143->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}


if (l<3) {
	// Take 1 char and then 1 char
	std::string char1 = "";
	std::string char2 = "";
	char1 = str3.substr(0,1);
	char2 = str3.substr(1,1);

	first = stoul(char1, 0, 16); // hex string to int
	second = stoul(char2, 0, 16); // hex string to int

voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes; 
label143->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}

// Edit color.
	voxelArray[i].x = dataGridView2->CurrentCell->ColumnIndex;//*******************///////////////
	voxelArray[i].y = dataGridView2->CurrentCell->RowIndex;//*******************///////////////
	voxelArray[i].z = 1;//*******************///////////////

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView2->CurrentCell->RowIndex;//*******************///////////////
int column = dataGridView2->CurrentCell->ColumnIndex;//*******************///////////////

dataGridView2->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);//*******************///////////////
dataGridView2->Rows[row]->Cells[column]->Value = voxelArray[i].value1;//*******************///////////////
	 }



// Confirm CubeN Floor2 edit change and edit global array
private: System::Void button26_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
int i = int::Parse(textBox11->Text); // Voxel pos //*******************///////////////

std::string str3 = "";
str3 = msclr::interop::marshal_as<std::string>(textBox46->Text);//*******************///////////////

// Measure str length
unsigned int l = str3.length();
unsigned int first, second = 0;

// 4 bytes and 2 bytes are unchanged
unsigned int first4bytes = (voxelArray[i].value1 & 0xFFFFFFFF00000000) >> 32;
unsigned int last2bytes = voxelArray[i].value1 & 0x000000000000FFFF;

// Take chars from textBox44
if (l==3) {
	// Take 2 chars and then 1 char
	std::string char1and2 = "";
	std::string char3 = "";
	char1and2 = str3.substr(0,2);
	char3 = str3.substr(2,1);

	first = stoul(char1and2, 0, 16); // hex string to int
	second = stoul(char3, 0, 16); // hex string to int

// Combine all ints together.
voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes;
label145->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}


if (l<3) {
	// Take 1 char and then 1 char
	std::string char1 = "";
	std::string char2 = "";
	char1 = str3.substr(0,1);
	char2 = str3.substr(1,1);

	first = stoul(char1, 0, 16); // hex string to int
	second = stoul(char2, 0, 16); // hex string to int

voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes; 
label145->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}

// Edit color.
	voxelArray[i].x = dataGridView3->CurrentCell->ColumnIndex;//*******************///////////////
	voxelArray[i].y = dataGridView3->CurrentCell->RowIndex;//*******************///////////////
	voxelArray[i].z = 2;//*******************///////////////

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView3->CurrentCell->RowIndex;//*******************///////////////
int column = dataGridView3->CurrentCell->ColumnIndex;//*******************///////////////

dataGridView3->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);//*******************///////////////
dataGridView3->Rows[row]->Cells[column]->Value = voxelArray[i].value1;//*******************///////////////
		 }



// Confirm CubeN Floor3 edit change and edit global array
private: System::Void button27_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
int i = int::Parse(textBox16->Text); // Voxel pos //*******************///////////////

std::string str3 = "";
str3 = msclr::interop::marshal_as<std::string>(textBox47->Text);//*******************///////////////

// Measure str length
unsigned int l = str3.length();
unsigned int first, second = 0;

// 4 bytes and 2 bytes are unchanged
unsigned int first4bytes = (voxelArray[i].value1 & 0xFFFFFFFF00000000) >> 32;
unsigned int last2bytes = voxelArray[i].value1 & 0x000000000000FFFF;

// Take chars from textBox44
if (l==3) {
	// Take 2 chars and then 1 char
	std::string char1and2 = "";
	std::string char3 = "";
	char1and2 = str3.substr(0,2);
	char3 = str3.substr(2,1);

	first = stoul(char1and2, 0, 16); // hex string to int
	second = stoul(char3, 0, 16); // hex string to int

// Combine all ints together.
voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes;
label147->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}


if (l<3) {
	// Take 1 char and then 1 char
	std::string char1 = "";
	std::string char2 = "";
	char1 = str3.substr(0,1);
	char2 = str3.substr(1,1);

	first = stoul(char1, 0, 16); // hex string to int
	second = stoul(char2, 0, 16); // hex string to int

voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes; 
label147->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}

// Edit color.
	voxelArray[i].x = dataGridView4->CurrentCell->ColumnIndex;//*******************///////////////
	voxelArray[i].y = dataGridView4->CurrentCell->RowIndex;//*******************///////////////
	voxelArray[i].z = 3;//*******************///////////////

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView4->CurrentCell->RowIndex;//*******************///////////////
int column = dataGridView4->CurrentCell->ColumnIndex;//*******************///////////////

dataGridView4->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);//*******************///////////////
dataGridView4->Rows[row]->Cells[column]->Value = voxelArray[i].value1;//*******************///////////////
		 }



// Confirm CubeN Floor4 edit change and edit global array
private: System::Void button28_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
int i = int::Parse(textBox21->Text); // Voxel pos //*******************///////////////

std::string str3 = "";
str3 = msclr::interop::marshal_as<std::string>(textBox48->Text);//*******************///////////////

// Measure str length
unsigned int l = str3.length();
unsigned int first, second = 0;

// 4 bytes and 2 bytes are unchanged
unsigned int first4bytes = (voxelArray[i].value1 & 0xFFFFFFFF00000000) >> 32;
unsigned int last2bytes = voxelArray[i].value1 & 0x000000000000FFFF;

// Take chars from textBox44
if (l==3) {
	// Take 2 chars and then 1 char
	std::string char1and2 = "";
	std::string char3 = "";
	char1and2 = str3.substr(0,2);
	char3 = str3.substr(2,1);

	first = stoul(char1and2, 0, 16); // hex string to int
	second = stoul(char3, 0, 16); // hex string to int

// Combine all ints together.
voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes;
label149->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}


if (l<3) {
	// Take 1 char and then 1 char
	std::string char1 = "";
	std::string char2 = "";
	char1 = str3.substr(0,1);
	char2 = str3.substr(1,1);

	first = stoul(char1, 0, 16); // hex string to int
	second = stoul(char2, 0, 16); // hex string to int

voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes; 
label149->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}

// Edit color.
	voxelArray[i].x = dataGridView5->CurrentCell->ColumnIndex;//*******************///////////////
	voxelArray[i].y = dataGridView5->CurrentCell->RowIndex;//*******************///////////////
	voxelArray[i].z = 4;//*******************///////////////

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView5->CurrentCell->RowIndex;//*******************///////////////
int column = dataGridView5->CurrentCell->ColumnIndex;//*******************///////////////

dataGridView5->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);//*******************///////////////
dataGridView5->Rows[row]->Cells[column]->Value = voxelArray[i].value1;//*******************///////////////
		 }



// Confirm CubeN Floor5 edit change and edit global array
private: System::Void button29_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
int i = int::Parse(textBox26->Text); // Voxel pos //*******************///////////////

std::string str3 = "";
str3 = msclr::interop::marshal_as<std::string>(textBox49->Text);//*******************///////////////

// Measure str length
unsigned int l = str3.length();
unsigned int first, second = 0;

// 4 bytes and 2 bytes are unchanged
unsigned int first4bytes = (voxelArray[i].value1 & 0xFFFFFFFF00000000) >> 32;
unsigned int last2bytes = voxelArray[i].value1 & 0x000000000000FFFF;

// Take chars from textBox44
if (l==3) {
	// Take 2 chars and then 1 char
	std::string char1and2 = "";
	std::string char3 = "";
	char1and2 = str3.substr(0,2);
	char3 = str3.substr(2,1);

	first = stoul(char1and2, 0, 16); // hex string to int
	second = stoul(char3, 0, 16); // hex string to int

// Combine all ints together.
voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes;
label151->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}


if (l<3) {
	// Take 1 char and then 1 char
	std::string char1 = "";
	std::string char2 = "";
	char1 = str3.substr(0,1);
	char2 = str3.substr(1,1);

	first = stoul(char1, 0, 16); // hex string to int
	second = stoul(char2, 0, 16); // hex string to int

voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes; 
label151->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}

// Edit color.
	voxelArray[i].x = dataGridView6->CurrentCell->ColumnIndex;//*******************///////////////
	voxelArray[i].y = dataGridView6->CurrentCell->RowIndex;//*******************///////////////
	voxelArray[i].z = 5;//*******************///////////////

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView6->CurrentCell->RowIndex;//*******************///////////////
int column = dataGridView6->CurrentCell->ColumnIndex;//*******************///////////////

dataGridView6->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);//*******************///////////////
dataGridView6->Rows[row]->Cells[column]->Value = voxelArray[i].value1;//*******************///////////////
		 }



// Confirm CubeN Floor6 edit change and edit global array
private: System::Void button30_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
int i = int::Parse(textBox31->Text); // Voxel pos //*******************///////////////

std::string str3 = "";
str3 = msclr::interop::marshal_as<std::string>(textBox50->Text);//*******************///////////////

// Measure str length
unsigned int l = str3.length();
unsigned int first, second = 0;

// 4 bytes and 2 bytes are unchanged
unsigned int first4bytes = (voxelArray[i].value1 & 0xFFFFFFFF00000000) >> 32;
unsigned int last2bytes = voxelArray[i].value1 & 0x000000000000FFFF;

// Take chars from textBox44
if (l==3) {
	// Take 2 chars and then 1 char
	std::string char1and2 = "";
	std::string char3 = "";
	char1and2 = str3.substr(0,2);
	char3 = str3.substr(2,1);

	first = stoul(char1and2, 0, 16); // hex string to int
	second = stoul(char3, 0, 16); // hex string to int

// Combine all ints together.
voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes;
label153->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}


if (l<3) {
	// Take 1 char and then 1 char
	std::string char1 = "";
	std::string char2 = "";
	char1 = str3.substr(0,1);
	char2 = str3.substr(1,1);

	first = stoul(char1, 0, 16); // hex string to int
	second = stoul(char2, 0, 16); // hex string to int

voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes; 
label153->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}

// Edit color.
	voxelArray[i].x = dataGridView7->CurrentCell->ColumnIndex;//*******************///////////////
	voxelArray[i].y = dataGridView7->CurrentCell->RowIndex;//*******************///////////////
	voxelArray[i].z = 6;//*******************///////////////

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView7->CurrentCell->RowIndex;//*******************///////////////
int column = dataGridView7->CurrentCell->ColumnIndex;//*******************///////////////

dataGridView7->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);//*******************///////////////
dataGridView7->Rows[row]->Cells[column]->Value = voxelArray[i].value1;//*******************///////////////
		 }




// Confirm CubeN Floor7 edit change and edit global array
private: System::Void button31_Click(System::Object^  sender, System::EventArgs^  e) {
timer2->Enabled = 1;
int i = int::Parse(textBox36->Text); // Voxel pos //*******************///////////////

std::string str3 = "";
str3 = msclr::interop::marshal_as<std::string>(textBox51->Text);//*******************///////////////

// Measure str length
unsigned int l = str3.length();
unsigned int first, second = 0;

// 4 bytes and 2 bytes are unchanged
unsigned int first4bytes = (voxelArray[i].value1 & 0xFFFFFFFF00000000) >> 32;
unsigned int last2bytes = voxelArray[i].value1 & 0x000000000000FFFF;

// Take chars from textBox44
if (l==3) {
	// Take 2 chars and then 1 char
	std::string char1and2 = "";
	std::string char3 = "";
	char1and2 = str3.substr(0,2);
	char3 = str3.substr(2,1);

	first = stoul(char1and2, 0, 16); // hex string to int
	second = stoul(char3, 0, 16); // hex string to int

// Combine all ints together.
voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes;
label155->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}


if (l<3) {
	// Take 1 char and then 1 char
	std::string char1 = "";
	std::string char2 = "";
	char1 = str3.substr(0,1);
	char2 = str3.substr(1,1);

	first = stoul(char1, 0, 16); // hex string to int
	second = stoul(char2, 0, 16); // hex string to int

voxelArray[i].value1 = first4bytes*4294967296ULL + second*268435456ULL + first*65536ULL + last2bytes; 
label155->Text = voxelArray[i].value1.ToString(); // For debug//*******************///////////////
	}

// Edit color.
	voxelArray[i].x = dataGridView8->CurrentCell->ColumnIndex;//*******************///////////////
	voxelArray[i].y = dataGridView8->CurrentCell->RowIndex;//*******************///////////////
	voxelArray[i].z = 7;//*******************///////////////

int a = (voxelArray[i].value1/100);
int b = (voxelArray[i].value1/5000);
int c = (voxelArray[i].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

int row = dataGridView8->CurrentCell->RowIndex;//*******************///////////////
int column = dataGridView8->CurrentCell->ColumnIndex;//*******************///////////////

dataGridView8->Rows[row]->Cells[column]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);//*******************///////////////
dataGridView8->Rows[row]->Cells[column]->Value = voxelArray[i].value1;//*******************///////////////
		 }



// Show doors on the floor 0
private: System::Void checkBox2_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
//bool doorPresent=0;
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView1->ClearSelection();
floorN = 0;

if (checkBox2->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
//	dataGridView1->MultiSelect = true;

// Check every voxel on the floor0. See if bit #9 is set to 1.
//for (int f=0; f<16384; f++) {
///*	if (bool((1 << 9)  &  voxelArray[f].value1)) { // Door exists
		//dataGridView1->Rows[2]->Cells[2]->Selected = true;
#if 0;
		richTextBox4->AppendText("voxelN = " + f + "\n");
			x = (f-1*8-floorN)/256;
		richTextBox4->AppendText("x = " + x + "\n");
			y = (f-x*256-floorN)/8;
		richTextBox4->AppendText("y = " + y + "\n");
		
//		dataGridView1->Rows[y]->Cells[x]->Selected = true;

		// If door is on the current floor, paint it white.

		dataGridView1->Rows[y]->Cells[x]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
#endif;


/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (bool((1 << 9)  &  voxelArray[voxCount].value1)) { // Door exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
///*		};	// Door exists
//dataGridView1->Rows[2]->Cells[2]->Value = doorPresent.ToString();	// Door exists
//	}// 16384
}




if (checkBox2->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox11->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}


	}
 }


// Show doors on the floor 1
private: System::Void checkBox3_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView2->ClearSelection();
floorN = 0;

if (checkBox3->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (bool((1 << 9)  &  voxelArray[voxCount].value1)) { // Door exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox3->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox10->Checked = false;


voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}


	}
		 }



// Show doors on the floor 2
private: System::Void checkBox4_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
// Show doors on the floor 2
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView3->ClearSelection();
floorN = 0;

if (checkBox4->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (bool((1 << 9)  &  voxelArray[voxCount].value1)) { // Door exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox4->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox12->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}


	}
		 }



// Show doors on the floor 3
private: System::Void checkBox5_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
// Show doors on the floor 3
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView4->ClearSelection();
floorN = 0;

if (checkBox5->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (bool((1 << 9)  &  voxelArray[voxCount].value1)) { // Door exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox5->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox13->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}


	}


		 }



// Show doors on the floor 4
private: System::Void checkBox6_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView5->ClearSelection();
floorN = 0;

if (checkBox6->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (bool((1 << 9)  &  voxelArray[voxCount].value1)) { // Door exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox6->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox14->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}


	}

		 }



// Show doors on the floor 5
private: System::Void checkBox7_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
// Show doors on the floor 5
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView6->ClearSelection();
floorN = 0;

if (checkBox7->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (bool((1 << 9)  &  voxelArray[voxCount].value1)) { // Door exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox7->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox15->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}


	}
		 }



// Show doors on the floor 6
private: System::Void checkBox8_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView7->ClearSelection();
floorN = 0;

if (checkBox8->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (bool((1 << 9)  &  voxelArray[voxCount].value1)) { // Door exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox8->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox16->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}


	}
		 }



// Show doors on the floor 7
private: System::Void checkBox9_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView8->ClearSelection();
floorN = 0;

if (checkBox9->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (bool((1 << 9)  &  voxelArray[voxCount].value1)) { // Door exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox9->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox17->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}


	}
		 }



// Show teleports on the floor 1
private: System::Void checkBox10_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView2->ClearSelection();
floorN = 1;

if (checkBox10->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (ValueSelector(voxelArray[voxCount].value1, 0) == 0x80) { // Teleport exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox10->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox3->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}


	}

		 }



// Show teleports on the floor 0
private: System::Void checkBox11_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView1->ClearSelection();
floorN = 0;

if (checkBox11->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (ValueSelector(voxelArray[voxCount].value1, 0) == 0x80) { // Teleport exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox11->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox2->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}
	}
 }



// Show teleports on the floor 2
private: System::Void checkBox12_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView3->ClearSelection();
floorN = 2;

if (checkBox12->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (ValueSelector(voxelArray[voxCount].value1, 0) == 0x80) { // Teleport exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox12->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox4->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}
	}
 		 
		 }



// Show teleports on the floor 3
private: System::Void checkBox13_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView4->ClearSelection();
floorN = 3;

if (checkBox13->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (ValueSelector(voxelArray[voxCount].value1, 0) == 0x80) { // Teleport exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox13->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox5->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}
	}
 		 
		 

		 }



// Show teleports on the floor 4
private: System::Void checkBox14_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView5->ClearSelection();
floorN = 4;

if (checkBox14->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (ValueSelector(voxelArray[voxCount].value1, 0) == 0x80) { // Teleport exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox14->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox6->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}
	}
 }


// Show teleports on the floor 5
private: System::Void checkBox15_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView6->ClearSelection();
floorN = 5;

if (checkBox15->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (ValueSelector(voxelArray[voxCount].value1, 0) == 0x80) { // Teleport exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox15->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox7->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}
	}
 
		 }


// Show teleports on the floor 6
private: System::Void checkBox16_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView7->ClearSelection();
floorN = 6;

if (checkBox16->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (ValueSelector(voxelArray[voxCount].value1, 0) == 0x80) { // Teleport exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox16->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox8->Checked = false;

voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}
	}
 
		 
		 }


// Show teleports on the floor 7
private: System::Void checkBox17_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
int x, y, val, floorN = 0;
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
int currRow; // 32 total
int currCol; // 64 total
int currFloor; // 8 total
int currentVoxel; 
int voxCount = 0; // All voxels


//Clear dataGridView selection
dataGridView8->ClearSelection();
floorN = 7;

if (checkBox17->Checked == true) {
byte colorRed = 255;
byte colorGreen = 255;
byte colorBlue = 255;
/////////////////////////////////////////////
voxCount = 0;
for (int d=0; d<64; d++) 
	{
	for (int k=0; k<32; k++) {
	currCol = k;
		for (int s=0; s<8; s++) {

currFloor = s;

#if 1;
	if (ValueSelector(voxelArray[voxCount].value1, 0) == 0x80) { // Teleport exists
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		break;
	}
#endif;
	}
			voxCount++;
		}
}
}
/////////////////////////////////////////////
}



if (checkBox17->Checked == false) { // Paint it Black )))) Just kidding, reverse color to the original one
checkBox9->Checked = false;


voxCount = 0;
for (int d=0; d<64; d++) 
	{

	for (int k=0; k<32; k++) {
	currCol = k;

		for (int s=0; s<8; s++) {

currFloor = s;
int a = (voxelArray[voxCount].value1/100);
int b = (voxelArray[voxCount].value1/5000);
int c = (voxelArray[voxCount].value1/500);

byte colorRed = a/100;
byte colorGreen = b/100;
byte colorBlue = c/100;

#if 1;
switch (currFloor) {
	case 0:
		dataGridView1->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView1->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 1:
		dataGridView2->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView2->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 2:
		dataGridView3->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView3->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 3:
		dataGridView4->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView4->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 4:
		dataGridView5->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView5->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 5:
		dataGridView6->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView6->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 6:
		dataGridView7->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView7->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	case 7:
		dataGridView8->Rows[k]->Cells[d]->Style->BackColor = Color::FromArgb(colorRed,colorGreen,colorBlue);
		dataGridView8->Rows[k]->Cells[d]->Value = voxelArray[voxCount].value1;
		break;
	}
#endif;
			voxCount++;
		}
}
}
	}
 
		 
		 
		 }
};
}

